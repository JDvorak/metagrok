window = exports = this;
if (typeof Promise !== 'function' && typeof Promise !== 'object') {
  throw new Error('Promise does not exist');
}

if (typeof Promise.prototype.done !== 'function') {
  Promise.prototype.done = function() {
    this.then.apply(this, arguments).then(null, (e) => setTimeout(() => {throw e;}, 0));
  };
}
/*
    cycle.js
    2017-02-07

    Public Domain.

    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.

    This code should be minified before deployment.
    See http://javascript.crockford.com/jsmin.html

    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO
    NOT CONTROL.
*/

// The file uses the WeakMap feature of ES6.

/*jslint es6, eval */

/*property
    $ref, decycle, forEach, get, indexOf, isArray, keys, length, push,
    retrocycle, set, stringify, test
*/

if (typeof JSON.decycle !== "function") {
    JSON.decycle = function decycle(object, replacer) {
        "use strict";

// Make a deep copy of an object or array, assuring that there is at most
// one instance of each object or array in the resulting structure. The
// duplicate references (which might be forming cycles) are replaced with
// an object of the form

//      {"$ref": PATH}

// where the PATH is a JSONPath string that locates the first occurance.

// So,

//      var a = [];
//      a[0] = a;
//      return JSON.stringify(JSON.decycle(a));

// produces the string '[{"$ref":"$"}]'.

// If a replacer function is provided, then it will be called for each value.
// A replacer function receives a value and returns a replacement value.

// JSONPath is used to locate the unique object. $ indicates the top level of
// the object or array. [NUMBER] or [STRING] indicates a child element or
// property.

        var objects = new WeakMap();     // object to path mappings

        return (function derez(value, path) {

// The derez function recurses through the object, producing the deep copy.

            var old_path;   // The path of an earlier occurance of value
            var nu;         // The new object or array

// If a replacer function was provided, then call it to get a replacement value.

            if (replacer !== undefined) {
                value = replacer(value);
            }

// typeof null === "object", so go on if this value is really an object but not
// one of the weird builtin objects.

            if (
                typeof value === "object" && value !== null &&
                !(value instanceof Boolean) &&
                !(value instanceof Date) &&
                !(value instanceof Number) &&
                !(value instanceof RegExp) &&
                !(value instanceof String)
            ) {

// If the value is an object or array, look to see if we have already
// encountered it. If so, return a {"$ref":PATH} object. This uses an
// ES6 WeakMap.

                old_path = objects.get(value);
                if (old_path !== undefined) {
                    return {$ref: old_path};
                }

// Otherwise, accumulate the unique value and its path.

                objects.set(value, path);

// If it is an array, replicate the array.

                if (Array.isArray(value)) {
                    nu = [];
                    value.forEach(function (element, i) {
                        nu[i] = derez(element, path + "[" + i + "]");
                    });
                } else {

// If it is an object, replicate the object.

                    nu = {};
                    Object.keys(value).forEach(function (name) {
                        nu[name] = derez(
                            value[name],
                            path + "[" + JSON.stringify(name) + "]"
                        );
                    });
                }
                return nu;
            }
            return value;
        }(object, "$"));
    };
}


if (typeof JSON.retrocycle !== "function") {
    JSON.retrocycle = function retrocycle($) {
        "use strict";

// Restore an object that was reduced by decycle. Members whose values are
// objects of the form
//      {$ref: PATH}
// are replaced with references to the value found by the PATH. This will
// restore cycles. The object will be mutated.

// The eval function is used to locate the values described by a PATH. The
// root object is kept in a $ variable. A regular expression is used to
// assure that the PATH is extremely well formed. The regexp contains nested
// * quantifiers. That has been known to have extremely bad performance
// problems on some browsers for very long strings. A PATH is expected to be
// reasonably short. A PATH is allowed to belong to a very restricted subset of
// Goessner's JSONPath.

// So,
//      var s = '[{"$ref":"$"}]';
//      return JSON.retrocycle(JSON.parse(s));
// produces an array containing a single element which is the array itself.

        var px = /^\$(?:\[(?:\d+|"(?:[^\\"\u0000-\u001f]|\\([\\"\/bfnrt]|u[0-9a-zA-Z]{4}))*")\])*$/;

        (function rez(value) {

// The rez function walks recursively through the object looking for $ref
// properties. When it finds one that has a value that is a path, then it
// replaces the $ref object with a reference to the value that is found by
// the path.

            if (value && typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (element, i) {
                        if (typeof element === "object" && element !== null) {
                            var path = element.$ref;
                            if (typeof path === "string" && px.test(path)) {
                                value[i] = eval(path);
                            } else {
                                rez(element);
                            }
                        }
                    });
                } else {
                    Object.keys(value).forEach(function (name) {
                        var item = value[name];
                        if (typeof item === "object" && item !== null) {
                            var path = item.$ref;
                            if (typeof path === "string" && px.test(path)) {
                                value[name] = eval(path);
                            } else {
                                rez(item);
                            }
                        }
                    });
                }
            }
        }($));
        return $;
    };
}
/*

Ratings and how they work:

-2: Extremely detrimental
	  The sort of ability that relegates Pokemon with Uber-level BSTs into NU.
	ex. Slow Start, Truant

-1: Detrimental
	  An ability that does more harm than good.
	ex. Defeatist, Normalize

 0: Useless
	  An ability with no net effect during a singles battle.
	ex. Healer, Illuminate

 1: Ineffective
	  An ability that has a minimal effect. Should not be chosen over any other ability.
	ex. Damp, Shell Armor

 2: Situationally useful
	  An ability that can be useful in certain situations.
	ex. Clear Body, Static

 3: Useful
	  An ability that is generally useful.
	ex. Infiltrator, Sturdy

 4: Very useful
	  One of the most popular abilities. The difference between 3 and 4 can be ambiguous.
	ex. Protean, Regenerator

 5: Essential
	  The sort of ability that defines metagames.
	ex. Desolate Land, Shadow Tag

*/

'use strict';

/**@type {{[k: string]: AbilityData}} */
let BattleAbilities = {
	"noability": {
		shortDesc: "Does nothing.",
		id: "noability",
		isNonstandard: "Past",
		name: "No Ability",
		rating: 0.1,
		num: 0,
	},
	"adaptability": {
		desc: "This Pokemon's moves that match one of its types have a same-type attack bonus (STAB) of 2 instead of 1.5.",
		shortDesc: "This Pokemon's same-type attack bonus (STAB) is 2 instead of 1.5.",
		onModifyMove(move) {
			move.stab = 2;
		},
		id: "adaptability",
		name: "Adaptability",
		rating: 4,
		num: 91,
	},
	"aftermath": {
		desc: "If this Pokemon is knocked out with a contact move, that move's user loses 1/4 of its maximum HP, rounded down. If any active Pokemon has the Damp Ability, this effect is prevented.",
		shortDesc: "If this Pokemon is KOed with a contact move, that move's user loses 1/4 its max HP.",
		id: "aftermath",
		name: "Aftermath",
		onAfterDamageOrder: 1,
		onAfterDamage(damage, target, source, move) {
			if (source && source !== target && move && move.flags['contact'] && !target.hp) {
				this.damage(source.maxhp / 4, source, target);
			}
		},
		rating: 2.5,
		num: 106,
	},
	"aerilate": {
		desc: "This Pokemon's Normal-type moves become Flying-type moves and have their power multiplied by 1.2. This effect comes after other effects that change a move's type, but before Ion Deluge and Electrify's effects.",
		shortDesc: "This Pokemon's Normal-type moves become Flying type and have 1.2x power.",
		onModifyMovePriority: -1,
		onModifyMove(move, pokemon) {
			if (move.type === 'Normal' && !['judgment', 'multiattack', 'naturalgift', 'revelationdance', 'technoblast', 'weatherball'].includes(move.id) && !(move.isZ && move.category !== 'Status')) {
				move.type = 'Flying';
				move.aerilateBoosted = true;
			}
		},
		onBasePowerPriority: 8,
		onBasePower(basePower, pokemon, target, move) {
			if (move.aerilateBoosted) return this.chainModify([0x1333, 0x1000]);
		},
		id: "aerilate",
		name: "Aerilate",
		rating: 4,
		num: 185,
	},
	"airlock": {
		shortDesc: "While this Pokemon is active, the effects of weather conditions are disabled.",
		onStart(pokemon) {
			this.add('-ability', pokemon, 'Air Lock');
		},
		suppressWeather: true,
		id: "airlock",
		name: "Air Lock",
		rating: 2.5,
		num: 76,
	},
	"analytic": {
		desc: "The power of this Pokemon's move is multiplied by 1.3 if it is the last to move in a turn. Does not affect Doom Desire and Future Sight.",
		shortDesc: "This Pokemon's attacks have 1.3x power if it is the last to move in a turn.",
		onBasePowerPriority: 8,
		onBasePower(basePower, pokemon) {
			let boosted = true;
			for (const target of this.getAllActive()) {
				if (target === pokemon) continue;
				if (this.willMove(target)) {
					boosted = false;
					break;
				}
			}
			if (boosted) {
				this.debug('Analytic boost');
				return this.chainModify([0x14CD, 0x1000]);
			}
		},
		id: "analytic",
		name: "Analytic",
		rating: 2.5,
		num: 148,
	},
	"angerpoint": {
		desc: "If this Pokemon, but not its substitute, is struck by a critical hit, its Attack is raised by 12 stages.",
		shortDesc: "If this Pokemon (not its substitute) takes a critical hit, its Attack is raised 12 stages.",
		onHit(target, source, move) {
			if (!target.hp) return;
			if (move && move.effectType === 'Move' && target.getMoveHitData(move).crit) {
				target.setBoost({atk: 6});
				this.add('-setboost', target, 'atk', 12, '[from] ability: Anger Point');
			}
		},
		id: "angerpoint",
		name: "Anger Point",
		rating: 2,
		num: 83,
	},
	"anticipation": {
		desc: "On switch-in, this Pokemon is alerted if any opposing Pokemon has an attack that is super effective on this Pokemon, or an OHKO move. Counter, Metal Burst, and Mirror Coat count as attacking moves of their respective types, Hidden Power counts as its determined type, and Judgment, Multi-Attack, Natural Gift, Revelation Dance, Techno Blast, and Weather Ball are considered Normal-type moves.",
		shortDesc: "On switch-in, this Pokemon shudders if any foe has a supereffective or OHKO move.",
		onStart(pokemon) {
			for (const target of pokemon.side.foe.active) {
				if (!target || target.fainted) continue;
				for (const moveSlot of target.moveSlots) {
					const move = this.getMove(moveSlot.move);
					const moveType = move.id === 'hiddenpower' ? target.hpType : move.type;
					if (move.category !== 'Status' && (this.getImmunity(moveType, pokemon) && this.getEffectiveness(moveType, pokemon) > 0 || move.ohko)) {
						this.add('-ability', pokemon, 'Anticipation');
						return;
					}
				}
			}
		},
		id: "anticipation",
		name: "Anticipation",
		rating: 1,
		num: 107,
	},
	"arenatrap": {
		desc: "Prevents adjacent opposing Pokemon from choosing to switch out unless they are immune to trapping or are airborne.",
		shortDesc: "Prevents adjacent foes from choosing to switch unless they are airborne.",
		onFoeTrapPokemon(pokemon) {
			if (!this.isAdjacent(pokemon, this.effectData.target)) return;
			if (pokemon.isGrounded()) {
				pokemon.tryTrap(true);
			}
		},
		onFoeMaybeTrapPokemon(pokemon, source) {
			if (!source) source = this.effectData.target;
			if (!source || !this.isAdjacent(pokemon, source)) return;
			if (pokemon.isGrounded(!pokemon.knownType)) { // Negate immunity if the type is unknown
				pokemon.maybeTrapped = true;
			}
		},
		id: "arenatrap",
		name: "Arena Trap",
		rating: 4.5,
		num: 71,
	},
	"aromaveil": {
		desc: "This Pokemon and its allies cannot be affected by Attract, Disable, Encore, Heal Block, Taunt, or Torment.",
		shortDesc: "Protects user/allies from Attract, Disable, Encore, Heal Block, Taunt, and Torment.",
		onAllyTryAddVolatile(status, target, source, effect) {
			if (['attract', 'disable', 'encore', 'healblock', 'taunt', 'torment'].includes(status.id)) {
				if (effect.effectType === 'Move') {
					this.add('-activate', this.effectData.target, 'ability: Aroma Veil', '[of] ' + target);
				}
				return null;
			}
		},
		id: "aromaveil",
		name: "Aroma Veil",
		rating: 1.5,
		num: 165,
	},
	"aurabreak": {
		desc: "While this Pokemon is active, the effects of the Dark Aura and Fairy Aura Abilities are reversed, multiplying the power of Dark- and Fairy-type moves, respectively, by 3/4 instead of 1.33.",
		shortDesc: "While this Pokemon is active, the Dark Aura and Fairy Aura power modifier is 0.75x.",
		onStart(pokemon) {
			this.add('-ability', pokemon, 'Aura Break');
		},
		onAnyTryPrimaryHit(target, source, move) {
			if (target === source || move.category === 'Status') return;
			move.hasAuraBreak = true;
		},
		id: "aurabreak",
		name: "Aura Break",
		rating: 1.5,
		num: 188,
	},
	"baddreams": {
		desc: "Causes adjacent opposing Pokemon to lose 1/8 of their maximum HP, rounded down, at the end of each turn if they are asleep.",
		shortDesc: "Causes sleeping adjacent foes to lose 1/8 of their max HP at the end of each turn.",
		onResidualOrder: 26,
		onResidualSubOrder: 1,
		onResidual(pokemon) {
			if (!pokemon.hp) return;
			for (const target of pokemon.side.foe.active) {
				if (!target || !target.hp) continue;
				if (target.status === 'slp' || target.hasAbility('comatose')) {
					this.damage(target.maxhp / 8, target, pokemon);
				}
			}
		},
		id: "baddreams",
		name: "Bad Dreams",
		rating: 2,
		num: 123,
	},
	"battery": {
		shortDesc: "This Pokemon's allies have the power of their special attacks multiplied by 1.3.",
		onAllyBasePowerPriority: 8,
		onAllyBasePower(basePower, attacker, defender, move) {
			if (attacker !== this.effectData.target && move.category === 'Special') {
				this.debug('Battery boost');
				return this.chainModify([0x14CD, 0x1000]);
			}
		},
		id: "battery",
		name: "Battery",
		rating: 0,
		num: 217,
	},
	"battlearmor": {
		shortDesc: "This Pokemon cannot be struck by a critical hit.",
		onCriticalHit: false,
		id: "battlearmor",
		name: "Battle Armor",
		rating: 1,
		num: 4,
	},
	"battlebond": {
		desc: "If this Pokemon is a Greninja, it transforms into Ash-Greninja after knocking out a Pokemon. As Ash-Greninja, its Water Shuriken has 20 base power and always hits 3 times.",
		shortDesc: "After KOing a Pokemon: becomes Ash-Greninja, Water Shuriken: 20 power, hits 3x.",
		onSourceFaint(target, source, effect) {
			if (effect && effect.effectType === 'Move' && source.template.speciesid === 'greninja' && source.hp && !source.transformed && source.side.foe.pokemonLeft) {
				this.add('-activate', source, 'ability: Battle Bond');
				source.formeChange('Greninja-Ash', this.effect, true);
			}
		},
		onModifyMovePriority: -1,
		onModifyMove(move, attacker) {
			if (move.id === 'watershuriken' && attacker.template.species === 'Greninja-Ash') {
				move.multihit = 3;
			}
		},
		id: "battlebond",
		name: "Battle Bond",
		rating: 3,
		num: 210,
	},
	"beastboost": {
		desc: "This Pokemon's highest stat is raised by 1 stage if it attacks and knocks out another Pokemon.",
		shortDesc: "This Pokemon's highest stat is raised by 1 if it attacks and KOes another Pokemon.",
		onSourceFaint(target, source, effect) {
			if (effect && effect.effectType === 'Move') {
				let statName = 'atk';
				let bestStat = 0;
				/** @type {StatNameExceptHP} */
				let s;
				for (s in source.storedStats) {
					if (source.storedStats[s] > bestStat) {
						statName = s;
						bestStat = source.storedStats[s];
					}
				}
				this.boost({[statName]: 1}, source);
			}
		},
		id: "beastboost",
		name: "Beast Boost",
		rating: 3.5,
		num: 224,
	},
	"berserk": {
		desc: "When this Pokemon has more than 1/2 its maximum HP and takes damage from an attack bringing it to 1/2 or less of its maximum HP, its Special Attack is raised by 1 stage. This effect applies after all hits from a multi-hit move; Sheer Force prevents it from activating if the move has a secondary effect.",
		shortDesc: "This Pokemon's Sp. Atk is raised by 1 when it reaches 1/2 or less of its max HP.",
		onAfterMoveSecondary(target, source, move) {
			if (!source || source === target || !target.hp || !move.totalDamage) return;
			if (target.hp <= target.maxhp / 2 && target.hp + move.totalDamage > target.maxhp / 2) {
				this.boost({spa: 1});
			}
		},
		id: "berserk",
		name: "Berserk",
		rating: 2.5,
		num: 201,
	},
	"bigpecks": {
		shortDesc: "Prevents other Pokemon from lowering this Pokemon's Defense stat stage.",
		onBoost(boost, target, source, effect) {
			if (source && target === source) return;
			if (boost.def && boost.def < 0) {
				delete boost.def;
				if (!effect.secondaries) this.add("-fail", target, "unboost", "Defense", "[from] ability: Big Pecks", "[of] " + target);
			}
		},
		id: "bigpecks",
		name: "Big Pecks",
		rating: 0.5,
		num: 145,
	},
	"blaze": {
		desc: "When this Pokemon has 1/3 or less of its maximum HP, rounded down, its attacking stat is multiplied by 1.5 while using a Fire-type attack.",
		shortDesc: "At 1/3 or less of its max HP, this Pokemon's attacking stat is 1.5x with Fire attacks.",
		onModifyAtkPriority: 5,
		onModifyAtk(atk, attacker, defender, move) {
			if (move.type === 'Fire' && attacker.hp <= attacker.maxhp / 3) {
				this.debug('Blaze boost');
				return this.chainModify(1.5);
			}
		},
		onModifySpAPriority: 5,
		onModifySpA(atk, attacker, defender, move) {
			if (move.type === 'Fire' && attacker.hp <= attacker.maxhp / 3) {
				this.debug('Blaze boost');
				return this.chainModify(1.5);
			}
		},
		id: "blaze",
		name: "Blaze",
		rating: 2.5,
		num: 66,
	},
	"bulletproof": {
		desc: "This Pokemon is immune to ballistic moves. Ballistic moves include Bullet Seed, Octazooka, Barrage, Rock Wrecker, Zap Cannon, Acid Spray, Aura Sphere, Focus Blast, and all moves with Ball or Bomb in their name.",
		shortDesc: "Makes user immune to ballistic moves (Shadow Ball, Sludge Bomb, Focus Blast, etc).",
		onTryHit(pokemon, target, move) {
			if (move.flags['bullet']) {
				this.add('-immune', pokemon, '[from] ability: Bulletproof');
				return null;
			}
		},
		id: "bulletproof",
		name: "Bulletproof",
		rating: 3.5,
		num: 171,
	},
	"cheekpouch": {
		desc: "If this Pokemon eats a Berry, it restores 1/3 of its maximum HP, rounded down, in addition to the Berry's effect.",
		shortDesc: "If this Pokemon eats a Berry, it restores 1/3 of its max HP after the Berry's effect.",
		onEatItem(item, pokemon) {
			this.heal(pokemon.maxhp / 3);
		},
		id: "cheekpouch",
		name: "Cheek Pouch",
		rating: 2,
		num: 167,
	},
	"chlorophyll": {
		shortDesc: "If Sunny Day is active, this Pokemon's Speed is doubled.",
		onModifySpe(spe) {
			if (this.field.isWeather(['sunnyday', 'desolateland'])) {
				return this.chainModify(2);
			}
		},
		id: "chlorophyll",
		name: "Chlorophyll",
		rating: 3,
		num: 34,
	},
	"clearbody": {
		shortDesc: "Prevents other Pokemon from lowering this Pokemon's stat stages.",
		onBoost(boost, target, source, effect) {
			if (source && target === source) return;
			let showMsg = false;
			for (let i in boost) {
				// @ts-ignore
				if (boost[i] < 0) {
					// @ts-ignore
					delete boost[i];
					showMsg = true;
				}
			}
			if (showMsg && !effect.secondaries) this.add("-fail", target, "unboost", "[from] ability: Clear Body", "[of] " + target);
		},
		id: "clearbody",
		name: "Clear Body",
		rating: 2,
		num: 29,
	},
	"cloudnine": {
		shortDesc: "While this Pokemon is active, the effects of weather conditions are disabled.",
		onStart(pokemon) {
			this.add('-ability', pokemon, 'Cloud Nine');
		},
		suppressWeather: true,
		id: "cloudnine",
		name: "Cloud Nine",
		rating: 2.5,
		num: 13,
	},
	"colorchange": {
		desc: "This Pokemon's type changes to match the type of the last move that hit it, unless that type is already one of its types. This effect applies after all hits from a multi-hit move; Sheer Force prevents it from activating if the move has a secondary effect.",
		shortDesc: "This Pokemon's type changes to the type of a move it's hit by, unless it has the type.",
		onAfterMoveSecondary(target, source, move) {
			if (!target.hp) return;
			let type = move.type;
			if (target.isActive && move.effectType === 'Move' && move.category !== 'Status' && type !== '???' && !target.hasType(type)) {
				if (!target.setType(type)) return false;
				this.add('-start', target, 'typechange', type, '[from] ability: Color Change');

				if (target.side.active.length === 2 && target.position === 1) {
					// Curse Glitch
					const action = this.willMove(target);
					if (action && action.move.id === 'curse') {
						action.targetLoc = -1;
					}
				}
			}
		},
		id: "colorchange",
		name: "Color Change",
		rating: 1,
		num: 16,
	},
	"comatose": {
		desc: "This Pokemon cannot be statused, and is considered to be asleep. Moongeist Beam, Sunsteel Strike, and the Mold Breaker, Teravolt, and Turboblaze Abilities cannot ignore this Ability.",
		shortDesc: "This Pokemon cannot be statused, and is considered to be asleep.",
		onStart(pokemon) {
			this.add('-ability', pokemon, 'Comatose');
		},
		onSetStatus(status, target, source, effect) {
			if (!effect || !effect.status) return false;
			this.add('-immune', target, '[from] ability: Comatose');
			return false;
		},
		// Permanent sleep "status" implemented in the relevant sleep-checking effects
		isUnbreakable: true,
		id: "comatose",
		name: "Comatose",
		rating: 3,
		num: 213,
	},
	"competitive": {
		desc: "This Pokemon's Special Attack is raised by 2 stages for each of its stat stages that is lowered by an opposing Pokemon.",
		shortDesc: "This Pokemon's Sp. Atk is raised by 2 for each of its stats that is lowered by a foe.",
		onAfterEachBoost(boost, target, source) {
			if (!source || target.side === source.side) {
				return;
			}
			let statsLowered = false;
			for (let i in boost) {
				// @ts-ignore
				if (boost[i] < 0) {
					statsLowered = true;
				}
			}
			if (statsLowered) {
				this.boost({spa: 2}, target, target, null, true);
			}
		},
		id: "competitive",
		name: "Competitive",
		rating: 2.5,
		num: 172,
	},
	"compoundeyes": {
		shortDesc: "This Pokemon's moves have their accuracy multiplied by 1.3.",
		onSourceModifyAccuracy(accuracy) {
			if (typeof accuracy !== 'number') return;
			this.debug('compoundeyes - enhancing accuracy');
			return accuracy * 1.3;
		},
		id: "compoundeyes",
		name: "Compound Eyes",
		rating: 3.5,
		num: 14,
	},
	"contrary": {
		shortDesc: "If this Pokemon has a stat stage raised it is lowered instead, and vice versa.",
		onBoost(boost, target, source, effect) {
			if (effect && effect.id === 'zpower') return;
			for (let i in boost) {
				// @ts-ignore
				boost[i] *= -1;
			}
		},
		id: "contrary",
		name: "Contrary",
		rating: 4,
		num: 126,
	},
	"corrosion": {
		shortDesc: "This Pokemon can poison or badly poison other Pokemon regardless of their typing.",
		// Implemented in sim/pokemon.js:Pokemon#setStatus
		id: "corrosion",
		name: "Corrosion",
		rating: 2.5,
		num: 212,
	},
	"cursedbody": {
		desc: "If this Pokemon is hit by an attack, there is a 30% chance that move gets disabled unless one of the attacker's moves is already disabled.",
		shortDesc: "If this Pokemon is hit by an attack, there is a 30% chance that move gets disabled.",
		onAfterDamage(damage, target, source, move) {
			if (!source || source.volatiles['disable']) return;
			if (source !== target && move && move.effectType === 'Move' && !move.isFutureMove) {
				if (this.randomChance(3, 10)) {
					source.addVolatile('disable', this.effectData.target);
				}
			}
		},
		id: "cursedbody",
		name: "Cursed Body",
		rating: 2,
		num: 130,
	},
	"cutecharm": {
		desc: "There is a 30% chance a Pokemon making contact with this Pokemon will become infatuated if it is of the opposite gender.",
		shortDesc: "30% chance of infatuating Pokemon of the opposite gender if they make contact.",
		onAfterDamage(damage, target, source, move) {
			if (move && move.flags['contact']) {
				if (this.randomChance(3, 10)) {
					source.addVolatile('attract', this.effectData.target);
				}
			}
		},
		id: "cutecharm",
		name: "Cute Charm",
		rating: 1,
		num: 56,
	},
	"damp": {
		desc: "While this Pokemon is active, Explosion, Mind Blown, Self-Destruct, and the Aftermath Ability are prevented from having an effect.",
		shortDesc: "Prevents Explosion/Mind Blown/Self-Destruct/Aftermath while this Pokemon is active.",
		id: "damp",
		onAnyTryMove(target, source, effect) {
			if (['explosion', 'mindblown', 'selfdestruct'].includes(effect.id)) {
				this.attrLastMove('[still]');
				this.add('cant', this.effectData.target, 'ability: Damp', effect, '[of] ' + target);
				return false;
			}
		},
		onAnyDamage(damage, target, source, effect) {
			if (effect && effect.id === 'aftermath') {
				return false;
			}
		},
		name: "Damp",
		rating: 1,
		num: 6,
	},
	"dancer": {
		desc: "After another Pokemon uses a dance move, this Pokemon uses the same move. Moves used by this Ability cannot be copied again.",
		shortDesc: "After another Pokemon uses a dance move, this Pokemon uses the same move.",
		id: "dancer",
		name: "Dancer",
		// implemented in runMove in scripts.js
		rating: 2.5,
		num: 216,
	},
	"darkaura": {
		desc: "While this Pokemon is active, the power of Dark-type moves used by active Pokemon is multiplied by 1.33.",
		shortDesc: "While this Pokemon is active, a Dark move used by any Pokemon has 1.33x power.",
		onStart(pokemon) {
			this.add('-ability', pokemon, 'Dark Aura');
		},
		onAnyBasePower(basePower, source, target, move) {
			if (target === source || move.category === 'Status' || move.type !== 'Dark') return;
			if (!move.auraBooster) move.auraBooster = this.effectData.target;
			if (move.auraBooster !== this.effectData.target) return;
			return this.chainModify([move.hasAuraBreak ? 0x0C00 : 0x1547, 0x1000]);
		},
		isUnbreakable: true,
		id: "darkaura",
		name: "Dark Aura",
		rating: 3,
		num: 186,
	},
	"dazzling": {
		desc: "While this Pokemon is active, priority moves from opposing Pokemon targeted at allies are prevented from having an effect.",
		shortDesc: "While this Pokemon is active, allies are protected from opposing priority moves.",
		onFoeTryMove(target, source, effect) {
			if ((source.side === this.effectData.target.side || effect.id === 'perishsong') && effect.priority > 0.1 && effect.target !== 'foeSide') {
				this.attrLastMove('[still]');
				this.add('cant', this.effectData.target, 'ability: Dazzling', effect, '[of] ' + target);
				return false;
			}
		},
		id: "dazzling",
		name: "Dazzling",
		rating: 2.5,
		num: 219,
	},
	"defeatist": {
		desc: "While this Pokemon has 1/2 or less of its maximum HP, its Attack and Special Attack are halved.",
		shortDesc: "While this Pokemon has 1/2 or less of its max HP, its Attack and Sp. Atk are halved.",
		onModifyAtkPriority: 5,
		onModifyAtk(atk, pokemon) {
			if (pokemon.hp <= pokemon.maxhp / 2) {
				return this.chainModify(0.5);
			}
		},
		onModifySpAPriority: 5,
		onModifySpA(atk, pokemon) {
			if (pokemon.hp <= pokemon.maxhp / 2) {
				return this.chainModify(0.5);
			}
		},
		id: "defeatist",
		name: "Defeatist",
		rating: -1,
		num: 129,
	},
	"defiant": {
		desc: "This Pokemon's Attack is raised by 2 stages for each of its stat stages that is lowered by an opposing Pokemon.",
		shortDesc: "This Pokemon's Attack is raised by 2 for each of its stats that is lowered by a foe.",
		onAfterEachBoost(boost, target, source) {
			if (!source || target.side === source.side) {
				return;
			}
			let statsLowered = false;
			for (let i in boost) {
				// @ts-ignore
				if (boost[i] < 0) {
					statsLowered = true;
				}
			}
			if (statsLowered) {
				this.boost({atk: 2}, target, target, null, true);
			}
		},
		id: "defiant",
		name: "Defiant",
		rating: 2.5,
		num: 128,
	},
	"deltastream": {
		desc: "On switch-in, the weather becomes strong winds that remove the weaknesses of the Flying type from Flying-type Pokemon. This weather remains in effect until this Ability is no longer active for any Pokemon, or the weather is changed by Desolate Land or Primordial Sea.",
		shortDesc: "On switch-in, strong winds begin until this Ability is not active in battle.",
		onStart(source) {
			this.field.setWeather('deltastream');
		},
		onAnySetWeather(target, source, weather) {
			if (this.field.getWeather().id === 'deltastream' && !['desolateland', 'primordialsea', 'deltastream'].includes(weather.id)) return false;
		},
		onEnd(pokemon) {
			if (this.field.weatherData.source !== pokemon) return;
			for (const target of this.getAllActive()) {
				if (target === pokemon) continue;
				if (target.hasAbility('deltastream')) {
					this.field.weatherData.source = target;
					return;
				}
			}
			this.field.clearWeather();
		},
		id: "deltastream",
		name: "Delta Stream",
		rating: 5,
		num: 191,
	},
	"desolateland": {
		desc: "On switch-in, the weather becomes extremely harsh sunlight that prevents damaging Water-type moves from executing, in addition to all the effects of Sunny Day. This weather remains in effect until this Ability is no longer active for any Pokemon, or the weather is changed by Delta Stream or Primordial Sea.",
		shortDesc: "On switch-in, extremely harsh sunlight begins until this Ability is not active in battle.",
		onStart(source) {
			this.field.setWeather('desolateland');
		},
		onAnySetWeather(target, source, weather) {
			if (this.field.getWeather().id === 'desolateland' && !['desolateland', 'primordialsea', 'deltastream'].includes(weather.id)) return false;
		},
		onEnd(pokemon) {
			if (this.field.weatherData.source !== pokemon) return;
			for (const target of this.getAllActive()) {
				if (target === pokemon) continue;
				if (target.hasAbility('desolateland')) {
					this.field.weatherData.source = target;
					return;
				}
			}
			this.field.clearWeather();
		},
		id: "desolateland",
		name: "Desolate Land",
		rating: 5,
		num: 190,
	},
	"disguise": {
		desc: "If this Pokemon is a Mimikyu, the first hit it takes in battle deals 0 neutral damage. Its disguise is then broken and it changes to Busted Form. Confusion damage also breaks the disguise.",
		shortDesc: "If this Pokemon is a Mimikyu, the first hit it takes in battle deals 0 neutral damage.",
		onDamagePriority: 1,
		onDamage(damage, target, source, effect) {
			if (effect && effect.effectType === 'Move' && ['mimikyu', 'mimikyutotem'].includes(target.template.speciesid) && !target.transformed) {
				this.add('-activate', target, 'ability: Disguise');
				this.effectData.busted = true;
				return 0;
			}
		},
		onEffectiveness(typeMod, target, type, move) {
			if (!target) return;
			if (!['mimikyu', 'mimikyutotem'].includes(target.template.speciesid) || target.transformed || (target.volatiles['substitute'] && !(move.flags['authentic'] || move.infiltrates))) return;
			if (!target.runImmunity(move.type)) return;
			return 0;
		},
		onUpdate(pokemon) {
			if (['mimikyu', 'mimikyutotem'].includes(pokemon.template.speciesid) && this.effectData.busted) {
				let templateid = pokemon.template.speciesid === 'mimikyutotem' ? 'Mimikyu-Busted-Totem' : 'Mimikyu-Busted';
				pokemon.formeChange(templateid, this.effect, true);
			}
		},
		id: "disguise",
		name: "Disguise",
		rating: 4,
		num: 209,
	},
	"download": {
		desc: "On switch-in, this Pokemon's Attack or Special Attack is raised by 1 stage based on the weaker combined defensive stat of all opposing Pokemon. Attack is raised if their Defense is lower, and Special Attack is raised if their Special Defense is the same or lower.",
		shortDesc: "On switch-in, Attack or Sp. Atk is raised 1 stage based on the foes' weaker Defense.",
		onStart(pokemon) {
			let totaldef = 0;
			let totalspd = 0;
			for (const target of pokemon.side.foe.active) {
				if (!target || target.fainted) continue;
				totaldef += target.getStat('def', false, true);
				totalspd += target.getStat('spd', false, true);
			}
			if (totaldef && totaldef >= totalspd) {
				this.boost({spa: 1});
			} else if (totalspd) {
				this.boost({atk: 1});
			}
		},
		id: "download",
		name: "Download",
		rating: 3.5,
		num: 88,
	},
	"drizzle": {
		shortDesc: "On switch-in, this Pokemon summons Rain Dance.",
		onStart(source) {
			for (const action of this.queue) {
				if (action.choice === 'runPrimal' && action.pokemon === source && source.template.speciesid === 'kyogre') return;
				if (action.choice !== 'runSwitch' && action.choice !== 'runPrimal') break;
			}
			this.field.setWeather('raindance');
		},
		id: "drizzle",
		name: "Drizzle",
		rating: 4.5,
		num: 2,
	},
	"drought": {
		shortDesc: "On switch-in, this Pokemon summons Sunny Day.",
		onStart(source) {
			for (const action of this.queue) {
				if (action.choice === 'runPrimal' && action.pokemon === source && source.template.speciesid === 'groudon') return;
				if (action.choice !== 'runSwitch' && action.choice !== 'runPrimal') break;
			}
			this.field.setWeather('sunnyday');
		},
		id: "drought",
		name: "Drought",
		rating: 4.5,
		num: 70,
	},
	"dryskin": {
		desc: "This Pokemon is immune to Water-type moves and restores 1/4 of its maximum HP, rounded down, when hit by a Water-type move. The power of Fire-type moves is multiplied by 1.25 when used on this Pokemon. At the end of each turn, this Pokemon restores 1/8 of its maximum HP, rounded down, if the weather is Rain Dance, and loses 1/8 of its maximum HP, rounded down, if the weather is Sunny Day.",
		shortDesc: "This Pokemon is healed 1/4 by Water, 1/8 by Rain; is hurt 1.25x by Fire, 1/8 by Sun.",
		onTryHit(target, source, move) {
			if (target !== source && move.type === 'Water') {
				if (!this.heal(target.maxhp / 4)) {
					this.add('-immune', target, '[from] ability: Dry Skin');
				}
				return null;
			}
		},
		onFoeBasePowerPriority: 7,
		onFoeBasePower(basePower, attacker, defender, move) {
			if (this.effectData.target !== defender) return;
			if (move.type === 'Fire') {
				return this.chainModify(1.25);
			}
		},
		onWeather(target, source, effect) {
			if (effect.id === 'raindance' || effect.id === 'primordialsea') {
				this.heal(target.maxhp / 8);
			} else if (effect.id === 'sunnyday' || effect.id === 'desolateland') {
				this.damage(target.maxhp / 8, target, target);
			}
		},
		id: "dryskin",
		name: "Dry Skin",
		rating: 3,
		num: 87,
	},
	"earlybird": {
		shortDesc: "This Pokemon's sleep counter drops by 2 instead of 1.",
		id: "earlybird",
		name: "Early Bird",
		// Implemented in statuses.js
		rating: 2,
		num: 48,
	},
	"effectspore": {
		desc: "30% chance a Pokemon making contact with this Pokemon will be poisoned, paralyzed, or fall asleep.",
		shortDesc: "30% chance of poison/paralysis/sleep on others making contact with this Pokemon.",
		onAfterDamage(damage, target, source, move) {
			if (move && move.flags['contact'] && !source.status && source.runStatusImmunity('powder')) {
				let r = this.random(100);
				if (r < 11) {
					source.setStatus('slp', target);
				} else if (r < 21) {
					source.setStatus('par', target);
				} else if (r < 30) {
					source.setStatus('psn', target);
				}
			}
		},
		id: "effectspore",
		name: "Effect Spore",
		rating: 2,
		num: 27,
	},
	"electricsurge": {
		shortDesc: "On switch-in, this Pokemon summons Electric Terrain.",
		onStart(source) {
			this.field.setTerrain('electricterrain');
		},
		id: "electricsurge",
		name: "Electric Surge",
		rating: 4,
		num: 226,
	},
	"emergencyexit": {
		desc: "When this Pokemon has more than 1/2 its maximum HP and takes damage bringing it to 1/2 or less of its maximum HP, it immediately switches out to a chosen ally. This effect applies after all hits from a multi-hit move; Sheer Force prevents it from activating if the move has a secondary effect. This effect applies to both direct and indirect damage, except Curse and Substitute on use, Belly Drum, Pain Split, and confusion damage.",
		shortDesc: "This Pokemon switches out when it reaches 1/2 or less of its maximum HP.",
		onAfterMoveSecondary(target, source, move) {
			if (!source || source === target || !target.hp || !move.totalDamage) return;
			if (target.hp <= target.maxhp / 2 && target.hp + move.totalDamage > target.maxhp / 2) {
				if (!this.canSwitch(target.side) || target.forceSwitchFlag || target.switchFlag) return;
				target.switchFlag = true;
				source.switchFlag = false;
				this.add('-activate', target, 'ability: Emergency Exit');
			}
		},
		onAfterDamage(damage, target, source, effect) {
			if (!target.hp || effect.effectType === 'Move') return;
			if (target.hp <= target.maxhp / 2 && target.hp + damage > target.maxhp / 2) {
				if (!this.canSwitch(target.side) || target.forceSwitchFlag || target.switchFlag) return;
				target.switchFlag = true;
				this.add('-activate', target, 'ability: Emergency Exit');
			}
		},
		id: "emergencyexit",
		name: "Emergency Exit",
		rating: 1.5,
		num: 194,
	},
	"fairyaura": {
		desc: "While this Pokemon is active, the power of Fairy-type moves used by active Pokemon is multiplied by 1.33.",
		shortDesc: "While this Pokemon is active, a Fairy move used by any Pokemon has 1.33x power.",
		onStart(pokemon) {
			this.add('-ability', pokemon, 'Fairy Aura');
		},
		onAnyBasePower(basePower, source, target, move) {
			if (target === source || move.category === 'Status' || move.type !== 'Fairy') return;
			if (!move.auraBooster) move.auraBooster = this.effectData.target;
			if (move.auraBooster !== this.effectData.target) return;
			return this.chainModify([move.hasAuraBreak ? 0x0C00 : 0x1547, 0x1000]);
		},
		isUnbreakable: true,
		id: "fairyaura",
		name: "Fairy Aura",
		rating: 3,
		num: 187,
	},
	"filter": {
		shortDesc: "This Pokemon receives 3/4 damage from supereffective attacks.",
		onSourceModifyDamage(damage, source, target, move) {
			if (target.getMoveHitData(move).typeMod > 0) {
				this.debug('Filter neutralize');
				return this.chainModify(0.75);
			}
		},
		id: "filter",
		name: "Filter",
		rating: 3,
		num: 111,
	},
	"flamebody": {
		shortDesc: "30% chance a Pokemon making contact with this Pokemon will be burned.",
		onAfterDamage(damage, target, source, move) {
			if (move && move.flags['contact']) {
				if (this.randomChance(3, 10)) {
					source.trySetStatus('brn', target);
				}
			}
		},
		id: "flamebody",
		name: "Flame Body",
		rating: 2,
		num: 49,
	},
	"flareboost": {
		desc: "While this Pokemon is burned, the power of its special attacks is multiplied by 1.5.",
		shortDesc: "While this Pokemon is burned, its special attacks have 1.5x power.",
		onBasePowerPriority: 8,
		onBasePower(basePower, attacker, defender, move) {
			if (attacker.status === 'brn' && move.category === 'Special') {
				return this.chainModify(1.5);
			}
		},
		id: "flareboost",
		name: "Flare Boost",
		rating: 2.5,
		num: 138,
	},
	"flashfire": {
		desc: "This Pokemon is immune to Fire-type moves. The first time it is hit by a Fire-type move, its attacking stat is multiplied by 1.5 while using a Fire-type attack as long as it remains active and has this Ability. If this Pokemon is frozen, it cannot be defrosted by Fire-type attacks.",
		shortDesc: "This Pokemon's Fire attacks do 1.5x damage if hit by one Fire move; Fire immunity.",
		onTryHit(target, source, move) {
			if (target !== source && move.type === 'Fire') {
				move.accuracy = true;
				if (!target.addVolatile('flashfire')) {
					this.add('-immune', target, '[from] ability: Flash Fire');
				}
				return null;
			}
		},
		onEnd(pokemon) {
			pokemon.removeVolatile('flashfire');
		},
		effect: {
			noCopy: true, // doesn't get copied by Baton Pass
			onStart(target) {
				this.add('-start', target, 'ability: Flash Fire');
			},
			onModifyAtkPriority: 5,
			onModifyAtk(atk, attacker, defender, move) {
				if (move.type === 'Fire') {
					this.debug('Flash Fire boost');
					return this.chainModify(1.5);
				}
			},
			onModifySpAPriority: 5,
			onModifySpA(atk, attacker, defender, move) {
				if (move.type === 'Fire') {
					this.debug('Flash Fire boost');
					return this.chainModify(1.5);
				}
			},
			onEnd(target) {
				this.add('-end', target, 'ability: Flash Fire', '[silent]');
			},
		},
		id: "flashfire",
		name: "Flash Fire",
		rating: 3,
		num: 18,
	},
	"flowergift": {
		desc: "If this Pokemon is a Cherrim and Sunny Day is active, it changes to Sunshine Form and the Attack and Special Defense of it and its allies are multiplied by 1.5.",
		shortDesc: "If user is Cherrim and Sunny Day is active, it and allies' Attack and Sp. Def are 1.5x.",
		onStart(pokemon) {
			delete this.effectData.forme;
		},
		onUpdate(pokemon) {
			if (!pokemon.isActive || pokemon.baseTemplate.baseSpecies !== 'Cherrim' || pokemon.transformed) return;
			if (this.field.isWeather(['sunnyday', 'desolateland'])) {
				if (pokemon.template.speciesid !== 'cherrimsunshine') {
					pokemon.formeChange('Cherrim-Sunshine', this.effect, false, '[msg]');
				}
			} else {
				if (pokemon.template.speciesid === 'cherrimsunshine') {
					pokemon.formeChange('Cherrim', this.effect, false, '[msg]');
				}
			}
		},
		onAllyModifyAtkPriority: 3,
		onAllyModifyAtk(atk) {
			if (this.effectData.target.baseTemplate.baseSpecies !== 'Cherrim') return;
			if (this.field.isWeather(['sunnyday', 'desolateland'])) {
				return this.chainModify(1.5);
			}
		},
		onModifySpDPriority: 4,
		onAllyModifySpD(spd) {
			if (this.effectData.target.baseTemplate.baseSpecies !== 'Cherrim') return;
			if (this.field.isWeather(['sunnyday', 'desolateland'])) {
				return this.chainModify(1.5);
			}
		},
		id: "flowergift",
		name: "Flower Gift",
		rating: 2,
		num: 122,
	},
	"flowerveil": {
		desc: "Grass-type Pokemon on this Pokemon's side cannot have their stat stages lowered by other Pokemon or have a major status condition inflicted on them by other Pokemon.",
		shortDesc: "This side's Grass types can't have stats lowered or status inflicted by other Pokemon.",
		onAllyBoost(boost, target, source, effect) {
			if ((source && target === source) || !target.hasType('Grass')) return;
			let showMsg = false;
			for (let i in boost) {
				// @ts-ignore
				if (boost[i] < 0) {
					// @ts-ignore
					delete boost[i];
					showMsg = true;
				}
			}
			if (showMsg && !effect.secondaries) this.add('-fail', this.effectData.target, 'unboost', '[from] ability: Flower Veil', '[of] ' + target);
		},
		onAllySetStatus(status, target, source, effect) {
			if (target.hasType('Grass') && source && target !== source && effect) {
				this.debug('interrupting setStatus with Flower Veil');
				if (effect.id === 'synchronize' || (effect.effectType === 'Move' && !effect.secondaries)) {
					this.add('-activate', this.effectData.target, 'ability: Flower Veil', '[of] ' + target);
				}
				return null;
			}
		},
		onAllyTryAddVolatile(status, target) {
			if (target.hasType('Grass') && status.id === 'yawn') {
				this.debug('Flower Veil blocking yawn');
				this.add('-activate', this.effectData.target, 'ability: Flower Veil', '[of] ' + target);
				return null;
			}
		},
		id: "flowerveil",
		name: "Flower Veil",
		rating: 0,
		num: 166,
	},
	"fluffy": {
		desc: "This Pokemon receives 1/2 damage from contact moves, but double damage from Fire moves.",
		shortDesc: "This Pokemon takes 1/2 damage from contact moves, 2x damage from Fire moves.",
		onSourceModifyDamage(damage, source, target, move) {
			let mod = 1;
			if (move.type === 'Fire') mod *= 2;
			if (move.flags['contact']) mod /= 2;
			return this.chainModify(mod);
		},
		id: "fluffy",
		name: "Fluffy",
		rating: 2.5,
		num: 218,
	},
	"forecast": {
		desc: "If this Pokemon is a Castform, its type changes to the current weather condition's type, except Sandstorm.",
		shortDesc: "Castform's type changes to the current weather condition's type, except Sandstorm.",
		onUpdate(pokemon) {
			if (pokemon.baseTemplate.baseSpecies !== 'Castform' || pokemon.transformed) return;
			let forme = null;
			switch (this.field.effectiveWeather()) {
			case 'sunnyday':
			case 'desolateland':
				if (pokemon.template.speciesid !== 'castformsunny') forme = 'Castform-Sunny';
				break;
			case 'raindance':
			case 'primordialsea':
				if (pokemon.template.speciesid !== 'castformrainy') forme = 'Castform-Rainy';
				break;
			case 'hail':
				if (pokemon.template.speciesid !== 'castformsnowy') forme = 'Castform-Snowy';
				break;
			default:
				if (pokemon.template.speciesid !== 'castform') forme = 'Castform';
				break;
			}
			if (pokemon.isActive && forme) {
				pokemon.formeChange(forme, this.effect, false, '[msg]');
			}
		},
		id: "forecast",
		name: "Forecast",
		rating: 3,
		num: 59,
	},
	"forewarn": {
		desc: "On switch-in, this Pokemon is alerted to the move with the highest power, at random, known by an opposing Pokemon.",
		shortDesc: "On switch-in, this Pokemon is alerted to the foes' move with the highest power.",
		onStart(pokemon) {
			/**@type {(Move|Pokemon)[][]} */
			let warnMoves = [];
			let warnBp = 1;
			for (const target of pokemon.side.foe.active) {
				if (target.fainted) continue;
				for (const moveSlot of target.moveSlots) {
					let move = this.getMove(moveSlot.move);
					let bp = move.basePower;
					if (move.ohko) bp = 150;
					if (move.id === 'counter' || move.id === 'metalburst' || move.id === 'mirrorcoat') bp = 120;
					if (bp === 1) bp = 80;
					if (!bp && move.category !== 'Status') bp = 80;
					if (bp > warnBp) {
						warnMoves = [[move, target]];
						warnBp = bp;
					} else if (bp === warnBp) {
						warnMoves.push([move, target]);
					}
				}
			}
			if (!warnMoves.length) return;
			const [warnMoveName, warnTarget] = this.sample(warnMoves);
			this.add('-activate', pokemon, 'ability: Forewarn', warnMoveName, '[of] ' + warnTarget);
		},
		id: "forewarn",
		name: "Forewarn",
		rating: 1,
		num: 108,
	},
	"friendguard": {
		shortDesc: "This Pokemon's allies receive 3/4 damage from other Pokemon's attacks.",
		id: "friendguard",
		name: "Friend Guard",
		onAnyModifyDamage(damage, source, target, move) {
			if (target !== this.effectData.target && target.side === this.effectData.target.side) {
				this.debug('Friend Guard weaken');
				return this.chainModify(0.75);
			}
		},
		rating: 0,
		num: 132,
	},
	"frisk": {
		shortDesc: "On switch-in, this Pokemon identifies the held items of all opposing Pokemon.",
		onStart(pokemon) {
			for (const target of pokemon.side.foe.active) {
				if (!target || target.fainted) continue;
				if (target.item) {
					this.add('-item', target, target.getItem().name, '[from] ability: Frisk', '[of] ' + pokemon, '[identify]');
				}
			}
		},
		id: "frisk",
		name: "Frisk",
		rating: 1.5,
		num: 119,
	},
	"fullmetalbody": {
		desc: "Prevents other Pokemon from lowering this Pokemon's stat stages. Moongeist Beam, Sunsteel Strike, and the Mold Breaker, Teravolt, and Turboblaze Abilities cannot ignore this Ability.",
		shortDesc: "Prevents other Pokemon from lowering this Pokemon's stat stages.",
		onBoost(boost, target, source, effect) {
			if (source && target === source) return;
			let showMsg = false;
			for (let i in boost) {
				// @ts-ignore
				if (boost[i] < 0) {
					// @ts-ignore
					delete boost[i];
					showMsg = true;
				}
			}
			if (showMsg && !effect.secondaries) this.add("-fail", target, "unboost", "[from] ability: Full Metal Body", "[of] " + target);
		},
		isUnbreakable: true,
		id: "fullmetalbody",
		name: "Full Metal Body",
		rating: 2,
		num: 230,
	},
	"furcoat": {
		shortDesc: "This Pokemon's Defense is doubled.",
		onModifyDefPriority: 6,
		onModifyDef(def) {
			return this.chainModify(2);
		},
		id: "furcoat",
		name: "Fur Coat",
		rating: 3.5,
		num: 169,
	},
	"galewings": {
		shortDesc: "If this Pokemon is at full HP, its Flying-type moves have their priority increased by 1.",
		onModifyPriority(priority, pokemon, target, move) {
			if (move && move.type === 'Flying' && pokemon.hp === pokemon.maxhp) return priority + 1;
		},
		id: "galewings",
		name: "Gale Wings",
		rating: 3,
		num: 177,
	},
	"galvanize": {
		desc: "This Pokemon's Normal-type moves become Electric-type moves and have their power multiplied by 1.2. This effect comes after other effects that change a move's type, but before Ion Deluge and Electrify's effects.",
		shortDesc: "This Pokemon's Normal-type moves become Electric type and have 1.2x power.",
		onModifyMovePriority: -1,
		onModifyMove(move, pokemon) {
			if (move.type === 'Normal' && !['judgment', 'multiattack', 'naturalgift', 'revelationdance', 'technoblast', 'weatherball'].includes(move.id) && !(move.isZ && move.category !== 'Status')) {
				move.type = 'Electric';
				move.galvanizeBoosted = true;
			}
		},
		onBasePowerPriority: 8,
		onBasePower(basePower, pokemon, target, move) {
			if (move.galvanizeBoosted) return this.chainModify([0x1333, 0x1000]);
		},
		id: "galvanize",
		name: "Galvanize",
		rating: 4,
		num: 206,
	},
	"gluttony": {
		shortDesc: "When this Pokemon has 1/2 or less of its maximum HP, it uses certain Berries early.",
		id: "gluttony",
		name: "Gluttony",
		rating: 1.5,
		num: 82,
	},
	"gooey": {
		shortDesc: "Pokemon making contact with this Pokemon have their Speed lowered by 1 stage.",
		onAfterDamage(damage, target, source, effect) {
			if (effect && effect.flags['contact']) {
				this.add('-ability', target, 'Gooey');
				this.boost({spe: -1}, source, target, null, true);
			}
		},
		id: "gooey",
		name: "Gooey",
		rating: 2.5,
		num: 183,
	},
	"grasspelt": {
		shortDesc: "If Grassy Terrain is active, this Pokemon's Defense is multiplied by 1.5.",
		onModifyDefPriority: 6,
		onModifyDef(pokemon) {
			if (this.field.isTerrain('grassyterrain')) return this.chainModify(1.5);
		},
		id: "grasspelt",
		name: "Grass Pelt",
		rating: 1,
		num: 179,
	},
	"grassysurge": {
		shortDesc: "On switch-in, this Pokemon summons Grassy Terrain.",
		onStart(source) {
			this.field.setTerrain('grassyterrain');
		},
		id: "grassysurge",
		name: "Grassy Surge",
		rating: 4,
		num: 229,
	},
	"guts": {
		desc: "If this Pokemon has a major status condition, its Attack is multiplied by 1.5; burn's physical damage halving is ignored.",
		shortDesc: "If this Pokemon is statused, its Attack is 1.5x; ignores burn halving physical damage.",
		onModifyAtkPriority: 5,
		onModifyAtk(atk, pokemon) {
			if (pokemon.status) {
				return this.chainModify(1.5);
			}
		},
		id: "guts",
		name: "Guts",
		rating: 3,
		num: 62,
	},
	"harvest": {
		desc: "If the last item this Pokemon used is a Berry, there is a 50% chance it gets restored at the end of each turn. If Sunny Day is active, this chance is 100%.",
		shortDesc: "If last item used is a Berry, 50% chance to restore it each end of turn. 100% in Sun.",
		id: "harvest",
		name: "Harvest",
		onResidualOrder: 26,
		onResidualSubOrder: 1,
		onResidual(pokemon) {
			if (this.field.isWeather(['sunnyday', 'desolateland']) || this.randomChance(1, 2)) {
				if (pokemon.hp && !pokemon.item && this.getItem(pokemon.lastItem).isBerry) {
					pokemon.setItem(pokemon.lastItem);
					pokemon.lastItem = '';
					this.add('-item', pokemon, pokemon.getItem(), '[from] ability: Harvest');
				}
			}
		},
		rating: 2.5,
		num: 139,
	},
	"healer": {
		desc: "There is a 30% chance of curing an adjacent ally's major status condition at the end of each turn.",
		shortDesc: "30% chance of curing an adjacent ally's status at the end of each turn.",
		id: "healer",
		name: "Healer",
		onResidualOrder: 5,
		onResidualSubOrder: 1,
		onResidual(pokemon) {
			if (pokemon.side.active.length === 1) {
				return;
			}
			for (const allyActive of pokemon.side.active) {
				if (allyActive && allyActive.hp && this.isAdjacent(pokemon, allyActive) && allyActive.status && this.randomChance(3, 10)) {
					this.add('-activate', pokemon, 'ability: Healer');
					allyActive.cureStatus();
				}
			}
		},
		rating: 0,
		num: 131,
	},
	"heatproof": {
		desc: "The power of Fire-type attacks against this Pokemon is halved, and burn damage taken is halved.",
		shortDesc: "The power of Fire-type attacks against this Pokemon is halved; burn damage halved.",
		onSourceBasePowerPriority: 7,
		onSourceBasePower(basePower, attacker, defender, move) {
			if (move.type === 'Fire') {
				return this.chainModify(0.5);
			}
		},
		onDamage(damage, target, source, effect) {
			if (effect && effect.id === 'brn') {
				return damage / 2;
			}
		},
		id: "heatproof",
		name: "Heatproof",
		rating: 2.5,
		num: 85,
	},
	"heavymetal": {
		shortDesc: "This Pokemon's weight is doubled.",
		onModifyWeight(weight) {
			return weight * 2;
		},
		id: "heavymetal",
		name: "Heavy Metal",
		rating: -1,
		num: 134,
	},
	"honeygather": {
		shortDesc: "No competitive use.",
		id: "honeygather",
		name: "Honey Gather",
		rating: 0,
		num: 118,
	},
	"hugepower": {
		shortDesc: "This Pokemon's Attack is doubled.",
		onModifyAtkPriority: 5,
		onModifyAtk(atk) {
			return this.chainModify(2);
		},
		id: "hugepower",
		name: "Huge Power",
		rating: 5,
		num: 37,
	},
	"hustle": {
		desc: "This Pokemon's Attack is multiplied by 1.5 and the accuracy of its physical attacks is multiplied by 0.8.",
		shortDesc: "This Pokemon's Attack is 1.5x and accuracy of its physical attacks is 0.8x.",
		// This should be applied directly to the stat as opposed to chaining witht he others
		onModifyAtkPriority: 5,
		onModifyAtk(atk) {
			return this.modify(atk, 1.5);
		},
		onModifyMovePriority: -1,
		onModifyMove(move) {
			if (move.category === 'Physical' && typeof move.accuracy === 'number') {
				move.accuracy *= 0.8;
			}
		},
		id: "hustle",
		name: "Hustle",
		rating: 3.5,
		num: 55,
	},
	"hydration": {
		desc: "This Pokemon has its major status condition cured at the end of each turn if Rain Dance is active.",
		shortDesc: "This Pokemon has its status cured at the end of each turn if Rain Dance is active.",
		onResidualOrder: 5,
		onResidualSubOrder: 1,
		onResidual(pokemon) {
			if (pokemon.status && this.field.isWeather(['raindance', 'primordialsea'])) {
				this.debug('hydration');
				this.add('-activate', pokemon, 'ability: Hydration');
				pokemon.cureStatus();
			}
		},
		id: "hydration",
		name: "Hydration",
		rating: 2,
		num: 93,
	},
	"hypercutter": {
		shortDesc: "Prevents other Pokemon from lowering this Pokemon's Attack stat stage.",
		onBoost(boost, target, source, effect) {
			if (source && target === source) return;
			if (boost.atk && boost.atk < 0) {
				delete boost.atk;
				if (!effect.secondaries) this.add("-fail", target, "unboost", "Attack", "[from] ability: Hyper Cutter", "[of] " + target);
			}
		},
		id: "hypercutter",
		name: "Hyper Cutter",
		rating: 1.5,
		num: 52,
	},
	"icebody": {
		desc: "If Hail is active, this Pokemon restores 1/16 of its maximum HP, rounded down, at the end of each turn. This Pokemon takes no damage from Hail.",
		shortDesc: "If Hail is active, this Pokemon heals 1/16 of its max HP each turn; immunity to Hail.",
		onWeather(target, source, effect) {
			if (effect.id === 'hail') {
				this.heal(target.maxhp / 16);
			}
		},
		onImmunity(type, pokemon) {
			if (type === 'hail') return false;
		},
		id: "icebody",
		name: "Ice Body",
		rating: 1.5,
		num: 115,
	},
	"illuminate": {
		shortDesc: "No competitive use.",
		id: "illuminate",
		name: "Illuminate",
		rating: 0,
		num: 35,
	},
	"illusion": {
		desc: "When this Pokemon switches in, it appears as the last unfainted Pokemon in its party until it takes direct damage from another Pokemon's attack. This Pokemon's actual level and HP are displayed instead of those of the mimicked Pokemon.",
		shortDesc: "This Pokemon appears as the last Pokemon in the party until it takes direct damage.",
		onBeforeSwitchIn(pokemon) {
			pokemon.illusion = null;
			let i;
			for (i = pokemon.side.pokemon.length - 1; i > pokemon.position; i--) {
				if (!pokemon.side.pokemon[i]) continue;
				if (!pokemon.side.pokemon[i].fainted) break;
			}
			if (!pokemon.side.pokemon[i]) return;
			if (pokemon === pokemon.side.pokemon[i]) return;
			pokemon.illusion = pokemon.side.pokemon[i];
		},
		onAfterDamage(damage, target, source, effect) {
			if (target.illusion && effect && effect.effectType === 'Move' && effect.id !== 'confused') {
				this.singleEvent('End', this.getAbility('Illusion'), target.abilityData, target, source, effect);
			}
		},
		onEnd(pokemon) {
			if (pokemon.illusion) {
				this.debug('illusion cleared');
				pokemon.illusion = null;
				let details = pokemon.template.species + (pokemon.level === 100 ? '' : ', L' + pokemon.level) + (pokemon.gender === '' ? '' : ', ' + pokemon.gender) + (pokemon.set.shiny ? ', shiny' : '');
				this.add('replace', pokemon, details);
				this.add('-end', pokemon, 'Illusion');
			}
		},
		onFaint(pokemon) {
			pokemon.illusion = null;
		},
		isUnbreakable: true,
		id: "illusion",
		name: "Illusion",
		rating: 4,
		num: 149,
	},
	"immunity": {
		shortDesc: "This Pokemon cannot be poisoned. Gaining this Ability while poisoned cures it.",
		onUpdate(pokemon) {
			if (pokemon.status === 'psn' || pokemon.status === 'tox') {
				this.add('-activate', pokemon, 'ability: Immunity');
				pokemon.cureStatus();
			}
		},
		onSetStatus(status, target, source, effect) {
			if (status.id !== 'psn' && status.id !== 'tox') return;
			if (!effect || !effect.status) return false;
			this.add('-immune', target, '[from] ability: Immunity');
			return false;
		},
		id: "immunity",
		name: "Immunity",
		rating: 2,
		num: 17,
	},
	"imposter": {
		desc: "On switch-in, this Pokemon Transforms into the opposing Pokemon that is facing it. If there is no Pokemon at that position, this Pokemon does not Transform.",
		shortDesc: "On switch-in, this Pokemon Transforms into the opposing Pokemon that is facing it.",
		onStart(pokemon) {
			if (this.activeMove && this.activeMove.id === 'skillswap') return;
			let target = pokemon.side.foe.active[pokemon.side.foe.active.length - 1 - pokemon.position];
			if (target) {
				pokemon.transformInto(target, this.getAbility('imposter'));
			}
		},
		id: "imposter",
		name: "Imposter",
		rating: 4.5,
		num: 150,
	},
	"infiltrator": {
		desc: "This Pokemon's moves ignore substitutes and the opposing side's Reflect, Light Screen, Safeguard, Mist and Aurora Veil.",
		shortDesc: "Moves ignore substitutes and foe's Reflect/Light Screen/Safeguard/Mist/Aurora Veil.",
		onModifyMove(move) {
			move.infiltrates = true;
		},
		id: "infiltrator",
		name: "Infiltrator",
		rating: 3,
		num: 151,
	},
	"innardsout": {
		desc: "If this Pokemon is knocked out with a move, that move's user loses HP equal to the amount of damage inflicted on this Pokemon.",
		shortDesc: "If this Pokemon is KOed with a move, that move's user loses an equal amount of HP.",
		id: "innardsout",
		name: "Innards Out",
		onAfterDamageOrder: 1,
		onAfterDamage(damage, target, source, move) {
			if (source && source !== target && move && move.effectType === 'Move' && !target.hp) {
				this.damage(damage, source, target);
			}
		},
		rating: 2.5,
		num: 215,
	},
	"innerfocus": {
		shortDesc: "This Pokemon cannot be made to flinch.",
		onFlinch: false,
		id: "innerfocus",
		name: "Inner Focus",
		rating: 1,
		num: 39,
	},
	"insomnia": {
		shortDesc: "This Pokemon cannot fall asleep. Gaining this Ability while asleep cures it.",
		onUpdate(pokemon) {
			if (pokemon.status === 'slp') {
				this.add('-activate', pokemon, 'ability: Insomnia');
				pokemon.cureStatus();
			}
		},
		onSetStatus(status, target, source, effect) {
			if (status.id !== 'slp') return;
			if (!effect || !effect.status) return false;
			this.add('-immune', target, '[from] ability: Insomnia');
			return false;
		},
		id: "insomnia",
		name: "Insomnia",
		rating: 2,
		num: 15,
	},
	"intimidate": {
		desc: "On switch-in, this Pokemon lowers the Attack of adjacent opposing Pokemon by 1 stage. Pokemon behind a substitute are immune.",
		shortDesc: "On switch-in, this Pokemon lowers the Attack of adjacent opponents by 1 stage.",
		onStart(pokemon) {
			let activated = false;
			for (const target of pokemon.side.foe.active) {
				if (!target || !this.isAdjacent(target, pokemon)) continue;
				if (!activated) {
					this.add('-ability', pokemon, 'Intimidate', 'boost');
					activated = true;
				}
				if (target.volatiles['substitute']) {
					this.add('-immune', target);
				} else {
					this.boost({atk: -1}, target, pokemon);
				}
			}
		},
		id: "intimidate",
		name: "Intimidate",
		rating: 3.5,
		num: 22,
	},
	"ironbarbs": {
		desc: "Pokemon making contact with this Pokemon lose 1/8 of their maximum HP, rounded down.",
		shortDesc: "Pokemon making contact with this Pokemon lose 1/8 of their max HP.",
		onAfterDamageOrder: 1,
		onAfterDamage(damage, target, source, move) {
			if (source && source !== target && move && move.flags['contact']) {
				this.damage(source.maxhp / 8, source, target);
			}
		},
		id: "ironbarbs",
		name: "Iron Barbs",
		rating: 3,
		num: 160,
	},
	"ironfist": {
		desc: "This Pokemon's punch-based attacks have their power multiplied by 1.2.",
		shortDesc: "This Pokemon's punch-based attacks have 1.2x power. Sucker Punch is not boosted.",
		onBasePowerPriority: 8,
		onBasePower(basePower, attacker, defender, move) {
			if (move.flags['punch']) {
				this.debug('Iron Fist boost');
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		id: "ironfist",
		name: "Iron Fist",
		rating: 3,
		num: 89,
	},
	"justified": {
		shortDesc: "This Pokemon's Attack is raised by 1 stage after it is damaged by a Dark-type move.",
		onAfterDamage(damage, target, source, effect) {
			if (effect && effect.type === 'Dark') {
				this.boost({atk: 1});
			}
		},
		id: "justified",
		name: "Justified",
		rating: 2,
		num: 154,
	},
	"keeneye": {
		desc: "Prevents other Pokemon from lowering this Pokemon's accuracy stat stage. This Pokemon ignores a target's evasiveness stat stage.",
		shortDesc: "This Pokemon's accuracy can't be lowered by others; ignores their evasiveness stat.",
		onBoost(boost, target, source, effect) {
			if (source && target === source) return;
			if (boost.accuracy && boost.accuracy < 0) {
				delete boost.accuracy;
				if (!effect.secondaries) this.add("-fail", target, "unboost", "accuracy", "[from] ability: Keen Eye", "[of] " + target);
			}
		},
		onModifyMove(move) {
			move.ignoreEvasion = true;
		},
		id: "keeneye",
		name: "Keen Eye",
		rating: 0.5,
		num: 51,
	},
	"klutz": {
		desc: "This Pokemon's held item has no effect. This Pokemon cannot use Fling successfully. Macho Brace, Power Anklet, Power Band, Power Belt, Power Bracer, Power Lens, and Power Weight still have their effects.",
		shortDesc: "This Pokemon's held item has no effect, except Macho Brace. Fling cannot be used.",
		// Item suppression implemented in Pokemon.ignoringItem() within sim/pokemon.js
		id: "klutz",
		name: "Klutz",
		rating: -1,
		num: 103,
	},
	"leafguard": {
		desc: "If Sunny Day is active, this Pokemon cannot gain a major status condition and Rest will fail for it.",
		shortDesc: "If Sunny Day is active, this Pokemon cannot be statused and Rest will fail for it.",
		onSetStatus(status, target, source, effect) {
			if (this.field.isWeather(['sunnyday', 'desolateland'])) {
				if (effect && effect.status) this.add('-immune', target, '[from] ability: Leaf Guard');
				return false;
			}
		},
		onTryAddVolatile(status, target) {
			if (status.id === 'yawn' && this.field.isWeather(['sunnyday', 'desolateland'])) {
				this.add('-immune', target, '[from] ability: Leaf Guard');
				return null;
			}
		},
		id: "leafguard",
		name: "Leaf Guard",
		rating: 1,
		num: 102,
	},
	"levitate": {
		desc: "This Pokemon is immune to Ground. Gravity, Ingrain, Smack Down, Thousand Arrows, and Iron Ball nullify the immunity.",
		shortDesc: "This Pokemon is immune to Ground; Gravity/Ingrain/Smack Down/Iron Ball nullify it.",
		// airborneness implemented in sim/pokemon.js:Pokemon#isGrounded
		id: "levitate",
		name: "Levitate",
		rating: 3.5,
		num: 26,
	},
	"lightmetal": {
		shortDesc: "This Pokemon's weight is halved.",
		onModifyWeight(weight) {
			return weight / 2;
		},
		id: "lightmetal",
		name: "Light Metal",
		rating: 1,
		num: 135,
	},
	"lightningrod": {
		desc: "This Pokemon is immune to Electric-type moves and raises its Special Attack by 1 stage when hit by an Electric-type move. If this Pokemon is not the target of a single-target Electric-type move used by another Pokemon, this Pokemon redirects that move to itself if it is within the range of that move.",
		shortDesc: "This Pokemon draws Electric moves to itself to raise Sp. Atk by 1; Electric immunity.",
		onTryHit(target, source, move) {
			if (target !== source && move.type === 'Electric') {
				if (!this.boost({spa: 1})) {
					this.add('-immune', target, '[from] ability: Lightning Rod');
				}
				return null;
			}
		},
		onAnyRedirectTarget(target, source, source2, move) {
			if (move.type !== 'Electric' || ['firepledge', 'grasspledge', 'waterpledge'].includes(move.id)) return;
			if (this.validTarget(this.effectData.target, source, move.target)) {
				if (this.effectData.target !== target) {
					this.add('-activate', this.effectData.target, 'ability: Lightning Rod');
				}
				return this.effectData.target;
			}
		},
		id: "lightningrod",
		name: "Lightning Rod",
		rating: 3.5,
		num: 32,
	},
	"limber": {
		shortDesc: "This Pokemon cannot be paralyzed. Gaining this Ability while paralyzed cures it.",
		onUpdate(pokemon) {
			if (pokemon.status === 'par') {
				this.add('-activate', pokemon, 'ability: Limber');
				pokemon.cureStatus();
			}
		},
		onSetStatus(status, target, source, effect) {
			if (status.id !== 'par') return;
			if (!effect || !effect.status) return false;
			this.add('-immune', target, '[from] ability: Limber');
			return false;
		},
		id: "limber",
		name: "Limber",
		rating: 1.5,
		num: 7,
	},
	"liquidooze": {
		shortDesc: "This Pokemon damages those draining HP from it for as much as they would heal.",
		id: "liquidooze",
		onSourceTryHeal(damage, target, source, effect) {
			this.debug("Heal is occurring: " + target + " <- " + source + " :: " + effect.id);
			/**@type {{[k: string]: number}} */
			let canOoze = {drain: 1, leechseed: 1, strengthsap: 1};
			if (canOoze[effect.id]) {
				this.damage(damage);
				return 0;
			}
		},
		name: "Liquid Ooze",
		rating: 1.5,
		num: 64,
	},
	"liquidvoice": {
		desc: "This Pokemon's sound-based moves become Water-type moves. This effect comes after other effects that change a move's type, but before Ion Deluge and Electrify's effects.",
		shortDesc: "This Pokemon's sound-based moves become Water type.",
		onModifyMovePriority: -1,
		onModifyMove(move) {
			if (move.flags['sound']) {
				move.type = 'Water';
			}
		},
		id: "liquidvoice",
		name: "Liquid Voice",
		rating: 2.5,
		num: 204,
	},
	"longreach": {
		shortDesc: "This Pokemon's attacks do not make contact with the target.",
		onModifyMove(move) {
			delete move.flags['contact'];
		},
		id: "longreach",
		name: "Long Reach",
		rating: 1.5,
		num: 203,
	},
	"magicbounce": {
		desc: "This Pokemon blocks certain status moves and instead uses the move against the original user.",
		shortDesc: "This Pokemon blocks certain status moves and bounces them back to the user.",
		id: "magicbounce",
		name: "Magic Bounce",
		onTryHitPriority: 1,
		onTryHit(target, source, move) {
			if (target === source || move.hasBounced || !move.flags['reflectable']) {
				return;
			}
			let newMove = this.getActiveMove(move.id);
			newMove.hasBounced = true;
			newMove.pranksterBoosted = false;
			this.useMove(newMove, target, source);
			return null;
		},
		onAllyTryHitSide(target, source, move) {
			if (target.side === source.side || move.hasBounced || !move.flags['reflectable']) {
				return;
			}
			let newMove = this.getActiveMove(move.id);
			newMove.hasBounced = true;
			newMove.pranksterBoosted = false;
			this.useMove(newMove, this.effectData.target, source);
			return null;
		},
		effect: {
			duration: 1,
		},
		rating: 4.5,
		num: 156,
	},
	"magicguard": {
		desc: "This Pokemon can only be damaged by direct attacks. Curse and Substitute on use, Belly Drum, Pain Split, Struggle recoil, and confusion damage are considered direct damage.",
		shortDesc: "This Pokemon can only be damaged by direct attacks.",
		onDamage(damage, target, source, effect) {
			if (effect.effectType !== 'Move') {
				return false;
			}
		},
		id: "magicguard",
		name: "Magic Guard",
		rating: 4.5,
		num: 98,
	},
	"magician": {
		desc: "If this Pokemon has no item, it steals the item off a Pokemon it hits with an attack. Does not affect Doom Desire and Future Sight.",
		shortDesc: "If this Pokemon has no item, it steals the item off a Pokemon it hits with an attack.",
		onSourceHit(target, source, move) {
			if (!move || !target) return;
			if (target !== source && move.category !== 'Status') {
				if (source.item || source.volatiles['gem'] || source.volatiles['fling']) return;
				let yourItem = target.takeItem(source);
				if (!yourItem) return;
				if (!source.setItem(yourItem)) {
					target.item = yourItem.id; // bypass setItem so we don't break choicelock or anything
					return;
				}
				this.add('-item', source, yourItem, '[from] ability: Magician', '[of] ' + target);
			}
		},
		id: "magician",
		name: "Magician",
		rating: 1.5,
		num: 170,
	},
	"magmaarmor": {
		shortDesc: "This Pokemon cannot be frozen. Gaining this Ability while frozen cures it.",
		onUpdate(pokemon) {
			if (pokemon.status === 'frz') {
				this.add('-activate', pokemon, 'ability: Magma Armor');
				pokemon.cureStatus();
			}
		},
		onImmunity(type, pokemon) {
			if (type === 'frz') return false;
		},
		id: "magmaarmor",
		name: "Magma Armor",
		rating: 0.5,
		num: 40,
	},
	"magnetpull": {
		desc: "Prevents adjacent opposing Steel-type Pokemon from choosing to switch out unless they are immune to trapping.",
		shortDesc: "Prevents adjacent Steel-type foes from choosing to switch.",
		onFoeTrapPokemon(pokemon) {
			if (pokemon.hasType('Steel') && this.isAdjacent(pokemon, this.effectData.target)) {
				pokemon.tryTrap(true);
			}
		},
		onFoeMaybeTrapPokemon(pokemon, source) {
			if (!source) source = this.effectData.target;
			if (!source || !this.isAdjacent(pokemon, source)) return;
			if (!pokemon.knownType || pokemon.hasType('Steel')) {
				pokemon.maybeTrapped = true;
			}
		},
		id: "magnetpull",
		name: "Magnet Pull",
		rating: 4.5,
		num: 42,
	},
	"marvelscale": {
		desc: "If this Pokemon has a major status condition, its Defense is multiplied by 1.5.",
		shortDesc: "If this Pokemon is statused, its Defense is 1.5x.",
		onModifyDefPriority: 6,
		onModifyDef(def, pokemon) {
			if (pokemon.status) {
				return this.chainModify(1.5);
			}
		},
		id: "marvelscale",
		name: "Marvel Scale",
		rating: 2.5,
		num: 63,
	},
	"megalauncher": {
		desc: "This Pokemon's pulse moves have their power multiplied by 1.5. Heal Pulse restores 3/4 of a target's maximum HP, rounded half down.",
		shortDesc: "This Pokemon's pulse moves have 1.5x power. Heal Pulse heals 3/4 target's max HP.",
		onBasePowerPriority: 8,
		onBasePower(basePower, attacker, defender, move) {
			if (move.flags['pulse']) {
				return this.chainModify(1.5);
			}
		},
		id: "megalauncher",
		name: "Mega Launcher",
		rating: 3.5,
		num: 178,
	},
	"merciless": {
		shortDesc: "This Pokemon's attacks are critical hits if the target is poisoned.",
		onModifyCritRatio(critRatio, source, target) {
			if (target && ['psn', 'tox'].includes(target.status)) return 5;
		},
		id: "merciless",
		name: "Merciless",
		rating: 2,
		num: 196,
	},
	"minus": {
		desc: "If an active ally has this Ability or the Plus Ability, this Pokemon's Special Attack is multiplied by 1.5.",
		shortDesc: "If an active ally has this Ability or the Plus Ability, this Pokemon's Sp. Atk is 1.5x.",
		onModifySpAPriority: 5,
		onModifySpA(spa, pokemon) {
			if (pokemon.side.active.length === 1) {
				return;
			}
			for (const allyActive of pokemon.side.active) {
				if (allyActive && allyActive.position !== pokemon.position && !allyActive.fainted && allyActive.hasAbility(['minus', 'plus'])) {
					return this.chainModify(1.5);
				}
			}
		},
		id: "minus",
		name: "Minus",
		rating: 0,
		num: 58,
	},
	"mistysurge": {
		shortDesc: "On switch-in, this Pokemon summons Misty Terrain.",
		onStart(source) {
			this.field.setTerrain('mistyterrain');
		},
		id: "mistysurge",
		name: "Misty Surge",
		rating: 4,
		num: 228,
	},
	"moldbreaker": {
		shortDesc: "This Pokemon's moves and their effects ignore the Abilities of other Pokemon.",
		onStart(pokemon) {
			this.add('-ability', pokemon, 'Mold Breaker');
		},
		onModifyMove(move) {
			move.ignoreAbility = true;
		},
		id: "moldbreaker",
		name: "Mold Breaker",
		rating: 3.5,
		num: 104,
	},
	"moody": {
		desc: "This Pokemon has a random stat raised by 2 stages and another stat lowered by 1 stage at the end of each turn.",
		shortDesc: "Raises a random stat by 2 and lowers another stat by 1 at the end of each turn.",
		onResidualOrder: 26,
		onResidualSubOrder: 1,
		onResidual(pokemon) {
			let stats = [];
			let boost = {};
			for (let statPlus in pokemon.boosts) {
				// @ts-ignore
				if (pokemon.boosts[statPlus] < 6) {
					stats.push(statPlus);
				}
			}
			let randomStat = stats.length ? this.sample(stats) : "";
			// @ts-ignore
			if (randomStat) boost[randomStat] = 2;

			stats = [];
			for (let statMinus in pokemon.boosts) {
				// @ts-ignore
				if (pokemon.boosts[statMinus] > -6 && statMinus !== randomStat) {
					stats.push(statMinus);
				}
			}
			randomStat = stats.length ? this.sample(stats) : "";
			// @ts-ignore
			if (randomStat) boost[randomStat] = -1;

			this.boost(boost);
		},
		id: "moody",
		name: "Moody",
		rating: 5,
		num: 141,
	},
	"motordrive": {
		desc: "This Pokemon is immune to Electric-type moves and raises its Speed by 1 stage when hit by an Electric-type move.",
		shortDesc: "This Pokemon's Speed is raised 1 stage if hit by an Electric move; Electric immunity.",
		onTryHit(target, source, move) {
			if (target !== source && move.type === 'Electric') {
				if (!this.boost({spe: 1})) {
					this.add('-immune', target, '[from] ability: Motor Drive');
				}
				return null;
			}
		},
		id: "motordrive",
		name: "Motor Drive",
		rating: 3,
		num: 78,
	},
	"moxie": {
		desc: "This Pokemon's Attack is raised by 1 stage if it attacks and knocks out another Pokemon.",
		shortDesc: "This Pokemon's Attack is raised by 1 stage if it attacks and KOes another Pokemon.",
		onSourceFaint(target, source, effect) {
			if (effect && effect.effectType === 'Move') {
				this.boost({atk: 1}, source);
			}
		},
		id: "moxie",
		name: "Moxie",
		rating: 3.5,
		num: 153,
	},
	"multiscale": {
		shortDesc: "If this Pokemon is at full HP, damage taken from attacks is halved.",
		onSourceModifyDamage(damage, source, target, move) {
			if (target.hp >= target.maxhp) {
				this.debug('Multiscale weaken');
				return this.chainModify(0.5);
			}
		},
		id: "multiscale",
		name: "Multiscale",
		rating: 4,
		num: 136,
	},
	"multitype": {
		shortDesc: "If this Pokemon is an Arceus, its type changes to match its held Plate or Z-Crystal.",
		// Multitype's type-changing itself is implemented in statuses.js
		id: "multitype",
		name: "Multitype",
		rating: 4,
		num: 121,
	},
	"mummy": {
		desc: "Pokemon making contact with this Pokemon have their Ability changed to Mummy. Does not affect the Battle Bond, Comatose, Disguise, Multitype, Power Construct, RKS System, Schooling, Shields Down, Stance Change, and Zen Mode Abilities.",
		shortDesc: "Pokemon making contact with this Pokemon have their Ability changed to Mummy.",
		id: "mummy",
		name: "Mummy",
		onAfterDamage(damage, target, source, move) {
			if (source && source !== target && move && move.flags['contact'] && source.ability !== 'mummy') {
				let oldAbility = source.setAbility('mummy', target);
				if (oldAbility) {
					this.add('-activate', target, 'ability: Mummy', this.getAbility(oldAbility).name, '[of] ' + source);
				}
			}
		},
		onBasePower(basePower, pokemon, target, move) {
			if (move.multihitType === 'parentalbond' && move.hit > 1) return this.chainModify(0.25);
		},
		rating: 2.5,
		num: 152,
	},
	"naturalcure": {
		shortDesc: "This Pokemon has its major status condition cured when it switches out.",
		onCheckShow(pokemon) {
			// This is complicated
			// For the most part, in-game, it's obvious whether or not Natural Cure activated,
			// since you can see how many of your opponent's pokemon are statused.
			// The only ambiguous situation happens in Doubles/Triples, where multiple pokemon
			// that could have Natural Cure switch out, but only some of them get cured.
			if (pokemon.side.active.length === 1) return;
			if (pokemon.showCure === true || pokemon.showCure === false) return;

			let cureList = [];
			let noCureCount = 0;
			for (const curPoke of pokemon.side.active) {
				// pokemon not statused
				if (!curPoke || !curPoke.status) {
					// this.add('-message', "" + curPoke + " skipped: not statused or doesn't exist");
					continue;
				}
				if (curPoke.showCure) {
					// this.add('-message', "" + curPoke + " skipped: Natural Cure already known");
					continue;
				}
				let template = this.getTemplate(curPoke.species);
				// pokemon can't get Natural Cure
				if (Object.values(template.abilities).indexOf('Natural Cure') < 0) {
					// this.add('-message', "" + curPoke + " skipped: no Natural Cure");
					continue;
				}
				// pokemon's ability is known to be Natural Cure
				if (!template.abilities['1'] && !template.abilities['H']) {
					// this.add('-message', "" + curPoke + " skipped: only one ability");
					continue;
				}
				// pokemon isn't switching this turn
				if (curPoke !== pokemon && !this.willSwitch(curPoke)) {
					// this.add('-message', "" + curPoke + " skipped: not switching");
					continue;
				}

				if (curPoke.hasAbility('naturalcure')) {
					// this.add('-message', "" + curPoke + " confirmed: could be Natural Cure (and is)");
					cureList.push(curPoke);
				} else {
					// this.add('-message', "" + curPoke + " confirmed: could be Natural Cure (but isn't)");
					noCureCount++;
				}
			}

			if (!cureList.length || !noCureCount) {
				// It's possible to know what pokemon were cured
				for (const pokemon of cureList) {
					pokemon.showCure = true;
				}
			} else {
				// It's not possible to know what pokemon were cured

				// Unlike a -hint, this is real information that battlers need, so we use a -message
				this.add('-message', "(" + cureList.length + " of " + pokemon.side.name + "'s pokemon " + (cureList.length === 1 ? "was" : "were") + " cured by Natural Cure.)");

				for (const pokemon of cureList) {
					pokemon.showCure = false;
				}
			}
		},
		onSwitchOut(pokemon) {
			if (!pokemon.status) return;

			// if pokemon.showCure is undefined, it was skipped because its ability
			// is known
			if (pokemon.showCure === undefined) pokemon.showCure = true;

			if (pokemon.showCure) this.add('-curestatus', pokemon, pokemon.status, '[from] ability: Natural Cure');
			pokemon.setStatus('');

			// only reset .showCure if it's false
			// (once you know a Pokemon has Natural Cure, its cures are always known)
			if (!pokemon.showCure) pokemon.showCure = undefined;
		},
		id: "naturalcure",
		name: "Natural Cure",
		rating: 3.5,
		num: 30,
	},
	"neuroforce": {
		shortDesc: "This Pokemon's attacks that are super effective against the target do 1.25x damage.",
		onModifyDamage(damage, source, target, move) {
			if (move && target.getMoveHitData(move).typeMod > 0) {
				return this.chainModify([0x1400, 0x1000]);
			}
		},
		id: "neuroforce",
		name: "Neuroforce",
		rating: 3,
		num: 233,
	},
	"noguard": {
		shortDesc: "Every move used by or against this Pokemon will always hit.",
		onAnyAccuracy(accuracy, target, source, move) {
			if (move && (source === this.effectData.target || target === this.effectData.target)) {
				return true;
			}
			return accuracy;
		},
		id: "noguard",
		name: "No Guard",
		rating: 4,
		num: 99,
	},
	"normalize": {
		desc: "This Pokemon's moves are changed to be Normal type and have their power multiplied by 1.2. This effect comes before other effects that change a move's type.",
		shortDesc: "This Pokemon's moves are changed to be Normal type and have 1.2x power.",
		onModifyMovePriority: 1,
		onModifyMove(move, pokemon) {
			if (!(move.isZ && move.category !== 'Status') && !['hiddenpower', 'judgment', 'multiattack', 'naturalgift', 'revelationdance', 'struggle', 'technoblast', 'weatherball'].includes(move.id)) {
				move.type = 'Normal';
				move.normalizeBoosted = true;
			}
		},
		onBasePowerPriority: 8,
		onBasePower(basePower, pokemon, target, move) {
			if (move.normalizeBoosted) return this.chainModify([0x1333, 0x1000]);
		},
		id: "normalize",
		name: "Normalize",
		rating: -1,
		num: 96,
	},
	"oblivious": {
		desc: "This Pokemon cannot be infatuated or taunted. Gaining this Ability while affected cures it.",
		shortDesc: "This Pokemon cannot be infatuated or taunted. Gaining this Ability cures it.",
		onUpdate(pokemon) {
			if (pokemon.volatiles['attract']) {
				this.add('-activate', pokemon, 'ability: Oblivious');
				pokemon.removeVolatile('attract');
				this.add('-end', pokemon, 'move: Attract', '[from] ability: Oblivious');
			}
			if (pokemon.volatiles['taunt']) {
				this.add('-activate', pokemon, 'ability: Oblivious');
				pokemon.removeVolatile('taunt');
				// Taunt's volatile already sends the -end message when removed
			}
		},
		onImmunity(type, pokemon) {
			if (type === 'attract') return false;
		},
		onTryHit(pokemon, target, move) {
			if (move.id === 'attract' || move.id === 'captivate' || move.id === 'taunt') {
				this.add('-immune', pokemon, '[from] ability: Oblivious');
				return null;
			}
		},
		id: "oblivious",
		name: "Oblivious",
		rating: 1,
		num: 12,
	},
	"overcoat": {
		shortDesc: "This Pokemon is immune to powder moves and damage from Sandstorm or Hail.",
		onImmunity(type, pokemon) {
			if (type === 'sandstorm' || type === 'hail' || type === 'powder') return false;
		},
		onTryHitPriority: 1,
		onTryHit(target, source, move) {
			if (move.flags['powder'] && target !== source && this.getImmunity('powder', target)) {
				this.add('-immune', target, '[from] ability: Overcoat');
				return null;
			}
		},
		id: "overcoat",
		name: "Overcoat",
		rating: 2.5,
		num: 142,
	},
	"overgrow": {
		desc: "When this Pokemon has 1/3 or less of its maximum HP, rounded down, its attacking stat is multiplied by 1.5 while using a Grass-type attack.",
		shortDesc: "At 1/3 or less of its max HP, this Pokemon's attacking stat is 1.5x with Grass attacks.",
		onModifyAtkPriority: 5,
		onModifyAtk(atk, attacker, defender, move) {
			if (move.type === 'Grass' && attacker.hp <= attacker.maxhp / 3) {
				this.debug('Overgrow boost');
				return this.chainModify(1.5);
			}
		},
		onModifySpAPriority: 5,
		onModifySpA(atk, attacker, defender, move) {
			if (move.type === 'Grass' && attacker.hp <= attacker.maxhp / 3) {
				this.debug('Overgrow boost');
				return this.chainModify(1.5);
			}
		},
		id: "overgrow",
		name: "Overgrow",
		rating: 2.5,
		num: 65,
	},
	"owntempo": {
		shortDesc: "This Pokemon cannot be confused. Gaining this Ability while confused cures it.",
		onUpdate(pokemon) {
			if (pokemon.volatiles['confusion']) {
				this.add('-activate', pokemon, 'ability: Own Tempo');
				pokemon.removeVolatile('confusion');
			}
		},
		onTryAddVolatile(status, pokemon) {
			if (status.id === 'confusion') return null;
		},
		onHit(target, source, move) {
			if (move && move.volatileStatus === 'confusion') {
				this.add('-immune', target, 'confusion', '[from] ability: Own Tempo');
			}
		},
		id: "owntempo",
		name: "Own Tempo",
		rating: 1.5,
		num: 20,
	},
	"parentalbond": {
		desc: "This Pokemon's damaging moves become multi-hit moves that hit twice. The second hit has its damage quartered. Does not affect multi-hit moves or moves that have multiple targets.",
		shortDesc: "This Pokemon's damaging moves hit twice. The second hit has its damage quartered.",
		onPrepareHit(source, target, move) {
			if (['iceball', 'rollout'].includes(move.id)) return;
			if (move.category !== 'Status' && !move.selfdestruct && !move.multihit && !move.flags['charge'] && !move.spreadHit && !move.isZ) {
				move.multihit = 2;
				move.multihitType = 'parentalbond';
			}
		},
		onBasePowerPriority: 8,
		onBasePower(basePower, pokemon, target, move) {
			if (move.multihitType === 'parentalbond' && move.hit > 1) return this.chainModify(0.25);
		},
		onSourceModifySecondaries(secondaries, target, source, move) {
			if (move.multihitType === 'parentalbond' && move.id === 'secretpower' && move.hit < 2) {
				// hack to prevent accidentally suppressing King's Rock/Razor Fang
				return secondaries.filter(effect => effect.volatileStatus === 'flinch');
			}
		},
		id: "parentalbond",
		name: "Parental Bond",
		rating: 5,
		num: 184,
	},
	"pickup": {
		shortDesc: "If this Pokemon has no item, it finds one used by an adjacent Pokemon this turn.",
		onResidualOrder: 26,
		onResidualSubOrder: 1,
		onResidual(pokemon) {
			if (pokemon.item) return;
			let pickupTargets = [];
			for (const target of this.getAllActive()) {
				if (target.lastItem && target.usedItemThisTurn && this.isAdjacent(pokemon, target)) {
					pickupTargets.push(target);
				}
			}
			if (!pickupTargets.length) return;
			let randomTarget = this.sample(pickupTargets);
			pokemon.setItem(randomTarget.lastItem);
			randomTarget.lastItem = '';
			let item = pokemon.getItem();
			this.add('-item', pokemon, item, '[from] ability: Pickup');
		},
		id: "pickup",
		name: "Pickup",
		rating: 0.5,
		num: 53,
	},
	"pickpocket": {
		desc: "If this Pokemon has no item, it steals the item off a Pokemon that makes contact with it. This effect applies after all hits from a multi-hit move; Sheer Force prevents it from activating if the move has a secondary effect.",
		shortDesc: "If this Pokemon has no item, it steals the item off a Pokemon making contact with it.",
		onAfterMoveSecondary(target, source, move) {
			if (source && source !== target && move && move.flags['contact']) {
				if (target.item) {
					return;
				}
				let yourItem = source.takeItem(target);
				if (!yourItem) {
					return;
				}
				if (!target.setItem(yourItem)) {
					source.item = yourItem.id;
					return;
				}
				this.add('-enditem', source, yourItem, '[silent]', '[from] ability: Pickpocket', '[of] ' + source);
				this.add('-item', target, yourItem, '[from] ability: Pickpocket', '[of] ' + source);
			}
		},
		id: "pickpocket",
		name: "Pickpocket",
		rating: 1.5,
		num: 124,
	},
	"pixilate": {
		desc: "This Pokemon's Normal-type moves become Fairy-type moves and have their power multiplied by 1.2. This effect comes after other effects that change a move's type, but before Ion Deluge and Electrify's effects.",
		shortDesc: "This Pokemon's Normal-type moves become Fairy type and have 1.2x power.",
		onModifyMovePriority: -1,
		onModifyMove(move, pokemon) {
			if (move.type === 'Normal' && !['judgment', 'multiattack', 'naturalgift', 'revelationdance', 'technoblast', 'weatherball'].includes(move.id) && !(move.isZ && move.category !== 'Status')) {
				move.type = 'Fairy';
				move.pixilateBoosted = true;
			}
		},
		onBasePowerPriority: 8,
		onBasePower(basePower, pokemon, target, move) {
			if (move.pixilateBoosted) return this.chainModify([0x1333, 0x1000]);
		},
		id: "pixilate",
		name: "Pixilate",
		rating: 4,
		num: 182,
	},
	"plus": {
		desc: "If an active ally has this Ability or the Minus Ability, this Pokemon's Special Attack is multiplied by 1.5.",
		shortDesc: "If an active ally has this Ability or the Minus Ability, this Pokemon's Sp. Atk is 1.5x.",
		onModifySpAPriority: 5,
		onModifySpA(spa, pokemon) {
			if (pokemon.side.active.length === 1) {
				return;
			}
			for (const allyActive of pokemon.side.active) {
				if (allyActive && allyActive.position !== pokemon.position && !allyActive.fainted && allyActive.hasAbility(['minus', 'plus'])) {
					return this.chainModify(1.5);
				}
			}
		},
		id: "plus",
		name: "Plus",
		rating: 0,
		num: 57,
	},
	"poisonheal": {
		desc: "If this Pokemon is poisoned, it restores 1/8 of its maximum HP, rounded down, at the end of each turn instead of losing HP.",
		shortDesc: "This Pokemon is healed by 1/8 of its max HP each turn when poisoned; no HP loss.",
		onDamagePriority: 1,
		onDamage(damage, target, source, effect) {
			if (effect.id === 'psn' || effect.id === 'tox') {
				this.heal(target.maxhp / 8);
				return false;
			}
		},
		id: "poisonheal",
		name: "Poison Heal",
		rating: 4,
		num: 90,
	},
	"poisonpoint": {
		shortDesc: "30% chance a Pokemon making contact with this Pokemon will be poisoned.",
		onAfterDamage(damage, target, source, move) {
			if (move && move.flags['contact']) {
				if (this.randomChance(3, 10)) {
					source.trySetStatus('psn', target);
				}
			}
		},
		id: "poisonpoint",
		name: "Poison Point",
		rating: 2,
		num: 38,
	},
	"poisontouch": {
		shortDesc: "This Pokemon's contact moves have a 30% chance of poisoning.",
		// upokecenter says this is implemented as an added secondary effect
		onModifyMove(move) {
			if (!move || !move.flags['contact']) return;
			if (!move.secondaries) {
				move.secondaries = [];
			}
			move.secondaries.push({
				chance: 30,
				status: 'psn',
				ability: this.getAbility('poisontouch'),
			});
		},
		id: "poisontouch",
		name: "Poison Touch",
		rating: 2,
		num: 143,
	},
	"powerconstruct": {
		desc: "If this Pokemon is a Zygarde in its 10% or 50% Forme, it changes to Complete Forme when it has 1/2 or less of its maximum HP at the end of the turn.",
		shortDesc: "If Zygarde 10%/50%, changes to Complete if at 1/2 max HP or less at end of turn.",
		onResidualOrder: 27,
		onResidual(pokemon) {
			if (pokemon.baseTemplate.baseSpecies !== 'Zygarde' || pokemon.transformed || !pokemon.hp) return;
			if (pokemon.template.speciesid === 'zygardecomplete' || pokemon.hp > pokemon.maxhp / 2) return;
			this.add('-activate', pokemon, 'ability: Power Construct');
			pokemon.formeChange('Zygarde-Complete', this.effect, true);
			let newHP = Math.floor(Math.floor(2 * pokemon.template.baseStats['hp'] + pokemon.set.ivs['hp'] + Math.floor(pokemon.set.evs['hp'] / 4) + 100) * pokemon.level / 100 + 10);
			pokemon.hp = newHP - (pokemon.maxhp - pokemon.hp);
			pokemon.maxhp = newHP;
			this.add('-heal', pokemon, pokemon.getHealth, '[silent]');
		},
		id: "powerconstruct",
		name: "Power Construct",
		rating: 5,
		num: 211,
	},
	"powerofalchemy": {
		desc: "This Pokemon copies the Ability of an ally that faints. Abilities that cannot be copied are Flower Gift, Forecast, Illusion, Imposter, Multitype, Stance Change, Trace, Wonder Guard, and Zen Mode.",
		shortDesc: "This Pokemon copies the Ability of an ally that faints.",
		onAllyFaint(target) {
			if (!this.effectData.target.hp) return;
			let ability = this.getAbility(target.ability);
			let bannedAbilities = ['battlebond', 'comatose', 'disguise', 'flowergift', 'forecast', 'illusion', 'imposter', 'multitype', 'powerconstruct', 'powerofalchemy', 'receiver', 'rkssystem', 'schooling', 'shieldsdown', 'stancechange', 'trace', 'wonderguard', 'zenmode'];
			if (bannedAbilities.includes(target.ability)) return;
			this.add('-ability', this.effectData.target, ability, '[from] ability: Power of Alchemy', '[of] ' + target);
			this.effectData.target.setAbility(ability);
		},
		id: "powerofalchemy",
		name: "Power of Alchemy",
		rating: 0,
		num: 223,
	},
	"prankster": {
		shortDesc: "This Pokemon's Status moves have priority raised by 1, but Dark types are immune.",
		onModifyPriority(priority, pokemon, target, move) {
			if (move && move.category === 'Status') {
				move.pranksterBoosted = true;
				return priority + 1;
			}
		},
		id: "prankster",
		name: "Prankster",
		rating: 4,
		num: 158,
	},
	"pressure": {
		desc: "If this Pokemon is the target of an opposing Pokemon's move, that move loses one additional PP.",
		shortDesc: "If this Pokemon is the target of a foe's move, that move loses one additional PP.",
		onStart(pokemon) {
			this.add('-ability', pokemon, 'Pressure');
		},
		onDeductPP(target, source) {
			if (target.side === source.side) return;
			return 1;
		},
		id: "pressure",
		name: "Pressure",
		rating: 2.5,
		num: 46,
	},
	"primordialsea": {
		desc: "On switch-in, the weather becomes heavy rain that prevents damaging Fire-type moves from executing, in addition to all the effects of Rain Dance. This weather remains in effect until this Ability is no longer active for any Pokemon, or the weather is changed by Delta Stream or Desolate Land.",
		shortDesc: "On switch-in, heavy rain begins until this Ability is not active in battle.",
		onStart(source) {
			this.field.setWeather('primordialsea');
		},
		onAnySetWeather(target, source, weather) {
			if (this.field.getWeather().id === 'primordialsea' && !['desolateland', 'primordialsea', 'deltastream'].includes(weather.id)) return false;
		},
		onEnd(pokemon) {
			if (this.field.weatherData.source !== pokemon) return;
			for (const target of this.getAllActive()) {
				if (target === pokemon) continue;
				if (target.hasAbility('primordialsea')) {
					this.field.weatherData.source = target;
					return;
				}
			}
			this.field.clearWeather();
		},
		id: "primordialsea",
		name: "Primordial Sea",
		rating: 5,
		num: 189,
	},
	"prismarmor": {
		desc: "This Pokemon receives 3/4 damage from supereffective attacks. Moongeist Beam, Sunsteel Strike, and the Mold Breaker, Teravolt, and Turboblaze Abilities cannot ignore this Ability.",
		shortDesc: "This Pokemon receives 3/4 damage from supereffective attacks.",
		onSourceModifyDamage(damage, source, target, move) {
			if (target.getMoveHitData(move).typeMod > 0) {
				this.debug('Prism Armor neutralize');
				return this.chainModify(0.75);
			}
		},
		isUnbreakable: true,
		id: "prismarmor",
		name: "Prism Armor",
		rating: 3,
		num: 232,
	},
	"protean": {
		desc: "This Pokemon's type changes to match the type of the move it is about to use. This effect comes after all effects that change a move's type.",
		shortDesc: "This Pokemon's type changes to match the type of the move it is about to use.",
		onPrepareHit(source, target, move) {
			if (move.hasBounced) return;
			let type = move.type;
			if (type && type !== '???' && source.getTypes().join() !== type) {
				if (!source.setType(type)) return;
				this.add('-start', source, 'typechange', type, '[from] ability: Protean');
			}
		},
		id: "protean",
		name: "Protean",
		rating: 4,
		num: 168,
	},
	"psychicsurge": {
		shortDesc: "On switch-in, this Pokemon summons Psychic Terrain.",
		onStart(source) {
			this.field.setTerrain('psychicterrain');
		},
		id: "psychicsurge",
		name: "Psychic Surge",
		rating: 4,
		num: 227,
	},
	"purepower": {
		shortDesc: "This Pokemon's Attack is doubled.",
		onModifyAtkPriority: 5,
		onModifyAtk(atk) {
			return this.chainModify(2);
		},
		id: "purepower",
		name: "Pure Power",
		rating: 5,
		num: 74,
	},
	"queenlymajesty": {
		desc: "While this Pokemon is active, priority moves from opposing Pokemon targeted at allies are prevented from having an effect.",
		shortDesc: "While this Pokemon is active, allies are protected from opposing priority moves.",
		onFoeTryMove(target, source, effect) {
			if ((source.side === this.effectData.target.side || effect.id === 'perishsong') && effect.priority > 0.1 && effect.target !== 'foeSide') {
				this.attrLastMove('[still]');
				this.add('cant', this.effectData.target, 'ability: Queenly Majesty', effect, '[of] ' + target);
				return false;
			}
		},
		id: "queenlymajesty",
		name: "Queenly Majesty",
		rating: 3,
		num: 214,
	},
	"quickfeet": {
		desc: "If this Pokemon has a major status condition, its Speed is multiplied by 1.5; the Speed drop from paralysis is ignored.",
		shortDesc: "If this Pokemon is statused, its Speed is 1.5x; ignores Speed drop from paralysis.",
		onModifySpe(spe, pokemon) {
			if (pokemon.status) {
				return this.chainModify(1.5);
			}
		},
		id: "quickfeet",
		name: "Quick Feet",
		rating: 2.5,
		num: 95,
	},
	"raindish": {
		desc: "If Rain Dance is active, this Pokemon restores 1/16 of its maximum HP, rounded down, at the end of each turn.",
		shortDesc: "If Rain Dance is active, this Pokemon heals 1/16 of its max HP each turn.",
		onWeather(target, source, effect) {
			if (effect.id === 'raindance' || effect.id === 'primordialsea') {
				this.heal(target.maxhp / 16);
			}
		},
		id: "raindish",
		name: "Rain Dish",
		rating: 1.5,
		num: 44,
	},
	"rattled": {
		desc: "This Pokemon's Speed is raised by 1 stage if hit by a Bug-, Dark-, or Ghost-type attack.",
		shortDesc: "This Pokemon's Speed is raised 1 stage if hit by a Bug-, Dark-, or Ghost-type attack.",
		onAfterDamage(damage, target, source, effect) {
			if (effect && (effect.type === 'Dark' || effect.type === 'Bug' || effect.type === 'Ghost')) {
				this.boost({spe: 1});
			}
		},
		id: "rattled",
		name: "Rattled",
		rating: 1.5,
		num: 155,
	},
	"receiver": {
		desc: "This Pokemon copies the Ability of an ally that faints. Abilities that cannot be copied are Flower Gift, Forecast, Illusion, Imposter, Multitype, Stance Change, Trace, Wonder Guard, and Zen Mode.",
		shortDesc: "This Pokemon copies the Ability of an ally that faints.",
		onAllyFaint(target) {
			if (!this.effectData.target.hp) return;
			let ability = this.getAbility(target.ability);
			let bannedAbilities = ['battlebond', 'comatose', 'disguise', 'flowergift', 'forecast', 'illusion', 'imposter', 'multitype', 'powerconstruct', 'powerofalchemy', 'receiver', 'rkssystem', 'schooling', 'shieldsdown', 'stancechange', 'trace', 'wonderguard', 'zenmode'];
			if (bannedAbilities.includes(target.ability)) return;
			this.add('-ability', this.effectData.target, ability, '[from] ability: Receiver', '[of] ' + target);
			this.effectData.target.setAbility(ability);
		},
		id: "receiver",
		name: "Receiver",
		rating: 0,
		num: 222,
	},
	"reckless": {
		desc: "This Pokemon's attacks with recoil or crash damage have their power multiplied by 1.2. Does not affect Struggle.",
		shortDesc: "This Pokemon's attacks with recoil or crash damage have 1.2x power; not Struggle.",
		onBasePowerPriority: 8,
		onBasePower(basePower, attacker, defender, move) {
			if (move.recoil || move.hasCustomRecoil) {
				this.debug('Reckless boost');
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		id: "reckless",
		name: "Reckless",
		rating: 3,
		num: 120,
	},
	"refrigerate": {
		desc: "This Pokemon's Normal-type moves become Ice-type moves and have their power multiplied by 1.2. This effect comes after other effects that change a move's type, but before Ion Deluge and Electrify's effects.",
		shortDesc: "This Pokemon's Normal-type moves become Ice type and have 1.2x power.",
		onModifyMovePriority: -1,
		onModifyMove(move, pokemon) {
			if (move.type === 'Normal' && !['judgment', 'multiattack', 'naturalgift', 'revelationdance', 'technoblast', 'weatherball'].includes(move.id) && !(move.isZ && move.category !== 'Status')) {
				move.type = 'Ice';
				move.refrigerateBoosted = true;
			}
		},
		onBasePowerPriority: 8,
		onBasePower(basePower, pokemon, target, move) {
			if (move.refrigerateBoosted) return this.chainModify([0x1333, 0x1000]);
		},
		id: "refrigerate",
		name: "Refrigerate",
		rating: 4,
		num: 174,
	},
	"regenerator": {
		shortDesc: "This Pokemon restores 1/3 of its maximum HP, rounded down, when it switches out.",
		onSwitchOut(pokemon) {
			pokemon.heal(pokemon.maxhp / 3);
		},
		id: "regenerator",
		name: "Regenerator",
		rating: 4,
		num: 144,
	},
	"rivalry": {
		desc: "This Pokemon's attacks have their power multiplied by 1.25 against targets of the same gender or multiplied by 0.75 against targets of the opposite gender. There is no modifier if either this Pokemon or the target is genderless.",
		shortDesc: "This Pokemon's attacks do 1.25x on same gender targets; 0.75x on opposite gender.",
		onBasePowerPriority: 8,
		onBasePower(basePower, attacker, defender, move) {
			if (attacker.gender && defender.gender) {
				if (attacker.gender === defender.gender) {
					this.debug('Rivalry boost');
					return this.chainModify(1.25);
				} else {
					this.debug('Rivalry weaken');
					return this.chainModify(0.75);
				}
			}
		},
		id: "rivalry",
		name: "Rivalry",
		rating: 0.5,
		num: 79,
	},
	"rkssystem": {
		shortDesc: "If this Pokemon is a Silvally, its type changes to match its held Memory.",
		// RKS System's type-changing itself is implemented in statuses.js
		id: "rkssystem",
		name: "RKS System",
		rating: 4,
		num: 225,
	},
	"rockhead": {
		desc: "This Pokemon does not take recoil damage besides Struggle, Life Orb, and crash damage.",
		shortDesc: "This Pokemon does not take recoil damage besides Struggle/Life Orb/crash damage.",
		onDamage(damage, target, source, effect) {
			if (effect.id === 'recoil') {
				if (!this.activeMove) throw new Error("Battle.activeMove is null");
				if (this.activeMove.id !== 'struggle') return null;
			}
		},
		id: "rockhead",
		name: "Rock Head",
		rating: 2.5,
		num: 69,
	},
	"roughskin": {
		desc: "Pokemon making contact with this Pokemon lose 1/8 of their maximum HP, rounded down.",
		shortDesc: "Pokemon making contact with this Pokemon lose 1/8 of their max HP.",
		onAfterDamageOrder: 1,
		onAfterDamage(damage, target, source, move) {
			if (source && source !== target && move && move.flags['contact']) {
				this.damage(source.maxhp / 8, source, target);
			}
		},
		id: "roughskin",
		name: "Rough Skin",
		rating: 3,
		num: 24,
	},
	"runaway": {
		shortDesc: "No competitive use.",
		id: "runaway",
		name: "Run Away",
		rating: 0,
		num: 50,
	},
	"sandforce": {
		desc: "If Sandstorm is active, this Pokemon's Ground-, Rock-, and Steel-type attacks have their power multiplied by 1.3. This Pokemon takes no damage from Sandstorm.",
		shortDesc: "This Pokemon's Ground/Rock/Steel attacks do 1.3x in Sandstorm; immunity to it.",
		onBasePowerPriority: 8,
		onBasePower(basePower, attacker, defender, move) {
			if (this.field.isWeather('sandstorm')) {
				if (move.type === 'Rock' || move.type === 'Ground' || move.type === 'Steel') {
					this.debug('Sand Force boost');
					return this.chainModify([0x14CD, 0x1000]);
				}
			}
		},
		onImmunity(type, pokemon) {
			if (type === 'sandstorm') return false;
		},
		id: "sandforce",
		name: "Sand Force",
		rating: 2,
		num: 159,
	},
	"sandrush": {
		desc: "If Sandstorm is active, this Pokemon's Speed is doubled. This Pokemon takes no damage from Sandstorm.",
		shortDesc: "If Sandstorm is active, this Pokemon's Speed is doubled; immunity to Sandstorm.",
		onModifySpe(spe, pokemon) {
			if (this.field.isWeather('sandstorm')) {
				return this.chainModify(2);
			}
		},
		onImmunity(type, pokemon) {
			if (type === 'sandstorm') return false;
		},
		id: "sandrush",
		name: "Sand Rush",
		rating: 3,
		num: 146,
	},
	"sandstream": {
		shortDesc: "On switch-in, this Pokemon summons Sandstorm.",
		onStart(source) {
			this.field.setWeather('sandstorm');
		},
		id: "sandstream",
		name: "Sand Stream",
		rating: 4.5,
		num: 45,
	},
	"sandveil": {
		desc: "If Sandstorm is active, this Pokemon's evasiveness is multiplied by 1.25. This Pokemon takes no damage from Sandstorm.",
		shortDesc: "If Sandstorm is active, this Pokemon's evasiveness is 1.25x; immunity to Sandstorm.",
		onImmunity(type, pokemon) {
			if (type === 'sandstorm') return false;
		},
		onModifyAccuracy(accuracy) {
			if (typeof accuracy !== 'number') return;
			if (this.field.isWeather('sandstorm')) {
				this.debug('Sand Veil - decreasing accuracy');
				return accuracy * 0.8;
			}
		},
		id: "sandveil",
		name: "Sand Veil",
		rating: 1.5,
		num: 8,
	},
	"sapsipper": {
		desc: "This Pokemon is immune to Grass-type moves and raises its Attack by 1 stage when hit by a Grass-type move.",
		shortDesc: "This Pokemon's Attack is raised 1 stage if hit by a Grass move; Grass immunity.",
		onTryHitPriority: 1,
		onTryHit(target, source, move) {
			if (target !== source && move.type === 'Grass') {
				if (!this.boost({atk: 1})) {
					this.add('-immune', target, '[from] ability: Sap Sipper');
				}
				return null;
			}
		},
		onAllyTryHitSide(target, source, move) {
			if (target === this.effectData.target || target.side !== source.side) return;
			if (move.type === 'Grass') {
				this.boost({atk: 1}, this.effectData.target);
			}
		},
		id: "sapsipper",
		name: "Sap Sipper",
		rating: 3.5,
		num: 157,
	},
	"schooling": {
		desc: "On switch-in, if this Pokemon is a Wishiwashi that is level 20 or above and has more than 1/4 of its maximum HP left, it changes to School Form. If it is in School Form and its HP drops to 1/4 of its maximum HP or less, it changes to Solo Form at the end of the turn. If it is in Solo Form and its HP is greater than 1/4 its maximum HP at the end of the turn, it changes to School Form.",
		shortDesc: "If user is Wishiwashi, changes to School Form if it has > 1/4 max HP, else Solo Form.",
		onStart(pokemon) {
			if (pokemon.baseTemplate.baseSpecies !== 'Wishiwashi' || pokemon.level < 20 || pokemon.transformed) return;
			if (pokemon.hp > pokemon.maxhp / 4) {
				if (pokemon.template.speciesid === 'wishiwashi') {
					pokemon.formeChange('Wishiwashi-School');
				}
			} else {
				if (pokemon.template.speciesid === 'wishiwashischool') {
					pokemon.formeChange('Wishiwashi');
				}
			}
		},
		onResidualOrder: 27,
		onResidual(pokemon) {
			if (pokemon.baseTemplate.baseSpecies !== 'Wishiwashi' || pokemon.level < 20 || pokemon.transformed || !pokemon.hp) return;
			if (pokemon.hp > pokemon.maxhp / 4) {
				if (pokemon.template.speciesid === 'wishiwashi') {
					pokemon.formeChange('Wishiwashi-School');
				}
			} else {
				if (pokemon.template.speciesid === 'wishiwashischool') {
					pokemon.formeChange('Wishiwashi');
				}
			}
		},
		id: "schooling",
		name: "Schooling",
		rating: 3,
		num: 208,
	},
	"scrappy": {
		shortDesc: "This Pokemon can hit Ghost types with Normal- and Fighting-type moves.",
		onModifyMovePriority: -5,
		onModifyMove(move) {
			if (!move.ignoreImmunity) move.ignoreImmunity = {};
			if (move.ignoreImmunity !== true) {
				move.ignoreImmunity['Fighting'] = true;
				move.ignoreImmunity['Normal'] = true;
			}
		},
		id: "scrappy",
		name: "Scrappy",
		rating: 3,
		num: 113,
	},
	"serenegrace": {
		shortDesc: "This Pokemon's moves have their secondary effect chance doubled.",
		onModifyMovePriority: -2,
		onModifyMove(move) {
			if (move.secondaries) {
				this.debug('doubling secondary chance');
				for (const secondary of move.secondaries) {
					if (secondary.chance) secondary.chance *= 2;
				}
			}
		},
		id: "serenegrace",
		name: "Serene Grace",
		rating: 4,
		num: 32,
	},
	"shadowshield": {
		desc: "If this Pokemon is at full HP, damage taken from attacks is halved. Moongeist Beam, Sunsteel Strike, and the Mold Breaker, Teravolt, and Turboblaze Abilities cannot ignore this Ability.",
		shortDesc: "If this Pokemon is at full HP, damage taken from attacks is halved.",
		onSourceModifyDamage(damage, source, target, move) {
			if (target.hp >= target.maxhp) {
				this.debug('Shadow Shield weaken');
				return this.chainModify(0.5);
			}
		},
		isUnbreakable: true,
		id: "shadowshield",
		name: "Shadow Shield",
		rating: 4,
		num: 231,
	},
	"shadowtag": {
		desc: "Prevents adjacent opposing Pokemon from choosing to switch out unless they are immune to trapping or also have this Ability.",
		shortDesc: "Prevents adjacent foes from choosing to switch unless they also have this Ability.",
		onFoeTrapPokemon(pokemon) {
			if (!pokemon.hasAbility('shadowtag') && this.isAdjacent(pokemon, this.effectData.target)) {
				pokemon.tryTrap(true);
			}
		},
		onFoeMaybeTrapPokemon(pokemon, source) {
			if (!source) source = this.effectData.target;
			if (!source || !this.isAdjacent(pokemon, source)) return;
			if (!pokemon.hasAbility('shadowtag')) {
				pokemon.maybeTrapped = true;
			}
		},
		id: "shadowtag",
		name: "Shadow Tag",
		rating: 5,
		num: 23,
	},
	"shedskin": {
		desc: "This Pokemon has a 33% chance to have its major status condition cured at the end of each turn.",
		shortDesc: "This Pokemon has a 33% chance to have its status cured at the end of each turn.",
		onResidualOrder: 5,
		onResidualSubOrder: 1,
		onResidual(pokemon) {
			if (pokemon.hp && pokemon.status && this.randomChance(1, 3)) {
				this.debug('shed skin');
				this.add('-activate', pokemon, 'ability: Shed Skin');
				pokemon.cureStatus();
			}
		},
		id: "shedskin",
		name: "Shed Skin",
		rating: 3.5,
		num: 61,
	},
	"sheerforce": {
		desc: "This Pokemon's attacks with secondary effects have their power multiplied by 1.3, but the secondary effects are removed.",
		shortDesc: "This Pokemon's attacks with secondary effects have 1.3x power; nullifies the effects.",
		onModifyMove(move, pokemon) {
			if (move.secondaries) {
				delete move.secondaries;
				// Technically not a secondary effect, but it is negated
				if (move.id === 'clangoroussoulblaze') delete move.selfBoost;
				// Actual negation of `AfterMoveSecondary` effects implemented in scripts.js
				move.hasSheerForce = true;
			}
		},
		onBasePowerPriority: 8,
		onBasePower(basePower, pokemon, target, move) {
			if (move.hasSheerForce) return this.chainModify([0x14CD, 0x1000]);
		},
		id: "sheerforce",
		name: "Sheer Force",
		rating: 4,
		num: 125,
	},
	"shellarmor": {
		shortDesc: "This Pokemon cannot be struck by a critical hit.",
		onCriticalHit: false,
		id: "shellarmor",
		name: "Shell Armor",
		rating: 1,
		num: 75,
	},
	"shielddust": {
		shortDesc: "This Pokemon is not affected by the secondary effect of another Pokemon's attack.",
		onModifySecondaries(secondaries) {
			this.debug('Shield Dust prevent secondary');
			return secondaries.filter(effect => !!(effect.self || effect.dustproof));
		},
		id: "shielddust",
		name: "Shield Dust",
		rating: 2.5,
		num: 19,
	},
	"shieldsdown": {
		desc: "If this Pokemon is a Minior, it changes to its Core forme if it has 1/2 or less of its maximum HP, and changes to Meteor Form if it has more than 1/2 its maximum HP. This check is done on switch-in and at the end of each turn. While in its Meteor Form, it cannot become affected by major status conditions. Moongeist Beam, Sunsteel Strike, and the Mold Breaker, Teravolt, and Turboblaze Abilities cannot ignore this Ability.",
		shortDesc: "If Minior, switch-in/end of turn it changes to Core at 1/2 max HP or less, else Meteor.",
		onStart(pokemon) {
			if (pokemon.baseTemplate.baseSpecies !== 'Minior' || pokemon.transformed) return;
			if (pokemon.hp > pokemon.maxhp / 2) {
				if (pokemon.template.speciesid === 'minior') {
					pokemon.formeChange('Minior-Meteor');
				}
			} else {
				if (pokemon.template.speciesid !== 'minior') {
					pokemon.formeChange(pokemon.set.species);
				}
			}
		},
		onResidualOrder: 27,
		onResidual(pokemon) {
			if (pokemon.baseTemplate.baseSpecies !== 'Minior' || pokemon.transformed || !pokemon.hp) return;
			if (pokemon.hp > pokemon.maxhp / 2) {
				if (pokemon.template.speciesid === 'minior') {
					pokemon.formeChange('Minior-Meteor');
				}
			} else {
				if (pokemon.template.speciesid !== 'minior') {
					pokemon.formeChange(pokemon.set.species);
				}
			}
		},
		onSetStatus(status, target, source, effect) {
			if (target.template.speciesid !== 'miniormeteor' || target.transformed) return;
			if (!effect || !effect.status) return false;
			this.add('-immune', target, '[from] ability: Shields Down');
			return false;
		},
		onTryAddVolatile(status, target) {
			if (target.template.speciesid !== 'miniormeteor' || target.transformed) return;
			if (status.id !== 'yawn') return;
			this.add('-immune', target, '[from] ability: Shields Down');
			return null;
		},
		isUnbreakable: true,
		id: "shieldsdown",
		name: "Shields Down",
		rating: 3,
		num: 197,
	},
	"simple": {
		shortDesc: "When this Pokemon's stat stages are raised or lowered, the effect is doubled instead.",
		onBoost(boost, target, source, effect) {
			if (effect && effect.id === 'zpower') return;
			for (let i in boost) {
				// @ts-ignore
				boost[i] *= 2;
			}
		},
		id: "simple",
		name: "Simple",
		rating: 4,
		num: 86,
	},
	"skilllink": {
		shortDesc: "This Pokemon's multi-hit attacks always hit the maximum number of times.",
		onModifyMove(move) {
			if (move.multihit && Array.isArray(move.multihit) && move.multihit.length) {
				move.multihit = move.multihit[1];
			}
			if (move.multiaccuracy) {
				delete move.multiaccuracy;
			}
		},
		id: "skilllink",
		name: "Skill Link",
		rating: 3.5,
		num: 92,
	},
	"slowstart": {
		shortDesc: "On switch-in, this Pokemon's Attack and Speed are halved for 5 turns.",
		onStart(pokemon) {
			pokemon.addVolatile('slowstart');
		},
		onEnd(pokemon) {
			delete pokemon.volatiles['slowstart'];
			this.add('-end', pokemon, 'Slow Start', '[silent]');
		},
		effect: {
			duration: 5,
			onStart(target) {
				this.add('-start', target, 'ability: Slow Start');
			},
			onModifyAtkPriority: 5,
			onModifyAtk(atk, pokemon) {
				return this.chainModify(0.5);
			},
			onModifySpe(spe, pokemon) {
				return this.chainModify(0.5);
			},
			onEnd(target) {
				this.add('-end', target, 'Slow Start');
			},
		},
		id: "slowstart",
		name: "Slow Start",
		rating: -2,
		num: 112,
	},
	"slushrush": {
		shortDesc: "If Hail is active, this Pokemon's Speed is doubled.",
		onModifySpe(spe, pokemon) {
			if (this.field.isWeather('hail')) {
				return this.chainModify(2);
			}
		},
		id: "slushrush",
		name: "Slush Rush",
		rating: 2.5,
		num: 202,
	},
	"sniper": {
		shortDesc: "If this Pokemon strikes with a critical hit, the damage is multiplied by 1.5.",
		onModifyDamage(damage, source, target, move) {
			if (target.getMoveHitData(move).crit) {
				this.debug('Sniper boost');
				return this.chainModify(1.5);
			}
		},
		id: "sniper",
		name: "Sniper",
		rating: 1.5,
		num: 97,
	},
	"snowcloak": {
		desc: "If Hail is active, this Pokemon's evasiveness is multiplied by 1.25. This Pokemon takes no damage from Hail.",
		shortDesc: "If Hail is active, this Pokemon's evasiveness is 1.25x; immunity to Hail.",
		onImmunity(type, pokemon) {
			if (type === 'hail') return false;
		},
		onModifyAccuracy(accuracy) {
			if (typeof accuracy !== 'number') return;
			if (this.field.isWeather('hail')) {
				this.debug('Snow Cloak - decreasing accuracy');
				return accuracy * 0.8;
			}
		},
		id: "snowcloak",
		name: "Snow Cloak",
		rating: 1.5,
		num: 81,
	},
	"snowwarning": {
		shortDesc: "On switch-in, this Pokemon summons Hail.",
		onStart(source) {
			this.field.setWeather('hail');
		},
		id: "snowwarning",
		name: "Snow Warning",
		rating: 4,
		num: 117,
	},
	"solarpower": {
		desc: "If Sunny Day is active, this Pokemon's Special Attack is multiplied by 1.5 and it loses 1/8 of its maximum HP, rounded down, at the end of each turn.",
		shortDesc: "If Sunny Day is active, this Pokemon's Sp. Atk is 1.5x; loses 1/8 max HP per turn.",
		onModifySpAPriority: 5,
		onModifySpA(spa, pokemon) {
			if (this.field.isWeather(['sunnyday', 'desolateland'])) {
				return this.chainModify(1.5);
			}
		},
		onWeather(target, source, effect) {
			if (effect.id === 'sunnyday' || effect.id === 'desolateland') {
				this.damage(target.maxhp / 8, target, target);
			}
		},
		id: "solarpower",
		name: "Solar Power",
		rating: 1.5,
		num: 94,
	},
	"solidrock": {
		shortDesc: "This Pokemon receives 3/4 damage from supereffective attacks.",
		onSourceModifyDamage(damage, source, target, move) {
			if (target.getMoveHitData(move).typeMod > 0) {
				this.debug('Solid Rock neutralize');
				return this.chainModify(0.75);
			}
		},
		id: "solidrock",
		name: "Solid Rock",
		rating: 3,
		num: 116,
	},
	"soulheart": {
		desc: "This Pokemon's Special Attack is raised by 1 stage when another Pokemon faints.",
		shortDesc: "This Pokemon's Sp. Atk is raised by 1 stage when another Pokemon faints.",
		onAnyFaintPriority: 1,
		onAnyFaint() {
			this.boost({spa: 1}, this.effectData.target);
		},
		id: "soulheart",
		name: "Soul-Heart",
		rating: 3.5,
		num: 220,
	},
	"soundproof": {
		shortDesc: "This Pokemon is immune to sound-based moves, including Heal Bell.",
		onTryHit(target, source, move) {
			if (move.flags['sound']) {
				this.add('-immune', target, '[from] ability: Soundproof');
				return null;
			}
		},
		onAllyTryHitSide(target, source, move) {
			if (move.flags['sound']) {
				this.add('-immune', this.effectData.target, '[from] ability: Soundproof');
			}
		},
		id: "soundproof",
		name: "Soundproof",
		rating: 2,
		num: 43,
	},
	"speedboost": {
		desc: "This Pokemon's Speed is raised by 1 stage at the end of each full turn it has been on the field.",
		shortDesc: "This Pokemon's Speed is raised 1 stage at the end of each full turn on the field.",
		onResidualOrder: 26,
		onResidualSubOrder: 1,
		onResidual(pokemon) {
			if (pokemon.activeTurns) {
				this.boost({spe: 1});
			}
		},
		id: "speedboost",
		name: "Speed Boost",
		rating: 4.5,
		num: 3,
	},
	"stakeout": {
		shortDesc: "This Pokemon's attacking stat is doubled against a target that switched in this turn.",
		onModifyAtkPriority: 5,
		onModifyAtk(atk, attacker, defender) {
			if (!defender.activeTurns) {
				this.debug('Stakeout boost');
				return this.chainModify(2);
			}
		},
		onModifySpAPriority: 5,
		onModifySpA(atk, attacker, defender) {
			if (!defender.activeTurns) {
				this.debug('Stakeout boost');
				return this.chainModify(2);
			}
		},
		id: "stakeout",
		name: "Stakeout",
		rating: 3,
		num: 198,
	},
	"stall": {
		shortDesc: "This Pokemon moves last among Pokemon using the same or greater priority moves.",
		onModifyPriority(priority) {
			return Math.round(priority) - 0.1;
		},
		id: "stall",
		name: "Stall",
		rating: -1,
		num: 100,
	},
	"stamina": {
		shortDesc: "This Pokemon's Defense is raised by 1 stage after it is damaged by a move.",
		onAfterDamage(damage, target, source, effect) {
			if (effect && effect.effectType === 'Move' && effect.id !== 'confused') {
				this.boost({def: 1});
			}
		},
		id: "stamina",
		name: "Stamina",
		rating: 3,
		num: 192,
	},
	"stancechange": {
		desc: "If this Pokemon is an Aegislash, it changes to Blade Forme before attempting to use an attacking move, and changes to Shield Forme before attempting to use King's Shield.",
		shortDesc: "If Aegislash, changes Forme to Blade before attacks and Shield before King's Shield.",
		onBeforeMovePriority: 0.5,
		onBeforeMove(attacker, defender, move) {
			if (attacker.template.baseSpecies !== 'Aegislash' || attacker.transformed) return;
			if (move.category === 'Status' && move.id !== 'kingsshield') return;
			let targetSpecies = (move.id === 'kingsshield' ? 'Aegislash' : 'Aegislash-Blade');
			if (attacker.template.species !== targetSpecies) attacker.formeChange(targetSpecies);
		},
		id: "stancechange",
		name: "Stance Change",
		rating: 5,
		num: 176,
	},
	"static": {
		shortDesc: "30% chance a Pokemon making contact with this Pokemon will be paralyzed.",
		onAfterDamage(damage, target, source, move) {
			if (move && move.flags['contact']) {
				if (this.randomChance(3, 10)) {
					source.trySetStatus('par', target);
				}
			}
		},
		id: "static",
		name: "Static",
		rating: 2,
		num: 9,
	},
	"steadfast": {
		shortDesc: "If this Pokemon flinches, its Speed is raised by 1 stage.",
		onFlinch(pokemon) {
			this.boost({spe: 1});
		},
		id: "steadfast",
		name: "Steadfast",
		rating: 1,
		num: 80,
	},
	"steelworker": {
		shortDesc: "This Pokemon's attacking stat is multiplied by 1.5 while using a Steel-type attack.",
		onModifyAtkPriority: 5,
		onModifyAtk(atk, attacker, defender, move) {
			if (move.type === 'Steel') {
				this.debug('Steelworker boost');
				return this.chainModify(1.5);
			}
		},
		onModifySpAPriority: 5,
		onModifySpA(atk, attacker, defender, move) {
			if (move.type === 'Steel') {
				this.debug('Steelworker boost');
				return this.chainModify(1.5);
			}
		},
		id: "steelworker",
		name: "Steelworker",
		rating: 3,
		num: 200,
	},
	"stench": {
		shortDesc: "This Pokemon's attacks without a chance to flinch have a 10% chance to flinch.",
		onModifyMovePriority: -1,
		onModifyMove(move) {
			if (move.category !== "Status") {
				this.debug('Adding Stench flinch');
				if (!move.secondaries) move.secondaries = [];
				for (const secondary of move.secondaries) {
					if (secondary.volatileStatus === 'flinch') return;
				}
				move.secondaries.push({
					chance: 10,
					volatileStatus: 'flinch',
				});
			}
		},
		id: "stench",
		name: "Stench",
		rating: 0.5,
		num: 1,
	},
	"stickyhold": {
		shortDesc: "This Pokemon cannot lose its held item due to another Pokemon's attack.",
		onTakeItem(item, pokemon, source) {
			if (this.suppressingAttackEvents() && pokemon !== this.activePokemon || !pokemon.hp || pokemon.item === 'stickybarb') return;
			if (!this.activeMove) throw new Error("Battle.activeMove is null");
			if ((source && source !== pokemon) || this.activeMove.id === 'knockoff') {
				this.add('-activate', pokemon, 'ability: Sticky Hold');
				return false;
			}
		},
		id: "stickyhold",
		name: "Sticky Hold",
		rating: 1.5,
		num: 60,
	},
	"stormdrain": {
		desc: "This Pokemon is immune to Water-type moves and raises its Special Attack by 1 stage when hit by a Water-type move. If this Pokemon is not the target of a single-target Water-type move used by another Pokemon, this Pokemon redirects that move to itself if it is within the range of that move.",
		shortDesc: "This Pokemon draws Water moves to itself to raise Sp. Atk by 1; Water immunity.",
		onTryHit(target, source, move) {
			if (target !== source && move.type === 'Water') {
				if (!this.boost({spa: 1})) {
					this.add('-immune', target, '[from] ability: Storm Drain');
				}
				return null;
			}
		},
		onAnyRedirectTarget(target, source, source2, move) {
			if (move.type !== 'Water' || ['firepledge', 'grasspledge', 'waterpledge'].includes(move.id)) return;
			if (this.validTarget(this.effectData.target, source, move.target)) {
				if (this.effectData.target !== target) {
					this.add('-activate', this.effectData.target, 'ability: Storm Drain');
				}
				return this.effectData.target;
			}
		},
		id: "stormdrain",
		name: "Storm Drain",
		rating: 3.5,
		num: 114,
	},
	"strongjaw": {
		desc: "This Pokemon's bite-based attacks have their power multiplied by 1.5.",
		shortDesc: "This Pokemon's bite-based attacks have 1.5x power. Bug Bite is not boosted.",
		onBasePowerPriority: 8,
		onBasePower(basePower, attacker, defender, move) {
			if (move.flags['bite']) {
				return this.chainModify(1.5);
			}
		},
		id: "strongjaw",
		name: "Strong Jaw",
		rating: 3,
		num: 173,
	},
	"sturdy": {
		desc: "If this Pokemon is at full HP, it survives one hit with at least 1 HP. OHKO moves fail when used against this Pokemon.",
		shortDesc: "If this Pokemon is at full HP, it survives one hit with at least 1 HP. Immune to OHKO.",
		onTryHit(pokemon, target, move) {
			if (move.ohko) {
				this.add('-immune', pokemon, '[from] ability: Sturdy');
				return null;
			}
		},
		onDamagePriority: -100,
		onDamage(damage, target, source, effect) {
			if (target.hp === target.maxhp && damage >= target.hp && effect && effect.effectType === 'Move') {
				this.add('-ability', target, 'Sturdy');
				return target.hp - 1;
			}
		},
		id: "sturdy",
		name: "Sturdy",
		rating: 3,
		num: 5,
	},
	"suctioncups": {
		shortDesc: "This Pokemon cannot be forced to switch out by another Pokemon's attack or item.",
		onDragOutPriority: 1,
		onDragOut(pokemon) {
			this.add('-activate', pokemon, 'ability: Suction Cups');
			return null;
		},
		id: "suctioncups",
		name: "Suction Cups",
		rating: 1,
		num: 21,
	},
	"superluck": {
		shortDesc: "This Pokemon's critical hit ratio is raised by 1 stage.",
		onModifyCritRatio(critRatio) {
			return critRatio + 1;
		},
		id: "superluck",
		name: "Super Luck",
		rating: 1.5,
		num: 105,
	},
	"surgesurfer": {
		shortDesc: "If Electric Terrain is active, this Pokemon's Speed is doubled.",
		onModifySpe(spe) {
			if (this.field.isTerrain('electricterrain')) {
				return this.chainModify(2);
			}
		},
		id: "surgesurfer",
		name: "Surge Surfer",
		rating: 2,
		num: 207,
	},
	"swarm": {
		desc: "When this Pokemon has 1/3 or less of its maximum HP, rounded down, its attacking stat is multiplied by 1.5 while using a Bug-type attack.",
		shortDesc: "At 1/3 or less of its max HP, this Pokemon's attacking stat is 1.5x with Bug attacks.",
		onModifyAtkPriority: 5,
		onModifyAtk(atk, attacker, defender, move) {
			if (move.type === 'Bug' && attacker.hp <= attacker.maxhp / 3) {
				this.debug('Swarm boost');
				return this.chainModify(1.5);
			}
		},
		onModifySpAPriority: 5,
		onModifySpA(atk, attacker, defender, move) {
			if (move.type === 'Bug' && attacker.hp <= attacker.maxhp / 3) {
				this.debug('Swarm boost');
				return this.chainModify(1.5);
			}
		},
		id: "swarm",
		name: "Swarm",
		rating: 2.5,
		num: 68,
	},
	"sweetveil": {
		shortDesc: "This Pokemon and its allies cannot fall asleep.",
		id: "sweetveil",
		name: "Sweet Veil",
		onAllySetStatus(status, target, source, effect) {
			if (status.id === 'slp') {
				this.debug('Sweet Veil interrupts sleep');
				this.add('-activate', this.effectData.target, 'ability: Sweet Veil', '[of] ' + target);
				return null;
			}
		},
		onAllyTryAddVolatile(status, target) {
			if (status.id === 'yawn') {
				this.debug('Sweet Veil blocking yawn');
				this.add('-activate', this.effectData.target, 'ability: Sweet Veil', '[of] ' + target);
				return null;
			}
		},
		rating: 2,
		num: 175,
	},
	"swiftswim": {
		shortDesc: "If Rain Dance is active, this Pokemon's Speed is doubled.",
		onModifySpe(spe, pokemon) {
			if (this.field.isWeather(['raindance', 'primordialsea'])) {
				return this.chainModify(2);
			}
		},
		id: "swiftswim",
		name: "Swift Swim",
		rating: 3,
		num: 33,
	},
	"symbiosis": {
		desc: "If an ally uses its item, this Pokemon gives its item to that ally immediately. Does not activate if the ally's item was stolen or knocked off.",
		shortDesc: "If an ally uses its item, this Pokemon gives its item to that ally immediately.",
		onAllyAfterUseItem(item, pokemon) {
			let source = this.effectData.target;
			let myItem = source.takeItem();
			if (!myItem) return;
			// @ts-ignore
			if (!this.singleEvent('TakeItem', myItem, source.itemData, pokemon, source, this.effectData, myItem) || !pokemon.setItem(myItem)) {
				source.item = myItem.id;
				return;
			}
			this.add('-activate', source, 'ability: Symbiosis', myItem, '[of] ' + pokemon);
		},
		id: "symbiosis",
		name: "Symbiosis",
		rating: 0,
		num: 180,
	},
	"synchronize": {
		desc: "If another Pokemon burns, paralyzes, poisons, or badly poisons this Pokemon, that Pokemon receives the same major status condition.",
		shortDesc: "If another Pokemon burns/poisons/paralyzes this Pokemon, it also gets that status.",
		onAfterSetStatus(status, target, source, effect) {
			if (!source || source === target) return;
			if (effect && effect.id === 'toxicspikes') return;
			if (status.id === 'slp' || status.id === 'frz') return;
			this.add('-activate', target, 'ability: Synchronize');
			// Hack to make status-prevention abilities think Synchronize is a status move
			// and show messages when activating against it.
			// @ts-ignore
			source.trySetStatus(status, target, {status: status.id, id: 'synchronize'});
		},
		id: "synchronize",
		name: "Synchronize",
		rating: 2,
		num: 28,
	},
	"tangledfeet": {
		shortDesc: "This Pokemon's evasiveness is doubled as long as it is confused.",
		onModifyAccuracy(accuracy, target) {
			if (typeof accuracy !== 'number') return;
			if (target && target.volatiles['confusion']) {
				this.debug('Tangled Feet - decreasing accuracy');
				return accuracy * 0.5;
			}
		},
		id: "tangledfeet",
		name: "Tangled Feet",
		rating: 1,
		num: 77,
	},
	"tanglinghair": {
		shortDesc: "Pokemon making contact with this Pokemon have their Speed lowered by 1 stage.",
		onAfterDamage(damage, target, source, effect) {
			if (effect && effect.flags['contact']) {
				this.add('-ability', target, 'Tangling Hair');
				this.boost({spe: -1}, source, target, null, false, true);
			}
		},
		id: "tanglinghair",
		name: "Tangling Hair",
		rating: 2.5,
		num: 221,
	},
	"technician": {
		desc: "This Pokemon's moves of 60 power or less have their power multiplied by 1.5. Does affect Struggle.",
		shortDesc: "This Pokemon's moves of 60 power or less have 1.5x power. Includes Struggle.",
		onBasePowerPriority: 8,
		onBasePower(basePower, attacker, defender, move) {
			if (basePower <= 60) {
				this.debug('Technician boost');
				return this.chainModify(1.5);
			}
		},
		id: "technician",
		name: "Technician",
		rating: 4,
		num: 101,
	},
	"telepathy": {
		shortDesc: "This Pokemon does not take damage from attacks made by its allies.",
		onTryHit(target, source, move) {
			if (target !== source && target.side === source.side && move.category !== 'Status') {
				this.add('-activate', target, 'ability: Telepathy');
				return null;
			}
		},
		id: "telepathy",
		name: "Telepathy",
		rating: 0,
		num: 140,
	},
	"teravolt": {
		shortDesc: "This Pokemon's moves and their effects ignore the Abilities of other Pokemon.",
		onStart(pokemon) {
			this.add('-ability', pokemon, 'Teravolt');
		},
		onModifyMove(move) {
			move.ignoreAbility = true;
		},
		id: "teravolt",
		name: "Teravolt",
		rating: 3.5,
		num: 164,
	},
	"thickfat": {
		desc: "If a Pokemon uses a Fire- or Ice-type attack against this Pokemon, that Pokemon's attacking stat is halved when calculating the damage to this Pokemon.",
		shortDesc: "Fire/Ice-type moves against this Pokemon deal damage with a halved attacking stat.",
		onSourceModifyAtkPriority: 6,
		onSourceModifyAtk(atk, attacker, defender, move) {
			if (move.type === 'Ice' || move.type === 'Fire') {
				this.debug('Thick Fat weaken');
				return this.chainModify(0.5);
			}
		},
		onSourceModifySpAPriority: 5,
		onSourceModifySpA(atk, attacker, defender, move) {
			if (move.type === 'Ice' || move.type === 'Fire') {
				this.debug('Thick Fat weaken');
				return this.chainModify(0.5);
			}
		},
		id: "thickfat",
		name: "Thick Fat",
		rating: 3.5,
		num: 47,
	},
	"tintedlens": {
		shortDesc: "This Pokemon's attacks that are not very effective on a target deal double damage.",
		onModifyDamage(damage, source, target, move) {
			if (target.getMoveHitData(move).typeMod < 0) {
				this.debug('Tinted Lens boost');
				return this.chainModify(2);
			}
		},
		id: "tintedlens",
		name: "Tinted Lens",
		rating: 3.5,
		num: 110,
	},
	"torrent": {
		desc: "When this Pokemon has 1/3 or less of its maximum HP, rounded down, its attacking stat is multiplied by 1.5 while using a Water-type attack.",
		shortDesc: "At 1/3 or less of its max HP, this Pokemon's attacking stat is 1.5x with Water attacks.",
		onModifyAtkPriority: 5,
		onModifyAtk(atk, attacker, defender, move) {
			if (move.type === 'Water' && attacker.hp <= attacker.maxhp / 3) {
				this.debug('Torrent boost');
				return this.chainModify(1.5);
			}
		},
		onModifySpAPriority: 5,
		onModifySpA(atk, attacker, defender, move) {
			if (move.type === 'Water' && attacker.hp <= attacker.maxhp / 3) {
				this.debug('Torrent boost');
				return this.chainModify(1.5);
			}
		},
		id: "torrent",
		name: "Torrent",
		rating: 2.5,
		num: 67,
	},
	"toxicboost": {
		desc: "While this Pokemon is poisoned, the power of its physical attacks is multiplied by 1.5.",
		shortDesc: "While this Pokemon is poisoned, its physical attacks have 1.5x power.",
		onBasePowerPriority: 8,
		onBasePower(basePower, attacker, defender, move) {
			if ((attacker.status === 'psn' || attacker.status === 'tox') && move.category === 'Physical') {
				return this.chainModify(1.5);
			}
		},
		id: "toxicboost",
		name: "Toxic Boost",
		rating: 3,
		num: 137,
	},
	"toughclaws": {
		shortDesc: "This Pokemon's contact moves have their power multiplied by 1.3.",
		onBasePowerPriority: 8,
		onBasePower(basePower, attacker, defender, move) {
			if (move.flags['contact']) {
				return this.chainModify([0x14CD, 0x1000]);
			}
		},
		id: "toughclaws",
		name: "Tough Claws",
		rating: 3.5,
		num: 181,
	},
	"trace": {
		desc: "On switch-in, or when this Pokemon acquires this ability, this Pokemon copies a random adjacent opposing Pokemon's Ability. However, if one or more adjacent Pokemon has the Ability \"No Ability\", Trace won't copy anything even if there is another valid Ability it could normally copy. Otherwise, if there is no Ability that can be copied at that time, this Ability will activate as soon as an Ability can be copied. Abilities that cannot be copied are the previously mentioned \"No Ability\", as well as Comatose, Disguise, Flower Gift, Forecast, Illusion, Imposter, Multitype, Schooling, Stance Change, Trace, and Zen Mode.",
		shortDesc: "On switch-in, or when it can, this Pokemon copies a random adjacent foe's Ability.",
		onStart(pokemon) {
			if (pokemon.side.foe.active.some(foeActive => foeActive && this.isAdjacent(pokemon, foeActive) && foeActive.ability === 'noability')) {
				this.effectData.gaveUp = true;
			}
		},
		onUpdate(pokemon) {
			if (!pokemon.isStarted || this.effectData.gaveUp) return;
			let possibleTargets = pokemon.side.foe.active.filter(foeActive => foeActive && this.isAdjacent(pokemon, foeActive));
			while (possibleTargets.length) {
				let rand = 0;
				if (possibleTargets.length > 1) rand = this.random(possibleTargets.length);
				let target = possibleTargets[rand];
				let ability = this.getAbility(target.ability);
				let bannedAbilities = ['noability', 'battlebond', 'comatose', 'disguise', 'flowergift', 'forecast', 'illusion', 'imposter', 'multitype', 'powerconstruct', 'powerofalchemy', 'receiver', 'rkssystem', 'schooling', 'shieldsdown', 'stancechange', 'trace', 'zenmode'];
				if (bannedAbilities.includes(target.ability)) {
					possibleTargets.splice(rand, 1);
					continue;
				}
				this.add('-ability', pokemon, ability, '[from] ability: Trace', '[of] ' + target);
				pokemon.setAbility(ability);
				return;
			}
		},
		id: "trace",
		name: "Trace",
		rating: 3,
		num: 36,
	},
	"triage": {
		shortDesc: "This Pokemon's healing moves have their priority increased by 3.",
		onModifyPriority(priority, pokemon, target, move) {
			if (move && move.flags['heal']) return priority + 3;
		},
		id: "triage",
		name: "Triage",
		rating: 3.5,
		num: 205,
	},
	"truant": {
		shortDesc: "This Pokemon skips every other turn instead of using a move.",
		onStart(pokemon) {
			pokemon.removeVolatile('truant');
			if (pokemon.activeTurns && (pokemon.moveThisTurnResult !== undefined || !this.willMove(pokemon))) {
				pokemon.addVolatile('truant');
			}
		},
		onBeforeMovePriority: 9,
		onBeforeMove(pokemon) {
			if (pokemon.removeVolatile('truant')) {
				this.add('cant', pokemon, 'ability: Truant');
				return false;
			}
			pokemon.addVolatile('truant');
		},
		effect: {},
		id: "truant",
		name: "Truant",
		rating: -2,
		num: 54,
	},
	"turboblaze": {
		shortDesc: "This Pokemon's moves and their effects ignore the Abilities of other Pokemon.",
		onStart(pokemon) {
			this.add('-ability', pokemon, 'Turboblaze');
		},
		onModifyMove(move) {
			move.ignoreAbility = true;
		},
		id: "turboblaze",
		name: "Turboblaze",
		rating: 3.5,
		num: 163,
	},
	"unaware": {
		desc: "This Pokemon ignores other Pokemon's Attack, Special Attack, and accuracy stat stages when taking damage, and ignores other Pokemon's Defense, Special Defense, and evasiveness stat stages when dealing damage.",
		shortDesc: "This Pokemon ignores other Pokemon's stat stages when taking or doing damage.",
		id: "unaware",
		name: "Unaware",
		onAnyModifyBoost(boosts, target) {
			let source = this.effectData.target;
			if (source === target) return;
			if (source === this.activePokemon && target === this.activeTarget) {
				boosts['def'] = 0;
				boosts['spd'] = 0;
				boosts['evasion'] = 0;
			}
			if (target === this.activePokemon && source === this.activeTarget) {
				boosts['atk'] = 0;
				boosts['spa'] = 0;
				boosts['accuracy'] = 0;
			}
		},
		rating: 3,
		num: 109,
	},
	"unburden": {
		desc: "If this Pokemon loses its held item for any reason, its Speed is doubled. This boost is lost if it switches out or gains a new item or Ability.",
		shortDesc: "Speed is doubled on held item loss; boost is lost if it switches, gets new item/Ability.",
		onAfterUseItem(item, pokemon) {
			if (pokemon !== this.effectData.target) return;
			pokemon.addVolatile('unburden');
		},
		onTakeItem(item, pokemon) {
			pokemon.addVolatile('unburden');
		},
		onEnd(pokemon) {
			pokemon.removeVolatile('unburden');
		},
		effect: {
			onModifySpe(spe, pokemon) {
				if (!pokemon.item) {
					return this.chainModify(2);
				}
			},
		},
		id: "unburden",
		name: "Unburden",
		rating: 3.5,
		num: 84,
	},
	"unnerve": {
		desc: "While this Pokemon is active, it prevents opposing Pokemon from using their Berries. Activation message broadcasts before other Abilities regardless of the Pokemon's Speed tiers.",
		shortDesc: "While this Pokemon is active, it prevents opposing Pokemon from using their Berries.",
		onPreStart(pokemon) {
			this.add('-ability', pokemon, 'Unnerve', pokemon.side.foe);
		},
		onFoeTryEatItem: false,
		id: "unnerve",
		name: "Unnerve",
		rating: 1.5,
		num: 127,
	},
	"victorystar": {
		shortDesc: "This Pokemon and its allies' moves have their accuracy multiplied by 1.1.",
		onAllyModifyMove(move) {
			if (typeof move.accuracy === 'number') {
				move.accuracy *= 1.1;
			}
		},
		id: "victorystar",
		name: "Victory Star",
		rating: 3,
		num: 162,
	},
	"vitalspirit": {
		shortDesc: "This Pokemon cannot fall asleep. Gaining this Ability while asleep cures it.",
		onUpdate(pokemon) {
			if (pokemon.status === 'slp') {
				this.add('-activate', pokemon, 'ability: Vital Spirit');
				pokemon.cureStatus();
			}
		},
		onSetStatus(status, target, source, effect) {
			if (status.id !== 'slp') return;
			if (!effect || !effect.status) return false;
			this.add('-immune', target, '[from] ability: Vital Spirit');
			return false;
		},
		id: "vitalspirit",
		name: "Vital Spirit",
		rating: 2,
		num: 72,
	},
	"voltabsorb": {
		desc: "This Pokemon is immune to Electric-type moves and restores 1/4 of its maximum HP, rounded down, when hit by an Electric-type move.",
		shortDesc: "This Pokemon heals 1/4 of its max HP when hit by Electric moves; Electric immunity.",
		onTryHit(target, source, move) {
			if (target !== source && move.type === 'Electric') {
				if (!this.heal(target.maxhp / 4)) {
					this.add('-immune', target, '[from] ability: Volt Absorb');
				}
				return null;
			}
		},
		id: "voltabsorb",
		name: "Volt Absorb",
		rating: 3.5,
		num: 10,
	},
	"waterabsorb": {
		desc: "This Pokemon is immune to Water-type moves and restores 1/4 of its maximum HP, rounded down, when hit by a Water-type move.",
		shortDesc: "This Pokemon heals 1/4 of its max HP when hit by Water moves; Water immunity.",
		onTryHit(target, source, move) {
			if (target !== source && move.type === 'Water') {
				if (!this.heal(target.maxhp / 4)) {
					this.add('-immune', target, '[from] ability: Water Absorb');
				}
				return null;
			}
		},
		id: "waterabsorb",
		name: "Water Absorb",
		rating: 3.5,
		num: 11,
	},
	"waterbubble": {
		desc: "This Pokemon's attacking stat is doubled while using a Water-type attack. If a Pokemon uses a Fire-type attack against this Pokemon, that Pokemon's attacking stat is halved when calculating the damage to this Pokemon. This Pokemon cannot be burned. Gaining this Ability while burned cures it.",
		shortDesc: "This Pokemon's Water power is 2x; it can't be burned; Fire power against it is halved.",
		onModifyAtkPriority: 5,
		onSourceModifyAtk(atk, attacker, defender, move) {
			if (move.type === 'Fire') {
				return this.chainModify(0.5);
			}
		},
		onModifySpAPriority: 5,
		onSourceModifySpA(atk, attacker, defender, move) {
			if (move.type === 'Fire') {
				return this.chainModify(0.5);
			}
		},
		onModifyAtk(atk, attacker, defender, move) {
			if (move.type === 'Water') {
				return this.chainModify(2);
			}
		},
		onModifySpA(atk, attacker, defender, move) {
			if (move.type === 'Water') {
				return this.chainModify(2);
			}
		},
		onUpdate(pokemon) {
			if (pokemon.status === 'brn') {
				this.add('-activate', pokemon, 'ability: Water Bubble');
				pokemon.cureStatus();
			}
		},
		onSetStatus(status, target, source, effect) {
			if (status.id !== 'brn') return;
			if (!effect || !effect.status) return false;
			this.add('-immune', target, '[from] ability: Water Bubble');
			return false;
		},
		id: "waterbubble",
		name: "Water Bubble",
		rating: 4,
		num: 199,
	},
	"watercompaction": {
		shortDesc: "This Pokemon's Defense is raised 2 stages after it is damaged by a Water-type move.",
		onAfterDamage(damage, target, source, effect) {
			if (effect && effect.type === 'Water') {
				this.boost({def: 2});
			}
		},
		id: "watercompaction",
		name: "Water Compaction",
		rating: 2,
		num: 195,
	},
	"waterveil": {
		shortDesc: "This Pokemon cannot be burned. Gaining this Ability while burned cures it.",
		onUpdate(pokemon) {
			if (pokemon.status === 'brn') {
				this.add('-activate', pokemon, 'ability: Water Veil');
				pokemon.cureStatus();
			}
		},
		onSetStatus(status, target, source, effect) {
			if (status.id !== 'brn') return;
			if (!effect || !effect.status) return false;
			this.add('-immune', target, '[from] ability: Water Veil');
			return false;
		},
		id: "waterveil",
		name: "Water Veil",
		rating: 2,
		num: 41,
	},
	"weakarmor": {
		desc: "If a physical attack hits this Pokemon, its Defense is lowered by 1 stage and its Speed is raised by 2 stages.",
		shortDesc: "If a physical attack hits this Pokemon, Defense is lowered by 1, Speed is raised by 2.",
		onAfterDamage(damage, target, source, move) {
			if (move.category === 'Physical') {
				this.boost({def: -1, spe: 2}, target, target);
			}
		},
		id: "weakarmor",
		name: "Weak Armor",
		rating: 1,
		num: 133,
	},
	"whitesmoke": {
		shortDesc: "Prevents other Pokemon from lowering this Pokemon's stat stages.",
		onBoost(boost, target, source, effect) {
			if (source && target === source) return;
			let showMsg = false;
			for (let i in boost) {
				// @ts-ignore
				if (boost[i] < 0) {
					// @ts-ignore
					delete boost[i];
					showMsg = true;
				}
			}
			if (showMsg && !effect.secondaries) this.add("-fail", target, "unboost", "[from] ability: White Smoke", "[of] " + target);
		},
		id: "whitesmoke",
		name: "White Smoke",
		rating: 2,
		num: 73,
	},
	"wimpout": {
		desc: "When this Pokemon has more than 1/2 its maximum HP and takes damage bringing it to 1/2 or less of its maximum HP, it immediately switches out to a chosen ally. This effect applies after all hits from a multi-hit move; Sheer Force prevents it from activating if the move has a secondary effect. This effect applies to both direct and indirect damage, except Curse and Substitute on use, Belly Drum, Pain Split, and confusion damage.",
		shortDesc: "This Pokemon switches out when it reaches 1/2 or less of its maximum HP.",
		onAfterMoveSecondary(target, source, move) {
			if (!source || source === target || !target.hp || !move.totalDamage) return;
			if (target.hp <= target.maxhp / 2 && target.hp + move.totalDamage > target.maxhp / 2) {
				if (!this.canSwitch(target.side) || target.forceSwitchFlag || target.switchFlag) return;
				target.switchFlag = true;
				source.switchFlag = false;
				this.add('-activate', target, 'ability: Wimp Out');
			}
		},
		onAfterDamage(damage, target, source, effect) {
			if (!target.hp || effect.effectType === 'Move') return;
			if (target.hp <= target.maxhp / 2 && target.hp + damage > target.maxhp / 2) {
				if (!this.canSwitch(target.side) || target.forceSwitchFlag || target.switchFlag) return;
				target.switchFlag = true;
				this.add('-activate', target, 'ability: Wimp Out');
			}
		},
		id: "wimpout",
		name: "Wimp Out",
		rating: 1.5,
		num: 193,
	},
	"wonderguard": {
		shortDesc: "This Pokemon can only be damaged by supereffective moves and indirect damage.",
		onTryHit(target, source, move) {
			if (target === source || move.category === 'Status' || move.type === '???' || move.id === 'struggle') return;
			this.debug('Wonder Guard immunity: ' + move.id);
			if (target.runEffectiveness(move) <= 0) {
				this.add('-immune', target, '[from] ability: Wonder Guard');
				return null;
			}
		},
		id: "wonderguard",
		name: "Wonder Guard",
		rating: 5,
		num: 25,
	},
	"wonderskin": {
		desc: "All non-damaging moves that check accuracy have their accuracy changed to 50% when used on this Pokemon. This change is done before any other accuracy modifying effects.",
		shortDesc: "Status moves with accuracy checks are 50% accurate when used on this Pokemon.",
		onModifyAccuracyPriority: 10,
		onModifyAccuracy(accuracy, target, source, move) {
			if (move.category === 'Status' && typeof move.accuracy === 'number') {
				this.debug('Wonder Skin - setting accuracy to 50');
				return 50;
			}
		},
		id: "wonderskin",
		name: "Wonder Skin",
		rating: 2,
		num: 147,
	},
	"zenmode": {
		desc: "If this Pokemon is a Darmanitan, it changes to Zen Mode if it has 1/2 or less of its maximum HP at the end of a turn. If Darmanitan's HP is above 1/2 of its maximum HP at the end of a turn, it changes back to Standard Mode. This Ability cannot be removed or suppressed.",
		shortDesc: "If Darmanitan, at end of turn changes Mode to Standard if > 1/2 max HP, else Zen.",
		onResidualOrder: 27,
		onResidual(pokemon) {
			if (pokemon.baseTemplate.baseSpecies !== 'Darmanitan' || pokemon.transformed) {
				return;
			}
			if (pokemon.hp <= pokemon.maxhp / 2 && pokemon.template.speciesid === 'darmanitan') {
				pokemon.addVolatile('zenmode');
			} else if (pokemon.hp > pokemon.maxhp / 2 && pokemon.template.speciesid === 'darmanitanzen') {
				pokemon.addVolatile('zenmode'); // in case of base Darmanitan-Zen
				pokemon.removeVolatile('zenmode');
			}
		},
		onEnd(pokemon) {
			if (!pokemon.volatiles['zenmode'] || !pokemon.hp) return;
			pokemon.transformed = false;
			delete pokemon.volatiles['zenmode'];
			pokemon.formeChange('Darmanitan', this.effect, false, '[silent]');
		},
		effect: {
			onStart(pokemon) {
				if (pokemon.template.speciesid !== 'darmanitanzen') pokemon.formeChange('Darmanitan-Zen');
			},
			onEnd(pokemon) {
				pokemon.formeChange('Darmanitan');
			},
		},
		id: "zenmode",
		name: "Zen Mode",
		rating: -1,
		num: 161,
	},

	// CAP
	"mountaineer": {
		shortDesc: "On switch-in, this Pokemon avoids all Rock-type attacks and Stealth Rock.",
		onDamage(damage, target, source, effect) {
			if (effect && effect.id === 'stealthrock') {
				return false;
			}
		},
		onTryHit(target, source, move) {
			if (move.type === 'Rock' && !target.activeTurns) {
				this.add('-immune', target, '[from] ability: Mountaineer');
				return null;
			}
		},
		id: "mountaineer",
		isNonstandard: "CAP",
		name: "Mountaineer",
		rating: 3.5,
		num: -2,
	},
	"rebound": {
		desc: "On switch-in, this Pokemon blocks certain status moves and instead uses the move against the original user.",
		shortDesc: "On switch-in, blocks certain status moves and bounces them back to the user.",
		id: "rebound",
		isNonstandard: "CAP",
		name: "Rebound",
		onTryHitPriority: 1,
		onTryHit(target, source, move) {
			if (this.effectData.target.activeTurns) return;

			if (target === source || move.hasBounced || !move.flags['reflectable']) {
				return;
			}
			let newMove = this.getActiveMove(move.id);
			newMove.hasBounced = true;
			this.useMove(newMove, target, source);
			return null;
		},
		onAllyTryHitSide(target, source, move) {
			if (this.effectData.target.activeTurns) return;

			if (target.side === source.side || move.hasBounced || !move.flags['reflectable']) {
				return;
			}
			let newMove = this.getActiveMove(move.id);
			newMove.hasBounced = true;
			this.useMove(newMove, this.effectData.target, source);
			return null;
		},
		effect: {
			duration: 1,
		},
		rating: 3.5,
		num: -3,
	},
	"persistent": {
		desc: "The duration of Gravity, Heal Block, Magic Room, Safeguard, Tailwind, Trick Room, and Wonder Room is increased by 2 turns if the effect is started by this Pokemon.",
		shortDesc: "When used, Gravity/Heal Block/Safeguard/Tailwind/Room effects last 2 more turns.",
		id: "persistent",
		isNonstandard: "CAP",
		name: "Persistent",
		// implemented in the corresponding move
		rating: 3.5,
		num: -4,
	},
};

exports.BattleAbilities = BattleAbilities;
'use strict';

/**@type {{[k: string]: string}} */
let BattleAliases = {
	// formats
	"randbats": "[Gen 7] Random Battle",
	"uber": "[Gen 7] Ubers",
	"ag": "[Gen 7] Anything Goes",
	"randdubs": "[Gen 7] Random Doubles Battle",
	"doubles": "[Gen 7] Doubles OU",
	"dubs": "[Gen 7] Doubles OU",
	"dou": "[Gen 7] Doubles OU",
	"duu": "[Gen 7] Doubles UU",
	"dubsuu": "[Gen 7] Doubles UU",
	"vgc17": "[Gen 7] VGC 2017",
	"vgc18": "[Gen 7] VGC 2018",
	"vgc": "[Gen 7] VGC 2019 Moon Series", //moon series starts jan 1
	"sun": "[Gen 7] VGC 2019 Sun Series",
	"moon": "[Gen 7] VGC 2019 Moon Series",
	"ultra": "[Gen 7] VGC 2019 Ultra Series",
	"bss": "[Gen 7] Battle Spot Singles",
	"bsd": "[Gen 7] Battle Spot Doubles",
	"bsdoubles": "[Gen 7] Battle Spot Doubles",
	"bstriples": "[Gen 6] Battle Spot Triples",
	"bssf": "[Gen 7] BSS Factory",
	"bh": "[Gen 7] Balanced Hackmons",
	"mnm": "[Gen 7] Mix and Mega",
	"aaa": "[Gen 7] Almost Any Ability",
	"pic": "[Gen 7] Partners in Crime",
	"2v2": "[Gen 7] 2v2 Doubles",
	"letsgosingles": "[Gen 7 Let's Go] Singles No Restrictions",
	"letsgodoubles": "[Gen 7 Let's Go] Doubles No Restrictions",
	"cc1v1": "[Gen 7] Challenge Cup 1v1",
	"cc2v2": "[Gen 7] Challenge Cup 2v2",
	"hc": "[Gen 7] Hackmons Cup",
	"monorandom": "[Gen 7] Monotype Random Battle",
	"bf": "[Gen 7] Battle Factory",
	"gen6bf": "[Gen 6] Battle Factory",
	"ssb": "[Gen 7] Super Staff Bros Brawl",

	// mega evos
	"fabio": "Ampharos-Mega",
	"maero": "Aerodactyl-Mega",
	"megaaero": "Aerodactyl-Mega",
	"megabee": "Beedrill-Mega",
	"megabunny": "Lopunny-Mega",
	"megabro": "Slowbro-Mega",
	"megacharizard": "Charizard-Mega-Y",
	"megacharizardx": "Charizard-Mega-X",
	"megacharizardy": "Charizard-Mega-Y",
	"megadoom": "Houndoom-Mega",
	"megadrill": "Beedrill-Mega",
	"megagard": "Gardevoir-Mega",
	"megagarde": "Gardevoir-Mega",
	"megacross": "Heracross-Mega",
	"megahera": "Heracross-Mega",
	"megakanga": "Kangaskhan-Mega",
	"megakhan": "Kangaskhan-Mega",
	"megalop": "Lopunny-Mega",
	"megaluc": "Lucario-Mega",
	"megaluke": "Lucario-Mega",
	"megamaw": "Mawile-Mega",
	"megamedi": "Medicham-Mega",
	"megagross": "Metagross-Mega",
	"megamewtwo": "Mewtwo-Mega-Y",
	"megamewtwox": "Mewtwo-Mega-X",
	"megamewtwoy": "Mewtwo-Mega-Y",
	"megaobama": "Abomasnow-Mega",
	"megaray": "Rayquaza-Mega",
	"megasab": "Sableye-Mega",
	"megasable": "Sableye-Mega",
	"megasnow": "Abomasnow-Mega",
	"megamence": "Salamence-Mega",
	"megascept": "Sceptile-Mega",
	"megashark": "Sharpedo-Mega",
	"megapert": "Swampert-Mega",
	"megattar": "Tyranitar-Mega",
	"megavenu": "Venusaur-Mega",
	"megasaur": "Venusaur-Mega",
	"megazam": "Alakazam-Mega",
	"megazardx": "Charizard-Mega-X",
	"megazardy": "Charizard-Mega-y",
	"mgar": "Gengar-Mega",
	"mgross": "Metagross-Mega",
	"mmx": "Mewtwo-Mega-X",
	"mmy": "Mewtwo-Mega-Y",
	"mray": "Rayquaza-Mega",
	"mzor": "Scizor-Mega",
	"zardx": "Charizard-Mega-X",
	"zardy": "Charizard-Mega-y",

	// primal reversions
	"primaldon": "Groudon-Primal",
	"pdon": "Groudon-Primal",
	"primalogre": "Kyogre-Primal",
	"pogre": "Kyogre-Primal",

	// alolan formes
	"rattataa": "Rattata-Alola",
	"alolanrattata": "Rattata-Alola",
	"raticatea": "Raticate-Alola",
	"alolanraticate": "Raticate-Alola",
	"raichua": "Raichu-Alola",
	"alolanraichu": "Raichu-Alola",
	"sandshrewa": "Sandshrew-Alola",
	"alolansandshrew": "Sandshrew-Alola",
	"sandslasha": "Sandslash-Alola",
	"alolansandslash": "Sandslash-Alola",
	"vulpixa": "Vulpix-Alola",
	"alolanvulpix": "Vulpix-Alola",
	"ninetalesa": "Ninetales-Alola",
	"alolanninetales": "Ninetales-Alola",
	"digletta": "Diglett-Alola",
	"alolandiglett": "Diglett-Alola",
	"dugtrioa": "Dugtrio-Alola",
	"alolandugtrio": "Dugtrio-Alola",
	"meowtha": "Meowth-Alola",
	"alolanmeowth": "Meowth-Alola",
	"persiana": "Persian-Alola",
	"alolanpersian": "Persian-Alola",
	"geodudea": "Geodude-Alola",
	"alolangeodude": "Geodude-Alola",
	"gravelera": "Graveler-Alola",
	"alolangraveler": "Graveler-Alola",
	"golema": "Golem-Alola",
	"alolangolem": "Golem-Alola",
	"grimera": "Grimer-Alola",
	"alolangrimer": "Grimer-Alola",
	"muka": "Muk-Alola",
	"alolanmuk": "Muk-Alola",
	"exeggutora": "Exeggutor-Alola",
	"alolanexeggutor": "Exeggutor-Alola",
	"marowaka": "Marowak-Alola",
	"alolanmarowak": "Marowak-Alola",

	// Pokéstar Studios
	"blackdoor": "Pokestar Black-Door",
	"brycen": "Brycen-Man",
	"brycenman": "Pokestar Brycen-Man",
	"f00": "Pokestar F00",
	"f002": "Pokestar F002",
	"giant": "Pokestar Giant",
	"mt": "Pokestar MT",
	"mt2": "Pokestar MT2",
	"majin": "Spirit",
	"mechatyranitar": "MT",
	"mechatyranitar2": "MT2",
	"monica": "Giant",
	"spirit": "Pokestar Spirit",
	"transport": "Pokestar Transport",
	"ufo": "Pokestar UFO",
	"ufo2": "Pokestar UFO-2",
	"whitedoor": "Pokestar White-Door",

	// formes
	"bugceus": "Arceus-Bug",
	"darkceus": "Arceus-Dark",
	"dragonceus": "Arceus-Dragon",
	"eleceus": "Arceus-Electric",
	"fairyceus": "Arceus-Fairy",
	"fightceus": "Arceus-Fighting",
	"fireceus": "Arceus-Fire",
	"flyceus": "Arceus-Flying",
	"ghostceus": "Arceus-Ghost",
	"grassceus": "Arceus-Grass",
	"groundceus": "Arceus-Ground",
	"iceceus": "Arceus-Ice",
	"poisonceus": "Arceus-Poison",
	"psyceus": "Arceus-Psychic",
	"rockceus": "Arceus-Rock",
	"steelceus": "Arceus-Steel",
	"waterceus": "Arceus-Water",
	"arcbug": "Arceus-Bug",
	"arcdark": "Arceus-Dark",
	"arcdragon": "Arceus-Dragon",
	"arcelectric": "Arceus-Electric",
	"arcfairy": "Arceus-Fairy",
	"arcfighting": "Arceus-Fighting",
	"arcfire": "Arceus-Fire",
	"arcflying": "Arceus-Flying",
	"arcghost": "Arceus-Ghost",
	"arcgrass": "Arceus-Grass",
	"arcground": "Arceus-Ground",
	"arcice": "Arceus-Ice",
	"arcpoison": "Arceus-Poison",
	"arcpsychic": "Arceus-Psychic",
	"arcrock": "Arceus-Rock",
	"arcsteel": "Arceus-Steel",
	"arcwater": "Arceus-Water",
	"basculinb": "Basculin-Blue-Striped",
	"basculinblue": "Basculin-Blue-Striped",
	"basculinbluestripe": "Basculin-Blue-Striped",
	"castformh": "Castform-Snowy",
	"castformice": "Castform-Snowy",
	"castformr": "Castform-Rainy",
	"castformwater": "Castform-Rainy",
	"castforms": "Castform-Sunny",
	"castformfire": "Castform-Sunny",
	"cherrims": "Cherrim-Sunshine",
	"cherrimsunny": "Cherrim-Sunshine",
	"darmanitanz": "Darmanitan-Zen",
	"darmanitanzenmode": "Darmanitan-Zen",
	"deoxysnormal": "Deoxys",
	"deon": "Deoxys",
	"deoxysa": "Deoxys-Attack",
	"deoa": "Deoxys-Attack",
	"deoxysd": "Deoxys-Defense",
	"deoxysdefence": "Deoxys-Defense",
	"deod": "Deoxys-Defense",
	"deoxyss": "Deoxys-Speed",
	"deos": "Deoxys-Speed",
	"eternalfloette": "Floette-Eternal",
	"girao": "Giratina-Origin",
	"giratinao": "Giratina-Origin",
	"gourgeists": "Gourgeist-Small",
	"gourgeistl": "Gourgeist-Large",
	"gourgeistxl": "Gourgeist-Super",
	"gourgeisth": "Gourgeist-Super",
	"gourgeisthuge": "Gourgeist-Super",
	"hoopau": "Hoopa-Unbound",
	"keldeor": "Keldeo-Resolute",
	"keldeoresolution": "Keldeo-Resolute",
	"kyuremb": "Kyurem-Black",
	"kyuremw": "Kyurem-White",
	"landorust": "Landorus-Therian",
	"meloettap": "Meloetta-Pirouette",
	"meloettas": "Meloetta-Pirouette",
	"meloettastep": "Meloetta-Pirouette",
	"meowsticfemale": "Meowstic-F",
	"pumpkaboohuge": "Pumpkaboo-Super",
	"rotomc": "Rotom-Mow",
	"rotomcut": "Rotom-Mow",
	"rotomf": "Rotom-Frost",
	"rotomh": "Rotom-Heat",
	"rotoms": "Rotom-Fan",
	"rotomspin": "Rotom-Fan",
	"rotomw": "Rotom-Wash",
	"shaymins": "Shaymin-Sky",
	"skymin": "Shaymin-Sky",
	"thundurust": "Thundurus-Therian",
	"thundyt": "Thundurus-Therian",
	"tornadust": "Tornadus-Therian",
	"tornt": "Tornadus-Therian",
	"wormadamg": "Wormadam-Sandy",
	"wormadamground": "Wormadam-Sandy",
	"wormadamsandycloak": "Wormadam-Sandy",
	"wormadams": "Wormadam-Trash",
	"wormadamsteel": "Wormadam-Trash",
	"wormadamtrashcloak": "Wormadam-Trash",
	"floettee": "Floette-Eternal",
	"floetteeternalflower": "Floette-Eternal",
	"ashgreninja": "Greninja-Ash",
	"zydog": "Zygarde-10%",
	"zydoge": "Zygarde-10%",
	"zygardedog": "Zygarde-10%",
	"zygarde50": "Zygarde",
	"zyc": "Zygarde-Complete",
	"zygarde100": "Zygarde-Complete",
	"zygardec": "Zygarde-Complete",
	"zygardefull": "Zygarde-Complete",
	"zygod": "Zygarde-Complete",
	"perfectzygarde": "Zygarde-Complete",
	"oricoriob": "Oricorio",
	"oricoriobaile": "Oricorio",
	"oricoriof": "Oricorio",
	"oricoriofire": "Oricorio",
	"oricorioe": "Oricorio-Pom-Pom",
	"oricorioelectric": "Oricorio-Pom-Pom",
	"oricoriog": "Oricorio-Sensu",
	"oricorioghost": "Oricorio-Sensu",
	"oricorios": "Oricorio-Sensu",
	"oricoriop": "Oricorio-Pa'u",
	"oricoriopsychic": "Oricorio-Pa'u",
	"lycanrocmidday": "Lycanroc",
	"lycanrocday": "Lycanroc",
	"lycanrocn": "Lycanroc-Midnight",
	"lycanrocnight": "Lycanroc-Midnight",
	"lycanrocd": "Lycanroc-Dusk",
	"necrozmadm": "Necrozma-Dusk-Mane",
	"necrozmadusk": "Necrozma-Dusk-Mane",
	"duskmane": "Necrozma-Dusk-Mane",
	"duskmanenecrozma": "Necrozma-Dusk-Mane",
	"necrozmadw": "Necrozma-Dawn-Wings",
	"necrozmadawn": "Necrozma-Dawn-Wings",
	"dawnwings": "Necrozma-Dawn-Wings",
	"dawnwingsnecrozma": "Necrozma-Dawn-Wings",
	"necrozmau": "Necrozma-Ultra",
	"ultranecrozma": "Necrozma-Ultra",
	"ufop": "Pokestar UFO-2",
	"ufopsychic": "Pokestar UFO-2",

	// base formes
	"nidoranfemale": "Nidoran-F",
	"nidoranmale": "Nidoran-M",
	"wormadamgrass": "Wormadam",
	"wormadamp": "Wormadam",
	"wormadamplant": "Wormadam",
	"wormadamplantcloak": "Wormadam",
	"cherrimo": "Cherrim",
	"cherrimovercast": "Cherrim",
	"giratinaa": "Giratina",
	"giratinaaltered": "Giratina",
	"shayminl": "Shaymin",
	"shayminland": "Shaymin",
	"basculinr": "Basculin",
	"basculinred": "Basculin",
	"basculinredstripe": "Basculin",
	"basculinredstriped": "Basculin",
	"darmanitans": "Darmanitan",
	"darmanitanstandard": "Darmanitan",
	"darmanitanstandardmode": "Darmanitan",
	"tornadusi": "Tornadus",
	"tornadusincarnate": "Tornadus",
	"tornadusincarnation": "Tornadus",
	"thundurusi": "Thundurus",
	"thundurusincarnate": "Thundurus",
	"thundurusincarnation": "Thundurus",
	"landorusi": "Landorus",
	"landorusincarnate": "Landorus",
	"landorusincarnation": "Landorus",
	"keldeoo": "Keldeo",
	"keldeoordinary": "Keldeo",
	"meloettaa": "Meloetta",
	"meloettaaria": "Meloetta",
	"meloettavoice": "Meloetta",
	"meowsticm": "Meowstic",
	"meowsticmale": "Meowstic",
	"aegislashs": "Aegislash",
	"aegislashshield": "Aegislash",
	"pumpkabooaverage": "Pumpkaboo",
	"gourgeistaverage": "Gourgeist",
	"hoopac": "Hoopa",
	"hoopaconfined": "Hoopa",
	"wishiwashisolo": "Wishiwashi",
	"pokestarufof": "Pokestar UFO",
	"pokestarufoflying": "Pokestar UFO",
	"ufof": "Pokestar UFO",
	"ufoflying": "Pokestar UFO",

	// event formes
	"rockruffdusk": "Rockruff",

	// totem formes
	"raticatet": "Raticate-Alola-Totem",
	"totemalolanraticate": "Raticate-Alola-Totem",
	"totemraticate": "Raticate-Alola-Totem",
	"totemraticatea": "Raticate-Alola-Totem",
	"totemraticatealola": "Raticate-Alola-Totem",
	"marowakt": "Marowak-Alola-Totem",
	"totemalolanmarowak": "Marowak-Alola-Totem",
	"totemmarowak": "Marowak-Alola-Totem",
	"totemmarowaka": "Marowak-Alola-Totem",
	"totemmarowakalola": "Marowak-Alola-Totem",
	"gumshoost": "Gumshoos-Totem",
	"totemgumshoos": "Gumshoos-Totem",
	"totemvikavolt": "Vikavolt-Totem",
	"vikavoltt": "Vikavolt-Totem",
	"ribombeet": "Ribombee-Totem",
	"totemribombee": "Ribombee-Totem",
	"araquanidt": "Araquanid-Totem",
	"totemaraquanid": "Araquanid-Totem",
	"lurantist": "Lurantis-Totem",
	"totemlurantis": "Lurantis-Totem",
	"salazzlet": "Salazzle-Totem",
	"totemsalazzle": "Salazzle-Totem",
	"mimikyut": "Mimikyu-Totem",
	"totemmimikyu": "Mimikyu-Totem",
	"kommoot": "Kommo-o-Totem",
	"totemkommoo": "Kommo-o-Totem",

	// cosmetic formes
	"burmygrass": "Burmy",
	"burmyplant": "Burmy",
	"burmysandy": "Burmy",
	"burmytrash": "Burmy",
	"shelloseast": "Shellos",
	"shelloswest": "Shellos",
	"gastrodone": "Gastrodon",
	"gastrodoneast": "Gastrodon",
	"gastrodoneastsea": "Gastrodon",
	"gastrodonw": "Gastrodon",
	"gastrodonwest": "Gastrodon",
	"gastrodonwestsea": "Gastrodon",
	"deerlingspring": "Deerling",
	"deerlingsummer": "Deerling",
	"deerlingautumn": "Deerling",
	"deerlingwinter": "Deerling",
	"sawsbuckspring": "Sawsbuck",
	"sawsbucksummer": "Sawsbuck",
	"sawsbuckautumn": "Sawsbuck",
	"sawsbuckwinter": "Sawsbuck",
	"vivillonarchipelago": "Vivillon",
	"vivilloncontinental": "Vivillon",
	"vivillonelegant": "Vivillon",
	"vivillongarden": "Vivillon",
	"vivillonhighplains": "Vivillon",
	"vivillonicysnow": "Vivillon",
	"vivillonjungle": "Vivillon",
	"vivillonmarine": "Vivillon",
	"vivillonmodern": "Vivillon",
	"vivillonmonsoon": "Vivillon",
	"vivillonocean": "Vivillon",
	"vivillonpolar": "Vivillon",
	"vivillonriver": "Vivillon",
	"vivillonsandstorm": "Vivillon",
	"vivillonsavanna": "Vivillon",
	"vivillonsun": "Vivillon",
	"vivillontundra": "Vivillon",
	"flabb": "Flabebe",
	"flabebered": "Flabebe",
	"flabebeblue": "Flabebe",
	"flabebeorange": "Flabebe",
	"flabebewhite": "Flabebe",
	"flabebeyellow": "Flabebe",
	"flabbred": "Flabebe",
	"flabbblue": "Flabebe",
	"flabborange": "Flabebe",
	"flabbwhite": "Flabebe",
	"flabbyellow": "Flabebe",
	"floettered": "Floette",
	"floetteblue": "Floette",
	"floetteorange": "Floette",
	"floettewhite": "Floette",
	"floetteyellow": "Floette",
	"florgesred": "Florges",
	"florgesblue": "Florges",
	"florgesorange": "Florges",
	"florgeswhite": "Florges",
	"florgesyellow": "Florges",
	"furfroudandy": "Furfrou",
	"furfroudebutante": "Furfrou",
	"furfroudiamond": "Furfrou",
	"furfrouheart": "Furfrou",
	"furfroukabuki": "Furfrou",
	"furfroulareine": "Furfrou",
	"furfroumatron": "Furfrou",
	"furfroupharaoh": "Furfrou",
	"furfroustar": "Furfrou",
	"miniorred": "Minior",
	"miniororange": "Minior",
	"minioryellow": "Minior",
	"miniorgreen": "Minior",
	"miniorblue": "Minior",
	"miniorindigo": "Minior",
	"miniorviolet": "Minior",
	"pokestargiant2": "Pokestar Giant",
	"pokestarmonica2": "Pokestar Giant",
	"pokestarufopropu1": "Pokestar UFO",
	"pokestarpropu1": "Pokestar UFO",
	"pokestarpropu2": "Pokestar UFO-2",
	"pokestarbrycenmanprop": "Pokestar Brycen-Man",
	"pokestarproph1": "Pokestar Brycen-Man",
	"pokestarmtprop": "Pokestar MT",
	"pokestarpropm1": "Pokestar MT",
	"pokestarmt2prop": "Pokestar MT2",
	"pokestarpropm2": "Pokestar MT2",
	"pokestartransportprop": "Pokestar Transport",
	"pokestarpropt1": "Pokestar Transport",
	"pokestargiantpropo1": "Pokestar Giant",
	"pokestarpropo1": "Pokestar Giant",
	"pokestargiantpropo2": "Pokestar Giant",
	"pokestarpropo2": "Pokestar Giant",
	"pokestarhumanoidprop": "Pokestar Humanoid",
	"pokestarpropc1": "Pokestar Humanoid",
	"pokestarmonsterprop": "Pokestar Monster",
	"pokestarpropc2": "Pokestar Monster",
	"pokestarspiritprop": "Pokestar Spirit",
	"pokestarpropg1": "Pokestar Spirit",
	"pokestarblackdoorprop": "Pokestar Black Door",
	"pokestarpropw1": "Pokestar Black Door",
	"pokestarwhitedoorprop": "Pokestar White Door",
	"pokestarpropw2": "Pokestar White Door",
	"pokestarf00prop": "Pokestar F00",
	"pokestarpropr1": "Pokestar F00",
	"pokestarf002prop": "Pokestar F002",
	"pokestarpropr2": "Pokestar F002",
	"pokestarblackbeltprop": "Pokestar Black Belt",
	"pokestarpropk1": "Pokestar Black Belt",
	"giant2": "Pokestar Giant",
	"monica2": "Pokestar Giant",
	"ufopropu1": "Pokestar UFO",
	"propu1": "Pokestar UFO",
	"ufopropu2": "Pokestar UFO-2",
	"propu2": "Pokestar UFO-2",
	"brycenmanprop": "Pokestar Brycen-Man",
	"proph1": "Pokestar Brycen-Man",
	"mtprop": "Pokestar MT",
	"propm1": "Pokestar MT",
	"mt2prop": "Pokestar MT2",
	"propm2": "Pokestar MT2",
	"transportprop": "Pokestar Transport",
	"propt1": "Pokestar Transport",
	"giantpropo1": "Pokestar Giant",
	"propo1": "Pokestar Giant",
	"giantpropo2": "Pokestar Giant",
	"propo2": "Pokestar Giant",
	"humanoidprop": "Pokestar Humanoid",
	"propc1": "Pokestar Humanoid",
	"monsterprop": "Pokestar Monster",
	"propc2": "Pokestar Monster",
	"spiritprop": "Pokestar Spirit",
	"propg1": "Pokestar Spirit",
	"blackdoorprop": "Pokestar Black Door",
	"propw1": "Pokestar Black Door",
	"whitedoorprop": "Pokestar White Door",
	"propw2": "Pokestar White Door",
	"f00prop": "Pokestar F00",
	"propr1": "Pokestar F00",
	"f002prop": "Pokestar F002",
	"propr2": "Pokestar F002",
	"blackbeltprop": "Pokestar Black Belt",
	"propk1": "Pokestar Black Belt",

	// abilities
	"ph": "Poison Heal",
	"regen": "Regenerator",
	"stag": "Shadow Tag",

	// items
	"assvest": "Assault Vest",
	"av": "Assault Vest",
	"balloon": "Air Balloon",
	"band": "Choice Band",
	"cb": "Choice Band",
	"ebelt": "Expert Belt",
	"fightgem": "Fighting Gem",
	"flightgem": "Flying Gem",
	"goggles": "Safety Goggles",
	"helmet": "Rocky Helmet",
	"lefties": "Leftovers",
	"lo": "Life Orb",
	"lorb": "Life Orb",
	"sash": "Focus Sash",
	"scarf": "Choice Scarf",
	"specs": "Choice Specs",
	"wp": "Weakness Policy",

	// pokemon
	"aboma": "Abomasnow",
	"aegi": "Aegislash",
	"aegiblade": "Aegislash-Blade",
	"aegis": "Aegislash",
	"aero": "Aerodactyl",
	"amph": "Ampharos",
	"arc": "Arceus",
	"arceusnormal": "Arceus",
	"ashgren": "Greninja-Ash",
	"azu": "Azumarill",
	"bdrill": "Beedrill",
	"bee": "Beedrill",
	"birdjesus": "Pidgeot",
	"bish": "Bisharp",
	"blace": "Blacephalon",
	"bliss": "Blissey",
	"bulu": "Tapu Bulu",
	"camel": "Camerupt",
	"cathy": "Trevenant",
	"chandy": "Chandelure",
	"chomp": "Garchomp",
	"clef": "Clefable",
	"coba": "Cobalion",
	"cofag": "Cofagrigus",
	"conk": "Conkeldurr",
	"cress": "Cresselia",
	"cube": "Kyurem-Black",
	"cune": "Suicune",
	"darm": "Darmanitan",
	"dnite": "Dragonite",
	"dogars": "Koffing",
	"don": "Groudon",
	"drill": "Excadrill",
	"driller": "Excadrill",
	"dug": "Dugtrio",
	"duggy": "Dugtrio",
	"ekiller": "Arceus",
	"esca": "Escavalier",
	"ferro": "Ferrothorn",
	"fini": "Tapu Fini",
	"forry": "Forretress",
	"fug": "Rayquaza",
	"gar": "Gengar",
	"garde": "Gardevoir",
	"gatr": "Feraligatr",
	"gene": "Genesect",
	"gira": "Giratina",
	"gren": "Greninja",
	"gross": "Metagross",
	"gyara": "Gyarados",
	"hera": "Heracross",
	"hippo": "Hippowdon",
	"honch": "Honchkrow",
	"kanga": "Kangaskhan",
	"karp": "Magikarp",
	"kart": "Kartana",
	"keld": "Keldeo",
	"klef": "Klefki",
	"koko": "Tapu Koko",
	"kou": "Raikou",
	"krook": "Krookodile",
	"kyub": "Kyurem-Black",
	"kyuw": "Kyurem-White",
	"lando": "Landorus",
	"landoi": "Landorus",
	"landot": "Landorus-Therian",
	"lego": "Nihilego",
	"lele": "Tapu Lele",
	"linda": "Fletchinder",
	"luke": "Lucario",
	"lurk": "Golurk",
	"mage": "Magearna",
	"mamo": "Mamoswine",
	"mandi": "Mandibuzz",
	"mence": "Salamence",
	"milo": "Milotic",
	"morfentshusbando": "Gengar",
	"naga": "Naganadel",
	"nape": "Infernape",
	"nebby": "Cosmog",
	"neckboy": "Exeggutor-Alola",
	"obama": "Abomasnow",
	"ogre": "Kyogre",
	"ohmagod": "Plasmanta",
	"p2": "Porygon2",
	"pert": "Swampert",
	"pex": "Toxapex",
	"phero": "Pheromosa",
	"pika": "Pikachu",
	"pory2": "Porygon2",
	"poryz": "Porygon-Z",
	"pyuku": "Pyukumuku",
	"pz": "Porygon-Z",
	"queen": "Nidoqueen",
	"rachi": "Jirachi",
	"rank": "Reuniclus",
	"ray": "Rayquaza",
	"reuni": "Reuniclus",
	"sab": "Sableye",
	"sable": "Sableye",
	"scept": "Sceptile",
	"scoli": "Scolipede",
	"serp": "Serperior",
	"shao": "Mienshao",
	"skarm": "Skarmory",
	"smogon": "Koffing",
	"smogonbird": "Talonflame",
	"staka": "Stakataka",
	"steela": "Celesteela",
	"sui": "Suicune",
	"swole": "Buzzwole",
	"talon": "Talonflame",
	"tang": "Tangrowth",
	"terra": "Terrakion",
	"tflame": "Talonflame",
	"thundy": "Thundurus",
	"toed": "Politoed",
	"torn": "Tornadus",
	"tran": "Heatran",
	"ttar": "Tyranitar",
	"venu": "Venusaur",
	"viriz": "Virizion",
	"whimsi": "Whimsicott",
	"xern": "Xerneas",
	"xurk": "Xurkitree",
	"ygod": "Yveltal",
	"zam": "Alakazam",
	"zard": "Charizard",
	"zong": "Bronzong",
	"zor": "Scizor",
	"zyg": "Zygarde",

	// ultra beast codenames
	"ub01": "Nihilego",
	"ub02a": "Buzzwole",
	"ub02b": "Pheromosa",
	"ub03": "Xurkitree",
	"ub04blade": "Kartana",
	"ub04blaster": "Celesteela",
	"ub05": "Guzzlord",
	"ubburst": "Blacephalon",
	"ubassembly": "Stakataka",
	"ubadhesive": "Poipole",

	// moves
	"bb": "Brave Bird",
	"bd": "Belly Drum",
	"bpass": "Baton Pass",
	"bp": "Baton Pass",
	"cc": "Close Combat",
	"cm": "Calm Mind",
	"dbond": "Destiny Bond",
	"dd": "Dragon Dance",
	"dv": "Dark Void",
	"eq": "Earthquake",
	"espeed": "ExtremeSpeed",
	"eterrain": "Electric Terrain",
	"faintattack": "Feint Attack",
	"glowpunch": "Power-up Punch",
	"gterrain": "Grassy Terrain",
	"hp": "Hidden Power",
	"hpbug": "Hidden Power Bug",
	"hpdark": "Hidden Power Dark",
	"hpdragon": "Hidden Power Dragon",
	"hpelectric": "Hidden Power electric",
	"hpfighting": "Hidden Power Fighting",
	"hpfire": "Hidden Power Fire",
	"hpflying": "Hidden Power Flying",
	"hpghost": "Hidden Power Ghost",
	"hpgrass": "Hidden Power Grass",
	"hpground": "Hidden Power Ground",
	"hpice": "Hidden Power Ice",
	"hppoison": "Hidden Power Poison",
	"hppsychic": "Hidden Power Psychic",
	"hprock": "Hidden Power Rock",
	"hpsteel": "Hidden Power Steel",
	"hpwater": "Hidden Power Water",
	"hjk": "High Jump Kick",
	"hijumpkick": "High Jump Kick",
	"mterrain": "Misty Terrain",
	"np": "Nasty Plot",
	"pfists": "Plasma Fists",
	"playaround": "Play Rough",
	"pterrain": "Psychic Terrain",
	"pup": "Power-up Punch",
	"qd": "Quiver Dance",
	"rocks": "Stealth Rock",
	"sd": "Swords Dance",
	"se": "Stone Edge",
	"spin": "Rapid Spin",
	"sr": "Stealth Rock",
	"sub": "Substitute",
	"tr": "Trick Room",
	"troom": "Trick Room",
	"tbolt": "Thunderbolt",
	"tspikes": "Toxic Spikes",
	"twave": "Thunder Wave",
	"web": "Sticky Web",
	"wow": "Will-O-Wisp",

	// z-moves
	"10mv": "10,000,000 Volt Thunderbolt",
	"10mvt": "10,000,000 Volt Thunderbolt",
	"clangorous": "Clangorous Soulblaze",
	"cs": "Clangorous Soulblaze",
	"ee": "Extreme Evoboost",
	"extreme": "Extreme Evoboost",
	"genesis": "Genesis Supernova",
	"goa": "Guardian of Alola",
	"gs": "Genesis Supernova",
	"guardian": "Guardian of Alola",
	"lets": "Let's Snuggle Forever",
	"light": "Light That Burns the Sky",
	"lsf": "Let's Snuggle Forever",
	"ltbts": "Light That Burns the Sky",
	"malicious": "Malicious Moonsault",
	"menacing": "Menacing Moonraze Maelstrom",
	"mmm": "Menacing Moonraze Maelstrom",
	"moonsault": "Malicious Moonsault",
	"oceanic": "Oceanic Operetta",
	"oo": "Oceanic Operetta",
	"pp": "Pulverizing Pancake",
	"pulverizing": "Pulverizing Pancake",
	"sar": "Sinister Arrow Raid",
	"searing": "Searing Sunraze Smash",
	"sinister": "Sinister Arrow Raid",
	"ss": "Stoked Sparksurfer",
	"sss": "Searing Sunraze Smash",
	"sssss": "Soul-Stealing 7-Star Strike",
	"ss7ss": "Soul-Stealing 7-Star Strike",
	"soul": "Soul-Stealing 7-Star Strike",
	"soulstealingsevenstarstrike": "Soul-Stealing 7-Star Strike",
	"splintered": "Splintered Stormshards",
	"stoked": "Stoked Sparksurfer",
	"stormshards": "Splintered Stormshards",
	"zbug": "Savage Spin-Out",
	"zclangingscales": "Clangorous Soulblaze",
	"zdark": "Black Hole Eclipse",
	"zdarkestlariat": "Malicious Moonsault",
	"zdawnwingsnecrozma": "Menacing Moonraze Maelstrom",
	"zdecidueye": "Sinister Arrow Raid",
	"zdragon": "Devastating Drake",
	"zduskmanenecrozma": "Searing Sunraze Smash",
	"zelectric": "Gigavolt Havoc",
	"zeevee": "Extreme Evoboost",
	"zevo": "Extreme Evoboost",
	"zfairy": "Twinkle Tackle",
	"zflying": "Supersonic Skystrike",
	"zfighting": "All-Out Pummeling",
	"zfire": "Inferno Overdrive",
	"zghost": "Never-Ending Nightmare",
	"zgigaimpact": "Pulverizing Pancake",
	"zgrass": "Bloom Doom",
	"zground": "Tectonic Rage",
	"zice": "Subzero Slammer",
	"zincineroar": "Malicious Moonsault",
	"zkommoo": "Clangorous Soulblaze",
	"zlastresort": "Extreme Evoboost",
	"zlunala": "Menacing Moonraze Maelstrom",
	"zlycanroc": "Splintered Stormshards",
	"znaturesmadness": "Guardian of Alola",
	"zmarshadow": "Soul-Stealing 7-Star Strike",
	"zmew": "Genesis Supernova",
	"zmimikyu": "Let's Snuggle Forever",
	"zmoongeistbeam": "Menacing Moonraze Maelstrom",
	"znecrozma": "Light That Burns the Sky",
	"znormal": "Breakneck Blitz",
	"zrock": "Continental Crush",
	"zphotongeyser": "Light That Burns the Sky",
	"zpikachu": "Catastropika",
	"zpikachucap": "10,000,000 Volt Thunderbolt",
	"zplayrough": "Let's Snuggle Forever",
	"zpoison": "Acid Downpour",
	"zprimarina": "Oceanic Operetta",
	"zpsychic": "Shattered Psyche",
	"zraichu": "Stoked Sparksurfer",
	"zsnorlax": "Pulverizing Pancake",
	"zsolgaleo": "Searing Sunraze Smash",
	"zsparklingaria": "Oceanic Operetta",
	"zspectralthief": "Soul-Stealing 7-Star Strike",
	"zspiritshackle": "Sinister Arrow Raid",
	"zsunsteelstrike": "Searing Sunraze Smash",
	"zsteel": "Corkscrew Crash",
	"zstoneedge": "Splintered Stormshards",
	"ztapu": "Guardian of Alola",
	"zthunderbolt": "10,000,000 Volt Thunderbolt",
	"zultranecrozma": "Light That Burns the Sky",
	"zvolttackle": "Catastropika",
	"zwater": "Hydro Vortex",

	// Japanese names
	"fushigidane": "Bulbasaur",
	"fushigisou": "Ivysaur",
	"fushigibana": "Venusaur",
	"hitokage": "Charmander",
	"rizaado": "Charmeleon",
	"rizaadon": "Charizard",
	"zenigame": "Squirtle",
	"kameeru": "Wartortle",
	"kamekkusu": "Blastoise",
	"kyatapii": "Caterpie",
	"toranseru": "Metapod",
	"batafurii": "Butterfree",
	"biidoru": "Weedle",
	"kokuun": "Kakuna",
	"supiaa": "Beedrill",
	"poppo": "Pidgey",
	"pijon": "Pidgeotto",
	"pijotto": "Pidgeot",
	"koratta": "Rattata",
	"ratta": "Raticate",
	"onisuzume": "Spearow",
	"onidoriru": "Fearow",
	"aabo": "Ekans",
	"aabokku": "Arbok",
	"pikachuu": "Pikachu",
	"raichuu": "Raichu",
	"sando": "Sandshrew",
	"sandopan": "Sandslash",
	"nidoranmesu": "Nidoran-F",
	"nidoriina": "Nidorina",
	"nidokuin": "Nidoqueen",
	"nidoranosu": "Nidoran-M",
	"nidoriino": "Nidorino",
	"nidokingu": "Nidoking",
	"pippi": "Clefairy",
	"pikushii": "Clefable",
	"rokon": "Vulpix",
	"kyuukon": "Ninetales",
	"purin": "Jigglypuff",
	"pukurin": "Wigglytuff",
	"zubatto": "Zubat",
	"gorubatto": "Golbat",
	"nazonokusa": "Oddish",
	"kusaihana": "Gloom",
	"rafureshia": "Vileplume",
	"parasu": "Paras",
	"parasekuto": "Parasect",
	"konpan": "Venonat",
	"morufuon": "Venomoth",
	"deiguda": "Diglett",
	"dagutorio": "Dugtrio",
	"nyaasu": "Meowth",
	"perushian": "Persian",
	"kodakku": "Psyduck",
	"gorudakku": "Golduck",
	"mankii": "Mankey",
	"okorizaru": "Primeape",
	"gaadei": "Growlithe",
	"uindei": "Arcanine",
	"nyoromo": "Poliwag",
	"nyorozo": "Poliwhirl",
	"nyorobon": "Poliwrath",
	"keeshy": "Abra",
	"yungeraa": "Kadabra",
	"fuudein": "Alakazam",
	"wanrikii": "Machop",
	"goorikii": "Machoke",
	"kairikii": "Machamp",
	"madatsubomi": "Bellsprout",
	"utsudon": "Weepinbell",
	"utsubotto": "Victreebel",
	"menokurage": "Tentacool",
	"dokukurage": "Tentacruel",
	"ishitsubute": "Geodude",
	"goroon": "Graveler",
	"goroonya": "Golem",
	"poniita": "Ponyta",
	"gyaroppu": "Rapidash",
	"yadon": "Slowpoke",
	"yadoran": "Slowbro",
	"koiru": "Magnemite",
	"reakoiru": "Magneton",
	"kamonegi": "Farfetch'd",
	"doodoo": "Doduo",
	"doodorio": "Dodrio",
	"pauwau": "Seel",
	"jugon": "Dewgong",
	"betobetaa": "Grimer",
	"betobeton": "Muk",
	"sherudaa": "Shellder",
	"parushen": "Cloyster",
	"goosu": "Gastly",
	"goosuto": "Haunter",
	"gengaa": "Gengar",
	"iwaaku": "Onix",
	"suriipu": "Drowzee",
	"suriipaa": "Hypno",
	"kurabu": "Krabby",
	"kinguraa": "Kingler",
	"biriridama": "Voltorb",
	"marumain": "Electrode",
	"tamatama": "Exeggcute",
	"nasshii": "Exeggutor",
	"karakara": "Cubone",
	"garagara": "Marowak",
	"sawamuraa": "Hitmonlee",
	"ebiwaraa": "Hitmonchan",
	"beroringa": "Lickitung",
	"dogaasu": "Koffing",
	"matadogasu": "Weezing",
	"saihoon": "Rhyhorn",
	"saidon": "Rhydon",
	"rakkii": "Chansey",
	"monjara": "Tangela",
	"garuura": "Kangaskhan",
	"tattsuu": "Horsea",
	"shiidora": "Seadra",
	"tosakinto": "Goldeen",
	"azumaou": "Seaking",
	"hitodeman": "Staryu",
	"sutaamii": "Starmie",
	"bariyaado": "Mr. Mime",
	"sutoraiku": "Scyther",
	"ruujura": "Jynx",
	"erebuu": "Electabuzz",
	"buubaa": "Magmar",
	"kairosu": "Pinsir",
	"kentarosu": "Tauros",
	"koikingu": "Magikarp",
	"gyaradosu": "Gyarados",
	"rapurasu": "Lapras",
	"metamon": "Ditto",
	"iibui": "Eevee",
	"shawaazu": "Vaporeon",
	"sandaasu": "Jolteon",
	"buusutaa": "Flareon",
	"porigon": "Porygon",
	"omunaito": "Omanyte",
	"omusutaa": "Omastar",
	"kabutopusu": "Kabutops",
	"putera": "Aerodactyl",
	"kabigon": "Snorlax",
	"furiizaa": "Articuno",
	"sandaa": "Zapdos",
	"fuaiyaa": "Moltres",
	"miniryuu": "Dratini",
	"hakuryuu": "Dragonair",
	"kairyuu": "Dragonite",
	"myuutsuu": "Mewtwo",
	"myuu": "Mew",
	"chikoriita": "Chikorita",
	"beiriifu": "Bayleef",
	"meganiumu": "Meganium",
	"hinoarashi": "Cyndaquil",
	"magumarashi": "Quilava",
	"bakufuun": "Typhlosion",
	"waninoko": "Totodile",
	"arigeitsu": "Croconaw",
	"oodairu": "Feraligatr",
	"otachi": "Sentret",
	"ootachi": "Furret",
	"hoohoo": "Hoothoot",
	"yorunozuku": "Noctowl",
	"redeiba": "Ledyba",
	"redeian": "Ledian",
	"itomaru": "Spinarak",
	"ariadosu": "Ariados",
	"kurobatto": "Crobat",
	"chonchii": "Chinchou",
	"rantaan": "Lanturn",
	"pichuu": "Pichu",
	"py": "Cleffa",
	"pupurin": "Igglybuff",
	"togepii": "Togepi",
	"togechikku": "Togetic",
	"neitei": "Natu",
	"neiteio": "Xatu",
	"meriipu": "Mareep",
	"mokoko": "Flaaffy",
	"denryuu": "Ampharos",
	"kireihana": "Bellossom",
	"mariru": "Marill",
	"mariruri": "Azumarill",
	"usokkii": "Sudowoodo",
	"nyorotono": "Politoed",
	"hanekko": "Hoppip",
	"popokko": "Skiploom",
	"watakko": "Jumpluff",
	"eipamu": "Aipom",
	"himanattsu": "Sunkern",
	"kimawari": "Sunflora",
	"yanyanma": "Yanma",
	"upaa": "Wooper",
	"nuoo": "Quagsire",
	"eefi": "Espeon",
	"burakkii": "Umbreon",
	"yamikarasu": "Murkrow",
	"yadokingu": "Slowking",
	"muuma": "Misdreavus",
	"annoon": "Unown",
	"soonansu": "Wobbuffet",
	"kirinriki": "Girafarig",
	"kunugidama": "Pineco",
	"fuoretosu": "Forretress",
	"nokotchi": "Dunsparce",
	"guraigaa": "Gligar",
	"haganeeru": "Steelix",
	"buruu": "Snubbull",
	"guranburu": "Granbull",
	"hariisen": "Qwilfish",
	"hassamu": "Scizor",
	"tsubotsubo": "Shuckle",
	"herakurosu": "Heracross",
	"nyuura": "Sneasel",
	"himeguma": "Teddiursa",
	"ringuma": "Ursaring",
	"magumaggu": "Slugma",
	"magukarugo": "Magcargo",
	"urimuu": "Swinub",
	"inomuu": "Piloswine",
	"saniigo": "Corsola",
	"teppouo": "Remoraid",
	"okutan": "Octillery",
	"deribaado": "Delibird",
	"mantain": "Mantine",
	"eaamudo": "Skarmory",
	"derubiru": "Houndour",
	"herugaa": "Houndoom",
	"kingudora": "Kingdra",
	"gomazou": "Phanpy",
	"donfuan": "Donphan",
	"porigon2": "Porygon2",
	"odoshishi": "Stantler",
	"dooburu": "Smeargle",
	"barukii": "Tyrogue",
	"kapoeraa": "Hitmontop",
	"muchuuru": "Smoochum",
	"erekiddo": "Elekid",
	"buby": "Magby",
	"mirutanku": "Miltank",
	"hapinasu": "Blissey",
	"suikun": "Suicune",
	"yoogirasu": "Larvitar",
	"sanagirasu": "Pupitar",
	"bangirasu": "Tyranitar",
	"rugia": "Lugia",
	"houou": "Ho-Oh",
	"sereby": "Celebi",
	"kimori": "Treecko",
	"juputoru": "Grovyle",
	"jukain": "Sceptile",
	"achamo": "Torchic",
	"wakashamo": "Combusken",
	"bashaamo": "Blaziken",
	"mizugorou": "Mudkip",
	"numakuroo": "Marshtomp",
	"raguraaji": "Swampert",
	"pochiena": "Poochyena",
	"guraena": "Mightyena",
	"jiguzaguma": "Zigzagoon",
	"massuguma": "Linoone",
	"kemusso": "Wurmple",
	"karasarisu": "Silcoon",
	"agehanto": "Beautifly",
	"mayurudo": "Cascoon",
	"dokukeiru": "Dustox",
	"hasuboo": "Lotad",
	"hasuburero": "Lombre",
	"runpappa": "Ludicolo",
	"taneboo": "Seedot",
	"konohana": "Nuzleaf",
	"daatengu": "Shiftry",
	"subame": "Taillow",
	"oosubame": "Swellow",
	"kyamome": "Wingull",
	"perippaa": "Pelipper",
	"rarutosu": "Ralts",
	"kiruria": "Kirlia",
	"saanaito": "Gardevoir",
	"ametama": "Surskit",
	"amemoosu": "Masquerain",
	"kinokoko": "Shroomish",
	"kinogassa": "Breloom",
	"namakero": "Slakoth",
	"yarukimono": "Vigoroth",
	"kekkingu": "Slaking",
	"tsuchinin": "Nincada",
	"tekkanin": "Ninjask",
	"nukenin": "Shedinja",
	"gonyonyo": "Whismur",
	"dogoomu": "Loudred",
	"bakuongu": "Exploud",
	"makunoshita": "Makuhita",
	"hariteyama": "Hariyama",
	"ruriri": "Azurill",
	"nozupasu": "Nosepass",
	"eneko": "Skitty",
	"enekororo": "Delcatty",
	"yamirami": "Sableye",
	"kuchiito": "Mawile",
	"kokodora": "Aron",
	"kodora": "Lairon",
	"bosugodora": "Aggron",
	"asanan": "Meditite",
	"chaaremu": "Medicham",
	"rakurai": "Electrike",
	"raiboruto": "Manectric",
	"purasuru": "Plusle",
	"mainan": "Minun",
	"barubiito": "Volbeat",
	"irumiize": "Illumise",
	"rozeria": "Roselia",
	"gokurin": "Gulpin",
	"marunoomu": "Swalot",
	"kibania": "Carvanha",
	"samehadaa": "Sharpedo",
	"hoeruko": "Wailmer",
	"hoeruoo": "Wailord",
	"donmeru": "Numel",
	"bakuuda": "Camerupt",
	"kootasu": "Torkoal",
	"banebuu": "Spoink",
	"buupiggu": "Grumpig",
	"patchiiru": "Spinda",
	"nakkuraa": "Trapinch",
	"biburaaba": "Vibrava",
	"furaigon": "Flygon",
	"sabonea": "Cacnea",
	"nokutasu": "Cacturne",
	"chirutto": "Swablu",
	"chirutarisu": "Altaria",
	"zanguusu": "Zangoose",
	"habuneeku": "Seviper",
	"runatoon": "Lunatone",
	"sorurokku": "Solrock",
	"dojotchi": "Barboach",
	"namazun": "Whiscash",
	"heigani": "Corphish",
	"shizarigaa": "Crawdaunt",
	"yajiron": "Baltoy",
	"nendooru": "Claydol",
	"ririira": "Lileep",
	"yureidoru": "Cradily",
	"anopusu": "Anorith",
	"aamarudo": "Armaldo",
	"hinbasu": "Feebas",
	"mirokarosu": "Milotic",
	"powarun": "Castform",
	"kakureon": "Kecleon",
	"kagebouzu": "Shuppet",
	"jupetta": "Banette",
	"yomawaru": "Duskull",
	"samayooru": "Dusclops",
	"toropiusu": "Tropius",
	"chiriin": "Chimecho",
	"abusoru": "Absol",
	"soonano": "Wynaut",
	"yukiwarashi": "Snorunt",
	"onigoori": "Glalie",
	"tamazarashi": "Spheal",
	"todoguraa": "Sealeo",
	"todozeruga": "Walrein",
	"paaruru": "Clamperl",
	"hanteeru": "Huntail",
	"sakurabisu": "Gorebyss",
	"jiiransu": "Relicanth",
	"rabukasu": "Luvdisc",
	"tatsubei": "Bagon",
	"komoruu": "Shelgon",
	"boomanda": "Salamence",
	"danbaru": "Beldum",
	"metangu": "Metang",
	"metagurosu": "Metagross",
	"rejirokku": "Regirock",
	"rejiaisu": "Regice",
	"rejisuchiru": "Registeel",
	"rateiasu": "Latias",
	"rateiosu": "Latios",
	"kaiooga": "Kyogre",
	"guraadon": "Groudon",
	"rekkuuza": "Rayquaza",
	"jiraachi": "Jirachi",
	"deokishisu": "Deoxys",
	"naetoru": "Turtwig",
	"hayashigame": "Grotle",
	"dodaitosu": "Torterra",
	"hikozaru": "Chimchar",
	"moukazaru": "Monferno",
	"goukazaru": "Infernape",
	"potchama": "Piplup",
	"pottaishi": "Prinplup",
	"enperuto": "Empoleon",
	"mukkuru": "Starly",
	"mukubaado": "Staravia",
	"mukuhooku": "Staraptor",
	"bippa": "Bidoof",
	"biidaru": "Bibarel",
	"korobooshi": "Kricketot",
	"korotokku": "Kricketune",
	"korinku": "Shinx",
	"rukushio": "Luxio",
	"rentoraa": "Luxray",
	"subomii": "Budew",
	"rozureido": "Roserade",
	"zugaidosu": "Cranidos",
	"ramuparudo": "Rampardos",
	"tatetopusu": "Shieldon",
	"toridepusu": "Bastiodon",
	"minomutchi": "Burmy",
	"minomadamu": "Wormadam",
	"gaameiru": "Mothim",
	"mitsuhanii": "Combee",
	"biikuin": "Vespiquen",
	"buizeru": "Buizel",
	"furoozeru": "Floatzel",
	"cherinbo": "Cherubi",
	"cherimu": "Cherrim",
	"karanakushi": "Shellos",
	"toritodon": "Gastrodon",
	"eteboosu": "Ambipom",
	"fuwante": "Drifloon",
	"fuwaraido": "Drifblim",
	"mimiroru": "Buneary",
	"mimiroppu": "Lopunny",
	"muumaaji": "Mismagius",
	"donkarasu": "Honchkrow",
	"nyarumaa": "Glameow",
	"bunyatto": "Purugly",
	"riishan": "Chingling",
	"sukanpuu": "Stunky",
	"sukatanku": "Skuntank",
	"doomiraa": "Bronzor",
	"dootakun": "Bronzong",
	"usohachi": "Bonsly",
	"manene": "Mime Jr.",
	"pinpuku": "Happiny",
	"perappu": "Chatot",
	"mikaruge": "Spiritomb",
	"fukamaru": "Gible",
	"gabaito": "Gabite",
	"gaburiasu": "Garchomp",
	"gonbe": "Munchlax",
	"rioru": "Riolu",
	"rukario": "Lucario",
	"hipopotasu": "Hippopotas",
	"kabarudon": "Hippowdon",
	"sukorupi": "Skorupi",
	"dorapion": "Drapion",
	"guregguru": "Croagunk",
	"dokuroggu": "Toxicroak",
	"masukippa": "Carnivine",
	"keikouo": "Finneon",
	"neoranto": "Lumineon",
	"tamanta": "Mantyke",
	"yukikaburi": "Snover",
	"yukinooo": "Abomasnow",
	"manyuura": "Weavile",
	"jibakoiru": "Magnezone",
	"beroberuto": "Lickilicky",
	"dosaidon": "Rhyperior",
	"mojanbo": "Tangrowth",
	"erekiburu": "Electivire",
	"buubaan": "Magmortar",
	"togekissu": "Togekiss",
	"megayanma": "Yanmega",
	"riifia": "Leafeon",
	"gureishia": "Glaceon",
	"guraion": "Gliscor",
	"manmuu": "Mamoswine",
	"porigonz": "Porygon-Z",
	"erureido": "Gallade",
	"dainoozu": "Probopass",
	"yonowaaru": "Dusknoir",
	"yukimenoko": "Froslass",
	"rotomu": "Rotom",
	"yukushii": "Uxie",
	"emuritto": "Mesprit",
	"agunomu": "Azelf",
	"deiaruga": "Dialga",
	"parukia": "Palkia",
	"hiidoran": "Heatran",
	"rejigigasu": "Regigigas",
	"girateina": "Giratina",
	"kureseria": "Cresselia",
	"fione": "Phione",
	"manafi": "Manaphy",
	"daakurai": "Darkrai",
	"sheimi": "Shaymin",
	"aruseusu": "Arceus",
	"bikuteini": "Victini",
	"tsutaaja": "Snivy",
	"janobii": "Servine",
	"jarooda": "Serperior",
	"pokabu": "Tepig",
	"chaobuu": "Pignite",
	"enbuoo": "Emboar",
	"mijumaru": "Oshawott",
	"futachimaru": "Dewott",
	"daikenki": "Samurott",
	"minezumi": "Patrat",
	"miruhoggu": "Watchog",
	"yooterii": "Lillipup",
	"haaderia": "Herdier",
	"muurando": "Stoutland",
	"choroneko": "Purrloin",
	"reparudasu": "Liepard",
	"yanappu": "Pansage",
	"yanakkii": "Simisage",
	"baoppu": "Pansear",
	"baokkii": "Simisear",
	"hiyappu": "Panpour",
	"hiyakkii": "Simipour",
	"mushaana": "Musharna",
	"mamepato": "Pidove",
	"hatooboo": "Tranquill",
	"kenhorou": "Unfezant",
	"shimama": "Blitzle",
	"zeburaika": "Zebstrika",
	"dangoro": "Roggenrola",
	"gantoru": "Boldore",
	"gigaiasu": "Gigalith",
	"koromori": "Woobat",
	"kokoromori": "Swoobat",
	"moguryuu": "Drilbur",
	"doryuuzu": "Excadrill",
	"tabunne": "Audino",
	"dokkoraa": "Timburr",
	"dotekkotsu": "Gurdurr",
	"roobushin": "Conkeldurr",
	"otamaro": "Tympole",
	"gamagaru": "Palpitoad",
	"gamageroge": "Seismitoad",
	"nageki": "Throh",
	"dageki": "Sawk",
	"kurumiru": "Sewaddle",
	"kurumayu": "Swadloon",
	"hahakomori": "Leavanny",
	"fushide": "Venipede",
	"hoiiga": "Whirlipede",
	"pendoraa": "Scolipede",
	"monmen": "Cottonee",
	"erufuun": "Whimsicott",
	"churine": "Petilil",
	"doredeia": "Lilligant",
	"basurao": "Basculin",
	"meguroko": "Sandile",
	"warubiru": "Krokorok",
	"warubiaru": "Krookodile",
	"darumakka": "Darumaka",
	"hihidaruma": "Darmanitan",
	"marakatchi": "Maractus",
	"ishizumai": "Dwebble",
	"iwaparesu": "Crustle",
	"zuruggu": "Scraggy",
	"zuruzukin": "Scrafty",
	"shinboraa": "Sigilyph",
	"desumasu": "Yamask",
	"desukaan": "Cofagrigus",
	"purotooga": "Tirtouga",
	"abagoora": "Carracosta",
	"aaken": "Archen",
	"aakeosu": "Archeops",
	"yabukuron": "Trubbish",
	"dasutodasu": "Garbodor",
	"zoroa": "Zorua",
	"zoroaaku": "Zoroark",
	"chiraamy": "Minccino",
	"chirachiino": "Cinccino",
	"gochimu": "Gothita",
	"gochimiru": "Gothorita",
	"gochiruzeru": "Gothitelle",
	"yuniran": "Solosis",
	"daburan": "Duosion",
	"rankurusu": "Reuniclus",
	"koaruhii": "Ducklett",
	"suwanna": "Swanna",
	"baniputchi": "Vanillite",
	"baniritchi": "Vanillish",
	"baibanira": "Vanilluxe",
	"shikijika": "Deerling",
	"mebukijika": "Sawsbuck",
	"emonga": "Emolga",
	"kaburumo": "Karrablast",
	"shubarugo": "Escavalier",
	"tamagetake": "Foongus",
	"morobareru": "Amoonguss",
	"pururiru": "Frillish",
	"burungeru": "Jellicent",
	"mamanbou": "Alomomola",
	"bachuru": "Joltik",
	"denchura": "Galvantula",
	"tesshiido": "Ferroseed",
	"nattorei": "Ferrothorn",
	"giaru": "Klink",
	"gigiaru": "Klang",
	"gigigiaru": "Klinklang",
	"shibishirasu": "Tynamo",
	"shibibiiru": "Eelektrik",
	"shibirudon": "Eelektross",
	"riguree": "Elgyem",
	"oobemu": "Beheeyem",
	"hitomoshi": "Litwick",
	"ranpuraa": "Lampent",
	"shandera": "Chandelure",
	"kibago": "Axew",
	"onondo": "Fraxure",
	"ononokusu": "Haxorus",
	"kumashun": "Cubchoo",
	"tsunbeaa": "Beartic",
	"furiijio": "Cryogonal",
	"chobomaki": "Shelmet",
	"agirudaa": "Accelgor",
	"maggyo": "Stunfisk",
	"kojofuu": "Mienfoo",
	"kojondo": "Mienshao",
	"kurimugan": "Druddigon",
	"gobitto": "Golett",
	"goruugu": "Golurk",
	"komatana": "Pawniard",
	"kirikizan": "Bisharp",
	"baffuron": "Bouffalant",
	"washibon": "Rufflet",
	"uooguru": "Braviary",
	"baruchai": "Vullaby",
	"barujiina": "Mandibuzz",
	"kuitaran": "Heatmor",
	"aianto": "Durant",
	"monozu": "Deino",
	"jiheddo": "Zweilous",
	"sazandora": "Hydreigon",
	"meraruba": "Larvesta",
	"urugamosu": "Volcarona",
	"kobaruon": "Cobalion",
	"terakion": "Terrakion",
	"birijion": "Virizion",
	"torunerosu": "Tornadus",
	"borutorosu": "Thundurus",
	"reshiramu": "Reshiram",
	"zekuromu": "Zekrom",
	"randorosu": "Landorus",
	"kyuremu": "Kyurem",
	"kerudeio": "Keldeo",
	"meroetta": "Meloetta",
	"genosekuto": "Genesect",
	"harimaron": "Chespin",
	"hariboogu": "Quilladin",
	"burigaron": "Chesnaught",
	"fuokko": "Fennekin",
	"teerunaa": "Braixen",
	"mafuokushii": "Delphox",
	"keromatsu": "Froakie",
	"gekogashira": "Frogadier",
	"gekkouga": "Greninja",
	"horubii": "Bunnelby",
	"horuudo": "Diggersby",
	"yayakoma": "Fletchling",
	"hinoyakoma": "Fletchinder",
	"fuaiaroo": "Talonflame",
	"kofukimushi": "Scatterbug",
	"kofuurai": "Spewpa",
	"bibiyon": "Vivillon",
	"shishiko": "Litleo",
	"kaenjishi": "Pyroar",
	"furabebe": "Flabébé",
	"furaette": "Floette",
	"furaajesu": "Florges",
	"meeekuru": "Skiddo",
	"googooto": "Gogoat",
	"yanchamu": "Pancham",
	"goronda": "Pangoro",
	"torimian": "Furfrou",
	"nyasupaa": "Espurr",
	"nyaonikusu": "Meowstic",
	"hitotsuki": "Honedge",
	"nidangiru": "Doublade",
	"girugarudo": "Aegislash",
	"shushupu": "Spritzee",
	"furefuwan": "Aromatisse",
	"peroppafu": "Swirlix",
	"peroriimu": "Slurpuff",
	"maaiika": "Inkay",
	"karamanero": "Malamar",
	"kametete": "Binacle",
	"gamenodesu": "Barbaracle",
	"kuzumoo": "Skrelp",
	"doramidoro": "Dragalge",
	"udeppou": "Clauncher",
	"burosutaa": "Clawitzer",
	"erikiteru": "Helioptile",
	"erezaado": "Heliolisk",
	"chigorasu": "Tyrunt",
	"gachigorasu": "Tyrantrum",
	"amarusu": "Amaura",
	"amaruruga": "Aurorus",
	"ninfia": "Sylveon",
	"ruchaburu": "Hawlucha",
	"mereshii": "Carbink",
	"numera": "Goomy",
	"numeiru": "Sliggoo",
	"numerugon": "Goodra",
	"kureffi": "Klefki",
	"bokuree": "Phantump",
	"oorotto": "Trevenant",
	"baketcha": "Pumpkaboo",
	"panpujin": "Gourgeist",
	"kachikooru": "Bergmite",
	"kurebeesu": "Avalugg",
	"onbatto": "Noibat",
	"onbaan": "Noivern",
	"zeruneasu": "Xerneas",
	"iberutaru": "Yveltal",
	"jigarude": "Zygarde",
	"deianshii": "Diancie",
	"fuupa": "Hoopa",
	"borukenion": "Volcanion",
	"mokuroo": "Rowlet",
	"fukusuroo": "Dartrix",
	"junaipaa": "Decidueye",
	"nyabii": "Litten",
	"nyahiito": "Torracat",
	"gaogaen": "Incineroar",
	"ashimari": "Popplio",
	"oshamari": "Brionne",
	"ashireenu": "Primarina",
	"tsutsukera": "Pikipek",
	"kerarappa": "Trumbeak",
	"dodekabashi": "Toucannon",
	"yanguusu": "Yungoos",
	"dekaguusu": "Gumshoos",
	"agojimushi": "Grubbin",
	"denjimushi": "Charjabug",
	"kuwaganon": "Vikavolt",
	"makenkani": "Crabrawler",
	"kekenkani": "Crabominable",
	"odoridori": "Oricorio",
	"aburii": "Cutiefly",
	"aburibon": "Ribombee",
	"iwanko": "Rockruff",
	"rugarugan": "Lycanroc",
	"yowashi": "Wishiwashi",
	"hidoide": "Mareanie",
	"dohidoide": "Toxapex",
	"dorobanko": "Mudbray",
	"banbadoro": "Mudsdale",
	"shizukumo": "Dewpider",
	"onishizukumo": "Araquanid",
	"karikiri": "Fomantis",
	"rarantesu": "Lurantis",
	"nemashu": "Morelull",
	"masheedo": "Shiinotic",
	"yatoumori": "Salandit",
	"ennyuuto": "Salazzle",
	"nuikoguma": "Stufful",
	"kiteruguma": "Bewear",
	"amakaji": "Bounsweet",
	"amamaiko": "Steenee",
	"amaajo": "Tsareena",
	"kyuwawaa": "Comfey",
	"yareyuutan": "Oranguru",
	"nagetsukesaru": "Passimian",
	"kosokumushi": "Wimpod",
	"gusokumusha": "Golisopod",
	"sunabaa": "Sandygast",
	"shirodesuna": "Palossand",
	"namakobushi": "Pyukumuku",
	"taipunuru": "Type: Null",
	"shiruvuadei": "Silvally",
	"meteno": "Minior",
	"nekkoara": "Komala",
	"bakugamesu": "Turtonator",
	"mimikkyu": "Mimikyu",
	"hagigishiri": "Bruxish",
	"jijiiron": "Drampa",
	"dadarin": "Dhelmise",
	"jarako": "Jangmo-o",
	"jarango": "Hakamo-o",
	"jararanga": "Kommo-o",
	"kapukokeko": "Tapu Koko",
	"kaputetefu": "Tapu Lele",
	"kapubururu": "Tapu Bulu",
	"kapurehire": "Tapu Fini",
	"kosumoggu": "Cosmog",
	"kosumoumu": "Cosmoem",
	"sorugareo": "Solgaleo",
	"runaaara": "Lunala",
	"utsuroido": "Nihilego",
	"masshibuun": "Buzzwole",
	"fierooche": "Pheromosa",
	"denjumoku": "Xurkitree",
	"tekkaguya": "Celesteela",
	"kamitsurugi": "Kartana",
	"akujikingu": "Guzzlord",
	"nekurozuma": "Necrozma",
	"magiana": "Magearna",
	"maashadoo": "Marshadow",
	"bebenomu": "Poipole",
	"aagoyon": "Naganadel",
	"tsundetsunde": "Stakataka",
	"zugadoon": "Blacephalon",
	"merutan": "Meltan",
	"merumetaru": "Melmetal",
};

exports.BattleAliases = BattleAliases;
'use strict';

/**@type {{[k: string]: ItemData}} */
let BattleItems = {
	"abomasite": {
		id: "abomasite",
		name: "Abomasite",
		spritenum: 575,
		megaStone: "Abomasnow-Mega",
		megaEvolves: "Abomasnow",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 674,
		gen: 6,
		desc: "If held by an Abomasnow, this item allows it to Mega Evolve in battle.",
	},
	"absolite": {
		id: "absolite",
		name: "Absolite",
		spritenum: 576,
		megaStone: "Absol-Mega",
		megaEvolves: "Absol",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 677,
		gen: 6,
		desc: "If held by an Absol, this item allows it to Mega Evolve in battle.",
	},
	"absorbbulb": {
		id: "absorbbulb",
		name: "Absorb Bulb",
		spritenum: 2,
		fling: {
			basePower: 30,
		},
		onAfterDamage(damage, target, source, move) {
			if (move.type === 'Water' && target.useItem()) {
				this.boost({spa: 1});
			}
		},
		num: 545,
		gen: 5,
		desc: "Raises holder's Sp. Atk by 1 stage if hit by a Water-type attack. Single use.",
	},
	"adamantorb": {
		id: "adamantorb",
		name: "Adamant Orb",
		spritenum: 4,
		fling: {
			basePower: 60,
		},
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move && user.baseTemplate.species === 'Dialga' && (move.type === 'Steel' || move.type === 'Dragon')) {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		num: 135,
		gen: 4,
		desc: "If held by a Dialga, its Steel- and Dragon-type attacks have 1.2x power.",
	},
	"adrenalineorb": {
		id: "adrenalineorb",
		name: "Adrenaline Orb",
		spritenum: 660,
		fling: {
			basePower: 30,
		},
		onAfterBoost(boost, target, source, effect) {
			if (effect.id === 'intimidate' && target.useItem()) {
				this.boost({spe: 1});
			}
		},
		num: 846,
		gen: 7,
		desc: "Raises holder's Speed by 1 stage if it gets affected by Intimidate. Single use.",
	},
	"aerodactylite": {
		id: "aerodactylite",
		name: "Aerodactylite",
		spritenum: 577,
		megaStone: "Aerodactyl-Mega",
		megaEvolves: "Aerodactyl",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 672,
		gen: 6,
		desc: "If held by an Aerodactyl, this item allows it to Mega Evolve in battle.",
	},
	"aggronite": {
		id: "aggronite",
		name: "Aggronite",
		spritenum: 578,
		megaStone: "Aggron-Mega",
		megaEvolves: "Aggron",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 667,
		gen: 6,
		desc: "If held by an Aggron, this item allows it to Mega Evolve in battle.",
	},
	"aguavberry": {
		id: "aguavberry",
		name: "Aguav Berry",
		spritenum: 5,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Dragon",
		},
		onUpdate(pokemon) {
			if (pokemon.hp <= pokemon.maxhp / 4 || (pokemon.hp <= pokemon.maxhp / 2 && pokemon.hasAbility('gluttony'))) {
				pokemon.eatItem();
			}
		},
		onTryEatItem(item, pokemon) {
			if (!this.runEvent('TryHeal', pokemon)) return false;
		},
		onEat(pokemon) {
			this.heal(pokemon.maxhp / 2);
			if (pokemon.getNature().minus === 'spd') {
				pokemon.addVolatile('confusion');
			}
		},
		num: 162,
		gen: 3,
		desc: "Restores 1/2 max HP at 1/4 max HP or less; confuses if -SpD Nature. Single use.",
	},
	"airballoon": {
		id: "airballoon",
		name: "Air Balloon",
		spritenum: 6,
		fling: {
			basePower: 10,
		},
		onStart(target) {
			if (!target.ignoringItem() && !this.field.getPseudoWeather('gravity')) {
				this.add('-item', target, 'Air Balloon');
			}
		},
		// airborneness implemented in sim/pokemon.js:Pokemon#isGrounded
		onAfterDamage(damage, target, source, effect) {
			this.debug('effect: ' + effect.id);
			if (effect.effectType === 'Move' && effect.id !== 'confused') {
				this.add('-enditem', target, 'Air Balloon');
				target.item = '';
				target.itemData = {id: '', target};
				this.runEvent('AfterUseItem', target, null, null, this.getItem('airballoon'));
			}
		},
		onAfterSubDamage(damage, target, source, effect) {
			this.debug('effect: ' + effect.id);
			if (effect.effectType === 'Move' && effect.id !== 'confused') {
				this.add('-enditem', target, 'Air Balloon');
				target.item = '';
				target.itemData = {id: '', target};
				this.runEvent('AfterUseItem', target, null, null, this.getItem('airballoon'));
			}
		},
		num: 541,
		gen: 5,
		desc: "Holder is immune to Ground-type attacks. Pops when holder is hit.",
	},
	"alakazite": {
		id: "alakazite",
		name: "Alakazite",
		spritenum: 579,
		megaStone: "Alakazam-Mega",
		megaEvolves: "Alakazam",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 679,
		gen: 6,
		desc: "If held by an Alakazam, this item allows it to Mega Evolve in battle.",
	},
	"aloraichiumz": {
		id: "aloraichiumz",
		name: "Aloraichium Z",
		spritenum: 655,
		onTakeItem: false,
		zMove: "Stoked Sparksurfer",
		zMoveFrom: "Thunderbolt",
		zMoveUser: ["Raichu-Alola"],
		num: 803,
		gen: 7,
		desc: "If held by an Alolan Raichu with Thunderbolt, it can use Stoked Sparksurfer.",
	},
	"altarianite": {
		id: "altarianite",
		name: "Altarianite",
		spritenum: 615,
		megaStone: "Altaria-Mega",
		megaEvolves: "Altaria",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 755,
		gen: 6,
		desc: "If held by an Altaria, this item allows it to Mega Evolve in battle.",
	},
	"ampharosite": {
		id: "ampharosite",
		name: "Ampharosite",
		spritenum: 580,
		megaStone: "Ampharos-Mega",
		megaEvolves: "Ampharos",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 658,
		gen: 6,
		desc: "If held by an Ampharos, this item allows it to Mega Evolve in battle.",
	},
	"apicotberry": {
		id: "apicotberry",
		name: "Apicot Berry",
		spritenum: 10,
		isBerry: true,
		naturalGift: {
			basePower: 100,
			type: "Ground",
		},
		onUpdate(pokemon) {
			if (pokemon.hp <= pokemon.maxhp / 4 || (pokemon.hp <= pokemon.maxhp / 2 && pokemon.hasAbility('gluttony'))) {
				pokemon.eatItem();
			}
		},
		onEat(pokemon) {
			this.boost({spd: 1});
		},
		num: 205,
		gen: 3,
		desc: "Raises holder's Sp. Def by 1 stage when at 1/4 max HP or less. Single use.",
	},
	"armorfossil": {
		id: "armorfossil",
		name: "Armor Fossil",
		spritenum: 12,
		fling: {
			basePower: 100,
		},
		num: 104,
		gen: 4,
		desc: "Can be revived into Shieldon.",
	},
	"aspearberry": {
		id: "aspearberry",
		name: "Aspear Berry",
		spritenum: 13,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Ice",
		},
		onUpdate(pokemon) {
			if (pokemon.status === 'frz') {
				pokemon.eatItem();
			}
		},
		onEat(pokemon) {
			if (pokemon.status === 'frz') {
				pokemon.cureStatus();
			}
		},
		num: 153,
		gen: 3,
		desc: "Holder is cured if it is frozen. Single use.",
	},
	"assaultvest": {
		id: "assaultvest",
		name: "Assault Vest",
		spritenum: 581,
		fling: {
			basePower: 80,
		},
		onModifySpDPriority: 1,
		onModifySpD(spd) {
			return this.chainModify(1.5);
		},
		onDisableMove(pokemon) {
			for (const moveSlot of pokemon.moveSlots) {
				if (this.getMove(moveSlot.move).category === 'Status') {
					pokemon.disableMove(moveSlot.id);
				}
			}
		},
		num: 640,
		gen: 6,
		desc: "Holder's Sp. Def is 1.5x, but it can only select damaging moves.",
	},
	"audinite": {
		id: "audinite",
		name: "Audinite",
		spritenum: 617,
		megaStone: "Audino-Mega",
		megaEvolves: "Audino",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 757,
		gen: 6,
		desc: "If held by an Audino, this item allows it to Mega Evolve in battle.",
	},
	"babiriberry": {
		id: "babiriberry",
		name: "Babiri Berry",
		spritenum: 17,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Steel",
		},
		onSourceModifyDamage(damage, source, target, move) {
			if (move.type === 'Steel' && target.getMoveHitData(move).typeMod > 0 && (!target.volatiles['substitute'] || move.flags['authentic'] || (move.infiltrates && this.gen >= 6))) {
				if (target.eatItem()) {
					this.debug('-50% reduction');
					this.add('-enditem', target, this.effect, '[weaken]');
					return this.chainModify(0.5);
				}
			}
		},
		onEat() { },
		num: 199,
		gen: 4,
		desc: "Halves damage taken from a supereffective Steel-type attack. Single use.",
	},
	"banettite": {
		id: "banettite",
		name: "Banettite",
		spritenum: 582,
		megaStone: "Banette-Mega",
		megaEvolves: "Banette",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 668,
		gen: 6,
		desc: "If held by a Banette, this item allows it to Mega Evolve in battle.",
	},
	"beastball": {
		id: "beastball",
		name: "Beast Ball",
		spritenum: 661,
		num: 851,
		gen: 7,
		desc: "A special Poke Ball designed to catch Ultra Beasts.",
	},
	"beedrillite": {
		id: "beedrillite",
		name: "Beedrillite",
		spritenum: 628,
		megaStone: "Beedrill-Mega",
		megaEvolves: "Beedrill",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 770,
		gen: 6,
		desc: "If held by a Beedrill, this item allows it to Mega Evolve in battle.",
	},
	"belueberry": {
		id: "belueberry",
		name: "Belue Berry",
		isUnreleased: true,
		spritenum: 21,
		isBerry: true,
		naturalGift: {
			basePower: 100,
			type: "Electric",
		},
		onEat: false,
		num: 183,
		gen: 3,
		desc: "Cannot be eaten by the holder. No effect when eaten with Bug Bite or Pluck.",
	},
	"berryjuice": {
		id: "berryjuice",
		name: "Berry Juice",
		spritenum: 22,
		fling: {
			basePower: 30,
		},
		onUpdate(pokemon) {
			if (pokemon.hp <= pokemon.maxhp / 2) {
				if (this.runEvent('TryHeal', pokemon) && pokemon.useItem()) {
					this.heal(20);
				}
			}
		},
		num: 43,
		gen: 2,
		desc: "Restores 20 HP when at 1/2 max HP or less. Single use.",
	},
	"bigroot": {
		id: "bigroot",
		name: "Big Root",
		spritenum: 29,
		fling: {
			basePower: 10,
		},
		onTryHealPriority: 1,
		onTryHeal(damage, target, source, effect) {
			/**@type {{[k: string]: number}} */
			let heals = {drain: 1, leechseed: 1, ingrain: 1, aquaring: 1, strengthsap: 1};
			if (heals[effect.id]) {
				return this.chainModify([0x14CC, 0x1000]);
			}
		},
		num: 296,
		gen: 4,
		desc: "Holder gains 1.3x HP from draining/Aqua Ring/Ingrain/Leech Seed/Strength Sap.",
	},
	"bindingband": {
		id: "bindingband",
		name: "Binding Band",
		spritenum: 31,
		fling: {
			basePower: 30,
		},
		// implemented in statuses
		num: 544,
		gen: 5,
		desc: "Holder's partial-trapping moves deal 1/6 max HP per turn instead of 1/8.",
	},
	"blackbelt": {
		id: "blackbelt",
		name: "Black Belt",
		spritenum: 32,
		fling: {
			basePower: 30,
		},
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move && move.type === 'Fighting') {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		num: 241,
		gen: 2,
		desc: "Holder's Fighting-type attacks have 1.2x power.",
	},
	"blacksludge": {
		id: "blacksludge",
		name: "Black Sludge",
		spritenum: 34,
		fling: {
			basePower: 30,
		},
		onResidualOrder: 5,
		onResidualSubOrder: 2,
		onResidual(pokemon) {
			if (this.field.isTerrain('grassyterrain')) return;
			if (pokemon.hasType('Poison')) {
				this.heal(pokemon.maxhp / 16);
			} else {
				this.damage(pokemon.maxhp / 8);
			}
		},
		onTerrain(pokemon) {
			if (!this.field.isTerrain('grassyterrain')) return;
			if (pokemon.hasType('Poison')) {
				this.heal(pokemon.maxhp / 16);
			} else {
				this.damage(pokemon.maxhp / 8);
			}
		},
		num: 281,
		gen: 4,
		desc: "Each turn, if holder is a Poison type, restores 1/16 max HP; loses 1/8 if not.",
	},
	"blackglasses": {
		id: "blackglasses",
		name: "Black Glasses",
		spritenum: 35,
		fling: {
			basePower: 30,
		},
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move && move.type === 'Dark') {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		num: 240,
		gen: 2,
		desc: "Holder's Dark-type attacks have 1.2x power.",
	},
	"blastoisinite": {
		id: "blastoisinite",
		name: "Blastoisinite",
		spritenum: 583,
		megaStone: "Blastoise-Mega",
		megaEvolves: "Blastoise",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 661,
		gen: 6,
		desc: "If held by a Blastoise, this item allows it to Mega Evolve in battle.",
	},
	"blazikenite": {
		id: "blazikenite",
		name: "Blazikenite",
		spritenum: 584,
		megaStone: "Blaziken-Mega",
		megaEvolves: "Blaziken",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 664,
		gen: 6,
		desc: "If held by a Blaziken, this item allows it to Mega Evolve in battle.",
	},
	"blueorb": {
		id: "blueorb",
		name: "Blue Orb",
		spritenum: 41,
		onSwitchIn(pokemon) {
			if (pokemon.isActive && pokemon.baseTemplate.species === 'Kyogre') {
				this.insertQueue({pokemon: pokemon, choice: 'runPrimal'});
			}
		},
		onPrimal(pokemon) {
			pokemon.formeChange('Kyogre-Primal', this.effect, true);
		},
		onTakeItem(item, source) {
			if (source.baseTemplate.baseSpecies === 'Kyogre') return false;
			return true;
		},
		num: 535,
		gen: 6,
		desc: "If held by a Kyogre, this item triggers its Primal Reversion in battle.",
	},
	"blukberry": {
		id: "blukberry",
		name: "Bluk Berry",
		spritenum: 44,
		isBerry: true,
		naturalGift: {
			basePower: 90,
			type: "Fire",
		},
		onEat: false,
		num: 165,
		gen: 3,
		desc: "Cannot be eaten by the holder. No effect when eaten with Bug Bite or Pluck.",
	},
	"bottlecap": {
		id: "bottlecap",
		name: "Bottle Cap",
		spritenum: 696,
		fling: {
			basePower: 30,
		},
		num: 795,
		gen: 7,
		desc: "Used for Hyper Training. One of a Pokemon's stats is calculated with an IV of 31.",
	},
	"brightpowder": {
		id: "brightpowder",
		name: "Bright Powder",
		spritenum: 51,
		fling: {
			basePower: 10,
		},
		onModifyAccuracy(accuracy) {
			if (typeof accuracy !== 'number') return;
			this.debug('brightpowder - decreasing accuracy');
			return accuracy * 0.9;
		},
		num: 213,
		gen: 2,
		desc: "The accuracy of attacks against the holder is 0.9x.",
	},
	"buggem": {
		id: "buggem",
		name: "Bug Gem",
		isUnreleased: true,
		spritenum: 53,
		isGem: true,
		onSourceTryPrimaryHit(target, source, move) {
			if (target === source || move.category === 'Status') return;
			if (move.type === 'Bug') {
				if (source.useItem()) {
					this.add('-enditem', source, 'Bug Gem', '[from] gem', '[move] ' + move.name);
					source.addVolatile('gem');
				}
			}
		},
		num: 558,
		gen: 5,
		desc: "Holder's first successful Bug-type attack will have 1.3x power. Single use.",
	},
	"bugmemory": {
		id: "bugmemory",
		name: "Bug Memory",
		spritenum: 673,
		onMemory: 'Bug',
		onTakeItem(item, pokemon, source) {
			if ((source && source.baseTemplate.num === 773) || pokemon.baseTemplate.num === 773) {
				return false;
			}
			return true;
		},
		forcedForme: "Silvally-Bug",
		num: 909,
		gen: 7,
		desc: "Holder's Multi-Attack is Bug type.",
	},
	"buginiumz": {
		id: "buginiumz",
		name: "Buginium Z",
		spritenum: 642,
		onPlate: 'Bug',
		onTakeItem: false,
		zMove: true,
		zMoveType: "Bug",
		forcedForme: "Arceus-Bug",
		num: 787,
		gen: 7,
		desc: "If holder has a Bug move, this item allows it to use a Bug Z-Move.",
	},
	"burndrive": {
		id: "burndrive",
		name: "Burn Drive",
		spritenum: 54,
		onTakeItem(item, pokemon, source) {
			if ((source && source.baseTemplate.num === 649) || pokemon.baseTemplate.num === 649) {
				return false;
			}
			return true;
		},
		onDrive: 'Fire',
		forcedForme: "Genesect-Burn",
		num: 118,
		gen: 5,
		desc: "Holder's Techno Blast is Fire type.",
	},
	"cameruptite": {
		id: "cameruptite",
		name: "Cameruptite",
		spritenum: 625,
		megaStone: "Camerupt-Mega",
		megaEvolves: "Camerupt",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 767,
		gen: 6,
		desc: "If held by a Camerupt, this item allows it to Mega Evolve in battle.",
	},
	"cellbattery": {
		id: "cellbattery",
		name: "Cell Battery",
		spritenum: 60,
		fling: {
			basePower: 30,
		},
		onAfterDamage(damage, target, source, move) {
			if (move.type === 'Electric' && target.useItem()) {
				this.boost({atk: 1});
			}
		},
		num: 546,
		gen: 5,
		desc: "Raises holder's Attack by 1 if hit by an Electric-type attack. Single use.",
	},
	"charcoal": {
		id: "charcoal",
		name: "Charcoal",
		spritenum: 61,
		fling: {
			basePower: 30,
		},
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move && move.type === 'Fire') {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		num: 249,
		gen: 2,
		desc: "Holder's Fire-type attacks have 1.2x power.",
	},
	"charizarditex": {
		id: "charizarditex",
		name: "Charizardite X",
		spritenum: 585,
		megaStone: "Charizard-Mega-X",
		megaEvolves: "Charizard",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 660,
		gen: 6,
		desc: "If held by a Charizard, this item allows it to Mega Evolve in battle.",
	},
	"charizarditey": {
		id: "charizarditey",
		name: "Charizardite Y",
		spritenum: 586,
		megaStone: "Charizard-Mega-Y",
		megaEvolves: "Charizard",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 678,
		gen: 6,
		desc: "If held by a Charizard, this item allows it to Mega Evolve in battle.",
	},
	"chartiberry": {
		id: "chartiberry",
		name: "Charti Berry",
		spritenum: 62,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Rock",
		},
		onSourceModifyDamage(damage, source, target, move) {
			if (move.type === 'Rock' && target.getMoveHitData(move).typeMod > 0 && (!target.volatiles['substitute'] || move.flags['authentic'] || (move.infiltrates && this.gen >= 6))) {
				if (target.eatItem()) {
					this.debug('-50% reduction');
					this.add('-enditem', target, this.effect, '[weaken]');
					return this.chainModify(0.5);
				}
			}
		},
		onEat() { },
		num: 195,
		gen: 4,
		desc: "Halves damage taken from a supereffective Rock-type attack. Single use.",
	},
	"cheriberry": {
		id: "cheriberry",
		name: "Cheri Berry",
		spritenum: 63,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Fire",
		},
		onUpdate(pokemon) {
			if (pokemon.status === 'par') {
				pokemon.eatItem();
			}
		},
		onEat(pokemon) {
			if (pokemon.status === 'par') {
				pokemon.cureStatus();
			}
		},
		num: 149,
		gen: 3,
		desc: "Holder cures itself if it is paralyzed. Single use.",
	},
	"cherishball": {
		id: "cherishball",
		name: "Cherish Ball",
		spritenum: 64,
		num: 16,
		gen: 4,
		desc: "A rare Poke Ball that has been crafted to commemorate an occasion.",
	},
	"chestoberry": {
		id: "chestoberry",
		name: "Chesto Berry",
		spritenum: 65,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Water",
		},
		onUpdate(pokemon) {
			if (pokemon.status === 'slp') {
				pokemon.eatItem();
			}
		},
		onEat(pokemon) {
			if (pokemon.status === 'slp') {
				pokemon.cureStatus();
			}
		},
		num: 150,
		gen: 3,
		desc: "Holder wakes up if it is asleep. Single use.",
	},
	"chilanberry": {
		id: "chilanberry",
		name: "Chilan Berry",
		spritenum: 66,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Normal",
		},
		onSourceModifyDamage(damage, source, target, move) {
			if (move.type === 'Normal' && (!target.volatiles['substitute'] || move.flags['authentic'] || (move.infiltrates && this.gen >= 6))) {
				if (target.eatItem()) {
					this.debug('-50% reduction');
					this.add('-enditem', target, this.effect, '[weaken]');
					return this.chainModify(0.5);
				}
			}
		},
		onEat() { },
		num: 200,
		gen: 4,
		desc: "Halves damage taken from a Normal-type attack. Single use.",
	},
	"chilldrive": {
		id: "chilldrive",
		name: "Chill Drive",
		spritenum: 67,
		onTakeItem(item, pokemon, source) {
			if ((source && source.baseTemplate.num === 649) || pokemon.baseTemplate.num === 649) {
				return false;
			}
			return true;
		},
		onDrive: 'Ice',
		forcedForme: "Genesect-Chill",
		num: 119,
		gen: 5,
		desc: "Holder's Techno Blast is Ice type.",
	},
	"choiceband": {
		id: "choiceband",
		name: "Choice Band",
		spritenum: 68,
		fling: {
			basePower: 10,
		},
		onStart(pokemon) {
			if (pokemon.volatiles['choicelock']) {
				this.debug('removing choicelock: ' + pokemon.volatiles.choicelock);
			}
			pokemon.removeVolatile('choicelock');
		},
		onModifyMove(move, pokemon) {
			pokemon.addVolatile('choicelock');
		},
		onModifyAtkPriority: 1,
		onModifyAtk(atk) {
			return this.chainModify(1.5);
		},
		isChoice: true,
		num: 220,
		gen: 3,
		desc: "Holder's Attack is 1.5x, but it can only select the first move it executes.",
	},
	"choicescarf": {
		id: "choicescarf",
		name: "Choice Scarf",
		spritenum: 69,
		fling: {
			basePower: 10,
		},
		onStart(pokemon) {
			if (pokemon.volatiles['choicelock']) {
				this.debug('removing choicelock: ' + pokemon.volatiles.choicelock);
			}
			pokemon.removeVolatile('choicelock');
		},
		onModifyMove(move, pokemon) {
			pokemon.addVolatile('choicelock');
		},
		onModifySpe(spe) {
			return this.chainModify(1.5);
		},
		isChoice: true,
		num: 287,
		gen: 4,
		desc: "Holder's Speed is 1.5x, but it can only select the first move it executes.",
	},
	"choicespecs": {
		id: "choicespecs",
		name: "Choice Specs",
		spritenum: 70,
		fling: {
			basePower: 10,
		},
		onStart(pokemon) {
			if (pokemon.volatiles['choicelock']) {
				this.debug('removing choicelock: ' + pokemon.volatiles.choicelock);
			}
			pokemon.removeVolatile('choicelock');
		},
		onModifyMove(move, pokemon) {
			pokemon.addVolatile('choicelock');
		},
		onModifySpAPriority: 1,
		onModifySpA(spa) {
			return this.chainModify(1.5);
		},
		isChoice: true,
		num: 297,
		gen: 4,
		desc: "Holder's Sp. Atk is 1.5x, but it can only select the first move it executes.",
	},
	"chopleberry": {
		id: "chopleberry",
		name: "Chople Berry",
		spritenum: 71,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Fighting",
		},
		onSourceModifyDamage(damage, source, target, move) {
			if (move.type === 'Fighting' && target.getMoveHitData(move).typeMod > 0 && (!target.volatiles['substitute'] || move.flags['authentic'] || (move.infiltrates && this.gen >= 6))) {
				if (target.eatItem()) {
					this.debug('-50% reduction');
					this.add('-enditem', target, this.effect, '[weaken]');
					return this.chainModify(0.5);
				}
			}
		},
		onEat() { },
		num: 189,
		gen: 4,
		desc: "Halves damage taken from a supereffective Fighting-type attack. Single use.",
	},
	"clawfossil": {
		id: "clawfossil",
		name: "Claw Fossil",
		spritenum: 72,
		fling: {
			basePower: 100,
		},
		num: 100,
		gen: 3,
		desc: "Can be revived into Anorith.",
	},
	"cobaberry": {
		id: "cobaberry",
		name: "Coba Berry",
		spritenum: 76,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Flying",
		},
		onSourceModifyDamage(damage, source, target, move) {
			if (move.type === 'Flying' && target.getMoveHitData(move).typeMod > 0 && (!target.volatiles['substitute'] || move.flags['authentic'] || (move.infiltrates && this.gen >= 6))) {
				if (target.eatItem()) {
					this.debug('-50% reduction');
					this.add('-enditem', target, this.effect, '[weaken]');
					return this.chainModify(0.5);
				}
			}
		},
		onEat() { },
		num: 192,
		gen: 4,
		desc: "Halves damage taken from a supereffective Flying-type attack. Single use.",
	},
	"colburberry": {
		id: "colburberry",
		name: "Colbur Berry",
		spritenum: 78,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Dark",
		},
		onSourceModifyDamage(damage, source, target, move) {
			if (move.type === 'Dark' && target.getMoveHitData(move).typeMod > 0 && (!target.volatiles['substitute'] || move.flags['authentic'] || (move.infiltrates && this.gen >= 6))) {
				if (target.eatItem()) {
					this.debug('-50% reduction');
					this.add('-enditem', target, this.effect, '[weaken]');
					return this.chainModify(0.5);
				}
			}
		},
		onEat() { },
		num: 198,
		gen: 4,
		desc: "Halves damage taken from a supereffective Dark-type attack. Single use.",
	},
	"cornnberry": {
		id: "cornnberry",
		name: "Cornn Berry",
		isUnreleased: true,
		spritenum: 81,
		isBerry: true,
		naturalGift: {
			basePower: 90,
			type: "Bug",
		},
		onEat: false,
		num: 175,
		gen: 3,
		desc: "Cannot be eaten by the holder. No effect when eaten with Bug Bite or Pluck.",
	},
	"coverfossil": {
		id: "coverfossil",
		name: "Cover Fossil",
		spritenum: 85,
		fling: {
			basePower: 100,
		},
		num: 572,
		gen: 5,
		desc: "Can be revived into Tirtouga.",
	},
	"custapberry": {
		id: "custapberry",
		name: "Custap Berry",
		spritenum: 86,
		isBerry: true,
		naturalGift: {
			basePower: 100,
			type: "Ghost",
		},
		onModifyPriorityPriority: -1,
		onModifyPriority(priority, pokemon) {
			if (pokemon.hp <= pokemon.maxhp / 4 || (pokemon.hp <= pokemon.maxhp / 2 && pokemon.hasAbility('gluttony'))) {
				if (pokemon.eatItem()) {
					this.add('-activate', pokemon, 'item: Custap Berry', '[consumed]');
					pokemon.removeVolatile('custapberry');
					return Math.round(priority) + 0.1;
				}
			}
		},
		onEat() { },
		num: 210,
		gen: 4,
		desc: "Holder moves first in its priority bracket when at 1/4 max HP or less. Single use.",
	},
	"damprock": {
		id: "damprock",
		name: "Damp Rock",
		spritenum: 88,
		fling: {
			basePower: 60,
		},
		num: 285,
		gen: 4,
		desc: "Holder's use of Rain Dance lasts 8 turns instead of 5.",
	},
	"darkgem": {
		id: "darkgem",
		name: "Dark Gem",
		isUnreleased: true,
		spritenum: 89,
		isGem: true,
		onSourceTryPrimaryHit(target, source, move) {
			if (target === source || move.category === 'Status') return;
			if (move.type === 'Dark') {
				if (source.useItem()) {
					this.add('-enditem', source, 'Dark Gem', '[from] gem', '[move] ' + move.name);
					source.addVolatile('gem');
				}
			}
		},
		num: 562,
		gen: 5,
		desc: "Holder's first successful Dark-type attack will have 1.3x power. Single use.",
	},
	"darkmemory": {
		id: "darkmemory",
		name: "Dark Memory",
		spritenum: 683,
		onMemory: 'Dark',
		onTakeItem(item, pokemon, source) {
			if ((source && source.baseTemplate.num === 773) || pokemon.baseTemplate.num === 773) {
				return false;
			}
			return true;
		},
		forcedForme: "Silvally-Dark",
		num: 919,
		gen: 7,
		desc: "Holder's Multi-Attack is Dark type.",
	},
	"darkiniumz": {
		id: "darkiniumz",
		name: "Darkinium Z",
		spritenum: 646,
		onPlate: 'Dark',
		onTakeItem: false,
		zMove: true,
		zMoveType: "Dark",
		forcedForme: "Arceus-Dark",
		num: 791,
		gen: 7,
		desc: "If holder has a Dark move, this item allows it to use a Dark Z-Move.",
	},
	"dawnstone": {
		id: "dawnstone",
		name: "Dawn Stone",
		spritenum: 92,
		fling: {
			basePower: 80,
		},
		num: 109,
		gen: 4,
		desc: "Evolves male Kirlia into Gallade and female Snorunt into Froslass when used.",
		shortDesc: "Evolves certain species of Pokemon when used.",
	},
	"decidiumz": {
		id: "decidiumz",
		name: "Decidium Z",
		spritenum: 650,
		onTakeItem: false,
		zMove: "Sinister Arrow Raid",
		zMoveFrom: "Spirit Shackle",
		zMoveUser: ["Decidueye"],
		num: 798,
		gen: 7,
		desc: "If held by a Decidueye with Spirit Shackle, it can use Sinister Arrow Raid.",
	},
	"deepseascale": {
		id: "deepseascale",
		name: "Deep Sea Scale",
		spritenum: 93,
		fling: {
			basePower: 30,
		},
		onModifySpDPriority: 2,
		onModifySpD(spd, pokemon) {
			if (pokemon.baseTemplate.species === 'Clamperl') {
				return this.chainModify(2);
			}
		},
		num: 227,
		gen: 3,
		desc: "If held by a Clamperl, its Sp. Def is doubled. Evolves Clamperl into Gorebyss when traded.",
		shortDesc: "If held by a Clamperl, its Sp. Def is doubled.",
	},
	"deepseatooth": {
		id: "deepseatooth",
		name: "Deep Sea Tooth",
		spritenum: 94,
		fling: {
			basePower: 90,
		},
		onModifySpAPriority: 1,
		onModifySpA(spa, pokemon) {
			if (pokemon.baseTemplate.species === 'Clamperl') {
				return this.chainModify(2);
			}
		},
		num: 226,
		gen: 3,
		desc: "If held by a Clamperl, its Sp. Atk is doubled. Evolves Clamperl into Huntail when traded.",
		shortDesc: "If held by a Clamperl, its Sp. Atk is doubled.",
	},
	"destinyknot": {
		id: "destinyknot",
		name: "Destiny Knot",
		spritenum: 95,
		fling: {
			basePower: 10,
		},
		onAttractPriority: -100,
		onAttract(target, source) {
			this.debug('attract intercepted: ' + target + ' from ' + source);
			if (!source || source === target) return;
			if (!source.volatiles.attract) source.addVolatile('attract', target);
		},
		num: 280,
		gen: 4,
		desc: "If holder becomes infatuated, the other Pokemon also becomes infatuated.",
	},
	"diancite": {
		id: "diancite",
		name: "Diancite",
		spritenum: 624,
		megaStone: "Diancie-Mega",
		megaEvolves: "Diancie",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 764,
		gen: 6,
		desc: "If held by a Diancie, this item allows it to Mega Evolve in battle.",
	},
	"diveball": {
		id: "diveball",
		name: "Dive Ball",
		spritenum: 101,
		num: 7,
		gen: 3,
		desc: "A Poke Ball that works especially well on Pokemon that live underwater.",
	},
	"domefossil": {
		id: "domefossil",
		name: "Dome Fossil",
		spritenum: 102,
		fling: {
			basePower: 100,
		},
		num: 102,
		gen: 3,
		desc: "Can be revived into Kabuto.",
	},
	"dousedrive": {
		id: "dousedrive",
		name: "Douse Drive",
		spritenum: 103,
		onTakeItem(item, pokemon, source) {
			if ((source && source.baseTemplate.num === 649) || pokemon.baseTemplate.num === 649) {
				return false;
			}
			return true;
		},
		onDrive: 'Water',
		forcedForme: "Genesect-Douse",
		num: 116,
		gen: 5,
		desc: "Holder's Techno Blast is Water type.",
	},
	"dracoplate": {
		id: "dracoplate",
		name: "Draco Plate",
		spritenum: 105,
		onPlate: 'Dragon',
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move && move.type === 'Dragon') {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		onTakeItem(item, pokemon, source) {
			if ((source && source.baseTemplate.num === 493) || pokemon.baseTemplate.num === 493) {
				return false;
			}
			return true;
		},
		forcedForme: "Arceus-Dragon",
		num: 311,
		gen: 4,
		desc: "Holder's Dragon-type attacks have 1.2x power. Judgment is Dragon type.",
	},
	"dragonfang": {
		id: "dragonfang",
		name: "Dragon Fang",
		spritenum: 106,
		fling: {
			basePower: 70,
		},
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move && move.type === 'Dragon') {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		num: 250,
		gen: 2,
		desc: "Holder's Dragon-type attacks have 1.2x power.",
	},
	"dragongem": {
		id: "dragongem",
		name: "Dragon Gem",
		isUnreleased: true,
		spritenum: 107,
		isGem: true,
		onSourceTryPrimaryHit(target, source, move) {
			if (target === source || move.category === 'Status') return;
			if (move.type === 'Dragon') {
				if (source.useItem()) {
					this.add('-enditem', source, 'Dragon Gem', '[from] gem', '[move] ' + move.name);
					source.addVolatile('gem');
				}
			}
		},
		num: 561,
		gen: 5,
		desc: "Holder's first successful Dragon-type attack will have 1.3x power. Single use.",
	},
	"dragonmemory": {
		id: "dragonmemory",
		name: "Dragon Memory",
		spritenum: 682,
		onMemory: 'Dragon',
		onTakeItem(item, pokemon, source) {
			if ((source && source.baseTemplate.num === 773) || pokemon.baseTemplate.num === 773) {
				return false;
			}
			return true;
		},
		forcedForme: "Silvally-Dragon",
		num: 918,
		gen: 7,
		desc: "Holder's Multi-Attack is Dragon type.",
	},
	"dragonscale": {
		id: "dragonscale",
		name: "Dragon Scale",
		spritenum: 108,
		fling: {
			basePower: 30,
		},
		num: 250,
		gen: 2,
		desc: "Evolves Seadra into Kingdra when traded.",
	},
	"dragoniumz": {
		id: "dragoniumz",
		name: "Dragonium Z",
		spritenum: 645,
		onPlate: 'Dragon',
		onTakeItem: false,
		zMove: true,
		zMoveType: "Dragon",
		forcedForme: "Arceus-Dragon",
		num: 790,
		gen: 7,
		desc: "If holder has a Dragon move, this item allows it to use a Dragon Z-Move.",
	},
	"dreadplate": {
		id: "dreadplate",
		name: "Dread Plate",
		spritenum: 110,
		onPlate: 'Dark',
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move && move.type === 'Dark') {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		onTakeItem(item, pokemon, source) {
			if ((source && source.baseTemplate.num === 493) || pokemon.baseTemplate.num === 493) {
				return false;
			}
			return true;
		},
		forcedForme: "Arceus-Dark",
		num: 312,
		gen: 4,
		desc: "Holder's Dark-type attacks have 1.2x power. Judgment is Dark type.",
	},
	"dreamball": {
		id: "dreamball",
		name: "Dream Ball",
		spritenum: 111,
		num: 576,
		gen: 5,
		desc: "A special Poke Ball that appears out of nowhere in a bag at the Entree Forest.",
	},
	"dubiousdisc": {
		id: "dubiousdisc",
		name: "Dubious Disc",
		spritenum: 113,
		fling: {
			basePower: 50,
		},
		num: 324,
		gen: 4,
		desc: "Evolves Porygon2 into Porygon-Z when traded.",
	},
	"durinberry": {
		id: "durinberry",
		name: "Durin Berry",
		isUnreleased: true,
		spritenum: 114,
		isBerry: true,
		naturalGift: {
			basePower: 100,
			type: "Water",
		},
		onEat: false,
		num: 182,
		gen: 3,
		desc: "Cannot be eaten by the holder. No effect when eaten with Bug Bite or Pluck.",
	},
	"duskball": {
		id: "duskball",
		name: "Dusk Ball",
		spritenum: 115,
		num: 13,
		gen: 4,
		desc: "A Poke Ball that makes it easier to catch wild Pokemon at night or in caves.",
	},
	"duskstone": {
		id: "duskstone",
		name: "Dusk Stone",
		spritenum: 116,
		fling: {
			basePower: 80,
		},
		num: 108,
		gen: 4,
		desc: "Evolves Murkrow into Honchkrow, Misdreavus into Mismagius, Lampent into Chandelure, and Doublade into Aegislash when used.",
		shortDesc: "Evolves certain species of Pokemon when used.",
	},
	"earthplate": {
		id: "earthplate",
		name: "Earth Plate",
		spritenum: 117,
		onPlate: 'Ground',
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move && move.type === 'Ground') {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		onTakeItem(item, pokemon, source) {
			if ((source && source.baseTemplate.num === 493) || pokemon.baseTemplate.num === 493) {
				return false;
			}
			return true;
		},
		forcedForme: "Arceus-Ground",
		num: 305,
		gen: 4,
		desc: "Holder's Ground-type attacks have 1.2x power. Judgment is Ground type.",
	},
	"eeviumz": {
		id: "eeviumz",
		name: "Eevium Z",
		spritenum: 657,
		onTakeItem: false,
		zMove: "Extreme Evoboost",
		zMoveFrom: "Last Resort",
		zMoveUser: ["Eevee"],
		num: 805,
		gen: 7,
		desc: "If held by an Eevee with Last Resort, it can use Extreme Evoboost.",
	},
	"ejectbutton": {
		id: "ejectbutton",
		name: "Eject Button",
		spritenum: 118,
		fling: {
			basePower: 30,
		},
		onAfterMoveSecondaryPriority: 2,
		onAfterMoveSecondary(target, source, move) {
			if (source && source !== target && target.hp && move && move.category !== 'Status') {
				if (!this.canSwitch(target.side) || target.forceSwitchFlag) return;
				for (const pokemon of this.getAllActive()) {
					if (pokemon.switchFlag === true) return;
				}
				if (target.useItem()) {
					target.switchFlag = true;
					source.switchFlag = false;
				}
			}
		},
		num: 547,
		gen: 5,
		desc: "If holder survives a hit, it immediately switches out to a chosen ally. Single use.",
	},
	"electirizer": {
		id: "electirizer",
		name: "Electirizer",
		spritenum: 119,
		fling: {
			basePower: 80,
		},
		num: 322,
		gen: 4,
		desc: "Evolves Electabuzz into Electivire when traded.",
	},
	"electricgem": {
		id: "electricgem",
		name: "Electric Gem",
		isUnreleased: true,
		spritenum: 120,
		isGem: true,
		onSourceTryPrimaryHit(target, source, move) {
			if (target === source || move.category === 'Status' || ['firepledge', 'grasspledge', 'waterpledge'].includes(move.id)) return;
			if (move.type === 'Electric') {
				if (source.useItem()) {
					this.add('-enditem', source, 'Electric Gem', '[from] gem', '[move] ' + move.name);
					source.addVolatile('gem');
				}
			}
		},
		num: 550,
		gen: 5,
		desc: "Holder's first successful Electric-type attack will have 1.3x power. Single use.",
	},
	"electricmemory": {
		id: "electricmemory",
		name: "Electric Memory",
		spritenum: 679,
		onMemory: 'Electric',
		onTakeItem(item, pokemon, source) {
			if ((source && source.baseTemplate.num === 773) || pokemon.baseTemplate.num === 773) {
				return false;
			}
			return true;
		},
		forcedForme: "Silvally-Electric",
		num: 915,
		gen: 7,
		desc: "Holder's Multi-Attack is Electric type.",
	},
	"electricseed": {
		id: "electricseed",
		name: "Electric Seed",
		spritenum: 664,
		fling: {
			basePower: 10,
		},
		onStart(pokemon) {
			if (!pokemon.ignoringItem() && this.field.isTerrain('electricterrain') && pokemon.useItem()) {
				this.boost({def: 1});
			}
		},
		onAnyTerrainStart() {
			if (this.field.isTerrain('electricterrain') && this.effectData.target.useItem()) {
				this.boost({def: 1}, this.effectData.target);
			}
		},
		num: 881,
		gen: 7,
		desc: "If the terrain is Electric Terrain, raises holder's Defense by 1 stage. Single use.",
	},
	"electriumz": {
		id: "electriumz",
		name: "Electrium Z",
		spritenum: 634,
		onPlate: 'Electric',
		onTakeItem: false,
		zMove: true,
		zMoveType: "Electric",
		forcedForme: "Arceus-Electric",
		num: 779,
		gen: 7,
		desc: "If holder has an Electric move, this item allows it to use an Electric Z-Move.",
	},
	"energypowder": {
		id: "energypowder",
		name: "Energy Powder",
		spritenum: 123,
		fling: {
			basePower: 30,
		},
		num: 34,
		gen: 2,
		desc: "Restores 50 HP to one Pokemon but lowers Happiness.",
	},
	"enigmaberry": {
		id: "enigmaberry",
		name: "Enigma Berry",
		spritenum: 124,
		isBerry: true,
		naturalGift: {
			basePower: 100,
			type: "Bug",
		},
		onHit(target, source, move) {
			if (move && target.getMoveHitData(move).typeMod > 0) {
				if (target.eatItem()) {
					this.heal(target.maxhp / 4);
				}
			}
		},
		onTryEatItem(item, pokemon) {
			if (!this.runEvent('TryHeal', pokemon)) return false;
		},
		onEat() { },
		num: 208,
		gen: 3,
		desc: "Restores 1/4 max HP after holder is hit by a supereffective move. Single use.",
	},
	"eviolite": {
		id: "eviolite",
		name: "Eviolite",
		spritenum: 130,
		fling: {
			basePower: 40,
		},
		onModifyDefPriority: 2,
		onModifyDef(def, pokemon) {
			if (pokemon.baseTemplate.nfe) {
				return this.chainModify(1.5);
			}
		},
		onModifySpDPriority: 2,
		onModifySpD(spd, pokemon) {
			if (pokemon.baseTemplate.nfe) {
				return this.chainModify(1.5);
			}
		},
		num: 538,
		gen: 5,
		desc: "If holder's species can evolve, its Defense and Sp. Def are 1.5x.",
	},
	"expertbelt": {
		id: "expertbelt",
		name: "Expert Belt",
		spritenum: 132,
		fling: {
			basePower: 10,
		},
		onModifyDamage(damage, source, target, move) {
			if (move && target.getMoveHitData(move).typeMod > 0) {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		num: 268,
		gen: 4,
		desc: "Holder's attacks that are super effective against the target do 1.2x damage.",
	},
	"fairiumz": {
		id: "fairiumz",
		name: "Fairium Z",
		spritenum: 648,
		onPlate: 'Fairy',
		onTakeItem: false,
		zMove: true,
		zMoveType: "Fairy",
		forcedForme: "Arceus-Fairy",
		num: 793,
		gen: 7,
		desc: "If holder has a Fairy move, this item allows it to use a Fairy Z-Move.",
	},
	"fairygem": {
		id: "fairygem",
		name: "Fairy Gem",
		isUnreleased: true,
		spritenum: 611,
		isGem: true,
		onSourceTryPrimaryHit(target, source, move) {
			if (target === source || move.category === 'Status') return;
			if (move.type === 'Fairy') {
				if (source.useItem()) {
					this.add('-enditem', source, 'Fairy Gem', '[from] gem', '[move] ' + move.name);
					source.addVolatile('gem');
				}
			}
		},
		num: 715,
		gen: 6,
		desc: "Holder's first successful Fairy-type attack will have 1.3x power. Single use.",
	},
	"fairymemory": {
		id: "fairymemory",
		name: "Fairy Memory",
		spritenum: 684,
		onMemory: 'Fairy',
		onTakeItem(item, pokemon, source) {
			if ((source && source.baseTemplate.num === 773) || pokemon.baseTemplate.num === 773) {
				return false;
			}
			return true;
		},
		forcedForme: "Silvally-Fairy",
		num: 920,
		gen: 7,
		desc: "Holder's Multi-Attack is Fairy type.",
	},
	"fastball": {
		id: "fastball",
		name: "Fast Ball",
		spritenum: 137,
		num: 492,
		gen: 2,
		desc: "A Poke Ball that makes it easier to catch Pokemon which are quick to run away.",
	},
	"fightinggem": {
		id: "fightinggem",
		name: "Fighting Gem",
		isUnreleased: true,
		spritenum: 139,
		isGem: true,
		onSourceTryPrimaryHit(target, source, move) {
			if (target === source || move.category === 'Status') return;
			if (move.type === 'Fighting') {
				if (source.useItem()) {
					this.add('-enditem', source, 'Fighting Gem', '[from] gem', '[move] ' + move.name);
					source.addVolatile('gem');
				}
			}
		},
		num: 553,
		gen: 5,
		desc: "Holder's first successful Fighting-type attack will have 1.3x power. Single use.",
	},
	"fightingmemory": {
		id: "fightingmemory",
		name: "Fighting Memory",
		spritenum: 668,
		onMemory: 'Fighting',
		onTakeItem(item, pokemon, source) {
			if ((source && source.baseTemplate.num === 773) || pokemon.baseTemplate.num === 773) {
				return false;
			}
			return true;
		},
		forcedForme: "Silvally-Fighting",
		num: 904,
		gen: 7,
		desc: "Holder's Multi-Attack is Fighting type.",
	},
	"fightiniumz": {
		id: "fightiniumz",
		name: "Fightinium Z",
		spritenum: 637,
		onPlate: 'Fighting',
		onTakeItem: false,
		zMove: true,
		zMoveType: "Fighting",
		forcedForme: "Arceus-Fighting",
		num: 782,
		gen: 7,
		desc: "If holder has a Fighting move, this item allows it to use a Fighting Z-Move.",
	},
	"figyberry": {
		id: "figyberry",
		name: "Figy Berry",
		spritenum: 140,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Bug",
		},
		onUpdate(pokemon) {
			if (pokemon.hp <= pokemon.maxhp / 4 || (pokemon.hp <= pokemon.maxhp / 2 && pokemon.hasAbility('gluttony'))) {
				pokemon.eatItem();
			}
		},
		onTryEatItem(item, pokemon) {
			if (!this.runEvent('TryHeal', pokemon)) return false;
		},
		onEat(pokemon) {
			this.heal(pokemon.maxhp / 2);
			if (pokemon.getNature().minus === 'atk') {
				pokemon.addVolatile('confusion');
			}
		},
		num: 159,
		gen: 3,
		desc: "Restores 1/2 max HP at 1/4 max HP or less; confuses if -Atk Nature. Single use.",
	},
	"firegem": {
		id: "firegem",
		name: "Fire Gem",
		isUnreleased: true,
		spritenum: 141,
		isGem: true,
		onSourceTryPrimaryHit(target, source, move) {
			if (target === source || move.category === 'Status' || ['firepledge', 'grasspledge', 'waterpledge'].includes(move.id)) return;
			if (move.type === 'Fire') {
				if (source.useItem()) {
					this.add('-enditem', source, 'Fire Gem', '[from] gem', '[move] ' + move.name);
					source.addVolatile('gem');
				}
			}
		},
		num: 548,
		gen: 5,
		desc: "Holder's first successful Fire-type attack will have 1.3x power. Single use.",
	},
	"firememory": {
		id: "firememory",
		name: "Fire Memory",
		spritenum: 676,
		onMemory: 'Fire',
		onTakeItem(item, pokemon, source) {
			if ((source && source.baseTemplate.num === 773) || pokemon.baseTemplate.num === 773) {
				return false;
			}
			return true;
		},
		forcedForme: "Silvally-Fire",
		num: 912,
		gen: 7,
		desc: "Holder's Multi-Attack is Fire type.",
	},
	"firestone": {
		id: "firestone",
		name: "Fire Stone",
		spritenum: 142,
		fling: {
			basePower: 30,
		},
		num: 82,
		gen: 1,
		desc: "Evolves Vulpix into Ninetales, Growlithe into Arcanine, Eevee into Flareon, and Pansear into Simisear when used.",
		shortDesc: "Evolves certain species of Pokemon when used.",
	},
	"firiumz": {
		id: "firiumz",
		name: "Firium Z",
		spritenum: 632,
		onPlate: 'Fire',
		onTakeItem: false,
		zMove: true,
		zMoveType: "Fire",
		forcedForme: "Arceus-Fire",
		num: 777,
		gen: 7,
		desc: "If holder has a Fire move, this item allows it to use a Fire Z-Move.",
	},
	"fistplate": {
		id: "fistplate",
		name: "Fist Plate",
		spritenum: 143,
		onPlate: 'Fighting',
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move && move.type === 'Fighting') {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		onTakeItem(item, pokemon, source) {
			if ((source && source.baseTemplate.num === 493) || pokemon.baseTemplate.num === 493) {
				return false;
			}
			return true;
		},
		forcedForme: "Arceus-Fighting",
		num: 303,
		gen: 4,
		desc: "Holder's Fighting-type attacks have 1.2x power. Judgment is Fighting type.",
	},
	"flameorb": {
		id: "flameorb",
		name: "Flame Orb",
		spritenum: 145,
		fling: {
			basePower: 30,
			status: 'brn',
		},
		onResidualOrder: 26,
		onResidualSubOrder: 2,
		onResidual(pokemon) {
			pokemon.trySetStatus('brn', pokemon);
		},
		num: 273,
		gen: 4,
		desc: "At the end of every turn, this item attempts to burn the holder.",
	},
	"flameplate": {
		id: "flameplate",
		name: "Flame Plate",
		spritenum: 146,
		onPlate: 'Fire',
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move && move.type === 'Fire') {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		onTakeItem(item, pokemon, source) {
			if ((source && source.baseTemplate.num === 493) || pokemon.baseTemplate.num === 493) {
				return false;
			}
			return true;
		},
		forcedForme: "Arceus-Fire",
		num: 298,
		gen: 4,
		desc: "Holder's Fire-type attacks have 1.2x power. Judgment is Fire type.",
	},
	"floatstone": {
		id: "floatstone",
		name: "Float Stone",
		spritenum: 147,
		fling: {
			basePower: 30,
		},
		onModifyWeight(weight) {
			return weight / 2;
		},
		num: 539,
		gen: 5,
		desc: "Holder's weight is halved.",
	},
	"flyinggem": {
		id: "flyinggem",
		name: "Flying Gem",
		isUnreleased: true,
		spritenum: 149,
		isGem: true,
		onSourceTryPrimaryHit(target, source, move) {
			if (target === source || move.category === 'Status') return;
			if (move.type === 'Flying') {
				if (source.useItem()) {
					this.add('-enditem', source, 'Flying Gem', '[from] gem', '[move] ' + move.name);
					source.addVolatile('gem');
				}
			}
		},
		num: 556,
		gen: 5,
		desc: "Holder's first successful Flying-type attack will have 1.3x power. Single use.",
	},
	"flyingmemory": {
		id: "flyingmemory",
		name: "Flying Memory",
		spritenum: 669,
		onMemory: 'Flying',
		onTakeItem(item, pokemon, source) {
			if ((source && source.baseTemplate.num === 773) || pokemon.baseTemplate.num === 773) {
				return false;
			}
			return true;
		},
		forcedForme: "Silvally-Flying",
		num: 905,
		gen: 7,
		desc: "Holder's Multi-Attack is Flying type.",
	},
	"flyiniumz": {
		id: "flyiniumz",
		name: "Flyinium Z",
		spritenum: 640,
		onPlate: 'Flying',
		onTakeItem: false,
		zMove: true,
		zMoveType: "Flying",
		forcedForme: "Arceus-Flying",
		num: 785,
		gen: 7,
		desc: "If holder has a Flying move, this item allows it to use a Flying Z-Move.",
	},
	"focusband": {
		id: "focusband",
		name: "Focus Band",
		spritenum: 150,
		fling: {
			basePower: 10,
		},
		onDamage(damage, target, source, effect) {
			if (this.randomChance(1, 10) && damage >= target.hp && effect && effect.effectType === 'Move') {
				this.add("-activate", target, "item: Focus Band");
				return target.hp - 1;
			}
		},
		num: 230,
		gen: 2,
		desc: "Holder has a 10% chance to survive an attack that would KO it with 1 HP.",
	},
	"focussash": {
		id: "focussash",
		name: "Focus Sash",
		spritenum: 151,
		fling: {
			basePower: 10,
		},
		onDamage(damage, target, source, effect) {
			if (target.hp === target.maxhp && damage >= target.hp && effect && effect.effectType === 'Move') {
				if (target.useItem()) {
					return target.hp - 1;
				}
			}
		},
		num: 275,
		gen: 4,
		desc: "If holder's HP is full, will survive an attack that would KO it with 1 HP. Single use.",
	},
	"friendball": {
		id: "friendball",
		name: "Friend Ball",
		spritenum: 153,
		num: 497,
		gen: 2,
		desc: "A Poke Ball that makes caught Pokemon more friendly.",
	},
	"fullincense": {
		id: "fullincense",
		name: "Full Incense",
		spritenum: 155,
		fling: {
			basePower: 10,
		},
		onModifyPriority(priority, pokemon) {
			return Math.round(priority) - 0.1;
		},
		num: 316,
		gen: 4,
		desc: "Holder moves last in its priority bracket.",
	},
	"galladite": {
		id: "galladite",
		name: "Galladite",
		spritenum: 616,
		megaStone: "Gallade-Mega",
		megaEvolves: "Gallade",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 756,
		gen: 6,
		desc: "If held by a Gallade, this item allows it to Mega Evolve in battle.",
	},
	"ganlonberry": {
		id: "ganlonberry",
		name: "Ganlon Berry",
		spritenum: 158,
		isBerry: true,
		naturalGift: {
			basePower: 100,
			type: "Ice",
		},
		onUpdate(pokemon) {
			if (pokemon.hp <= pokemon.maxhp / 4 || (pokemon.hp <= pokemon.maxhp / 2 && pokemon.hasAbility('gluttony'))) {
				pokemon.eatItem();
			}
		},
		onEat(pokemon) {
			this.boost({def: 1});
		},
		num: 202,
		gen: 3,
		desc: "Raises holder's Defense by 1 stage when at 1/4 max HP or less. Single use.",
	},
	"garchompite": {
		id: "garchompite",
		name: "Garchompite",
		spritenum: 589,
		megaStone: "Garchomp-Mega",
		megaEvolves: "Garchomp",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 683,
		gen: 6,
		desc: "If held by a Garchomp, this item allows it to Mega Evolve in battle.",
	},
	"gardevoirite": {
		id: "gardevoirite",
		name: "Gardevoirite",
		spritenum: 587,
		megaStone: "Gardevoir-Mega",
		megaEvolves: "Gardevoir",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 657,
		gen: 6,
		desc: "If held by a Gardevoir, this item allows it to Mega Evolve in battle.",
	},
	"gengarite": {
		id: "gengarite",
		name: "Gengarite",
		spritenum: 588,
		megaStone: "Gengar-Mega",
		megaEvolves: "Gengar",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 656,
		gen: 6,
		desc: "If held by a Gengar, this item allows it to Mega Evolve in battle.",
	},
	"ghostgem": {
		id: "ghostgem",
		name: "Ghost Gem",
		isUnreleased: true,
		spritenum: 161,
		isGem: true,
		onSourceTryPrimaryHit(target, source, move) {
			if (target === source || move.category === 'Status') return;
			if (move.type === 'Ghost') {
				if (source.useItem()) {
					this.add('-enditem', source, 'Ghost Gem', '[from] gem', '[move] ' + move.name);
					source.addVolatile('gem');
				}
			}
		},
		num: 560,
		gen: 5,
		desc: "Holder's first successful Ghost-type attack will have 1.3x power. Single use.",
	},
	"ghostmemory": {
		id: "ghostmemory",
		name: "Ghost Memory",
		spritenum: 674,
		onMemory: 'Ghost',
		onTakeItem(item, pokemon, source) {
			if ((source && source.baseTemplate.num === 773) || pokemon.baseTemplate.num === 773) {
				return false;
			}
			return true;
		},
		forcedForme: "Silvally-Ghost",
		num: 910,
		gen: 7,
		desc: "Holder's Multi-Attack is Ghost type.",
	},
	"ghostiumz": {
		id: "ghostiumz",
		name: "Ghostium Z",
		spritenum: 644,
		onPlate: 'Ghost',
		onTakeItem: false,
		zMove: true,
		zMoveType: "Ghost",
		forcedForme: "Arceus-Ghost",
		num: 789,
		gen: 7,
		desc: "If holder has a Ghost move, this item allows it to use a Ghost Z-Move.",
	},
	"glalitite": {
		id: "glalitite",
		name: "Glalitite",
		spritenum: 623,
		megaStone: "Glalie-Mega",
		megaEvolves: "Glalie",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 763,
		gen: 6,
		desc: "If held by a Glalie, this item allows it to Mega Evolve in battle.",
	},
	"goldbottlecap": {
		id: "goldbottlecap",
		name: "Gold Bottle Cap",
		spritenum: 697,
		fling: {
			basePower: 30,
		},
		num: 796,
		gen: 7,
		desc: "Used for Hyper Training. All of a Pokemon's stats are calculated with an IV of 31.",
	},
	"grassgem": {
		id: "grassgem",
		name: "Grass Gem",
		isUnreleased: true,
		spritenum: 172,
		isGem: true,
		onSourceTryPrimaryHit(target, source, move) {
			if (target === source || move.category === 'Status' || ['firepledge', 'grasspledge', 'waterpledge'].includes(move.id)) return;
			if (move.type === 'Grass') {
				if (source.useItem()) {
					this.add('-enditem', source, 'Grass Gem', '[from] gem', '[move] ' + move.name);
					source.addVolatile('gem');
				}
			}
		},
		num: 551,
		gen: 5,
		desc: "Holder's first successful Grass-type attack will have 1.3x power. Single use.",
	},
	"grassmemory": {
		id: "grassmemory",
		name: "Grass Memory",
		spritenum: 678,
		onMemory: 'Grass',
		onTakeItem(item, pokemon, source) {
			if ((source && source.baseTemplate.num === 773) || pokemon.baseTemplate.num === 773) {
				return false;
			}
			return true;
		},
		forcedForme: "Silvally-Grass",
		num: 914,
		gen: 7,
		desc: "Holder's Multi-Attack is Grass type.",
	},
	"grassiumz": {
		id: "grassiumz",
		name: "Grassium Z",
		spritenum: 635,
		onPlate: 'Grass',
		onTakeItem: false,
		zMove: true,
		zMoveType: "Grass",
		forcedForme: "Arceus-Grass",
		num: 780,
		gen: 7,
		desc: "If holder has a Grass move, this item allows it to use a Grass Z-Move.",
	},
	"grassyseed": {
		id: "grassyseed",
		name: "Grassy Seed",
		spritenum: 667,
		fling: {
			basePower: 10,
		},
		onStart(pokemon) {
			if (!pokemon.ignoringItem() && this.field.isTerrain('grassyterrain') && pokemon.useItem()) {
				this.boost({def: 1});
			}
		},
		onAnyTerrainStart() {
			if (this.field.isTerrain('grassyterrain') && this.effectData.target.useItem()) {
				this.boost({def: 1}, this.effectData.target);
			}
		},
		num: 884,
		gen: 7,
		desc: "If the terrain is Grassy Terrain, raises holder's Defense by 1 stage. Single use.",
	},
	"greatball": {
		id: "greatball",
		name: "Great Ball",
		spritenum: 174,
		num: 3,
		gen: 1,
		desc: "A high-performance Ball that provides a higher catch rate than a Poke Ball.",
	},
	"grepaberry": {
		id: "grepaberry",
		name: "Grepa Berry",
		spritenum: 178,
		isBerry: true,
		naturalGift: {
			basePower: 90,
			type: "Flying",
		},
		onEat: false,
		num: 173,
		gen: 3,
		desc: "Cannot be eaten by the holder. No effect when eaten with Bug Bite or Pluck.",
	},
	"gripclaw": {
		id: "gripclaw",
		name: "Grip Claw",
		spritenum: 179,
		fling: {
			basePower: 90,
		},
		// implemented in statuses
		num: 286,
		gen: 4,
		desc: "Holder's partial-trapping moves always last 7 turns.",
	},
	"griseousorb": {
		id: "griseousorb",
		name: "Griseous Orb",
		spritenum: 180,
		fling: {
			basePower: 60,
		},
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (user.baseTemplate.num === 487 && (move.type === 'Ghost' || move.type === 'Dragon')) {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		onTakeItem(item, pokemon, source) {
			if ((source && source.baseTemplate.num === 487) || pokemon.baseTemplate.num === 487) {
				return false;
			}
			return true;
		},
		forcedForme: "Giratina-Origin",
		num: 112,
		gen: 4,
		desc: "If held by a Giratina, its Ghost- and Dragon-type attacks have 1.2x power.",
	},
	"groundgem": {
		id: "groundgem",
		name: "Ground Gem",
		isUnreleased: true,
		spritenum: 182,
		isGem: true,
		onSourceTryPrimaryHit(target, source, move) {
			if (target === source || move.category === 'Status') return;
			if (move.type === 'Ground') {
				if (source.useItem()) {
					this.add('-enditem', source, 'Ground Gem', '[from] gem', '[move] ' + move.name);
					source.addVolatile('gem');
				}
			}
		},
		num: 555,
		gen: 5,
		desc: "Holder's first successful Ground-type attack will have 1.3x power. Single use.",
	},
	"groundmemory": {
		id: "groundmemory",
		name: "Ground Memory",
		spritenum: 671,
		onMemory: 'Ground',
		onTakeItem(item, pokemon, source) {
			if ((source && source.baseTemplate.num === 773) || pokemon.baseTemplate.num === 773) {
				return false;
			}
			return true;
		},
		forcedForme: "Silvally-Ground",
		num: 907,
		gen: 7,
		desc: "Holder's Multi-Attack is Ground type.",
	},
	"groundiumz": {
		id: "groundiumz",
		name: "Groundium Z",
		spritenum: 639,
		onPlate: 'Ground',
		onTakeItem: false,
		zMove: true,
		zMoveType: "Ground",
		forcedForme: "Arceus-Ground",
		num: 784,
		gen: 7,
		desc: "If holder has a Ground move, this item allows it to use a Ground Z-Move.",
	},
	"gyaradosite": {
		id: "gyaradosite",
		name: "Gyaradosite",
		spritenum: 589,
		megaStone: "Gyarados-Mega",
		megaEvolves: "Gyarados",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 676,
		gen: 6,
		desc: "If held by a Gyarados, this item allows it to Mega Evolve in battle.",
	},
	"habanberry": {
		id: "habanberry",
		name: "Haban Berry",
		spritenum: 185,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Dragon",
		},
		onSourceModifyDamage(damage, source, target, move) {
			if (move.type === 'Dragon' && target.getMoveHitData(move).typeMod > 0 && (!target.volatiles['substitute'] || move.flags['authentic'] || (move.infiltrates && this.gen >= 6))) {
				if (target.eatItem()) {
					this.debug('-50% reduction');
					this.add('-enditem', target, this.effect, '[weaken]');
					return this.chainModify(0.5);
				}
			}
		},
		onEat() { },
		num: 197,
		gen: 4,
		desc: "Halves damage taken from a supereffective Dragon-type attack. Single use.",
	},
	"hardstone": {
		id: "hardstone",
		name: "Hard Stone",
		spritenum: 187,
		fling: {
			basePower: 100,
		},
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move && move.type === 'Rock') {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		num: 238,
		gen: 2,
		desc: "Holder's Rock-type attacks have 1.2x power.",
	},
	"healball": {
		id: "healball",
		name: "Heal Ball",
		spritenum: 188,
		num: 14,
		gen: 4,
		desc: "A remedial Poke Ball that restores the caught Pokemon's HP and status problem.",
	},
	"heatrock": {
		id: "heatrock",
		name: "Heat Rock",
		spritenum: 193,
		fling: {
			basePower: 60,
		},
		num: 284,
		gen: 4,
		desc: "Holder's use of Sunny Day lasts 8 turns instead of 5.",
	},
	"heavyball": {
		id: "heavyball",
		name: "Heavy Ball",
		spritenum: 194,
		num: 495,
		gen: 2,
		desc: "A Poke Ball for catching very heavy Pokemon.",
	},
	"helixfossil": {
		id: "helixfossil",
		name: "Helix Fossil",
		spritenum: 195,
		fling: {
			basePower: 100,
		},
		num: 101,
		gen: 3,
		desc: "Can be revived into Omanyte.",
	},
	"heracronite": {
		id: "heracronite",
		name: "Heracronite",
		spritenum: 590,
		megaStone: "Heracross-Mega",
		megaEvolves: "Heracross",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 680,
		gen: 6,
		desc: "If held by a Heracross, this item allows it to Mega Evolve in battle.",
	},
	"hondewberry": {
		id: "hondewberry",
		name: "Hondew Berry",
		spritenum: 213,
		isBerry: true,
		naturalGift: {
			basePower: 90,
			type: "Ground",
		},
		onEat: false,
		num: 172,
		gen: 3,
		desc: "Cannot be eaten by the holder. No effect when eaten with Bug Bite or Pluck.",
	},
	"houndoominite": {
		id: "houndoominite",
		name: "Houndoominite",
		spritenum: 591,
		megaStone: "Houndoom-Mega",
		megaEvolves: "Houndoom",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 666,
		gen: 6,
		desc: "If held by a Houndoom, this item allows it to Mega Evolve in battle.",
	},
	"iapapaberry": {
		id: "iapapaberry",
		name: "Iapapa Berry",
		spritenum: 217,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Dark",
		},
		onUpdate(pokemon) {
			if (pokemon.hp <= pokemon.maxhp / 4 || (pokemon.hp <= pokemon.maxhp / 2 && pokemon.hasAbility('gluttony'))) {
				pokemon.eatItem();
			}
		},
		onTryEatItem(item, pokemon) {
			if (!this.runEvent('TryHeal', pokemon)) return false;
		},
		onEat(pokemon) {
			this.heal(pokemon.maxhp / 2);
			if (pokemon.getNature().minus === 'def') {
				pokemon.addVolatile('confusion');
			}
		},
		num: 163,
		gen: 3,
		desc: "Restores 1/2 max HP at 1/4 max HP or less; confuses if -Def Nature. Single use.",
	},
	"icegem": {
		id: "icegem",
		name: "Ice Gem",
		isUnreleased: true,
		spritenum: 218,
		isGem: true,
		onSourceTryPrimaryHit(target, source, move) {
			if (target === source || move.category === 'Status') return;
			if (move.type === 'Ice') {
				if (source.useItem()) {
					this.add('-enditem', source, 'Ice Gem', '[from] gem', '[move] ' + move.name);
					source.addVolatile('gem');
				}
			}
		},
		num: 552,
		gen: 5,
		desc: "Holder's first successful Ice-type attack will have 1.3x power. Single use.",
	},
	"icememory": {
		id: "icememory",
		name: "Ice Memory",
		spritenum: 681,
		onMemory: 'Ice',
		onTakeItem(item, pokemon, source) {
			if ((source && source.baseTemplate.num === 773) || pokemon.baseTemplate.num === 773) {
				return false;
			}
			return true;
		},
		forcedForme: "Silvally-Ice",
		num: 917,
		gen: 7,
		desc: "Holder's Multi-Attack is Ice type.",
	},
	"icestone": {
		id: "icestone",
		name: "Ice Stone",
		spritenum: 693,
		fling: {
			basePower: 30,
		},
		num: 849,
		gen: 7,
		desc: "Evolves Alolan Sandshrew into Alolan Sandslash and Alolan Vulpix into Alolan Ninetales when used.",
		shortDesc: "Evolves certain species of Pokemon when used.",
	},
	"icicleplate": {
		id: "icicleplate",
		name: "Icicle Plate",
		spritenum: 220,
		onPlate: 'Ice',
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move.type === 'Ice') {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		onTakeItem(item, pokemon, source) {
			if ((source && source.baseTemplate.num === 493) || pokemon.baseTemplate.num === 493) {
				return false;
			}
			return true;
		},
		forcedForme: "Arceus-Ice",
		num: 302,
		gen: 4,
		desc: "Holder's Ice-type attacks have 1.2x power. Judgment is Ice type.",
	},
	"iciumz": {
		id: "iciumz",
		name: "Icium Z",
		spritenum: 636,
		onPlate: 'Ice',
		onTakeItem: false,
		zMove: true,
		zMoveType: "Ice",
		forcedForme: "Arceus-Ice",
		num: 781,
		gen: 7,
		desc: "If holder has an Ice move, this item allows it to use an Ice Z-Move.",
	},
	"icyrock": {
		id: "icyrock",
		name: "Icy Rock",
		spritenum: 221,
		fling: {
			basePower: 40,
		},
		num: 282,
		gen: 4,
		desc: "Holder's use of Hail lasts 8 turns instead of 5.",
	},
	"inciniumz": {
		id: "inciniumz",
		name: "Incinium Z",
		spritenum: 651,
		onTakeItem: false,
		zMove: "Malicious Moonsault",
		zMoveFrom: "Darkest Lariat",
		zMoveUser: ["Incineroar"],
		num: 799,
		gen: 7,
		desc: "If held by an Incineroar with Darkest Lariat, it can use Malicious Moonsault.",
	},
	"insectplate": {
		id: "insectplate",
		name: "Insect Plate",
		spritenum: 223,
		onPlate: 'Bug',
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move.type === 'Bug') {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		onTakeItem(item, pokemon, source) {
			if ((source && source.baseTemplate.num === 493) || pokemon.baseTemplate.num === 493) {
				return false;
			}
			return true;
		},
		forcedForme: "Arceus-Bug",
		num: 308,
		gen: 4,
		desc: "Holder's Bug-type attacks have 1.2x power. Judgment is Bug type.",
	},
	"ironball": {
		id: "ironball",
		name: "Iron Ball",
		spritenum: 224,
		fling: {
			basePower: 130,
		},
		onEffectiveness(typeMod, target, type, move) {
			if (!target) return;
			if (target.volatiles['ingrain'] || target.volatiles['smackdown'] || this.field.getPseudoWeather('gravity')) return;
			if (move.type === 'Ground' && target.hasType('Flying')) return 0;
		},
		// airborneness negation implemented in sim/pokemon.js:Pokemon#isGrounded
		onModifySpe(spe) {
			return this.chainModify(0.5);
		},
		num: 278,
		gen: 4,
		desc: "Holder is grounded, Speed halved. If Flying type, takes neutral Ground damage.",
	},
	"ironplate": {
		id: "ironplate",
		name: "Iron Plate",
		spritenum: 225,
		onPlate: 'Steel',
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move.type === 'Steel') {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		onTakeItem(item, pokemon, source) {
			if ((source && source.baseTemplate.num === 493) || pokemon.baseTemplate.num === 493) {
				return false;
			}
			return true;
		},
		forcedForme: "Arceus-Steel",
		num: 313,
		gen: 4,
		desc: "Holder's Steel-type attacks have 1.2x power. Judgment is Steel type.",
	},
	"jabocaberry": {
		id: "jabocaberry",
		name: "Jaboca Berry",
		spritenum: 230,
		isBerry: true,
		naturalGift: {
			basePower: 100,
			type: "Dragon",
		},
		onAfterDamage(damage, target, source, move) {
			if (source && source.hp && source !== target && move && move.category === 'Physical') {
				if (target.eatItem()) {
					this.damage(source.maxhp / 8, source, target);
				}
			}
		},
		onEat() { },
		num: 211,
		gen: 4,
		desc: "If holder is hit by a physical move, attacker loses 1/8 of its max HP. Single use.",
	},
	"jawfossil": {
		id: "jawfossil",
		name: "Jaw Fossil",
		spritenum: 694,
		fling: {
			basePower: 100,
		},
		num: 710,
		gen: 6,
		desc: "Can be revived into Tyrunt.",
	},
	"kasibberry": {
		id: "kasibberry",
		name: "Kasib Berry",
		spritenum: 233,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Ghost",
		},
		onSourceModifyDamage(damage, source, target, move) {
			if (move.type === 'Ghost' && target.getMoveHitData(move).typeMod > 0 && (!target.volatiles['substitute'] || move.flags['authentic'] || (move.infiltrates && this.gen >= 6))) {
				if (target.eatItem()) {
					this.debug('-50% reduction');
					this.add('-enditem', target, this.effect, '[weaken]');
					return this.chainModify(0.5);
				}
			}
		},
		onEat() { },
		num: 196,
		gen: 4,
		desc: "Halves damage taken from a supereffective Ghost-type attack. Single use.",
	},
	"kebiaberry": {
		id: "kebiaberry",
		name: "Kebia Berry",
		spritenum: 234,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Poison",
		},
		onSourceModifyDamage(damage, source, target, move) {
			if (move.type === 'Poison' && target.getMoveHitData(move).typeMod > 0 && (!target.volatiles['substitute'] || move.flags['authentic'] || (move.infiltrates && this.gen >= 6))) {
				if (target.eatItem()) {
					this.debug('-50% reduction');
					this.add('-enditem', target, this.effect, '[weaken]');
					return this.chainModify(0.5);
				}
			}
		},
		onEat() { },
		num: 190,
		gen: 4,
		desc: "Halves damage taken from a supereffective Poison-type attack. Single use.",
	},
	"keeberry": {
		id: "keeberry",
		name: "Kee Berry",
		spritenum: 593,
		isBerry: true,
		naturalGift: {
			basePower: 100,
			type: "Fairy",
		},
		onAfterMoveSecondary(target, source, move) {
			if (move.category === 'Physical') {
				target.eatItem();
			}
		},
		onEat(pokemon) {
			this.boost({def: 1});
		},
		num: 687,
		gen: 6,
		desc: "Raises holder's Defense by 1 stage after it is hit by a physical attack. Single use.",
	},
	"kelpsyberry": {
		id: "kelpsyberry",
		name: "Kelpsy Berry",
		spritenum: 235,
		isBerry: true,
		naturalGift: {
			basePower: 90,
			type: "Fighting",
		},
		onEat: false,
		num: 170,
		gen: 3,
		desc: "Cannot be eaten by the holder. No effect when eaten with Bug Bite or Pluck.",
	},
	"kangaskhanite": {
		id: "kangaskhanite",
		name: "Kangaskhanite",
		spritenum: 592,
		megaStone: "Kangaskhan-Mega",
		megaEvolves: "Kangaskhan",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 675,
		gen: 6,
		desc: "If held by a Kangaskhan, this item allows it to Mega Evolve in battle.",
	},
	"kingsrock": {
		id: "kingsrock",
		name: "King's Rock",
		spritenum: 236,
		fling: {
			basePower: 30,
			volatileStatus: 'flinch',
		},
		onModifyMovePriority: -1,
		onModifyMove(move) {
			if (move.category !== "Status") {
				if (!move.secondaries) move.secondaries = [];
				for (const secondary of move.secondaries) {
					if (secondary.volatileStatus === 'flinch') return;
				}
				move.secondaries.push({
					chance: 10,
					volatileStatus: 'flinch',
				});
			}
		},
		num: 221,
		gen: 2,
		desc: "Holder's attacks without a chance to flinch gain a 10% chance to flinch. Evolves Poliwhirl into Politoed and Slowpoke into Slowking when traded.",
		shortDesc: "Holder's attacks without a chance to flinch gain a 10% chance to flinch.",
	},
	"kommoniumz": {
		id: "kommoniumz",
		name: "Kommonium Z",
		spritenum: 690,
		onTakeItem: false,
		zMove: "Clangorous Soulblaze",
		zMoveFrom: "Clanging Scales",
		zMoveUser: ["Kommo-o", "Kommo-o-Totem"],
		num: 926,
		gen: 7,
		desc: "If held by a Kommo-o with Clanging Scales, it can use Clangorous Soulblaze.",
	},
	"laggingtail": {
		id: "laggingtail",
		name: "Lagging Tail",
		spritenum: 237,
		fling: {
			basePower: 10,
		},
		onModifyPriority(priority, pokemon) {
			return Math.round(priority) - 0.1;
		},
		num: 279,
		gen: 4,
		desc: "Holder moves last in its priority bracket.",
	},
	"lansatberry": {
		id: "lansatberry",
		name: "Lansat Berry",
		spritenum: 238,
		isBerry: true,
		naturalGift: {
			basePower: 100,
			type: "Flying",
		},
		onUpdate(pokemon) {
			if (pokemon.hp <= pokemon.maxhp / 4 || (pokemon.hp <= pokemon.maxhp / 2 && pokemon.hasAbility('gluttony'))) {
				pokemon.eatItem();
			}
		},
		onEat(pokemon) {
			pokemon.addVolatile('focusenergy');
		},
		num: 206,
		gen: 3,
		desc: "Holder gains the Focus Energy effect when at 1/4 max HP or less. Single use.",
	},
	"latiasite": {
		id: "latiasite",
		name: "Latiasite",
		spritenum: 629,
		megaStone: "Latias-Mega",
		megaEvolves: "Latias",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 684,
		gen: 6,
		desc: "If held by a Latias, this item allows it to Mega Evolve in battle.",
	},
	"latiosite": {
		id: "latiosite",
		name: "Latiosite",
		spritenum: 630,
		megaStone: "Latios-Mega",
		megaEvolves: "Latios",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 685,
		gen: 6,
		desc: "If held by a Latios, this item allows it to Mega Evolve in battle.",
	},
	"laxincense": {
		id: "laxincense",
		name: "Lax Incense",
		spritenum: 240,
		fling: {
			basePower: 10,
		},
		onModifyAccuracy(accuracy) {
			if (typeof accuracy !== 'number') return;
			this.debug('lax incense - decreasing accuracy');
			return accuracy * 0.9;
		},
		num: 255,
		gen: 3,
		desc: "The accuracy of attacks against the holder is 0.9x.",
	},
	"leafstone": {
		id: "leafstone",
		name: "Leaf Stone",
		spritenum: 241,
		fling: {
			basePower: 30,
		},
		num: 85,
		gen: 1,
		desc: "Evolves Gloom into Vileplume, Weepinbell into Victreebel, Exeggcute into Exeggutor or Alolan Exeggutor, Nuzleaf into Shiftry, and Pansage into Simisage when used.",
		shortDesc: "Evolves certain species of Pokemon when used.",
	},
	"leftovers": {
		id: "leftovers",
		name: "Leftovers",
		spritenum: 242,
		fling: {
			basePower: 10,
		},
		onResidualOrder: 5,
		onResidualSubOrder: 2,
		onResidual(pokemon) {
			if (this.field.isTerrain('grassyterrain')) return;
			this.heal(pokemon.maxhp / 16);
		},
		onTerrain(pokemon) {
			if (!this.field.isTerrain('grassyterrain')) return;
			this.heal(pokemon.maxhp / 16);
		},
		num: 234,
		gen: 2,
		desc: "At the end of every turn, holder restores 1/16 of its max HP.",
	},
	"leppaberry": {
		id: "leppaberry",
		name: "Leppa Berry",
		spritenum: 244,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Fighting",
		},
		onUpdate(pokemon) {
			if (!pokemon.hp) return;
			if (pokemon.moveSlots.some(move => move.pp === 0)) {
				pokemon.eatItem();
			}
		},
		onEat(pokemon) {
			let moveSlot = pokemon.moveSlots.find(move => move.pp === 0) ||
				pokemon.moveSlots.find(move => move.pp < move.maxpp);
			if (!moveSlot) return;
			moveSlot.pp += 10;
			if (moveSlot.pp > moveSlot.maxpp) moveSlot.pp = moveSlot.maxpp;
			this.add('-activate', pokemon, 'item: Leppa Berry', moveSlot.move, '[consumed]');
		},
		num: 154,
		gen: 3,
		desc: "Restores 10 PP to the first of the holder's moves to reach 0 PP. Single use.",
	},
	"levelball": {
		id: "levelball",
		name: "Level Ball",
		spritenum: 246,
		num: 493,
		gen: 2,
		desc: "A Poke Ball for catching Pokemon that are a lower level than your own.",
	},
	"liechiberry": {
		id: "liechiberry",
		name: "Liechi Berry",
		spritenum: 248,
		isBerry: true,
		naturalGift: {
			basePower: 100,
			type: "Grass",
		},
		onUpdate(pokemon) {
			if (pokemon.hp <= pokemon.maxhp / 4 || (pokemon.hp <= pokemon.maxhp / 2 && pokemon.hasAbility('gluttony'))) {
				pokemon.eatItem();
			}
		},
		onEat(pokemon) {
			this.boost({atk: 1});
		},
		num: 201,
		gen: 3,
		desc: "Raises holder's Attack by 1 stage when at 1/4 max HP or less. Single use.",
	},
	"lifeorb": {
		id: "lifeorb",
		name: "Life Orb",
		spritenum: 249,
		fling: {
			basePower: 30,
		},
		onModifyDamage(damage, source, target, move) {
			return this.chainModify([0x14CC, 0x1000]);
		},
		onAfterMoveSecondarySelf(source, target, move) {
			if (source && source !== target && move && move.category !== 'Status') {
				this.damage(source.maxhp / 10, source, source, this.getItem('lifeorb'));
			}
		},
		num: 270,
		gen: 4,
		desc: "Holder's attacks do 1.3x damage, and it loses 1/10 its max HP after the attack.",
	},
	"lightball": {
		id: "lightball",
		name: "Light Ball",
		spritenum: 251,
		fling: {
			basePower: 30,
			status: 'par',
		},
		onModifyAtkPriority: 1,
		onModifyAtk(atk, pokemon) {
			if (pokemon.baseTemplate.baseSpecies === 'Pikachu') {
				return this.chainModify(2);
			}
		},
		onModifySpAPriority: 1,
		onModifySpA(spa, pokemon) {
			if (pokemon.baseTemplate.baseSpecies === 'Pikachu') {
				return this.chainModify(2);
			}
		},
		num: 236,
		gen: 2,
		desc: "If held by a Pikachu, its Attack and Sp. Atk are doubled.",
	},
	"lightclay": {
		id: "lightclay",
		name: "Light Clay",
		spritenum: 252,
		fling: {
			basePower: 30,
		},
		// implemented in the corresponding thing
		num: 269,
		gen: 4,
		desc: "Holder's use of Aurora Veil, Light Screen, or Reflect lasts 8 turns instead of 5.",
	},
	"lopunnite": {
		id: "lopunnite",
		name: "Lopunnite",
		spritenum: 626,
		megaStone: "Lopunny-Mega",
		megaEvolves: "Lopunny",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 768,
		gen: 6,
		desc: "If held by a Lopunny, this item allows it to Mega Evolve in battle.",
	},
	"loveball": {
		id: "loveball",
		name: "Love Ball",
		spritenum: 258,
		num: 496,
		gen: 2,
		desc: "Poke Ball for catching Pokemon that are the opposite gender of your Pokemon.",
	},
	"lucarionite": {
		id: "lucarionite",
		name: "Lucarionite",
		spritenum: 594,
		megaStone: "Lucario-Mega",
		megaEvolves: "Lucario",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 673,
		gen: 6,
		desc: "If held by a Lucario, this item allows it to Mega Evolve in battle.",
	},
	"luckypunch": {
		id: "luckypunch",
		name: "Lucky Punch",
		spritenum: 261,
		fling: {
			basePower: 40,
		},
		onModifyCritRatio(critRatio, user) {
			if (user.baseTemplate.species === 'Chansey') {
				return critRatio + 2;
			}
		},
		num: 256,
		gen: 2,
		desc: "If held by a Chansey, its critical hit ratio is raised by 2 stages.",
	},
	"lumberry": {
		id: "lumberry",
		name: "Lum Berry",
		spritenum: 262,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Flying",
		},
		onUpdate(pokemon) {
			if (pokemon.status || pokemon.volatiles['confusion']) {
				pokemon.eatItem();
			}
		},
		onEat(pokemon) {
			pokemon.cureStatus();
			pokemon.removeVolatile('confusion');
		},
		num: 157,
		gen: 3,
		desc: "Holder cures itself if it is confused or has a major status condition. Single use.",
	},
	"luminousmoss": {
		id: "luminousmoss",
		name: "Luminous Moss",
		spritenum: 595,
		fling: {
			basePower: 30,
		},
		onAfterDamage(damage, target, source, move) {
			if (move.type === 'Water' && target.useItem()) {
				this.boost({spd: 1});
			}
		},
		num: 648,
		gen: 6,
		desc: "Raises holder's Sp. Def by 1 stage if hit by a Water-type attack. Single use.",
	},
	"lunaliumz": {
		id: "lunaliumz",
		name: "Lunalium Z",
		spritenum: 686,
		onTakeItem: false,
		zMove: "Menacing Moonraze Maelstrom",
		zMoveFrom: "Moongeist Beam",
		zMoveUser: ["Lunala", "Necrozma-Dawn-Wings"],
		num: 922,
		gen: 7,
		desc: "Lunala or Dawn Wings Necrozma with Moongeist Beam can use a special Z-Move.",
	},
	"lureball": {
		id: "lureball",
		name: "Lure Ball",
		spritenum: 264,
		num: 494,
		gen: 2,
		desc: "A Poke Ball for catching Pokemon hooked by a Rod when fishing.",
	},
	"lustrousorb": {
		id: "lustrousorb",
		name: "Lustrous Orb",
		spritenum: 265,
		fling: {
			basePower: 60,
		},
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move && user.baseTemplate.species === 'Palkia' && (move.type === 'Water' || move.type === 'Dragon')) {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		num: 136,
		gen: 4,
		desc: "If held by a Palkia, its Water- and Dragon-type attacks have 1.2x power.",
	},
	"luxuryball": {
		id: "luxuryball",
		name: "Luxury Ball",
		spritenum: 266,
		num: 11,
		gen: 3,
		desc: "A comfortable Poke Ball that makes a caught wild Pokemon quickly grow friendly.",
	},
	"lycaniumz": {
		id: "lycaniumz",
		name: "Lycanium Z",
		spritenum: 689,
		onTakeItem: false,
		zMove: "Splintered Stormshards",
		zMoveFrom: "Stone Edge",
		zMoveUser: ["Lycanroc", "Lycanroc-Midnight", "Lycanroc-Dusk"],
		num: 925,
		gen: 7,
		desc: "If held by a Lycanroc forme with Stone Edge, it can use Splintered Stormshards.",
	},
	"machobrace": {
		id: "machobrace",
		name: "Macho Brace",
		isUnreleased: true,
		spritenum: 269,
		ignoreKlutz: true,
		fling: {
			basePower: 60,
		},
		onModifySpe(spe) {
			return this.chainModify(0.5);
		},
		num: 215,
		gen: 3,
		desc: "Holder's Speed is halved. The Klutz Ability does not ignore this effect.",
	},
	"magmarizer": {
		id: "magmarizer",
		name: "Magmarizer",
		spritenum: 272,
		fling: {
			basePower: 80,
		},
		num: 323,
		gen: 4,
		desc: "Evolves Magmar into Magmortar when traded.",
	},
	"magnet": {
		id: "magnet",
		name: "Magnet",
		spritenum: 273,
		fling: {
			basePower: 30,
		},
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move.type === 'Electric') {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		num: 242,
		gen: 2,
		desc: "Holder's Electric-type attacks have 1.2x power.",
	},
	"magoberry": {
		id: "magoberry",
		name: "Mago Berry",
		spritenum: 274,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Ghost",
		},
		onUpdate(pokemon) {
			if (pokemon.hp <= pokemon.maxhp / 4 || (pokemon.hp <= pokemon.maxhp / 2 && pokemon.hasAbility('gluttony'))) {
				pokemon.eatItem();
			}
		},
		onTryEatItem(item, pokemon) {
			if (!this.runEvent('TryHeal', pokemon)) return false;
		},
		onEat(pokemon) {
			this.heal(pokemon.maxhp / 2);
			if (pokemon.getNature().minus === 'spe') {
				pokemon.addVolatile('confusion');
			}
		},
		num: 161,
		gen: 3,
		desc: "Restores 1/2 max HP at 1/4 max HP or less; confuses if -Spe Nature. Single use.",
	},
	"magostberry": {
		id: "magostberry",
		name: "Magost Berry",
		isUnreleased: true,
		spritenum: 275,
		isBerry: true,
		naturalGift: {
			basePower: 90,
			type: "Rock",
		},
		onEat: false,
		num: 176,
		gen: 3,
		desc: "Cannot be eaten by the holder. No effect when eaten with Bug Bite or Pluck.",
	},
	"mail": {
		id: "mail",
		name: "Mail",
		spritenum: 403,
		onTakeItem(item, source) {
			if (!this.activeMove) return false;
			if (this.activeMove.id !== 'knockoff' && this.activeMove.id !== 'thief' && this.activeMove.id !== 'covet') return false;
		},
		isUnreleased: true,
		num: 0,
		gen: 2,
		desc: "Cannot be given to or taken from a Pokemon, except by Covet/Knock Off/Thief.",
	},
	"manectite": {
		id: "manectite",
		name: "Manectite",
		spritenum: 596,
		megaStone: "Manectric-Mega",
		megaEvolves: "Manectric",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 682,
		gen: 6,
		desc: "If held by a Manectric, this item allows it to Mega Evolve in battle.",
	},
	"marangaberry": {
		id: "marangaberry",
		name: "Maranga Berry",
		spritenum: 597,
		isBerry: true,
		naturalGift: {
			basePower: 100,
			type: "Dark",
		},
		onAfterMoveSecondary(target, source, move) {
			if (move.category === 'Special') {
				target.eatItem();
			}
		},
		onEat(pokemon) {
			this.boost({spd: 1});
		},
		num: 688,
		gen: 6,
		desc: "Raises holder's Sp. Def by 1 stage after it is hit by a special attack. Single use.",
	},
	"marshadiumz": {
		id: "marshadiumz",
		name: "Marshadium Z",
		spritenum: 654,
		onTakeItem: false,
		zMove: "Soul-Stealing 7-Star Strike",
		zMoveFrom: "Spectral Thief",
		zMoveUser: ["Marshadow"],
		num: 802,
		gen: 7,
		desc: "If held by Marshadow with Spectral Thief, it can use Soul-Stealing 7-Star Strike.",
	},
	"masterball": {
		id: "masterball",
		name: "Master Ball",
		spritenum: 276,
		num: 1,
		gen: 1,
		desc: "The best Ball with the ultimate performance. It will catch any wild Pokemon.",
	},
	"mawilite": {
		id: "mawilite",
		name: "Mawilite",
		spritenum: 598,
		megaStone: "Mawile-Mega",
		megaEvolves: "Mawile",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 681,
		gen: 6,
		desc: "If held by a Mawile, this item allows it to Mega Evolve in battle.",
	},
	"meadowplate": {
		id: "meadowplate",
		name: "Meadow Plate",
		spritenum: 282,
		onPlate: 'Grass',
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move.type === 'Grass') {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		onTakeItem(item, pokemon, source) {
			if ((source && source.baseTemplate.num === 493) || pokemon.baseTemplate.num === 493) {
				return false;
			}
			return true;
		},
		forcedForme: "Arceus-Grass",
		num: 301,
		gen: 4,
		desc: "Holder's Grass-type attacks have 1.2x power. Judgment is Grass type.",
	},
	"medichamite": {
		id: "medichamite",
		name: "Medichamite",
		spritenum: 599,
		megaStone: "Medicham-Mega",
		megaEvolves: "Medicham",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 665,
		gen: 6,
		desc: "If held by a Medicham, this item allows it to Mega Evolve in battle.",
	},
	"mentalherb": {
		id: "mentalherb",
		name: "Mental Herb",
		spritenum: 285,
		fling: {
			basePower: 10,
			effect(pokemon) {
				let conditions = ['attract', 'taunt', 'encore', 'torment', 'disable', 'healblock'];
				for (const firstCondition of conditions) {
					if (pokemon.volatiles[firstCondition]) {
						for (const secondCondition of conditions) {
							pokemon.removeVolatile(secondCondition);
							if (firstCondition === 'attract' && secondCondition === 'attract') {
								this.add('-end', pokemon, 'move: Attract', '[from] item: Mental Herb');
							}
						}
						return;
					}
				}
			},
		},
		onUpdate(pokemon) {
			let conditions = ['attract', 'taunt', 'encore', 'torment', 'disable', 'healblock'];
			for (const firstCondition of conditions) {
				if (pokemon.volatiles[firstCondition]) {
					if (!pokemon.useItem()) return;
					for (const secondCondition of conditions) {
						pokemon.removeVolatile(secondCondition);
						if (firstCondition === 'attract' && secondCondition === 'attract') {
							this.add('-end', pokemon, 'move: Attract', '[from] item: Mental Herb');
						}
					}
					return;
				}
			}
		},
		num: 219,
		gen: 3,
		desc: "Cures holder of Attract, Disable, Encore, Heal Block, Taunt, Torment. Single use.",
	},
	"metagrossite": {
		id: "metagrossite",
		name: "Metagrossite",
		spritenum: 618,
		megaStone: "Metagross-Mega",
		megaEvolves: "Metagross",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 758,
		gen: 6,
		desc: "If held by a Metagross, this item allows it to Mega Evolve in battle.",
	},
	"metalcoat": {
		id: "metalcoat",
		name: "Metal Coat",
		spritenum: 286,
		fling: {
			basePower: 30,
		},
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move.type === 'Steel') {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		num: 233,
		gen: 2,
		desc: "Holder's Steel-type attacks have 1.2x power. Evolves Onix into Steelix and Scyther into Scizor when traded.",
		shortDesc: "Holder's Steel-type attacks have 1.2x power.",
	},
	"metalpowder": {
		id: "metalpowder",
		name: "Metal Powder",
		fling: {
			basePower: 10,
		},
		spritenum: 287,
		onModifyDefPriority: 2,
		onModifyDef(def, pokemon) {
			if (pokemon.template.species === 'Ditto' && !pokemon.transformed) {
				return this.chainModify(2);
			}
		},
		num: 257,
		gen: 2,
		desc: "If held by a Ditto that hasn't Transformed, its Defense is doubled.",
	},
	"metronome": {
		id: "metronome",
		name: "Metronome",
		spritenum: 289,
		fling: {
			basePower: 30,
		},
		onStart(pokemon) {
			pokemon.addVolatile('metronome');
		},
		effect: {
			onStart(pokemon) {
				this.effectData.numConsecutive = 0;
				this.effectData.lastMove = '';
			},
			onTryMovePriority: -2,
			onTryMove(pokemon, target, move) {
				if (!pokemon.hasItem('metronome')) {
					pokemon.removeVolatile('metronome');
					return;
				}
				if (this.effectData.lastMove === move.id) {
					this.effectData.numConsecutive++;
				} else {
					this.effectData.numConsecutive = 0;
				}
				this.effectData.lastMove = move.id;
			},
			onModifyDamage(damage, source, target, move) {
				let numConsecutive = this.effectData.numConsecutive > 5 ? 5 : this.effectData.numConsecutive;
				let dmgMod = [0x1000, 0x1333, 0x1666, 0x1999, 0x1CCC, 0x2000];
				return this.chainModify([dmgMod[numConsecutive], 0x1000]);
			},
		},
		num: 277,
		gen: 4,
		desc: "Damage of moves used on consecutive turns is increased. Max 2x after 5 turns.",
	},
	"mewniumz": {
		id: "mewniumz",
		name: "Mewnium Z",
		spritenum: 658,
		onTakeItem: false,
		zMove: "Genesis Supernova",
		zMoveFrom: "Psychic",
		zMoveUser: ["Mew"],
		num: 806,
		gen: 7,
		desc: "If held by a Mew with Psychic, it can use Genesis Supernova.",
	},
	"mewtwonitex": {
		id: "mewtwonitex",
		name: "Mewtwonite X",
		spritenum: 600,
		megaStone: "Mewtwo-Mega-X",
		megaEvolves: "Mewtwo",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 662,
		gen: 6,
		desc: "If held by a Mewtwo, this item allows it to Mega Evolve in battle.",
	},
	"mewtwonitey": {
		id: "mewtwonitey",
		name: "Mewtwonite Y",
		spritenum: 601,
		megaStone: "Mewtwo-Mega-Y",
		megaEvolves: "Mewtwo",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 663,
		gen: 6,
		desc: "If held by a Mewtwo, this item allows it to Mega Evolve in battle.",
	},
	"micleberry": {
		id: "micleberry",
		name: "Micle Berry",
		spritenum: 290,
		isBerry: true,
		naturalGift: {
			basePower: 100,
			type: "Rock",
		},
		onResidual(pokemon) {
			if (pokemon.hp <= pokemon.maxhp / 4 || (pokemon.hp <= pokemon.maxhp / 2 && pokemon.hasAbility('gluttony'))) {
				pokemon.eatItem();
			}
		},
		onEat(pokemon) {
			pokemon.addVolatile('micleberry');
		},
		effect: {
			duration: 2,
			onSourceModifyAccuracy(accuracy, target, source) {
				this.add('-enditem', source, 'Micle Berry');
				source.removeVolatile('micleberry');
				if (typeof accuracy === 'number') {
					return accuracy * 1.2;
				}
			},
		},
		num: 209,
		gen: 4,
		desc: "Holder's next move has 1.2x accuracy when at 1/4 max HP or less. Single use.",
	},
	"mimikiumz": {
		id: "mimikiumz",
		name: "Mimikium Z",
		spritenum: 688,
		onTakeItem: false,
		zMove: "Let's Snuggle Forever",
		zMoveFrom: "Play Rough",
		zMoveUser: ["Mimikyu", "Mimikyu-Busted", "Mimikyu-Totem", "Mimikyu-Busted-Totem"],
		num: 924,
		gen: 7,
		desc: "If held by a Mimikyu with Play Rough, it can use Let's Snuggle Forever.",
	},
	"mindplate": {
		id: "mindplate",
		name: "Mind Plate",
		spritenum: 291,
		onPlate: 'Psychic',
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move.type === 'Psychic') {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		onTakeItem(item, pokemon, source) {
			if ((source && source.baseTemplate.num === 493) || pokemon.baseTemplate.num === 493) {
				return false;
			}
			return true;
		},
		forcedForme: "Arceus-Psychic",
		num: 307,
		gen: 4,
		desc: "Holder's Psychic-type attacks have 1.2x power. Judgment is Psychic type.",
	},
	"miracleseed": {
		id: "miracleseed",
		name: "Miracle Seed",
		fling: {
			basePower: 30,
		},
		spritenum: 292,
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move.type === 'Grass') {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		num: 239,
		gen: 2,
		desc: "Holder's Grass-type attacks have 1.2x power.",
	},
	"mistyseed": {
		id: "mistyseed",
		name: "Misty Seed",
		spritenum: 666,
		fling: {
			basePower: 10,
		},
		onStart(pokemon) {
			if (!pokemon.ignoringItem() && this.field.isTerrain('mistyterrain') && pokemon.useItem()) {
				this.boost({spd: 1});
			}
		},
		onAnyTerrainStart() {
			if (this.field.isTerrain('mistyterrain') && this.effectData.target.useItem()) {
				this.boost({spd: 1}, this.effectData.target);
			}
		},
		num: 883,
		gen: 7,
		desc: "If the terrain is Misty Terrain, raises holder's Sp. Def by 1 stage. Single use.",
	},
	"moonball": {
		id: "moonball",
		name: "Moon Ball",
		spritenum: 294,
		num: 498,
		gen: 2,
		desc: "A Poke Ball for catching Pokemon that evolve using the Moon Stone.",
	},
	"moonstone": {
		id: "moonstone",
		name: "Moon Stone",
		spritenum: 295,
		fling: {
			basePower: 30,
		},
		num: 81,
		gen: 1,
		desc: "Evolves Nidorina into Nidoqueen, Nidorino into Nidoking, Clefairy into Clefable, Jigglypuff into Wigglytuff, Skitty into Delcatty, and Munna into Musharna when used.",
		shortDesc: "Evolves certain species of Pokemon when used.",
	},
	"muscleband": {
		id: "muscleband",
		name: "Muscle Band",
		spritenum: 297,
		fling: {
			basePower: 10,
		},
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move.category === 'Physical') {
				return this.chainModify([0x1199, 0x1000]);
			}
		},
		num: 266,
		gen: 4,
		desc: "Holder's physical attacks have 1.1x power.",
	},
	"mysticwater": {
		id: "mysticwater",
		name: "Mystic Water",
		spritenum: 300,
		fling: {
			basePower: 30,
		},
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move.type === 'Water') {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		num: 243,
		gen: 2,
		desc: "Holder's Water-type attacks have 1.2x power.",
	},
	"nanabberry": {
		id: "nanabberry",
		name: "Nanab Berry",
		isUnreleased: true,
		spritenum: 302,
		isBerry: true,
		naturalGift: {
			basePower: 90,
			type: "Water",
		},
		onEat: false,
		num: 166,
		gen: 3,
		desc: "Cannot be eaten by the holder. No effect when eaten with Bug Bite or Pluck.",
	},
	"nestball": {
		id: "nestball",
		name: "Nest Ball",
		spritenum: 303,
		num: 8,
		gen: 3,
		desc: "A Poke Ball that works especially well on weaker Pokemon in the wild.",
	},
	"netball": {
		id: "netball",
		name: "Net Ball",
		spritenum: 304,
		num: 6,
		gen: 3,
		desc: "A Poke Ball that works especially well on Water- and Bug-type Pokemon.",
	},
	"nevermeltice": {
		id: "nevermeltice",
		name: "Never-Melt Ice",
		spritenum: 305,
		fling: {
			basePower: 30,
		},
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move.type === 'Ice') {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		num: 246,
		gen: 2,
		desc: "Holder's Ice-type attacks have 1.2x power.",
	},
	"nomelberry": {
		id: "nomelberry",
		name: "Nomel Berry",
		isUnreleased: true,
		spritenum: 306,
		isBerry: true,
		naturalGift: {
			basePower: 90,
			type: "Dragon",
		},
		onEat: false,
		num: 178,
		gen: 3,
		desc: "Cannot be eaten by the holder. No effect when eaten with Bug Bite or Pluck.",
	},
	"normalgem": {
		id: "normalgem",
		name: "Normal Gem",
		spritenum: 307,
		isGem: true,
		onSourceTryPrimaryHit(target, source, move) {
			if (target === source || move.category === 'Status' || ['firepledge', 'grasspledge', 'waterpledge'].includes(move.id)) return;
			if (move.type === 'Normal') {
				if (source.useItem()) {
					this.add('-enditem', source, 'Normal Gem', '[from] gem', '[move] ' + move.name);
					source.addVolatile('gem');
				}
			}
		},
		num: 564,
		gen: 5,
		desc: "Holder's first successful Normal-type attack will have 1.3x power. Single use.",
	},
	"normaliumz": {
		id: "normaliumz",
		name: "Normalium Z",
		spritenum: 631,
		onTakeItem: false,
		zMove: true,
		zMoveType: "Normal",
		num: 776,
		gen: 7,
		desc: "If holder has a Normal move, this item allows it to use a Normal Z-Move.",
	},
	"occaberry": {
		id: "occaberry",
		name: "Occa Berry",
		spritenum: 311,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Fire",
		},
		onSourceModifyDamage(damage, source, target, move) {
			if (move.type === 'Fire' && target.getMoveHitData(move).typeMod > 0 && (!target.volatiles['substitute'] || move.flags['authentic'] || (move.infiltrates && this.gen >= 6))) {
				if (target.eatItem()) {
					this.debug('-50% reduction');
					this.add('-enditem', target, this.effect, '[weaken]');
					return this.chainModify(0.5);
				}
			}
		},
		onEat() { },
		num: 184,
		gen: 4,
		desc: "Halves damage taken from a supereffective Fire-type attack. Single use.",
	},
	"oddincense": {
		id: "oddincense",
		name: "Odd Incense",
		spritenum: 312,
		fling: {
			basePower: 10,
		},
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move.type === 'Psychic') {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		num: 314,
		gen: 4,
		desc: "Holder's Psychic-type attacks have 1.2x power.",
	},
	"oldamber": {
		id: "oldamber",
		name: "Old Amber",
		spritenum: 314,
		fling: {
			basePower: 100,
		},
		num: 103,
		gen: 3,
		desc: "Can be revived into Aerodactyl.",
	},
	"oranberry": {
		id: "oranberry",
		name: "Oran Berry",
		spritenum: 319,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Poison",
		},
		onUpdate(pokemon) {
			if (pokemon.hp <= pokemon.maxhp / 2) {
				pokemon.eatItem();
			}
		},
		onTryEatItem(item, pokemon) {
			if (!this.runEvent('TryHeal', pokemon)) return false;
		},
		onEat(pokemon) {
			this.heal(10);
		},
		num: 155,
		gen: 3,
		desc: "Restores 10 HP when at 1/2 max HP or less. Single use.",
	},
	"ovalstone": {
		id: "ovalstone",
		name: "Oval Stone",
		spritenum: 321,
		fling: {
			basePower: 80,
		},
		num: 110,
		gen: 4,
		desc: "Evolves Happiny into Chansey when held and leveled up during the day.",
	},
	"pamtreberry": {
		id: "pamtreberry",
		name: "Pamtre Berry",
		isUnreleased: true,
		spritenum: 323,
		isBerry: true,
		naturalGift: {
			basePower: 90,
			type: "Steel",
		},
		onEat: false,
		num: 180,
		gen: 3,
		desc: "Cannot be eaten by the holder. No effect when eaten with Bug Bite or Pluck.",
	},
	"parkball": {
		id: "parkball",
		name: "Park Ball",
		spritenum: 325,
		num: 500,
		gen: 4,
		desc: "A special Poke Ball for the Pal Park.",
	},
	"passhoberry": {
		id: "passhoberry",
		name: "Passho Berry",
		spritenum: 329,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Water",
		},
		onSourceModifyDamage(damage, source, target, move) {
			if (move.type === 'Water' && target.getMoveHitData(move).typeMod > 0 && (!target.volatiles['substitute'] || move.flags['authentic'] || (move.infiltrates && this.gen >= 6))) {
				if (target.eatItem()) {
					this.debug('-50% reduction');
					this.add('-enditem', target, this.effect, '[weaken]');
					return this.chainModify(0.5);
				}
			}
		},
		onEat() { },
		num: 185,
		gen: 4,
		desc: "Halves damage taken from a supereffective Water-type attack. Single use.",
	},
	"payapaberry": {
		id: "payapaberry",
		name: "Payapa Berry",
		spritenum: 330,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Psychic",
		},
		onSourceModifyDamage(damage, source, target, move) {
			if (move.type === 'Psychic' && target.getMoveHitData(move).typeMod > 0 && (!target.volatiles['substitute'] || move.flags['authentic'] || (move.infiltrates && this.gen >= 6))) {
				if (target.eatItem()) {
					this.debug('-50% reduction');
					this.add('-enditem', target, this.effect, '[weaken]');
					return this.chainModify(0.5);
				}
			}
		},
		onEat() { },
		num: 193,
		gen: 4,
		desc: "Halves damage taken from a supereffective Psychic-type attack. Single use.",
	},
	"pechaberry": {
		id: "pechaberry",
		name: "Pecha Berry",
		spritenum: 333,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Electric",
		},
		onUpdate(pokemon) {
			if (pokemon.status === 'psn' || pokemon.status === 'tox') {
				pokemon.eatItem();
			}
		},
		onEat(pokemon) {
			if (pokemon.status === 'psn' || pokemon.status === 'tox') {
				pokemon.cureStatus();
			}
		},
		num: 151,
		gen: 3,
		desc: "Holder is cured if it is poisoned. Single use.",
	},
	"persimberry": {
		id: "persimberry",
		name: "Persim Berry",
		spritenum: 334,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Ground",
		},
		onUpdate(pokemon) {
			if (pokemon.volatiles['confusion']) {
				pokemon.eatItem();
			}
		},
		onEat(pokemon) {
			pokemon.removeVolatile('confusion');
		},
		num: 156,
		gen: 3,
		desc: "Holder is cured if it is confused. Single use.",
	},
	"petayaberry": {
		id: "petayaberry",
		name: "Petaya Berry",
		spritenum: 335,
		isBerry: true,
		naturalGift: {
			basePower: 100,
			type: "Poison",
		},
		onUpdate(pokemon) {
			if (pokemon.hp <= pokemon.maxhp / 4 || (pokemon.hp <= pokemon.maxhp / 2 && pokemon.hasAbility('gluttony'))) {
				pokemon.eatItem();
			}
		},
		onEat(pokemon) {
			this.boost({spa: 1});
		},
		num: 204,
		gen: 3,
		desc: "Raises holder's Sp. Atk by 1 stage when at 1/4 max HP or less. Single use.",
	},
	"pidgeotite": {
		id: "pidgeotite",
		name: "Pidgeotite",
		spritenum: 622,
		megaStone: "Pidgeot-Mega",
		megaEvolves: "Pidgeot",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 762,
		gen: 6,
		desc: "If held by a Pidgeot, this item allows it to Mega Evolve in battle.",
	},
	"pikaniumz": {
		id: "pikaniumz",
		name: "Pikanium Z",
		spritenum: 649,
		onTakeItem: false,
		zMove: "Catastropika",
		zMoveFrom: "Volt Tackle",
		zMoveUser: ["Pikachu"],
		num: 794,
		gen: 7,
		desc: "If held by a Pikachu with Volt Tackle, it can use Catastropika.",
	},
	"pikashuniumz": {
		id: "pikashuniumz",
		name: "Pikashunium Z",
		spritenum: 659,
		onTakeItem: false,
		zMove: "10,000,000 Volt Thunderbolt",
		zMoveFrom: "Thunderbolt",
		zMoveUser: ["Pikachu-Original", "Pikachu-Hoenn", "Pikachu-Sinnoh", "Pikachu-Unova", "Pikachu-Kalos", "Pikachu-Alola", "Pikachu-Partner"],
		num: 836,
		gen: 7,
		desc: "If held by cap Pikachu with Thunderbolt, it can use 10,000,000 Volt Thunderbolt.",
	},
	"pinapberry": {
		id: "pinapberry",
		name: "Pinap Berry",
		spritenum: 337,
		isBerry: true,
		naturalGift: {
			basePower: 90,
			type: "Grass",
		},
		onEat: false,
		num: 168,
		gen: 3,
		desc: "Cannot be eaten by the holder. No effect when eaten with Bug Bite or Pluck.",
	},
	"pinsirite": {
		id: "pinsirite",
		name: "Pinsirite",
		spritenum: 602,
		megaStone: "Pinsir-Mega",
		megaEvolves: "Pinsir",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 671,
		gen: 6,
		desc: "If held by a Pinsir, this item allows it to Mega Evolve in battle.",
	},
	"pixieplate": {
		id: "pixieplate",
		name: "Pixie Plate",
		spritenum: 610,
		onPlate: 'Fairy',
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move && move.type === 'Fairy') {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		onTakeItem(item, pokemon, source) {
			if ((source && source.baseTemplate.num === 493) || pokemon.baseTemplate.num === 493) {
				return false;
			}
			return true;
		},
		forcedForme: "Arceus-Fairy",
		num: 644,
		gen: 6,
		desc: "Holder's Fairy-type attacks have 1.2x power. Judgment is Fairy type.",
	},
	"plumefossil": {
		id: "plumefossil",
		name: "Plume Fossil",
		spritenum: 339,
		fling: {
			basePower: 100,
		},
		num: 573,
		gen: 5,
		desc: "Can be revived into Archen.",
	},
	"poisonbarb": {
		id: "poisonbarb",
		name: "Poison Barb",
		spritenum: 343,
		fling: {
			basePower: 70,
			status: 'psn',
		},
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move.type === 'Poison') {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		num: 245,
		gen: 2,
		desc: "Holder's Poison-type attacks have 1.2x power.",
	},
	"poisongem": {
		id: "poisongem",
		name: "Poison Gem",
		isUnreleased: true,
		spritenum: 344,
		isGem: true,
		onSourceTryPrimaryHit(target, source, move) {
			if (target === source || move.category === 'Status') return;
			if (move.type === 'Poison') {
				if (source.useItem()) {
					this.add('-enditem', source, 'Poison Gem', '[from] gem', '[move] ' + move.name);
					source.addVolatile('gem');
				}
			}
		},
		num: 554,
		gen: 5,
		desc: "Holder's first successful Poison-type attack will have 1.3x power. Single use.",
	},
	"poisonmemory": {
		id: "poisonmemory",
		name: "Poison Memory",
		spritenum: 670,
		onMemory: 'Poison',
		onTakeItem(item, pokemon, source) {
			if ((source && source.baseTemplate.num === 773) || pokemon.baseTemplate.num === 773) {
				return false;
			}
			return true;
		},
		forcedForme: "Silvally-Poison",
		num: 906,
		gen: 7,
		desc: "Holder's Multi-Attack is Poison type.",
	},
	"poisoniumz": {
		id: "poisoniumz",
		name: "Poisonium Z",
		spritenum: 638,
		onPlate: 'Poison',
		onTakeItem: false,
		zMove: true,
		zMoveType: "Poison",
		forcedForme: "Arceus-Poison",
		num: 783,
		gen: 7,
		desc: "If holder has a Poison move, this item allows it to use a Poison Z-Move.",
	},
	"pokeball": {
		id: "pokeball",
		name: "Poke Ball",
		spritenum: 345,
		num: 4,
		gen: 1,
		desc: "A device for catching wild Pokemon. It is designed as a capsule system.",
	},
	"pomegberry": {
		id: "pomegberry",
		name: "Pomeg Berry",
		spritenum: 351,
		isBerry: true,
		naturalGift: {
			basePower: 90,
			type: "Ice",
		},
		onEat: false,
		num: 169,
		gen: 3,
		desc: "Cannot be eaten by the holder. No effect when eaten with Bug Bite or Pluck.",
	},
	"poweranklet": {
		id: "poweranklet",
		name: "Power Anklet",
		spritenum: 354,
		ignoreKlutz: true,
		fling: {
			basePower: 70,
		},
		onModifySpe(spe) {
			return this.chainModify(0.5);
		},
		num: 293,
		gen: 4,
		desc: "Holder's Speed is halved. The Klutz Ability does not ignore this effect.",
	},
	"powerband": {
		id: "powerband",
		name: "Power Band",
		spritenum: 355,
		ignoreKlutz: true,
		fling: {
			basePower: 70,
		},
		onModifySpe(spe) {
			return this.chainModify(0.5);
		},
		num: 292,
		gen: 4,
		desc: "Holder's Speed is halved. The Klutz Ability does not ignore this effect.",
	},
	"powerbelt": {
		id: "powerbelt",
		name: "Power Belt",
		spritenum: 356,
		ignoreKlutz: true,
		fling: {
			basePower: 70,
		},
		onModifySpe(spe) {
			return this.chainModify(0.5);
		},
		num: 290,
		gen: 4,
		desc: "Holder's Speed is halved. The Klutz Ability does not ignore this effect.",
	},
	"powerbracer": {
		id: "powerbracer",
		name: "Power Bracer",
		spritenum: 357,
		ignoreKlutz: true,
		fling: {
			basePower: 70,
		},
		onModifySpe(spe) {
			return this.chainModify(0.5);
		},
		num: 289,
		gen: 4,
		desc: "Holder's Speed is halved. The Klutz Ability does not ignore this effect.",
	},
	"powerherb": {
		id: "powerherb",
		onChargeMove(pokemon, target, move) {
			if (pokemon.useItem()) {
				this.debug('power herb - remove charge turn for ' + move.id);
				this.attrLastMove('[still]');
				this.addMove('-anim', pokemon, move.name, target);
				return false; // skip charge turn
			}
		},
		name: "Power Herb",
		spritenum: 358,
		fling: {
			basePower: 10,
		},
		num: 271,
		gen: 4,
		desc: "Holder's two-turn moves complete in one turn (except Sky Drop). Single use.",
	},
	"powerlens": {
		id: "powerlens",
		name: "Power Lens",
		spritenum: 359,
		ignoreKlutz: true,
		fling: {
			basePower: 70,
		},
		onModifySpe(spe) {
			return this.chainModify(0.5);
		},
		num: 291,
		gen: 4,
		desc: "Holder's Speed is halved. The Klutz Ability does not ignore this effect.",
	},
	"powerweight": {
		id: "powerweight",
		name: "Power Weight",
		spritenum: 360,
		ignoreKlutz: true,
		fling: {
			basePower: 70,
		},
		onModifySpe(spe) {
			return this.chainModify(0.5);
		},
		num: 294,
		gen: 4,
		desc: "Holder's Speed is halved. The Klutz Ability does not ignore this effect.",
	},
	"premierball": {
		id: "premierball",
		name: "Premier Ball",
		spritenum: 363,
		num: 12,
		gen: 3,
		desc: "A rare Poke Ball that has been crafted to commemorate an event.",
	},
	"primariumz": {
		id: "primariumz",
		name: "Primarium Z",
		spritenum: 652,
		onTakeItem: false,
		zMove: "Oceanic Operetta",
		zMoveFrom: "Sparkling Aria",
		zMoveUser: ["Primarina"],
		num: 800,
		gen: 7,
		desc: "If held by a Primarina with Sparkling Aria, it can use Oceanic Operetta.",
	},
	"prismscale": {
		id: "prismscale",
		name: "Prism Scale",
		spritenum: 365,
		fling: {
			basePower: 30,
		},
		num: 537,
		gen: 5,
		desc: "Evolves Feebas into Milotic when traded.",
	},
	"protectivepads": {
		id: "protectivepads",
		name: "Protective Pads",
		spritenum: 663,
		fling: {
			basePower: 30,
		},
		onAttractPriority: -1,
		onAttract(target, source) {
			if (target !== source && target === this.activePokemon && this.activeMove && this.activeMove.flags['contact']) return false;
		},
		onBoostPriority: -1,
		onBoost(boost, target, source, effect) {
			if (target !== source && target === this.activePokemon && this.activeMove && this.activeMove.flags['contact']) {
				if (effect && effect.effectType === 'Ability') {
					// Ability activation always happens for boosts
					this.add('-activate', target, 'item: Protective Pads');
				}
				return false;
			}
		},
		onDamagePriority: -1,
		onDamage(damage, target, source, effect) {
			if (target !== source && target === this.activePokemon && this.activeMove && this.activeMove.flags['contact']) {
				if (effect && effect.effectType === 'Ability') {
					this.add('-activate', source, effect.fullname);
					this.add('-activate', target, 'item: Protective Pads');
				}
				return false;
			}
		},
		onSetAbility(ability, target, source, effect) {
			if (target !== source && target === this.activePokemon && this.activeMove && this.activeMove.flags['contact']) {
				if (effect && effect.effectType === 'Ability') {
					this.add('-activate', source, effect.fullname);
					this.add('-activate', target, 'item: Protective Pads');
				}
				return false;
			}
		},
		onSetStatus(status, target, source, effect) {
			if (target !== source && target === this.activePokemon && this.activeMove && this.activeMove.flags['contact']) return false;
		},
		num: 880,
		gen: 7,
		desc: "Holder's moves are protected from adverse contact effects, except Pickpocket.",
	},
	"protector": {
		id: "protector",
		name: "Protector",
		spritenum: 367,
		fling: {
			basePower: 80,
		},
		num: 321,
		gen: 4,
		desc: "Evolves Rhydon into Rhyperior when traded.",
	},
	"psychicgem": {
		id: "psychicgem",
		name: "Psychic Gem",
		isUnreleased: true,
		spritenum: 369,
		isGem: true,
		onSourceTryPrimaryHit(target, source, move) {
			if (target === source || move.category === 'Status') return;
			if (move.type === 'Psychic') {
				if (source.useItem()) {
					this.add('-enditem', source, 'Psychic Gem', '[from] gem', '[move] ' + move.name);
					source.addVolatile('gem');
				}
			}
		},
		num: 557,
		gen: 5,
		desc: "Holder's first successful Psychic-type attack will have 1.3x power. Single use.",
	},
	"psychicmemory": {
		id: "psychicmemory",
		name: "Psychic Memory",
		spritenum: 680,
		onMemory: 'Psychic',
		onTakeItem(item, pokemon, source) {
			if ((source && source.baseTemplate.num === 773) || pokemon.baseTemplate.num === 773) {
				return false;
			}
			return true;
		},
		forcedForme: "Silvally-Psychic",
		num: 916,
		gen: 7,
		desc: "Holder's Multi-Attack is Psychic type.",
	},
	"psychicseed": {
		id: "psychicseed",
		name: "Psychic Seed",
		spritenum: 665,
		fling: {
			basePower: 10,
		},
		onStart(pokemon) {
			if (!pokemon.ignoringItem() && this.field.isTerrain('psychicterrain') && pokemon.useItem()) {
				this.boost({spd: 1});
			}
		},
		onAnyTerrainStart() {
			if (this.field.isTerrain('psychicterrain') && this.effectData.target.useItem()) {
				this.boost({spd: 1}, this.effectData.target);
			}
		},
		num: 882,
		gen: 7,
		desc: "If the terrain is Psychic Terrain, raises holder's Sp. Def by 1 stage. Single use.",
	},
	"psychiumz": {
		id: "psychiumz",
		name: "Psychium Z",
		spritenum: 641,
		onPlate: 'Psychic',
		onTakeItem: false,
		zMove: true,
		zMoveType: "Psychic",
		forcedForme: "Arceus-Psychic",
		num: 786,
		gen: 7,
		desc: "If holder has a Psychic move, this item allows it to use a Psychic Z-Move.",
	},
	"qualotberry": {
		id: "qualotberry",
		name: "Qualot Berry",
		spritenum: 371,
		isBerry: true,
		naturalGift: {
			basePower: 90,
			type: "Poison",
		},
		onEat: false,
		num: 171,
		gen: 3,
		desc: "Cannot be eaten by the holder. No effect when eaten with Bug Bite or Pluck.",
	},
	"quickball": {
		id: "quickball",
		name: "Quick Ball",
		spritenum: 372,
		num: 15,
		gen: 4,
		desc: "A Poke Ball that provides a better catch rate at the start of a wild encounter.",
	},
	"quickclaw": {
		id: "quickclaw",
		onModifyPriorityPriority: -1,
		onModifyPriority(priority, pokemon) {
			if (this.randomChance(1, 5)) {
				this.add('-activate', pokemon, 'item: Quick Claw');
				return Math.round(priority) + 0.1;
			}
		},
		name: "Quick Claw",
		spritenum: 373,
		fling: {
			basePower: 80,
		},
		num: 217,
		gen: 2,
		desc: "Each turn, holder has a 20% chance to move first in its priority bracket.",
	},
	"quickpowder": {
		id: "quickpowder",
		name: "Quick Powder",
		spritenum: 374,
		fling: {
			basePower: 10,
		},
		onModifySpe(spe, pokemon) {
			if (pokemon.template.species === 'Ditto' && !pokemon.transformed) {
				return this.chainModify(2);
			}
		},
		num: 274,
		gen: 4,
		desc: "If held by a Ditto that hasn't Transformed, its Speed is doubled.",
	},
	"rabutaberry": {
		id: "rabutaberry",
		name: "Rabuta Berry",
		isUnreleased: true,
		spritenum: 375,
		isBerry: true,
		naturalGift: {
			basePower: 90,
			type: "Ghost",
		},
		onEat: false,
		num: 177,
		gen: 3,
		desc: "Cannot be eaten by the holder. No effect when eaten with Bug Bite or Pluck.",
	},
	"rarebone": {
		id: "rarebone",
		name: "Rare Bone",
		spritenum: 379,
		fling: {
			basePower: 100,
		},
		num: 106,
		gen: 4,
		desc: "No competitive use other than when used with Fling.",
	},
	"rawstberry": {
		id: "rawstberry",
		name: "Rawst Berry",
		spritenum: 381,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Grass",
		},
		onUpdate(pokemon) {
			if (pokemon.status === 'brn') {
				pokemon.eatItem();
			}
		},
		onEat(pokemon) {
			if (pokemon.status === 'brn') {
				pokemon.cureStatus();
			}
		},
		num: 152,
		gen: 3,
		desc: "Holder is cured if it is burned. Single use.",
	},
	"razorclaw": {
		id: "razorclaw",
		name: "Razor Claw",
		spritenum: 382,
		fling: {
			basePower: 80,
		},
		onModifyCritRatio(critRatio) {
			return critRatio + 1;
		},
		num: 326,
		gen: 4,
		desc: "Holder's critical hit ratio is raised by 1 stage. Evolves Sneasel into Weavile when held and leveled up during the night.",
		shortDesc: "Holder's critical hit ratio is raised by 1 stage.",
	},
	"razorfang": {
		id: "razorfang",
		name: "Razor Fang",
		spritenum: 383,
		fling: {
			basePower: 30,
			volatileStatus: 'flinch',
		},
		onModifyMovePriority: -1,
		onModifyMove(move) {
			if (move.category !== "Status") {
				if (!move.secondaries) move.secondaries = [];
				for (const secondary of move.secondaries) {
					if (secondary.volatileStatus === 'flinch') return;
				}
				move.secondaries.push({
					chance: 10,
					volatileStatus: 'flinch',
				});
			}
		},
		num: 327,
		gen: 4,
		desc: "Holder's attacks without a chance to flinch gain a 10% chance to flinch. Evolves Gligar into Gliscor when held and leveled up during the night.",
		shortDesc: "Holder's attacks without a chance to flinch gain a 10% chance to flinch.",
	},
	"razzberry": {
		id: "razzberry",
		name: "Razz Berry",
		isUnreleased: true,
		spritenum: 384,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Steel",
		},
		onEat: false,
		num: 164,
		gen: 3,
		desc: "Cannot be eaten by the holder. No effect when eaten with Bug Bite or Pluck.",
	},
	"reapercloth": {
		id: "reapercloth",
		name: "Reaper Cloth",
		spritenum: 385,
		fling: {
			basePower: 10,
		},
		num: 325,
		gen: 4,
		desc: "Evolves Dusclops into Dusknoir when traded.",
	},
	"redcard": {
		id: "redcard",
		name: "Red Card",
		spritenum: 387,
		fling: {
			basePower: 10,
		},
		onAfterMoveSecondary(target, source, move) {
			if (source && source !== target && source.hp && target.hp && move && move.category !== 'Status') {
				if (!source.isActive || !this.canSwitch(source.side) || source.forceSwitchFlag || target.forceSwitchFlag) return;
				if (target.useItem(source)) { // This order is correct - the item is used up even against a pokemon with Ingrain or that otherwise can't be forced out
					if (this.runEvent('DragOut', source, target, move)) {
						source.forceSwitchFlag = true;
					}
				}
			}
		},
		num: 542,
		gen: 5,
		desc: "If holder survives a hit, attacker is forced to switch to a random ally. Single use.",
	},
	"redorb": {
		id: "redorb",
		name: "Red Orb",
		spritenum: 390,
		onSwitchIn(pokemon) {
			if (pokemon.isActive && pokemon.baseTemplate.species === 'Groudon') {
				this.insertQueue({pokemon: pokemon, choice: 'runPrimal'});
			}
		},
		onPrimal(pokemon) {
			pokemon.formeChange('Groudon-Primal', this.effect, true);
		},
		onTakeItem(item, source) {
			if (source.baseTemplate.baseSpecies === 'Groudon') return false;
			return true;
		},
		num: 534,
		gen: 6,
		desc: "If held by a Groudon, this item triggers its Primal Reversion in battle.",
	},
	"repeatball": {
		id: "repeatball",
		name: "Repeat Ball",
		spritenum: 401,
		num: 9,
		gen: 3,
		desc: "A Poke Ball that works well on Pokemon species that were previously caught.",
	},
	"rindoberry": {
		id: "rindoberry",
		name: "Rindo Berry",
		spritenum: 409,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Grass",
		},
		onSourceModifyDamage(damage, source, target, move) {
			if (move.type === 'Grass' && target.getMoveHitData(move).typeMod > 0 && (!target.volatiles['substitute'] || move.flags['authentic'] || (move.infiltrates && this.gen >= 6))) {
				if (target.eatItem()) {
					this.debug('-50% reduction');
					this.add('-enditem', target, this.effect, '[weaken]');
					return this.chainModify(0.5);
				}
			}
		},
		onEat() { },
		num: 187,
		gen: 4,
		desc: "Halves damage taken from a supereffective Grass-type attack. Single use.",
	},
	"ringtarget": {
		id: "ringtarget",
		name: "Ring Target",
		spritenum: 410,
		fling: {
			basePower: 10,
		},
		onNegateImmunity: false,
		num: 543,
		gen: 5,
		desc: "The holder's type immunities granted solely by its typing are negated.",
	},
	"rockgem": {
		id: "rockgem",
		name: "Rock Gem",
		isUnreleased: true,
		spritenum: 415,
		isGem: true,
		onSourceTryPrimaryHit(target, source, move) {
			if (target === source || move.category === 'Status') return;
			if (move.type === 'Rock') {
				if (source.useItem()) {
					this.add('-enditem', source, 'Rock Gem', '[from] gem', '[move] ' + move.name);
					source.addVolatile('gem');
				}
			}
		},
		num: 559,
		gen: 5,
		desc: "Holder's first successful Rock-type attack will have 1.3x power. Single use.",
	},
	"rockincense": {
		id: "rockincense",
		name: "Rock Incense",
		spritenum: 416,
		fling: {
			basePower: 10,
		},
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move.type === 'Rock') {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		num: 315,
		gen: 4,
		desc: "Holder's Rock-type attacks have 1.2x power.",
	},
	"rockmemory": {
		id: "rockmemory",
		name: "Rock Memory",
		spritenum: 672,
		onMemory: 'Rock',
		onTakeItem(item, pokemon, source) {
			if ((source && source.baseTemplate.num === 773) || pokemon.baseTemplate.num === 773) {
				return false;
			}
			return true;
		},
		forcedForme: "Silvally-Rock",
		num: 908,
		gen: 7,
		desc: "Holder's Multi-Attack is Rock type.",
	},
	"rockiumz": {
		id: "rockiumz",
		name: "Rockium Z",
		spritenum: 643,
		onPlate: 'Rock',
		onTakeItem: false,
		zMove: true,
		zMoveType: "Rock",
		forcedForme: "Arceus-Rock",
		num: 788,
		gen: 7,
		desc: "If holder has a Rock move, this item allows it to use a Rock Z-Move.",
	},
	"rockyhelmet": {
		id: "rockyhelmet",
		name: "Rocky Helmet",
		spritenum: 417,
		fling: {
			basePower: 60,
		},
		onAfterDamageOrder: 2,
		onAfterDamage(damage, target, source, move) {
			if (source && source !== target && move && move.flags['contact']) {
				this.damage(source.maxhp / 6, source, target);
			}
		},
		num: 540,
		gen: 5,
		desc: "If holder is hit by a contact move, the attacker loses 1/6 of its max HP.",
	},
	"rootfossil": {
		id: "rootfossil",
		name: "Root Fossil",
		spritenum: 418,
		fling: {
			basePower: 100,
		},
		num: 99,
		gen: 3,
		desc: "Can be revived into Lileep.",
	},
	"roseincense": {
		id: "roseincense",
		name: "Rose Incense",
		spritenum: 419,
		fling: {
			basePower: 10,
		},
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move.type === 'Grass') {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		num: 318,
		gen: 4,
		desc: "Holder's Grass-type attacks have 1.2x power.",
	},
	"roseliberry": {
		id: "roseliberry",
		name: "Roseli Berry",
		spritenum: 603,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Fairy",
		},
		onSourceModifyDamage(damage, source, target, move) {
			if (move.type === 'Fairy' && target.getMoveHitData(move).typeMod > 0 && (!target.volatiles['substitute'] || move.flags['authentic'] || (move.infiltrates && this.gen >= 6))) {
				if (target.eatItem()) {
					this.debug('-50% reduction');
					this.add('-enditem', target, this.effect, '[weaken]');
					return this.chainModify(0.5);
				}
			}
		},
		onEat() { },
		num: 686,
		gen: 6,
		desc: "Halves damage taken from a supereffective Fairy-type attack. Single use.",
	},
	"rowapberry": {
		id: "rowapberry",
		name: "Rowap Berry",
		spritenum: 420,
		isBerry: true,
		naturalGift: {
			basePower: 100,
			type: "Dark",
		},
		onAfterDamage(damage, target, source, move) {
			if (source && source.hp && source !== target && move && move.category === 'Special') {
				if (target.eatItem()) {
					this.damage(source.maxhp / 8, source, target);
				}
			}
		},
		onEat() { },
		num: 212,
		gen: 4,
		desc: "If holder is hit by a special move, attacker loses 1/8 of its max HP. Single use.",
	},
	"sablenite": {
		id: "sablenite",
		name: "Sablenite",
		spritenum: 614,
		megaStone: "Sableye-Mega",
		megaEvolves: "Sableye",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 754,
		gen: 6,
		desc: "If held by a Sableye, this item allows it to Mega Evolve in battle.",
	},
	"sachet": {
		id: "sachet",
		name: "Sachet",
		spritenum: 691,
		fling: {
			basePower: 80,
		},
		num: 647,
		gen: 6,
		desc: "Evolves Spritzee into Aromatisse when traded.",
	},
	"safariball": {
		id: "safariball",
		name: "Safari Ball",
		spritenum: 425,
		num: 5,
		gen: 1,
		desc: "A special Poke Ball that is used only in the Safari Zone and Great Marsh.",
	},
	"safetygoggles": {
		id: "safetygoggles",
		name: "Safety Goggles",
		spritenum: 604,
		fling: {
			basePower: 80,
		},
		onImmunity(type, pokemon) {
			if (type === 'sandstorm' || type === 'hail' || type === 'powder') return false;
		},
		onTryHit(pokemon, source, move) {
			if (move.flags['powder'] && pokemon !== source && this.getImmunity('powder', pokemon)) {
				this.add('-activate', pokemon, 'item: Safety Goggles', move.name);
				return null;
			}
		},
		num: 650,
		gen: 6,
		desc: "Holder is immune to powder moves and damage from Sandstorm or Hail.",
	},
	"sailfossil": {
		id: "sailfossil",
		name: "Sail Fossil",
		spritenum: 695,
		fling: {
			basePower: 100,
		},
		num: 711,
		gen: 6,
		desc: "Can be revived into Amaura.",
	},
	"salacberry": {
		id: "salacberry",
		name: "Salac Berry",
		spritenum: 426,
		isBerry: true,
		naturalGift: {
			basePower: 100,
			type: "Fighting",
		},
		onUpdate(pokemon) {
			if (pokemon.hp <= pokemon.maxhp / 4 || (pokemon.hp <= pokemon.maxhp / 2 && pokemon.hasAbility('gluttony'))) {
				pokemon.eatItem();
			}
		},
		onEat(pokemon) {
			this.boost({spe: 1});
		},
		num: 203,
		gen: 3,
		desc: "Raises holder's Speed by 1 stage when at 1/4 max HP or less. Single use.",
	},
	"salamencite": {
		id: "salamencite",
		name: "Salamencite",
		spritenum: 627,
		megaStone: "Salamence-Mega",
		megaEvolves: "Salamence",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 769,
		gen: 6,
		desc: "If held by a Salamence, this item allows it to Mega Evolve in battle.",
	},
	"sceptilite": {
		id: "sceptilite",
		name: "Sceptilite",
		spritenum: 613,
		megaStone: "Sceptile-Mega",
		megaEvolves: "Sceptile",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 753,
		gen: 6,
		desc: "If held by a Sceptile, this item allows it to Mega Evolve in battle.",
	},
	"scizorite": {
		id: "scizorite",
		name: "Scizorite",
		spritenum: 605,
		megaStone: "Scizor-Mega",
		megaEvolves: "Scizor",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 670,
		gen: 6,
		desc: "If held by a Scizor, this item allows it to Mega Evolve in battle.",
	},
	"scopelens": {
		id: "scopelens",
		name: "Scope Lens",
		spritenum: 429,
		fling: {
			basePower: 30,
		},
		onModifyCritRatio(critRatio) {
			return critRatio + 1;
		},
		num: 232,
		gen: 2,
		desc: "Holder's critical hit ratio is raised by 1 stage.",
	},
	"seaincense": {
		id: "seaincense",
		name: "Sea Incense",
		spritenum: 430,
		fling: {
			basePower: 10,
		},
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move && move.type === 'Water') {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		num: 254,
		gen: 3,
		desc: "Holder's Water-type attacks have 1.2x power.",
	},
	"sharpbeak": {
		id: "sharpbeak",
		name: "Sharp Beak",
		spritenum: 436,
		fling: {
			basePower: 50,
		},
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move && move.type === 'Flying') {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		num: 244,
		gen: 2,
		desc: "Holder's Flying-type attacks have 1.2x power.",
	},
	"sharpedonite": {
		id: "sharpedonite",
		name: "Sharpedonite",
		spritenum: 619,
		megaStone: "Sharpedo-Mega",
		megaEvolves: "Sharpedo",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 759,
		gen: 6,
		desc: "If held by a Sharpedo, this item allows it to Mega Evolve in battle.",
	},
	"shedshell": {
		id: "shedshell",
		name: "Shed Shell",
		spritenum: 437,
		fling: {
			basePower: 10,
		},
		onTrapPokemonPriority: -10,
		onTrapPokemon(pokemon) {
			pokemon.trapped = pokemon.maybeTrapped = false;
		},
		num: 295,
		gen: 4,
		desc: "Holder may switch out even when trapped by another Pokemon, or by Ingrain.",
	},
	"shellbell": {
		id: "shellbell",
		name: "Shell Bell",
		spritenum: 438,
		fling: {
			basePower: 30,
		},
		onAfterMoveSecondarySelfPriority: -1,
		onAfterMoveSecondarySelf(pokemon, target, move) {
			if (move.category !== 'Status') {
				this.heal(pokemon.lastDamage / 8, pokemon);
			}
		},
		num: 253,
		gen: 3,
		desc: "After an attack, holder gains 1/8 of the damage in HP dealt to other Pokemon.",
	},
	"shinystone": {
		id: "shinystone",
		name: "Shiny Stone",
		spritenum: 439,
		fling: {
			basePower: 80,
		},
		num: 107,
		gen: 4,
		desc: "Evolves Togetic into Togekiss, Roselia into Roserade, Minccino into Cinccino, and Floette into Florges when used.",
		shortDesc: "Evolves certain species of Pokemon when used.",
	},
	"shockdrive": {
		id: "shockdrive",
		name: "Shock Drive",
		spritenum: 442,
		onTakeItem(item, pokemon, source) {
			if ((source && source.baseTemplate.num === 649) || pokemon.baseTemplate.num === 649) {
				return false;
			}
			return true;
		},
		onDrive: 'Electric',
		forcedForme: "Genesect-Shock",
		num: 117,
		gen: 5,
		desc: "Holder's Techno Blast is Electric type.",
	},
	"shucaberry": {
		id: "shucaberry",
		name: "Shuca Berry",
		spritenum: 443,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Ground",
		},
		onSourceModifyDamage(damage, source, target, move) {
			if (move.type === 'Ground' && target.getMoveHitData(move).typeMod > 0 && (!target.volatiles['substitute'] || move.flags['authentic'] || (move.infiltrates && this.gen >= 6))) {
				if (target.eatItem()) {
					this.debug('-50% reduction');
					this.add('-enditem', target, this.effect, '[weaken]');
					return this.chainModify(0.5);
				}
			}
		},
		onEat() { },
		num: 191,
		gen: 4,
		desc: "Halves damage taken from a supereffective Ground-type attack. Single use.",
	},
	"silkscarf": {
		id: "silkscarf",
		name: "Silk Scarf",
		spritenum: 444,
		fling: {
			basePower: 10,
		},
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move.type === 'Normal') {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		num: 251,
		gen: 3,
		desc: "Holder's Normal-type attacks have 1.2x power.",
	},
	"silverpowder": {
		id: "silverpowder",
		name: "SilverPowder",
		spritenum: 447,
		fling: {
			basePower: 10,
		},
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move.type === 'Bug') {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		num: 222,
		gen: 2,
		desc: "Holder's Bug-type attacks have 1.2x power.",
	},
	"sitrusberry": {
		id: "sitrusberry",
		name: "Sitrus Berry",
		spritenum: 448,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Psychic",
		},
		onUpdate(pokemon) {
			if (pokemon.hp <= pokemon.maxhp / 2) {
				pokemon.eatItem();
			}
		},
		onTryEatItem(item, pokemon) {
			if (!this.runEvent('TryHeal', pokemon)) return false;
		},
		onEat(pokemon) {
			this.heal(pokemon.maxhp / 4);
		},
		num: 158,
		gen: 3,
		desc: "Restores 1/4 max HP when at 1/2 max HP or less. Single use.",
	},
	"skullfossil": {
		id: "skullfossil",
		name: "Skull Fossil",
		spritenum: 449,
		fling: {
			basePower: 100,
		},
		num: 105,
		gen: 4,
		desc: "Can be revived into Cranidos.",
	},
	"skyplate": {
		id: "skyplate",
		name: "Sky Plate",
		spritenum: 450,
		onPlate: 'Flying',
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move.type === 'Flying') {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		onTakeItem(item, pokemon, source) {
			if ((source && source.baseTemplate.num === 493) || pokemon.baseTemplate.num === 493) {
				return false;
			}
			return true;
		},
		forcedForme: "Arceus-Flying",
		num: 306,
		gen: 4,
		desc: "Holder's Flying-type attacks have 1.2x power. Judgment is Flying type.",
	},
	"slowbronite": {
		id: "slowbronite",
		name: "Slowbronite",
		spritenum: 620,
		megaStone: "Slowbro-Mega",
		megaEvolves: "Slowbro",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 760,
		gen: 6,
		desc: "If held by a Slowbro, this item allows it to Mega Evolve in battle.",
	},
	"smoothrock": {
		id: "smoothrock",
		name: "Smooth Rock",
		spritenum: 453,
		fling: {
			basePower: 10,
		},
		num: 283,
		gen: 4,
		desc: "Holder's use of Sandstorm lasts 8 turns instead of 5.",
	},
	"snorliumz": {
		id: "snorliumz",
		name: "Snorlium Z",
		spritenum: 656,
		onTakeItem: false,
		zMove: "Pulverizing Pancake",
		zMoveFrom: "Giga Impact",
		zMoveUser: ["Snorlax"],
		num: 804,
		gen: 7,
		desc: "If held by a Snorlax with Giga Impact, it can use Pulverizing Pancake.",
	},
	"snowball": {
		id: "snowball",
		name: "Snowball",
		spritenum: 606,
		fling: {
			basePower: 30,
		},
		onAfterDamage(damage, target, source, move) {
			if (move.type === 'Ice' && target.useItem()) {
				this.boost({atk: 1});
			}
		},
		num: 649,
		gen: 6,
		desc: "Raises holder's Attack by 1 if hit by an Ice-type attack. Single use.",
	},
	"softsand": {
		id: "softsand",
		name: "Soft Sand",
		spritenum: 456,
		fling: {
			basePower: 10,
		},
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move.type === 'Ground') {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		num: 237,
		gen: 2,
		desc: "Holder's Ground-type attacks have 1.2x power.",
	},
	"solganiumz": {
		id: "solganiumz",
		name: "Solganium Z",
		spritenum: 685,
		onTakeItem: false,
		zMove: "Searing Sunraze Smash",
		zMoveFrom: "Sunsteel Strike",
		zMoveUser: ["Solgaleo", "Necrozma-Dusk-Mane"],
		num: 921,
		gen: 7,
		desc: "Solgaleo or Dusk Mane Necrozma with Sunsteel Strike can use a special Z-Move.",
	},
	"souldew": {
		id: "souldew",
		name: "Soul Dew",
		spritenum: 459,
		fling: {
			basePower: 30,
		},
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move && (user.baseTemplate.num === 380 || user.baseTemplate.num === 381) && (move.type === 'Psychic' || move.type === 'Dragon')) {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		num: 225,
		gen: 3,
		desc: "If held by a Latias/Latios, its Dragon- and Psychic-type moves have 1.2x power.",
	},
	"spelltag": {
		id: "spelltag",
		name: "Spell Tag",
		spritenum: 461,
		fling: {
			basePower: 30,
		},
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move.type === 'Ghost') {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		num: 247,
		gen: 2,
		desc: "Holder's Ghost-type attacks have 1.2x power.",
	},
	"spelonberry": {
		id: "spelonberry",
		name: "Spelon Berry",
		isUnreleased: true,
		spritenum: 462,
		isBerry: true,
		naturalGift: {
			basePower: 90,
			type: "Dark",
		},
		onEat: false,
		num: 179,
		gen: 3,
		desc: "Cannot be eaten by the holder. No effect when eaten with Bug Bite or Pluck.",
	},
	"splashplate": {
		id: "splashplate",
		name: "Splash Plate",
		spritenum: 463,
		onPlate: 'Water',
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move.type === 'Water') {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		onTakeItem(item, pokemon, source) {
			if ((source && source.baseTemplate.num === 493) || pokemon.baseTemplate.num === 493) {
				return false;
			}
			return true;
		},
		forcedForme: "Arceus-Water",
		num: 299,
		gen: 4,
		desc: "Holder's Water-type attacks have 1.2x power. Judgment is Water type.",
	},
	"spookyplate": {
		id: "spookyplate",
		name: "Spooky Plate",
		spritenum: 464,
		onPlate: 'Ghost',
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move.type === 'Ghost') {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		onTakeItem(item, pokemon, source) {
			if ((source && source.baseTemplate.num === 493) || pokemon.baseTemplate.num === 493) {
				return false;
			}
			return true;
		},
		forcedForme: "Arceus-Ghost",
		num: 310,
		gen: 4,
		desc: "Holder's Ghost-type attacks have 1.2x power. Judgment is Ghost type.",
	},
	"sportball": {
		id: "sportball",
		name: "Sport Ball",
		spritenum: 465,
		num: 499,
		gen: 2,
		desc: "A special Poke Ball for the Bug-Catching Contest.",
	},
	"starfberry": {
		id: "starfberry",
		name: "Starf Berry",
		spritenum: 472,
		isBerry: true,
		naturalGift: {
			basePower: 100,
			type: "Psychic",
		},
		onUpdate(pokemon) {
			if (pokemon.hp <= pokemon.maxhp / 4 || (pokemon.hp <= pokemon.maxhp / 2 && pokemon.hasAbility('gluttony'))) {
				pokemon.eatItem();
			}
		},
		onEat(pokemon) {
			let stats = [];
			for (let stat in pokemon.boosts) {
				// @ts-ignore
				if (stat !== 'accuracy' && stat !== 'evasion' && pokemon.boosts[stat] < 6) {
					stats.push(stat);
				}
			}
			if (stats.length) {
				let randomStat = this.sample(stats);
				/**@type {{[k: string]: number}} */
				let boost = {};
				boost[randomStat] = 2;
				this.boost(boost);
			}
		},
		num: 207,
		gen: 3,
		desc: "Raises a random stat by 2 when at 1/4 max HP or less (not acc/eva). Single use.",
	},
	"steelixite": {
		id: "steelixite",
		name: "Steelixite",
		spritenum: 621,
		megaStone: "Steelix-Mega",
		megaEvolves: "Steelix",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 761,
		gen: 6,
		desc: "If held by a Steelix, this item allows it to Mega Evolve in battle.",
	},
	"steelgem": {
		id: "steelgem",
		name: "Steel Gem",
		isUnreleased: true,
		spritenum: 473,
		isGem: true,
		onSourceTryPrimaryHit(target, source, move) {
			if (target === source || move.category === 'Status') return;
			if (move.type === 'Steel') {
				if (source.useItem()) {
					this.add('-enditem', source, 'Steel Gem', '[from] gem', '[move] ' + move.name);
					source.addVolatile('gem');
				}
			}
		},
		num: 563,
		gen: 5,
		desc: "Holder's first successful Steel-type attack will have 1.3x power. Single use.",
	},
	"steelmemory": {
		id: "steelmemory",
		name: "Steel Memory",
		spritenum: 675,
		onMemory: 'Steel',
		onTakeItem(item, pokemon, source) {
			if ((source && source.baseTemplate.num === 773) || pokemon.baseTemplate.num === 773) {
				return false;
			}
			return true;
		},
		forcedForme: "Silvally-Steel",
		num: 911,
		gen: 7,
		desc: "Holder's Multi-Attack is Steel type.",
	},
	"steeliumz": {
		id: "steeliumz",
		name: "Steelium Z",
		spritenum: 647,
		onPlate: 'Steel',
		onTakeItem: false,
		zMove: true,
		zMoveType: "Steel",
		forcedForme: "Arceus-Steel",
		num: 792,
		gen: 7,
		desc: "If holder has a Steel move, this item allows it to use a Steel Z-Move.",
	},
	"stick": {
		id: "stick",
		name: "Stick",
		fling: {
			basePower: 60,
		},
		spritenum: 475,
		onModifyCritRatio(critRatio, user) {
			if (user.baseTemplate.species === 'Farfetch\'d') {
				return critRatio + 2;
			}
		},
		num: 259,
		gen: 2,
		desc: "If held by a Farfetch'd, its critical hit ratio is raised by 2 stages.",
	},
	"stickybarb": {
		id: "stickybarb",
		name: "Sticky Barb",
		spritenum: 476,
		fling: {
			basePower: 80,
		},
		onResidualOrder: 26,
		onResidualSubOrder: 2,
		onResidual(pokemon) {
			this.damage(pokemon.maxhp / 8);
		},
		onHit(target, source, move) {
			if (source && source !== target && !source.item && move && move.flags['contact']) {
				let barb = target.takeItem();
				if (!barb) return; // Gen 4 Multitype
				source.setItem(barb);
				// no message for Sticky Barb changing hands
			}
		},
		num: 288,
		gen: 4,
		desc: "Each turn, holder loses 1/8 max HP. An attacker making contact can receive it.",
	},
	"stoneplate": {
		id: "stoneplate",
		name: "Stone Plate",
		spritenum: 477,
		onPlate: 'Rock',
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move.type === 'Rock') {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		onTakeItem(item, pokemon, source) {
			if ((source && source.baseTemplate.num === 493) || pokemon.baseTemplate.num === 493) {
				return false;
			}
			return true;
		},
		forcedForme: "Arceus-Rock",
		num: 309,
		gen: 4,
		desc: "Holder's Rock-type attacks have 1.2x power. Judgment is Rock type.",
	},
	"sunstone": {
		id: "sunstone",
		name: "Sun Stone",
		spritenum: 480,
		fling: {
			basePower: 30,
		},
		num: 80,
		gen: 2,
		desc: "Evolves Gloom into Bellossom, Sunkern into Sunflora, Cottonee into Whimsicott, Petilil into Lilligant, and Helioptile into Heliolisk when used.",
		shortDesc: "Evolves certain species of Pokemon when used.",
	},
	"swampertite": {
		id: "swampertite",
		name: "Swampertite",
		spritenum: 612,
		megaStone: "Swampert-Mega",
		megaEvolves: "Swampert",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 752,
		gen: 6,
		desc: "If held by a Swampert, this item allows it to Mega Evolve in battle.",
	},
	"tamatoberry": {
		id: "tamatoberry",
		name: "Tamato Berry",
		spritenum: 486,
		isBerry: true,
		naturalGift: {
			basePower: 90,
			type: "Psychic",
		},
		onEat: false,
		num: 174,
		gen: 3,
		desc: "Cannot be eaten by the holder. No effect when eaten with Bug Bite or Pluck.",
	},
	"tangaberry": {
		id: "tangaberry",
		name: "Tanga Berry",
		spritenum: 487,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Bug",
		},
		onSourceModifyDamage(damage, source, target, move) {
			if (move.type === 'Bug' && target.getMoveHitData(move).typeMod > 0 && (!target.volatiles['substitute'] || move.flags['authentic'] || (move.infiltrates && this.gen >= 6))) {
				if (target.eatItem()) {
					this.debug('-50% reduction');
					this.add('-enditem', target, this.effect, '[weaken]');
					return this.chainModify(0.5);
				}
			}
		},
		onEat() { },
		num: 194,
		gen: 4,
		desc: "Halves damage taken from a supereffective Bug-type attack. Single use.",
	},
	"tapuniumz": {
		id: "tapuniumz",
		name: "Tapunium Z",
		spritenum: 653,
		onTakeItem: false,
		zMove: "Guardian of Alola",
		zMoveFrom: "Nature's Madness",
		zMoveUser: ["Tapu Koko", "Tapu Lele", "Tapu Bulu", "Tapu Fini"],
		num: 801,
		gen: 7,
		desc: "If held by a Tapu with Nature's Madness, it can use Guardian of Alola.",
	},
	"terrainextender": {
		id: "terrainextender",
		name: "Terrain Extender",
		spritenum: 662,
		fling: {
			basePower: 60,
		},
		num: 879,
		gen: 7,
		desc: "Holder's use of Electric/Grassy/Misty/Psychic Terrain lasts 8 turns instead of 5.",
	},
	"thickclub": {
		id: "thickclub",
		name: "Thick Club",
		spritenum: 491,
		fling: {
			basePower: 90,
		},
		onModifyAtkPriority: 1,
		onModifyAtk(atk, pokemon) {
			if (pokemon.baseTemplate.baseSpecies === 'Cubone' || pokemon.baseTemplate.baseSpecies === 'Marowak') {
				return this.chainModify(2);
			}
		},
		num: 258,
		gen: 2,
		desc: "If held by a Cubone or a Marowak, its Attack is doubled.",
	},
	"thunderstone": {
		id: "thunderstone",
		name: "Thunder Stone",
		spritenum: 492,
		fling: {
			basePower: 30,
		},
		num: 83,
		gen: 1,
		desc: "Evolves Pikachu into Raichu or Alolan Raichu, Eevee into Jolteon, and Eelektrik into Eelektross when used.",
		shortDesc: "Evolves certain species of Pokemon when used.",
	},
	"timerball": {
		id: "timerball",
		name: "Timer Ball",
		spritenum: 494,
		num: 10,
		gen: 3,
		desc: "A Poke Ball that becomes better the more turns there are in a battle.",
	},
	"toxicorb": {
		id: "toxicorb",
		name: "Toxic Orb",
		spritenum: 515,
		fling: {
			basePower: 30,
			status: 'tox',
		},
		onResidualOrder: 26,
		onResidualSubOrder: 2,
		onResidual(pokemon) {
			pokemon.trySetStatus('tox', pokemon);
		},
		num: 272,
		gen: 4,
		desc: "At the end of every turn, this item attempts to badly poison the holder.",
	},
	"toxicplate": {
		id: "toxicplate",
		name: "Toxic Plate",
		spritenum: 516,
		onPlate: 'Poison',
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move.type === 'Poison') {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		onTakeItem(item, pokemon, source) {
			if ((source && source.baseTemplate.num === 493) || pokemon.baseTemplate.num === 493) {
				return false;
			}
			return true;
		},
		forcedForme: "Arceus-Poison",
		num: 304,
		gen: 4,
		desc: "Holder's Poison-type attacks have 1.2x power. Judgment is Poison type.",
	},
	"twistedspoon": {
		id: "twistedspoon",
		name: "Twisted Spoon",
		spritenum: 520,
		fling: {
			basePower: 30,
		},
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move.type === 'Psychic') {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		num: 248,
		gen: 2,
		desc: "Holder's Psychic-type attacks have 1.2x power.",
	},
	"tyranitarite": {
		id: "tyranitarite",
		name: "Tyranitarite",
		spritenum: 607,
		megaStone: "Tyranitar-Mega",
		megaEvolves: "Tyranitar",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 669,
		gen: 6,
		desc: "If held by a Tyranitar, this item allows it to Mega Evolve in battle.",
	},
	"ultraball": {
		id: "ultraball",
		name: "Ultra Ball",
		spritenum: 521,
		num: 2,
		gen: 1,
		desc: "An ultra-performance Ball that provides a higher catch rate than a Great Ball.",
	},
	"ultranecroziumz": {
		id: "ultranecroziumz",
		name: "Ultranecrozium Z",
		spritenum: 687,
		onTakeItem: false,
		zMove: "Light That Burns the Sky",
		zMoveFrom: "Photon Geyser",
		zMoveUser: ["Necrozma-Ultra"],
		num: 923,
		gen: 7,
		desc: "Dusk Mane/Dawn Wings Necrozma: Ultra Burst, then Z-Move w/ Photon Geyser.",
	},
	"upgrade": {
		id: "upgrade",
		name: "Up-Grade",
		spritenum: 523,
		fling: {
			basePower: 30,
		},
		num: 252,
		gen: 2,
		desc: "Evolves Porygon into Porygon2 when traded.",
	},
	"venusaurite": {
		id: "venusaurite",
		name: "Venusaurite",
		spritenum: 608,
		megaStone: "Venusaur-Mega",
		megaEvolves: "Venusaur",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: 659,
		gen: 6,
		desc: "If held by a Venusaur, this item allows it to Mega Evolve in battle.",
	},
	"wacanberry": {
		id: "wacanberry",
		name: "Wacan Berry",
		spritenum: 526,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Electric",
		},
		onSourceModifyDamage(damage, source, target, move) {
			if (move.type === 'Electric' && target.getMoveHitData(move).typeMod > 0 && (!target.volatiles['substitute'] || move.flags['authentic'] || (move.infiltrates && this.gen >= 6))) {
				if (target.eatItem()) {
					this.debug('-50% reduction');
					this.add('-enditem', target, this.effect, '[weaken]');
					return this.chainModify(0.5);
				}
			}
		},
		onEat() { },
		num: 186,
		gen: 4,
		desc: "Halves damage taken from a supereffective Electric-type attack. Single use.",
	},
	"watergem": {
		id: "watergem",
		name: "Water Gem",
		isUnreleased: true,
		spritenum: 528,
		isGem: true,
		onSourceTryPrimaryHit(target, source, move) {
			if (target === source || move.category === 'Status' || ['firepledge', 'grasspledge', 'waterpledge'].includes(move.id)) return;
			if (move.type === 'Water') {
				if (source.useItem()) {
					this.add('-enditem', source, 'Water Gem', '[from] gem', '[move] ' + move.name);
					source.addVolatile('gem');
				}
			}
		},
		num: 549,
		gen: 5,
		desc: "Holder's first successful Water-type attack will have 1.3x power. Single use.",
	},
	"watermemory": {
		id: "watermemory",
		name: "Water Memory",
		spritenum: 677,
		onMemory: 'Water',
		onTakeItem(item, pokemon, source) {
			if ((source && source.baseTemplate.num === 773) || pokemon.baseTemplate.num === 773) {
				return false;
			}
			return true;
		},
		forcedForme: "Silvally-Water",
		num: 913,
		gen: 7,
		desc: "Holder's Multi-Attack is Water type.",
	},
	"waterstone": {
		id: "waterstone",
		name: "Water Stone",
		spritenum: 529,
		fling: {
			basePower: 30,
		},
		num: 84,
		gen: 1,
		desc: "Evolves Poliwhirl into Poliwrath, Shellder into Cloyster, Staryu into Starmie, Eevee into Vaporeon, Lombre into Ludicolo, and Panpour into Simipour when used.",
		shortDesc: "Evolves certain species of Pokemon when used.",
	},
	"wateriumz": {
		id: "wateriumz",
		name: "Waterium Z",
		spritenum: 633,
		onPlate: 'Water',
		onTakeItem: false,
		zMove: true,
		zMoveType: "Water",
		forcedForme: "Arceus-Water",
		num: 778,
		gen: 7,
		desc: "If holder has a Water move, this item allows it to use a Water Z-Move.",
	},
	"watmelberry": {
		id: "watmelberry",
		name: "Watmel Berry",
		isUnreleased: true,
		spritenum: 530,
		isBerry: true,
		naturalGift: {
			basePower: 100,
			type: "Fire",
		},
		onEat: false,
		num: 181,
		gen: 3,
		desc: "Cannot be eaten by the holder. No effect when eaten with Bug Bite or Pluck.",
	},
	"waveincense": {
		id: "waveincense",
		name: "Wave Incense",
		spritenum: 531,
		fling: {
			basePower: 10,
		},
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move.type === 'Water') {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		num: 317,
		gen: 4,
		desc: "Holder's Water-type attacks have 1.2x power.",
	},
	"weaknesspolicy": {
		id: "weaknesspolicy",
		name: "Weakness Policy",
		spritenum: 609,
		fling: {
			basePower: 80,
		},
		onHitPriority: 1,
		onHit(target, source, move) {
			if (target.hp && move.category !== 'Status' && !move.damage && !move.damageCallback && target.getMoveHitData(move).typeMod > 0 && target.useItem()) {
				this.boost({atk: 2, spa: 2});
			}
		},
		num: 639,
		gen: 6,
		desc: "If holder is hit super effectively, raises Attack, Sp. Atk by 2 stages. Single use.",
	},
	"wepearberry": {
		id: "wepearberry",
		name: "Wepear Berry",
		isUnreleased: true,
		spritenum: 533,
		isBerry: true,
		naturalGift: {
			basePower: 90,
			type: "Electric",
		},
		onEat: false,
		num: 167,
		gen: 3,
		desc: "Cannot be eaten by the holder. No effect when eaten with Bug Bite or Pluck.",
	},
	"whippeddream": {
		id: "whippeddream",
		name: "Whipped Dream",
		spritenum: 692,
		fling: {
			basePower: 80,
		},
		num: 646,
		gen: 6,
		desc: "Evolves Swirlix into Slurpuff when traded.",
	},
	"whiteherb": {
		id: "whiteherb",
		name: "White Herb",
		spritenum: 535,
		fling: {
			basePower: 10,
			effect(pokemon) {
				let activate = false;
				/**@type {{[k: string]: number}} */
				let boosts = {};
				for (let i in pokemon.boosts) {
					// @ts-ignore
					if (pokemon.boosts[i] < 0) {
						activate = true;
						boosts[i] = 0;
					}
				}
				if (activate) {
					pokemon.setBoost(boosts);
					this.add('-clearnegativeboost', pokemon, '[silent]');
				}
			},
		},
		onUpdate(pokemon) {
			let activate = false;
			/**@type {{[k: string]: number}} */
			let boosts = {};
			for (let i in pokemon.boosts) {
				// @ts-ignore
				if (pokemon.boosts[i] < 0) {
					activate = true;
					boosts[i] = 0;
				}
			}
			if (activate && pokemon.useItem()) {
				pokemon.setBoost(boosts);
				this.add('-clearnegativeboost', pokemon, '[silent]');
			}
		},
		num: 214,
		gen: 3,
		desc: "Restores all lowered stat stages to 0 when one is less than 0. Single use.",
	},
	"widelens": {
		id: "widelens",
		name: "Wide Lens",
		spritenum: 537,
		fling: {
			basePower: 10,
		},
		onSourceModifyAccuracy(accuracy) {
			if (typeof accuracy === 'number') {
				return accuracy * 1.1;
			}
		},
		num: 265,
		gen: 4,
		desc: "The accuracy of attacks by the holder is 1.1x.",
	},
	"wikiberry": {
		id: "wikiberry",
		name: "Wiki Berry",
		spritenum: 538,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Rock",
		},
		onUpdate(pokemon) {
			if (pokemon.hp <= pokemon.maxhp / 4 || (pokemon.hp <= pokemon.maxhp / 2 && pokemon.hasAbility('gluttony'))) {
				pokemon.eatItem();
			}
		},
		onTryEatItem(item, pokemon) {
			if (!this.runEvent('TryHeal', pokemon)) return false;
		},
		onEat(pokemon) {
			this.heal(pokemon.maxhp / 2);
			if (pokemon.getNature().minus === 'spa') {
				pokemon.addVolatile('confusion');
			}
		},
		num: 160,
		gen: 3,
		desc: "Restores 1/2 max HP at 1/4 max HP or less; confuses if -SpA Nature. Single use.",
	},
	"wiseglasses": {
		id: "wiseglasses",
		name: "Wise Glasses",
		spritenum: 539,
		fling: {
			basePower: 10,
		},
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move.category === 'Special') {
				return this.chainModify([0x1199, 0x1000]);
			}
		},
		num: 267,
		gen: 4,
		desc: "Holder's special attacks have 1.1x power.",
	},
	"yacheberry": {
		id: "yacheberry",
		name: "Yache Berry",
		spritenum: 567,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Ice",
		},
		onSourceModifyDamage(damage, source, target, move) {
			if (move.type === 'Ice' && target.getMoveHitData(move).typeMod > 0 && (!target.volatiles['substitute'] || move.flags['authentic'] || (move.infiltrates && this.gen >= 6))) {
				if (target.eatItem()) {
					this.debug('-50% reduction');
					this.add('-enditem', target, this.effect, '[weaken]');
					return this.chainModify(0.5);
				}
			}
		},
		onEat() { },
		num: 188,
		gen: 4,
		desc: "Halves damage taken from a supereffective Ice-type attack. Single use.",
	},
	"zapplate": {
		id: "zapplate",
		name: "Zap Plate",
		spritenum: 572,
		onPlate: 'Electric',
		onBasePowerPriority: 6,
		onBasePower(basePower, user, target, move) {
			if (move.type === 'Electric') {
				return this.chainModify([0x1333, 0x1000]);
			}
		},
		onTakeItem(item, pokemon, source) {
			if ((source && source.baseTemplate.num === 493) || pokemon.baseTemplate.num === 493) {
				return false;
			}
			return true;
		},
		forcedForme: "Arceus-Electric",
		num: 300,
		gen: 4,
		desc: "Holder's Electric-type attacks have 1.2x power. Judgment is Electric type.",
	},
	"zoomlens": {
		id: "zoomlens",
		name: "Zoom Lens",
		spritenum: 574,
		fling: {
			basePower: 10,
		},
		onSourceModifyAccuracy(accuracy, target) {
			if (typeof accuracy === 'number' && !this.willMove(target)) {
				this.debug('Zoom Lens boosting accuracy');
				return accuracy * 1.2;
			}
		},
		num: 276,
		gen: 4,
		desc: "The accuracy of attacks by the holder is 1.2x if it moves after its target.",
	},

	// Gen 2 items

	"berserkgene": {
		id: "berserkgene",
		name: "Berserk Gene",
		spritenum: 388,
		onUpdate(pokemon) {
			this.boost({atk: 2});
			pokemon.addVolatile('confusion');
			pokemon.setItem('');
		},
		num: 0,
		gen: 2,
		isNonstandard: "Past",
		desc: "(Gen 2) On switch-in, raises holder's Attack by 2 and confuses it. Single use.",
	},
	"berry": {
		id: "berry",
		name: "Berry",
		spritenum: 319,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Poison",
		},
		onResidualOrder: 5,
		onResidual(pokemon) {
			if (pokemon.hp <= pokemon.maxhp / 2) {
				pokemon.eatItem();
			}
		},
		onTryEatItem(item, pokemon) {
			if (!this.runEvent('TryHeal', pokemon)) return false;
		},
		onEat(pokemon) {
			this.heal(10);
		},
		num: 155,
		gen: 2,
		isNonstandard: "Past",
		desc: "(Gen 2) Restores 10 HP when at 1/2 max HP or less. Single use.",
	},
	"bitterberry": {
		id: "bitterberry",
		name: "Bitter Berry",
		spritenum: 334,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Ground",
		},
		onUpdate(pokemon) {
			if (pokemon.volatiles['confusion']) {
				pokemon.eatItem();
			}
		},
		onEat(pokemon) {
			pokemon.removeVolatile('confusion');
		},
		num: 156,
		gen: 2,
		isNonstandard: "Past",
		desc: "(Gen 2) Holder is cured if it is confused. Single use.",
	},
	"burntberry": {
		id: "burntberry",
		name: "Burnt Berry",
		spritenum: 13,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Ice",
		},
		onUpdate(pokemon) {
			if (pokemon.status === 'frz') {
				pokemon.eatItem();
			}
		},
		onEat(pokemon) {
			if (pokemon.status === 'frz') {
				pokemon.cureStatus();
			}
		},
		num: 153,
		gen: 2,
		isNonstandard: "Past",
		desc: "(Gen 2) Holder is cured if it is frozen. Single use.",
	},
	"goldberry": {
		id: "goldberry",
		name: "Gold Berry",
		spritenum: 448,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Psychic",
		},
		onResidualOrder: 5,
		onResidual(pokemon) {
			if (pokemon.hp <= pokemon.maxhp / 2) {
				pokemon.eatItem();
			}
		},
		onTryEatItem(item, pokemon) {
			if (!this.runEvent('TryHeal', pokemon)) return false;
		},
		onEat(pokemon) {
			this.heal(30);
		},
		num: 158,
		gen: 2,
		isNonstandard: "Past",
		desc: "(Gen 2) Restores 30 HP when at 1/2 max HP or less. Single use.",
	},
	"iceberry": {
		id: "iceberry",
		name: "Ice Berry",
		spritenum: 381,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Grass",
		},
		onUpdate(pokemon) {
			if (pokemon.status === 'brn') {
				pokemon.eatItem();
			}
		},
		onEat(pokemon) {
			if (pokemon.status === 'brn') {
				pokemon.cureStatus();
			}
		},
		num: 152,
		gen: 2,
		isNonstandard: "Past",
		desc: "(Gen 2) Holder is cured if it is burned. Single use.",
	},
	"mintberry": {
		id: "mintberry",
		name: "Mint Berry",
		spritenum: 65,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Water",
		},
		onUpdate(pokemon) {
			if (pokemon.status === 'slp') {
				pokemon.eatItem();
			}
		},
		onEat(pokemon) {
			if (pokemon.status === 'slp') {
				pokemon.cureStatus();
			}
		},
		num: 150,
		gen: 2,
		isNonstandard: "Past",
		desc: "(Gen 2) Holder wakes up if it is asleep. Single use.",
	},
	"miracleberry": {
		id: "miracleberry",
		name: "Miracle Berry",
		spritenum: 262,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Flying",
		},
		onUpdate(pokemon) {
			if (pokemon.status || pokemon.volatiles['confusion']) {
				pokemon.eatItem();
			}
		},
		onEat(pokemon) {
			pokemon.cureStatus();
			pokemon.removeVolatile('confusion');
		},
		num: 157,
		gen: 2,
		isNonstandard: "Past",
		desc: "(Gen 2) Holder cures itself if it is confused or has a status condition. Single use.",
	},
	"mysteryberry": {
		id: "mysteryberry",
		name: "Mystery Berry",
		spritenum: 244,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Fighting",
		},
		onUpdate(pokemon) {
			if (!pokemon.hp) return;
			let moveSlot = pokemon.lastMove && pokemon.getMoveData(pokemon.lastMove.id);
			if (moveSlot && moveSlot.pp === 0) {
				pokemon.addVolatile('leppaberry');
				pokemon.volatiles['leppaberry'].moveSlot = moveSlot;
				pokemon.eatItem();
			}
		},
		onEat(pokemon) {
			let moveSlot;
			if (pokemon.volatiles['leppaberry']) {
				moveSlot = pokemon.volatiles['leppaberry'].moveSlot;
				pokemon.removeVolatile('leppaberry');
			} else {
				let pp = 99;
				for (const possibleMoveSlot of pokemon.moveSlots) {
					if (possibleMoveSlot.pp < pp) {
						moveSlot = possibleMoveSlot;
						pp = moveSlot.pp;
					}
				}
			}
			moveSlot.pp += 5;
			if (moveSlot.pp > moveSlot.maxpp) moveSlot.pp = moveSlot.maxpp;
			this.add('-activate', pokemon, 'item: Mystery Berry', moveSlot.move);
		},
		num: 154,
		gen: 2,
		isNonstandard: "Past",
		desc: "(Gen 2) Restores 5 PP to the first of the holder's moves to reach 0 PP. Single use.",
	},
	"pinkbow": {
		id: "pinkbow",
		name: "Pink Bow",
		spritenum: 444,
		onBasePower(basePower, user, target, move) {
			if (move.type === 'Normal') {
				return basePower * 1.1;
			}
		},
		num: 251,
		gen: 2,
		isNonstandard: "Past",
		desc: "(Gen 2) Holder's Normal-type attacks have 1.1x power.",
	},
	"polkadotbow": {
		id: "polkadotbow",
		name: "Polkadot Bow",
		spritenum: 444,
		onBasePower(basePower, user, target, move) {
			if (move.type === 'Normal') {
				return basePower * 1.1;
			}
		},
		num: 251,
		gen: 2,
		isNonstandard: "Past",
		desc: "(Gen 2) Holder's Normal-type attacks have 1.1x power.",
	},
	"przcureberry": {
		id: "przcureberry",
		name: "PRZ Cure Berry",
		spritenum: 63,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Fire",
		},
		onUpdate(pokemon) {
			if (pokemon.status === 'par') {
				pokemon.eatItem();
			}
		},
		onEat(pokemon) {
			if (pokemon.status === 'par') {
				pokemon.cureStatus();
			}
		},
		num: 149,
		gen: 2,
		isNonstandard: "Past",
		desc: "(Gen 2) Holder cures itself if it is paralyzed. Single use.",
	},
	"psncureberry": {
		id: "psncureberry",
		name: "PSN Cure Berry",
		spritenum: 333,
		isBerry: true,
		naturalGift: {
			basePower: 80,
			type: "Electric",
		},
		onUpdate(pokemon) {
			if (pokemon.status === 'psn' || pokemon.status === 'tox') {
				pokemon.eatItem();
			}
		},
		onEat(pokemon) {
			if (pokemon.status === 'psn' || pokemon.status === 'tox') {
				pokemon.cureStatus();
			}
		},
		num: 151,
		gen: 2,
		isNonstandard: "Past",
		desc: "(Gen 2) Holder is cured if it is poisoned. Single use.",
	},

	// CAP items

	"crucibellite": {
		id: "crucibellite",
		name: "Crucibellite",
		spritenum: 577,
		megaStone: "Crucibelle-Mega",
		megaEvolves: "Crucibelle",
		onTakeItem(item, source) {
			if (item.megaEvolves === source.baseTemplate.baseSpecies) return false;
			return true;
		},
		num: -1,
		gen: 6,
		isNonstandard: "CAP",
		desc: "If held by a Crucibelle, this item allows it to Mega Evolve in battle.",
	},
};

exports.BattleItems = BattleItems;
/*

List of flags and their descriptions:

authentic: Ignores a target's substitute.
bite: Power is multiplied by 1.5 when used by a Pokemon with the Strong Jaw Ability.
bullet: Has no effect on Pokemon with the Bulletproof Ability.
charge: The user is unable to make a move between turns.
contact: Makes contact.
dance: When used by a Pokemon, other Pokemon with the Dancer Ability can attempt to execute the same move.
defrost: Thaws the user if executed successfully while the user is frozen.
distance: Can target a Pokemon positioned anywhere in a Triple Battle.
gravity: Prevented from being executed or selected during Gravity's effect.
heal: Prevented from being executed or selected during Heal Block's effect.
mirror: Can be copied by Mirror Move.
mystery: Unknown effect.
nonsky: Prevented from being executed or selected in a Sky Battle.
powder: Has no effect on Grass-type Pokemon, Pokemon with the Overcoat Ability, and Pokemon holding Safety Goggles.
protect: Blocked by Detect, Protect, Spiky Shield, and if not a Status move, King's Shield.
pulse: Power is multiplied by 1.5 when used by a Pokemon with the Mega Launcher Ability.
punch: Power is multiplied by 1.2 when used by a Pokemon with the Iron Fist Ability.
recharge: If this move is successful, the user must recharge on the following turn and cannot make a move.
reflectable: Bounced back to the original user by Magic Coat or the Magic Bounce Ability.
snatch: Can be stolen from the original user and instead used by another Pokemon using Snatch.
sound: Has no effect on Pokemon with the Soundproof Ability.

*/

'use strict';

/**@type {{[k: string]: MoveData}} */
let BattleMovedex = {
	"10000000voltthunderbolt": {
		num: 719,
		accuracy: true,
		basePower: 195,
		category: "Special",
		desc: "Has a very high chance for a critical hit.",
		shortDesc: "Very high critical hit ratio.",
		id: "10000000voltthunderbolt",
		name: "10,000,000 Volt Thunderbolt",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "pikashuniumz",
		critRatio: 3,
		secondary: null,
		target: "normal",
		type: "Electric",
		contestType: "Cool",
	},
	"absorb": {
		num: 71,
		accuracy: 100,
		basePower: 20,
		category: "Special",
		desc: "The user recovers 1/2 the HP lost by the target, rounded half up. If Big Root is held by the user, the HP recovered is 1.3x normal, rounded half down.",
		shortDesc: "User recovers 50% of the damage dealt.",
		id: "absorb",
		name: "Absorb",
		pp: 25,
		priority: 0,
		flags: {protect: 1, mirror: 1, heal: 1},
		drain: [1, 2],
		secondary: null,
		target: "normal",
		type: "Grass",
		zMovePower: 100,
		contestType: "Clever",
	},
	"accelerock": {
		num: 709,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		desc: "No additional effect.",
		shortDesc: "Usually goes first.",
		id: "accelerock",
		isViable: true,
		name: "Accelerock",
		pp: 20,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rock",
		zMovePower: 100,
		contestType: "Cool",
	},
	"acid": {
		num: 51,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		desc: "Has a 10% chance to lower the target's Special Defense by 1 stage.",
		shortDesc: "10% chance to lower the foe(s) Sp. Def by 1.",
		id: "acid",
		name: "Acid",
		pp: 30,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			boosts: {
				spd: -1,
			},
		},
		target: "allAdjacentFoes",
		type: "Poison",
		zMovePower: 100,
		contestType: "Clever",
	},
	"acidarmor": {
		num: 151,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Raises the user's Defense by 2 stages.",
		shortDesc: "Raises the user's Defense by 2.",
		id: "acidarmor",
		name: "Acid Armor",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			def: 2,
		},
		secondary: null,
		target: "self",
		type: "Poison",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Tough",
	},
	"aciddownpour": {
		num: 628,
		accuracy: true,
		basePower: 1,
		category: "Physical",
		shortDesc: "Power is equal to the base move's Z-Power.",
		id: "aciddownpour",
		isViable: true,
		name: "Acid Downpour",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "poisoniumz",
		secondary: null,
		target: "normal",
		type: "Poison",
		contestType: "Cool",
	},
	"acidspray": {
		num: 491,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		desc: "Has a 100% chance to lower the target's Special Defense by 2 stages.",
		shortDesc: "100% chance to lower the target's Sp. Def by 2.",
		id: "acidspray",
		isViable: true,
		name: "Acid Spray",
		pp: 20,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				spd: -2,
			},
		},
		target: "normal",
		type: "Poison",
		zMovePower: 100,
		contestType: "Beautiful",
	},
	"acrobatics": {
		num: 512,
		accuracy: 100,
		basePower: 55,
		basePowerCallback(pokemon, target, move) {
			if (!pokemon.item) {
				this.debug("Power doubled for no item");
				return move.basePower * 2;
			}
			return move.basePower;
		},
		category: "Physical",
		shortDesc: "Power doubles if the user has no held item.",
		id: "acrobatics",
		isViable: true,
		name: "Acrobatics",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, distance: 1},
		secondary: null,
		target: "any",
		type: "Flying",
		zMovePower: 100,
		contestType: "Cool",
	},
	"acupressure": {
		num: 367,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Raises a random stat by 2 stages as long as the stat is not already at stage 6. The user can choose to use this move on itself or an adjacent ally. Fails if no stat stage can be raised or if used on an ally with a substitute.",
		shortDesc: "Raises a random stat of the user or an ally by 2.",
		id: "acupressure",
		name: "Acupressure",
		pp: 30,
		priority: 0,
		flags: {},
		onHit(target) {
			let stats = [];
			for (let stat in target.boosts) {
				// @ts-ignore
				if (target.boosts[stat] < 6) {
					stats.push(stat);
				}
			}
			if (stats.length) {
				let randomStat = this.sample(stats);
				/**@type {{[k: string]: number}} */
				let boost = {};
				boost[randomStat] = 2;
				this.boost(boost);
			} else {
				return false;
			}
		},
		secondary: null,
		target: "adjacentAllyOrSelf",
		type: "Normal",
		zMoveEffect: 'crit2',
		contestType: "Tough",
	},
	"aerialace": {
		num: 332,
		accuracy: true,
		basePower: 60,
		category: "Physical",
		shortDesc: "This move does not check accuracy.",
		id: "aerialace",
		isViable: true,
		name: "Aerial Ace",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, distance: 1},
		secondary: null,
		target: "any",
		type: "Flying",
		zMovePower: 120,
		contestType: "Cool",
	},
	"aeroblast": {
		num: 177,
		accuracy: 95,
		basePower: 100,
		category: "Special",
		desc: "Has a higher chance for a critical hit.",
		shortDesc: "High critical hit ratio.",
		id: "aeroblast",
		isViable: true,
		name: "Aeroblast",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, distance: 1},
		critRatio: 2,
		secondary: null,
		target: "any",
		type: "Flying",
		zMovePower: 180,
		contestType: "Cool",
	},
	"afteryou": {
		num: 495,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The target makes its move immediately after the user this turn, no matter the priority of its selected move. Fails if the target would have moved next anyway, or if the target already moved this turn.",
		shortDesc: "The target makes its move right after the user.",
		id: "afteryou",
		name: "After You",
		pp: 15,
		priority: 0,
		flags: {authentic: 1, mystery: 1},
		onHit(target) {
			if (target.side.active.length < 2) return false; // fails in singles
			let action = this.willMove(target);
			if (action) {
				this.cancelMove(target);
				this.queue.unshift(action);
				this.add('-activate', target, 'move: After You');
			} else {
				return false;
			}
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMoveBoost: {spe: 1},
		contestType: "Cute",
	},
	"agility": {
		num: 97,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Raises the user's Speed by 2 stages.",
		shortDesc: "Raises the user's Speed by 2.",
		id: "agility",
		isViable: true,
		name: "Agility",
		pp: 30,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			spe: 2,
		},
		secondary: null,
		target: "self",
		type: "Psychic",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Cool",
	},
	"aircutter": {
		num: 314,
		accuracy: 95,
		basePower: 60,
		category: "Special",
		desc: "Has a higher chance for a critical hit.",
		shortDesc: "High critical hit ratio. Hits adjacent foes.",
		id: "aircutter",
		name: "Air Cutter",
		pp: 25,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		critRatio: 2,
		secondary: null,
		target: "allAdjacentFoes",
		type: "Flying",
		zMovePower: 120,
		contestType: "Cool",
	},
	"airslash": {
		num: 403,
		accuracy: 95,
		basePower: 75,
		category: "Special",
		desc: "Has a 30% chance to flinch the target.",
		shortDesc: "30% chance to flinch the target.",
		id: "airslash",
		isViable: true,
		name: "Air Slash",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, distance: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "any",
		type: "Flying",
		zMovePower: 140,
		contestType: "Cool",
	},
	"alloutpummeling": {
		num: 624,
		accuracy: true,
		basePower: 1,
		category: "Physical",
		shortDesc: "Power is equal to the base move's Z-Power.",
		id: "alloutpummeling",
		isViable: true,
		name: "All-Out Pummeling",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "fightiniumz",
		secondary: null,
		target: "normal",
		type: "Fighting",
		contestType: "Cool",
	},
	"allyswitch": {
		num: 502,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user swaps positions with its ally. Fails if the user is the only Pokemon on its side.",
		shortDesc: "The user swaps positions with its ally.",
		id: "allyswitch",
		name: "Ally Switch",
		pp: 15,
		priority: 2,
		flags: {},
		onTryHit(source) {
			if (source.side.active.length === 1) return false;
			if (source.side.active.length === 3 && source.position === 1) return false;
		},
		onHit(pokemon) {
			let newPosition = (pokemon.position === 0 ? pokemon.side.active.length - 1 : 0);
			if (!pokemon.side.active[newPosition]) return false;
			if (pokemon.side.active[newPosition].fainted) return false;
			this.swapPosition(pokemon, newPosition, '[from] move: Ally Switch');
		},
		secondary: null,
		target: "self",
		type: "Psychic",
		zMoveBoost: {spe: 2},
		contestType: "Clever",
	},
	"amnesia": {
		num: 133,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Raises the user's Special Defense by 2 stages.",
		shortDesc: "Raises the user's Sp. Def by 2.",
		id: "amnesia",
		name: "Amnesia",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			spd: 2,
		},
		secondary: null,
		target: "self",
		type: "Psychic",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Cute",
	},
	"anchorshot": {
		num: 677,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		desc: "Prevents the target from switching out. The target can still switch out if it is holding Shed Shell or uses Baton Pass, Parting Shot, U-turn, or Volt Switch. If the target leaves the field using Baton Pass, the replacement will remain trapped. The effect ends if the user leaves the field.",
		shortDesc: "Prevents the target from switching out.",
		id: "anchorshot",
		isViable: true,
		name: "Anchor Shot",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			onHit(target, source, move) {
				if (source.isActive) target.addVolatile('trapped', source, move, 'trapper');
			},
		},
		target: "normal",
		type: "Steel",
		zMovePower: 160,
		contestType: "Tough",
	},
	"ancientpower": {
		num: 246,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		desc: "Has a 10% chance to raise the user's Attack, Defense, Special Attack, Special Defense, and Speed by 1 stage.",
		shortDesc: "10% chance to raise all stats by 1 (not acc/eva).",
		id: "ancientpower",
		name: "Ancient Power",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			self: {
				boosts: {
					atk: 1,
					def: 1,
					spa: 1,
					spd: 1,
					spe: 1,
				},
			},
		},
		target: "normal",
		type: "Rock",
		zMovePower: 120,
		contestType: "Tough",
	},
	"aquajet": {
		num: 453,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		desc: "No additional effect.",
		shortDesc: "Usually goes first.",
		id: "aquajet",
		isViable: true,
		name: "Aqua Jet",
		pp: 20,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		zMovePower: 100,
		contestType: "Cool",
	},
	"aquaring": {
		num: 392,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user has 1/16 of its maximum HP, rounded down, restored at the end of each turn while it remains active. If Big Root is held by the user, the HP recovered is 1.3x normal, rounded half down. If the user uses Baton Pass, the replacement will receive the healing effect.",
		shortDesc: "User recovers 1/16 max HP per turn.",
		id: "aquaring",
		name: "Aqua Ring",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		volatileStatus: 'aquaring',
		effect: {
			onStart(pokemon) {
				this.add('-start', pokemon, 'Aqua Ring');
			},
			onResidualOrder: 6,
			onResidual(pokemon) {
				this.heal(pokemon.maxhp / 16);
			},
		},
		secondary: null,
		target: "self",
		type: "Water",
		zMoveBoost: {def: 1},
		contestType: "Beautiful",
	},
	"aquatail": {
		num: 401,
		accuracy: 90,
		basePower: 90,
		category: "Physical",
		shortDesc: "No additional effect.",
		id: "aquatail",
		isViable: true,
		name: "Aqua Tail",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		zMovePower: 175,
		contestType: "Beautiful",
	},
	"armthrust": {
		num: 292,
		accuracy: 100,
		basePower: 15,
		category: "Physical",
		desc: "Hits two to five times. Has a 1/3 chance to hit two or three times, and a 1/6 chance to hit four or five times. If one of the hits breaks the target's substitute, it will take damage for the remaining hits. If the user has the Skill Link Ability, this move will always hit five times.",
		shortDesc: "Hits 2-5 times in one turn.",
		id: "armthrust",
		name: "Arm Thrust",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Fighting",
		zMovePower: 100,
		contestType: "Tough",
	},
	"aromatherapy": {
		num: 312,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Every Pokemon in the user's party is cured of its major status condition. Active Pokemon with the Sap Sipper Ability are not cured, unless they are the user.",
		shortDesc: "Cures the user's party of all status conditions.",
		id: "aromatherapy",
		isViable: true,
		name: "Aromatherapy",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, distance: 1},
		onHit(pokemon, source, move) {
			this.add('-activate', source, 'move: Aromatherapy');
			let success = false;
			for (const ally of pokemon.side.pokemon) {
				if (ally !== source && ((ally.hasAbility('sapsipper')) ||
						(ally.volatiles['substitute'] && !move.infiltrates))) {
					continue;
				}
				if (ally.cureStatus()) success = true;
			}
			return success;
		},
		target: "allyTeam",
		type: "Grass",
		zMoveEffect: 'heal',
		contestType: "Clever",
	},
	"aromaticmist": {
		num: 597,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Raises the target's Special Defense by 1 stage. Fails if there is no ally adjacent to the user.",
		shortDesc: "Raises an ally's Sp. Def by 1.",
		id: "aromaticmist",
		name: "Aromatic Mist",
		pp: 20,
		priority: 0,
		flags: {authentic: 1},
		boosts: {
			spd: 1,
		},
		secondary: null,
		target: "adjacentAlly",
		type: "Fairy",
		zMoveBoost: {spd: 2},
		contestType: "Beautiful",
	},
	"assist": {
		num: 274,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "A random move among those known by the user's party members is selected for use. Does not select Assist, Baneful Bunker, Beak Blast, Belch, Bestow, Bounce, Celebrate, Chatter, Circle Throw, Copycat, Counter, Covet, Destiny Bond, Detect, Dig, Dive, Dragon Tail, Endure, Feint, Fly, Focus Punch, Follow Me, Helping Hand, Hold Hands, King's Shield, Mat Block, Me First, Metronome, Mimic, Mirror Coat, Mirror Move, Nature Power, Phantom Force, Protect, Rage Powder, Roar, Shadow Force, Shell Trap, Sketch, Sky Drop, Sleep Talk, Snatch, Spiky Shield, Spotlight, Struggle, Switcheroo, Thief, Transform, Trick, Whirlwind, or any Z-Move.",
		shortDesc: "Uses a random move known by a team member.",
		id: "assist",
		name: "Assist",
		pp: 20,
		priority: 0,
		flags: {},
		onHit(target) {
			let moves = [];
			for (const pokemon of target.side.pokemon) {
				if (pokemon === target) continue;
				for (const moveSlot of pokemon.moveSlots) {
					let move = moveSlot.id;
					let noAssist = [
						'assist', 'banefulbunker', 'beakblast', 'belch', 'bestow', 'bounce', 'celebrate', 'chatter', 'circlethrow', 'copycat', 'counter', 'covet', 'destinybond', 'detect', 'dig', 'dive', 'dragontail', 'endure', 'feint', 'fly', 'focuspunch', 'followme', 'helpinghand', 'holdhands', 'kingsshield', 'matblock', 'mefirst', 'metronome', 'mimic', 'mirrorcoat', 'mirrormove', 'naturepower', 'phantomforce', 'protect', 'ragepowder', 'roar', 'shadowforce', 'shelltrap', 'sketch', 'skydrop', 'sleeptalk', 'snatch', 'spikyshield', 'spotlight', 'struggle', 'switcheroo', 'thief', 'transform', 'trick', 'whirlwind',
					];
					if (!noAssist.includes(move) && !this.getMove(move).isZ) {
						moves.push(move);
					}
				}
			}
			let randomMove = '';
			if (moves.length) randomMove = this.sample(moves);
			if (!randomMove) {
				return false;
			}
			this.useMove(randomMove, target);
		},
		secondary: null,
		target: "self",
		type: "Normal",
		contestType: "Cute",
	},
	"assurance": {
		num: 372,
		accuracy: 100,
		basePower: 60,
		basePowerCallback(pokemon, target, move) {
			if (target.hurtThisTurn) {
				this.debug('Boosted for being damaged this turn');
				return move.basePower * 2;
			}
			return move.basePower;
		},
		category: "Physical",
		desc: "Power doubles if the target has already taken damage this turn, other than direct damage from Belly Drum, confusion, Curse, or Pain Split.",
		shortDesc: "Power doubles if target was damaged this turn.",
		id: "assurance",
		name: "Assurance",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		zMovePower: 120,
		contestType: "Clever",
	},
	"astonish": {
		num: 310,
		accuracy: 100,
		basePower: 30,
		category: "Physical",
		desc: "Has a 30% chance to flinch the target.",
		shortDesc: "30% chance to flinch the target.",
		id: "astonish",
		name: "Astonish",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Ghost",
		zMovePower: 100,
		contestType: "Cute",
	},
	"attackorder": {
		num: 454,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		desc: "Has a higher chance for a critical hit.",
		shortDesc: "High critical hit ratio.",
		id: "attackorder",
		isViable: true,
		name: "Attack Order",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		critRatio: 2,
		secondary: null,
		target: "normal",
		type: "Bug",
		zMovePower: 175,
		contestType: "Clever",
	},
	"attract": {
		num: 213,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "Causes the target to become infatuated, making it unable to attack 50% of the time. Fails if both the user and the target are the same gender, if either is genderless, or if the target is already infatuated. The effect ends when either the user or the target is no longer active. Pokemon with the Oblivious Ability or protected by the Aroma Veil Ability are immune.",
		shortDesc: "A target of the opposite gender gets infatuated.",
		id: "attract",
		name: "Attract",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, authentic: 1},
		volatileStatus: 'attract',
		effect: {
			noCopy: true, // doesn't get copied by Baton Pass
			onStart(pokemon, source, effect) {
				if (!(pokemon.gender === 'M' && source.gender === 'F') && !(pokemon.gender === 'F' && source.gender === 'M')) {
					this.debug('incompatible gender');
					return false;
				}
				if (!this.runEvent('Attract', pokemon, source)) {
					this.debug('Attract event failed');
					return false;
				}

				if (effect.id === 'cutecharm') {
					this.add('-start', pokemon, 'Attract', '[from] ability: Cute Charm', '[of] ' + source);
				} else if (effect.id === 'destinyknot') {
					this.add('-start', pokemon, 'Attract', '[from] item: Destiny Knot', '[of] ' + source);
				} else {
					this.add('-start', pokemon, 'Attract');
				}
			},
			onUpdate(pokemon) {
				if (this.effectData.source && !this.effectData.source.isActive && pokemon.volatiles['attract']) {
					this.debug('Removing Attract volatile on ' + pokemon);
					pokemon.removeVolatile('attract');
				}
			},
			onBeforeMovePriority: 2,
			onBeforeMove(pokemon, target, move) {
				this.add('-activate', pokemon, 'move: Attract', '[of] ' + this.effectData.source);
				if (this.randomChance(1, 2)) {
					this.add('cant', pokemon, 'Attract');
					return false;
				}
			},
			onEnd(pokemon) {
				this.add('-end', pokemon, 'Attract', '[silent]');
			},
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Cute",
	},
	"aurasphere": {
		num: 396,
		accuracy: true,
		basePower: 80,
		category: "Special",
		shortDesc: "This move does not check accuracy.",
		id: "aurasphere",
		isViable: true,
		name: "Aura Sphere",
		pp: 20,
		priority: 0,
		flags: {bullet: 1, protect: 1, pulse: 1, mirror: 1, distance: 1},
		secondary: null,
		target: "any",
		type: "Fighting",
		zMovePower: 160,
		contestType: "Beautiful",
	},
	"aurorabeam": {
		num: 62,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		desc: "Has a 10% chance to lower the target's Attack by 1 stage.",
		shortDesc: "10% chance to lower the target's Attack by 1.",
		id: "aurorabeam",
		name: "Aurora Beam",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			boosts: {
				atk: -1,
			},
		},
		target: "normal",
		type: "Ice",
		zMovePower: 120,
		contestType: "Beautiful",
	},
	"auroraveil": {
		num: 694,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "For 5 turns, the user and its party members take 0.5x damage from physical and special attacks, or 0.66x damage if in a Double Battle; does not reduce damage further with Reflect or Light Screen. Critical hits ignore this protection. It is removed from the user's side if the user or an ally is successfully hit by Brick Break, Psychic Fangs, or Defog. Brick Break and Psychic Fangs remove the effect before damage is calculated. Lasts for 8 turns if the user is holding Light Clay. Fails unless the weather is Hail.",
		shortDesc: "For 5 turns, damage to allies is halved. Hail only.",
		id: "auroraveil",
		isViable: true,
		name: "Aurora Veil",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		sideCondition: 'auroraveil',
		onTryHitSide() {
			if (!this.field.isWeather('hail')) return false;
		},
		effect: {
			duration: 5,
			durationCallback(target, source, effect) {
				if (source && source.hasItem('lightclay')) {
					return 8;
				}
				return 5;
			},
			onAnyModifyDamage(damage, source, target, move) {
				if (target !== source && target.side === this.effectData.target) {
					if ((target.side.getSideCondition('reflect') && this.getCategory(move) === 'Physical') ||
							(target.side.getSideCondition('lightscreen') && this.getCategory(move) === 'Special')) {
						return;
					}
					if (!target.getMoveHitData(move).crit && !move.infiltrates) {
						this.debug('Aurora Veil weaken');
						if (target.side.active.length > 1) return this.chainModify([0xAAC, 0x1000]);
						return this.chainModify(0.5);
					}
				}
			},
			onStart(side) {
				this.add('-sidestart', side, 'move: Aurora Veil');
			},
			onResidualOrder: 21,
			onResidualSubOrder: 1,
			onEnd(side) {
				this.add('-sideend', side, 'move: Aurora Veil');
			},
		},
		secondary: null,
		target: "allySide",
		type: "Ice",
		zMoveBoost: {spe: 1},
		contestType: "Beautiful",
	},
	"autotomize": {
		num: 475,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Raises the user's Speed by 2 stages. If the user's Speed was changed, the user's weight is reduced by 100 kg as long as it remains active. This effect is stackable but cannot reduce the user's weight to less than 0.1 kg.",
		shortDesc: "Raises the user's Speed by 2; user loses 100 kg.",
		id: "autotomize",
		isViable: true,
		name: "Autotomize",
		pp: 15,
		priority: 0,
		flags: {snatch: 1},
		onTryHit(pokemon) {
			let hasContrary = pokemon.hasAbility('contrary');
			if ((!hasContrary && pokemon.boosts.spe === 6) || (hasContrary && pokemon.boosts.spe === -6)) {
				return false;
			}
		},
		boosts: {
			spe: 2,
		},
		volatileStatus: 'autotomize',
		effect: {
			noCopy: true, // doesn't get copied by Baton Pass
			onStart(pokemon) {
				if (pokemon.template.weightkg > 0.1) {
					this.effectData.multiplier = 1;
					this.add('-start', pokemon, 'Autotomize');
				}
			},
			onRestart(pokemon) {
				if (pokemon.template.weightkg - (this.effectData.multiplier * 100) > 0.1) {
					this.effectData.multiplier++;
					this.add('-start', pokemon, 'Autotomize');
				}
			},
			onModifyWeightPriority: 1,
			onModifyWeight(weight, pokemon) {
				if (this.effectData.multiplier) {
					weight -= this.effectData.multiplier * 100;
					if (weight < 0.1) weight = 0.1;
					return weight;
				}
			},
		},
		secondary: null,
		target: "self",
		type: "Steel",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Beautiful",
	},
	"avalanche": {
		num: 419,
		accuracy: 100,
		basePower: 60,
		basePowerCallback(pokemon, target, move) {
			let damagedByTarget = pokemon.attackedBy.some(p =>
				p.source === target && p.damage > 0 && p.thisTurn
			);
			if (damagedByTarget) {
				this.debug('Boosted for getting hit by ' + target);
				return move.basePower * 2;
			}
			return move.basePower;
		},
		category: "Physical",
		desc: "Power doubles if the user was hit by the target this turn.",
		shortDesc: "Power doubles if user is damaged by the target.",
		id: "avalanche",
		isViable: true,
		name: "Avalanche",
		pp: 10,
		priority: -4,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		zMovePower: 120,
		contestType: "Beautiful",
	},
	"babydolleyes": {
		num: 608,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "Lowers the target's Attack by 1 stage.",
		shortDesc: "Lowers the target's Attack by 1.",
		id: "babydolleyes",
		name: "Baby-Doll Eyes",
		pp: 30,
		priority: 1,
		flags: {protect: 1, reflectable: 1, mirror: 1, mystery: 1},
		boosts: {
			atk: -1,
		},
		secondary: null,
		target: "normal",
		type: "Fairy",
		zMoveBoost: {def: 1},
		contestType: "Cute",
	},
	"baddybad": {
		num: 737,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		desc: "This move summons Reflect for 5 turns upon use.",
		shortDesc: "Summons Reflect.",
		id: "baddybad",
		isNonstandard: "LGPE",
		isUnreleased: true,
		isViable: true,
		name: "Baddy Bad",
		pp: 15,
		priority: 0,
		flags: {protect: 1},
		self: {
			sideCondition: 'reflect',
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		contestType: "Clever",
	},
	"banefulbunker": {
		num: 661,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user is protected from most attacks made by other Pokemon during this turn, and Pokemon making contact with the user become poisoned. This move has a 1/X chance of being successful, where X starts at 1 and triples each time this move is successfully used. X resets to 1 if this move fails, if the user's last move used is not Baneful Bunker, Detect, Endure, King's Shield, Protect, Quick Guard, Spiky Shield, or Wide Guard, or if it was one of those moves and the user's protection was broken. Fails if the user moves last this turn.",
		shortDesc: "Protects from moves. Contact: poison.",
		id: "banefulbunker",
		isViable: true,
		name: "Baneful Bunker",
		pp: 10,
		priority: 4,
		flags: {},
		stallingMove: true,
		volatileStatus: 'banefulbunker',
		onTryHit(target, source, move) {
			return !!this.willAct() && this.runEvent('StallMove', target);
		},
		onHit(pokemon) {
			pokemon.addVolatile('stall');
		},
		effect: {
			duration: 1,
			onStart(target) {
				this.add('-singleturn', target, 'move: Protect');
			},
			onTryHitPriority: 3,
			onTryHit(target, source, move) {
				if (!move.flags['protect']) {
					if (move.isZ) target.getMoveHitData(move).zBrokeProtect = true;
					return;
				}
				this.add('-activate', target, 'move: Protect');
				let lockedmove = source.getVolatile('lockedmove');
				if (lockedmove) {
					// Outrage counter is reset
					if (source.volatiles['lockedmove'].duration === 2) {
						delete source.volatiles['lockedmove'];
					}
				}
				if (move.flags['contact']) {
					source.trySetStatus('psn', target);
				}
				return this.NOT_FAIL;
			},
			onHit(target, source, move) {
				if (move.isZPowered && move.flags['contact']) {
					source.trySetStatus('psn', target);
				}
			},
		},
		secondary: null,
		target: "self",
		type: "Poison",
		zMoveBoost: {def: 1},
		contestType: "Tough",
	},
	"barrage": {
		num: 140,
		accuracy: 85,
		basePower: 15,
		category: "Physical",
		desc: "Hits two to five times. Has a 1/3 chance to hit two or three times, and a 1/6 chance to hit four or five times. If one of the hits breaks the target's substitute, it will take damage for the remaining hits. If the user has the Skill Link Ability, this move will always hit five times.",
		shortDesc: "Hits 2-5 times in one turn.",
		id: "barrage",
		name: "Barrage",
		pp: 20,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 100,
		contestType: "Cute",
	},
	"barrier": {
		num: 112,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Raises the user's Defense by 2 stages.",
		shortDesc: "Raises the user's Defense by 2.",
		id: "barrier",
		name: "Barrier",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			def: 2,
		},
		secondary: null,
		target: "self",
		type: "Psychic",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Cool",
	},
	"batonpass": {
		num: 226,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user is replaced with another Pokemon in its party. The selected Pokemon has the user's stat stage changes, confusion, and certain move effects transferred to it.",
		shortDesc: "User switches, passing stat changes and more.",
		id: "batonpass",
		isViable: true,
		name: "Baton Pass",
		pp: 40,
		priority: 0,
		flags: {},
		selfSwitch: 'copyvolatile',
		secondary: null,
		target: "self",
		type: "Normal",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Cute",
	},
	"beakblast": {
		num: 690,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		desc: "If the user is hit by a contact move this turn before it can execute this move, the attacker is burned.",
		shortDesc: "Burns on contact with the user before it moves.",
		id: "beakblast",
		isViable: true,
		name: "Beak Blast",
		pp: 15,
		priority: -3,
		flags: {bullet: 1, protect: 1},
		beforeTurnCallback(pokemon) {
			pokemon.addVolatile('beakblast');
		},
		effect: {
			duration: 1,
			onStart(pokemon) {
				this.add('-singleturn', pokemon, 'move: Beak Blast');
			},
			onHit(pokemon, source, move) {
				if (move.flags['contact']) {
					source.trySetStatus('brn', pokemon);
				}
			},
		},
		// FIXME: onMoveAborted(pokemon) {pokemon.removeVolatile('beakblast')},
		onAfterMove(pokemon) {
			pokemon.removeVolatile('beakblast');
		},
		secondary: null,
		target: "normal",
		type: "Flying",
		zMovePower: 180,
		contestType: "Tough",
	},
	"beatup": {
		num: 251,
		accuracy: 100,
		basePower: 0,
		basePowerCallback(pokemon, target, move) {
			// @ts-ignore
			return 5 + Math.floor(move.allies.shift().template.baseStats.atk / 10);
		},
		category: "Physical",
		desc: "Hits one time for the user and one time for each unfainted Pokemon without a major status condition in the user's party. The power of each hit is equal to 5+(X/10), where X is each participating Pokemon's base Attack; each hit is considered to come from the user.",
		shortDesc: "All healthy allies aid in damaging the target.",
		id: "beatup",
		name: "Beat Up",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, mystery: 1},
		onModifyMove(move, pokemon) {
			move.allies = pokemon.side.pokemon.filter(ally => ally === pokemon || !ally.fainted && !ally.status);
			move.multihit = move.allies.length;
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		zMovePower: 100,
		contestType: "Clever",
	},
	"belch": {
		num: 562,
		accuracy: 90,
		basePower: 120,
		category: "Special",
		desc: "This move cannot be selected until the user eats a Berry, either by eating one that was held, stealing and eating one off another Pokemon with Bug Bite or Pluck, or eating one that was thrown at it with Fling. Once the condition is met, this move can be selected and used for the rest of the battle even if the user gains or uses another item or switches out. Consuming a Berry with Natural Gift does not count for the purposes of eating one.",
		shortDesc: "Cannot be selected until the user eats a Berry.",
		id: "belch",
		name: "Belch",
		pp: 10,
		priority: 0,
		flags: {protect: 1},
		// Move disabling implemented in Battle#nextTurn in sim/battle.js
		secondary: null,
		target: "normal",
		type: "Poison",
		zMovePower: 190,
		contestType: "Tough",
	},
	"bellydrum": {
		num: 187,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Raises the user's Attack by 12 stages in exchange for the user losing 1/2 of its maximum HP, rounded down. Fails if the user would faint or if its Attack stat stage is 6.",
		shortDesc: "User loses 50% max HP. Maximizes Attack.",
		id: "bellydrum",
		name: "Belly Drum",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		onHit(target) {
			if (target.hp <= target.maxhp / 2 || target.boosts.atk >= 6 || target.maxhp === 1) { // Shedinja clause
				return false;
			}
			this.directDamage(target.maxhp / 2);
			this.boost({atk: 12}, target);
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMoveEffect: 'heal',
		contestType: "Cute",
	},
	"bestow": {
		num: 516,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The target receives the user's held item. Fails if the user has no item or is holding a Mail or Z-Crystal, if the target is already holding an item, if the user is a Kyogre holding a Blue Orb, a Groudon holding a Red Orb, a Giratina holding a Griseous Orb, an Arceus holding a Plate, a Genesect holding a Drive, a Silvally holding a Memory, a Pokemon that can Mega Evolve holding the Mega Stone for its species, or if the target is one of those Pokemon and the user is holding the respective item.",
		shortDesc: "User passes its held item to the target.",
		id: "bestow",
		name: "Bestow",
		pp: 15,
		priority: 0,
		flags: {mirror: 1, authentic: 1, mystery: 1},
		onHit(target, source, move) {
			if (target.item) {
				return false;
			}
			let myItem = source.takeItem();
			if (!myItem) return false;
			if (!this.singleEvent('TakeItem', myItem, source.itemData, target, source, move, myItem) || !target.setItem(myItem)) {
				source.item = myItem.id;
				return false;
			}
			this.add('-item', target, myItem.name, '[from] move: Bestow', '[of] ' + source);
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMoveBoost: {spe: 2},
		contestType: "Cute",
	},
	"bide": {
		num: 117,
		accuracy: true,
		basePower: 0,
		category: "Physical",
		desc: "The user spends two turns locked into this move and then, on the second turn after using this move, the user attacks the last Pokemon that hit it, inflicting double the damage in HP it lost to attacks during the two turns. If the last Pokemon that hit it is no longer active, the user attacks a random opposing Pokemon instead. If the user is prevented from moving during this move's use, the effect ends. This move does not check accuracy and does not ignore type immunity.",
		shortDesc: "Waits 2 turns; deals double the damage taken.",
		id: "bide",
		name: "Bide",
		pp: 10,
		priority: 1,
		flags: {contact: 1, protect: 1},
		volatileStatus: 'bide',
		ignoreImmunity: true,
		beforeMoveCallback(pokemon) {
			if (pokemon.volatiles['bide']) return true;
		},
		effect: {
			duration: 3,
			onLockMove: 'bide',
			onStart(pokemon) {
				this.effectData.totalDamage = 0;
				this.add('-start', pokemon, 'move: Bide');
			},
			onDamagePriority: -101,
			onDamage(damage, target, source, move) {
				if (!move || move.effectType !== 'Move' || !source) return;
				this.effectData.totalDamage += damage;
				this.effectData.lastDamageSource = source;
			},
			onBeforeMove(pokemon, target, move) {
				if (this.effectData.duration === 1) {
					this.add('-end', pokemon, 'move: Bide');
					target = this.effectData.lastDamageSource;
					if (!target || !this.effectData.totalDamage) {
						this.attrLastMove('[still]');
						this.add('-fail', pokemon);
						return false;
					}
					if (!target.isActive) {
						const possibleTarget = this.resolveTarget(pokemon, this.getMove('pound'));
						if (!possibleTarget) {
							this.add('-miss', pokemon);
							return false;
						}
						target = possibleTarget;
					}
					let moveData = {
						id: 'bide',
						name: "Bide",
						accuracy: true,
						damage: this.effectData.totalDamage * 2,
						category: "Physical",
						priority: 1,
						flags: {contact: 1, protect: 1},
						effectType: 'Move',
						type: 'Normal',
					};
					// @ts-ignore
					this.tryMoveHit(target, pokemon, moveData);
					return false;
				}
				this.add('-activate', pokemon, 'move: Bide');
			},
			onMoveAborted(pokemon) {
				pokemon.removeVolatile('bide');
			},
			onEnd(pokemon) {
				this.add('-end', pokemon, 'move: Bide', '[silent]');
			},
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMovePower: 100,
		contestType: "Tough",
	},
	"bind": {
		num: 20,
		accuracy: 85,
		basePower: 15,
		category: "Physical",
		desc: "Prevents the target from switching for four or five turns (seven turns if the user is holding Grip Claw). Causes damage to the target equal to 1/8 of its maximum HP (1/6 if the user is holding Binding Band), rounded down, at the end of each turn during effect. The target can still switch out if it is holding Shed Shell or uses Baton Pass, Parting Shot, U-turn, or Volt Switch. The effect ends if either the user or the target leaves the field, or if the target uses Rapid Spin or Substitute successfully. This effect is not stackable or reset by using this or another binding move.",
		shortDesc: "Traps and damages the target for 4-5 turns.",
		id: "bind",
		name: "Bind",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 100,
		contestType: "Tough",
	},
	"bite": {
		num: 44,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		desc: "Has a 30% chance to flinch the target.",
		shortDesc: "30% chance to flinch the target.",
		id: "bite",
		name: "Bite",
		pp: 25,
		priority: 0,
		flags: {bite: 1, contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Dark",
		zMovePower: 120,
		contestType: "Tough",
	},
	"blackholeeclipse": {
		num: 654,
		accuracy: true,
		basePower: 1,
		category: "Physical",
		shortDesc: "Power is equal to the base move's Z-Power.",
		id: "blackholeeclipse",
		isViable: true,
		name: "Black Hole Eclipse",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "darkiniumz",
		secondary: null,
		target: "normal",
		type: "Dark",
		contestType: "Cool",
	},
	"blastburn": {
		num: 307,
		accuracy: 90,
		basePower: 150,
		category: "Special",
		desc: "If this move is successful, the user must recharge on the following turn and cannot make a move.",
		shortDesc: "User cannot move next turn.",
		id: "blastburn",
		name: "Blast Burn",
		pp: 5,
		priority: 0,
		flags: {recharge: 1, protect: 1, mirror: 1},
		self: {
			volatileStatus: 'mustrecharge',
		},
		secondary: null,
		target: "normal",
		type: "Fire",
		zMovePower: 200,
		contestType: "Beautiful",
	},
	"blazekick": {
		num: 299,
		accuracy: 90,
		basePower: 85,
		category: "Physical",
		desc: "Has a 10% chance to burn the target and a higher chance for a critical hit.",
		shortDesc: "High critical hit ratio. 10% chance to burn.",
		id: "blazekick",
		isViable: true,
		name: "Blaze Kick",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		critRatio: 2,
		secondary: {
			chance: 10,
			status: 'brn',
		},
		target: "normal",
		type: "Fire",
		zMovePower: 160,
		contestType: "Cool",
	},
	"blizzard": {
		num: 59,
		accuracy: 70,
		basePower: 110,
		category: "Special",
		desc: "Has a 10% chance to freeze the target. If the weather is Hail, this move does not check accuracy.",
		shortDesc: "10% chance to freeze foe(s). Can't miss in hail.",
		id: "blizzard",
		isViable: true,
		name: "Blizzard",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onModifyMove(move) {
			if (this.field.isWeather('hail')) move.accuracy = true;
		},
		secondary: {
			chance: 10,
			status: 'frz',
		},
		target: "allAdjacentFoes",
		type: "Ice",
		zMovePower: 185,
		contestType: "Beautiful",
	},
	"block": {
		num: 335,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Prevents the target from switching out. The target can still switch out if it is holding Shed Shell or uses Baton Pass, Parting Shot, U-turn, or Volt Switch. If the target leaves the field using Baton Pass, the replacement will remain trapped. The effect ends if the user leaves the field.",
		shortDesc: "Prevents the target from switching out.",
		id: "block",
		name: "Block",
		pp: 5,
		priority: 0,
		flags: {reflectable: 1, mirror: 1},
		onHit(target, source, move) {
			return target.addVolatile('trapped', source, move, 'trapper');
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMoveBoost: {def: 1},
		contestType: "Cute",
	},
	"bloomdoom": {
		num: 644,
		accuracy: true,
		basePower: 1,
		category: "Physical",
		shortDesc: "Power is equal to the base move's Z-Power.",
		id: "bloomdoom",
		isViable: true,
		name: "Bloom Doom",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "grassiumz",
		secondary: null,
		target: "normal",
		type: "Grass",
		contestType: "Cool",
	},
	"blueflare": {
		num: 551,
		accuracy: 85,
		basePower: 130,
		category: "Special",
		desc: "Has a 20% chance to burn the target.",
		shortDesc: "20% chance to burn the target.",
		id: "blueflare",
		isViable: true,
		name: "Blue Flare",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			status: 'brn',
		},
		target: "normal",
		type: "Fire",
		zMovePower: 195,
		contestType: "Beautiful",
	},
	"bodyslam": {
		num: 34,
		accuracy: 100,
		basePower: 85,
		category: "Physical",
		desc: "Has a 30% chance to paralyze the target. Damage doubles and no accuracy check is done if the target has used Minimize while active.",
		shortDesc: "30% chance to paralyze the target.",
		id: "bodyslam",
		isViable: true,
		name: "Body Slam",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, nonsky: 1},
		secondary: {
			chance: 30,
			status: 'par',
		},
		target: "normal",
		type: "Normal",
		zMovePower: 160,
		contestType: "Tough",
	},
	"boltstrike": {
		num: 550,
		accuracy: 85,
		basePower: 130,
		category: "Physical",
		desc: "Has a 20% chance to paralyze the target.",
		shortDesc: "20% chance to paralyze the target.",
		id: "boltstrike",
		isViable: true,
		name: "Bolt Strike",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			status: 'par',
		},
		target: "normal",
		type: "Electric",
		zMovePower: 195,
		contestType: "Beautiful",
	},
	"boneclub": {
		num: 125,
		accuracy: 85,
		basePower: 65,
		category: "Physical",
		desc: "Has a 10% chance to flinch the target.",
		shortDesc: "10% chance to flinch the target.",
		id: "boneclub",
		name: "Bone Club",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Ground",
		zMovePower: 120,
		contestType: "Tough",
	},
	"bonerush": {
		num: 198,
		accuracy: 90,
		basePower: 25,
		category: "Physical",
		desc: "Hits two to five times. Has a 1/3 chance to hit two or three times, and a 1/6 chance to hit four or five times. If one of the hits breaks the target's substitute, it will take damage for the remaining hits. If the user has the Skill Link Ability, this move will always hit five times.",
		shortDesc: "Hits 2-5 times in one turn.",
		id: "bonerush",
		name: "Bone Rush",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Ground",
		zMovePower: 140,
		contestType: "Tough",
	},
	"bonemerang": {
		num: 155,
		accuracy: 90,
		basePower: 50,
		category: "Physical",
		desc: "Hits twice. If the first hit breaks the target's substitute, it will take damage for the second hit.",
		shortDesc: "Hits 2 times in one turn.",
		id: "bonemerang",
		isViable: true,
		name: "Bonemerang",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		multihit: 2,
		secondary: null,
		target: "normal",
		type: "Ground",
		zMovePower: 100,
		contestType: "Tough",
	},
	"boomburst": {
		num: 586,
		accuracy: 100,
		basePower: 140,
		category: "Special",
		desc: "No additional effect.",
		shortDesc: "No additional effect. Hits adjacent Pokemon.",
		id: "boomburst",
		isViable: true,
		name: "Boomburst",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1, authentic: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Normal",
		zMovePower: 200,
		contestType: "Tough",
	},
	"bounce": {
		num: 340,
		accuracy: 85,
		basePower: 85,
		category: "Physical",
		desc: "Has a 30% chance to paralyze the target. This attack charges on the first turn and executes on the second. On the first turn, the user avoids all attacks other than Gust, Hurricane, Sky Uppercut, Smack Down, Thousand Arrows, Thunder, and Twister, and Gust and Twister have doubled power when used against it. If the user is holding a Power Herb, the move completes in one turn.",
		shortDesc: "Bounces turn 1. Hits turn 2. 30% paralyze.",
		id: "bounce",
		name: "Bounce",
		pp: 5,
		priority: 0,
		flags: {contact: 1, charge: 1, protect: 1, mirror: 1, gravity: 1, distance: 1},
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name, defender);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		effect: {
			duration: 2,
			onTryImmunity(target, source, move) {
				if (move.id === 'gust' || move.id === 'twister') {
					return;
				}
				if (move.id === 'skyuppercut' || move.id === 'thunder' || move.id === 'hurricane' || move.id === 'smackdown' || move.id === 'thousandarrows' || move.id === 'helpinghand') {
					return;
				}
				if (source.hasAbility('noguard') || target.hasAbility('noguard')) {
					return;
				}
				if (source.volatiles['lockon'] && target === source.volatiles['lockon'].source) return;
				return false;
			},
			onSourceBasePower(basePower, target, source, move) {
				if (move.id === 'gust' || move.id === 'twister') {
					return this.chainModify(2);
				}
			},
		},
		secondary: {
			chance: 30,
			status: 'par',
		},
		target: "any",
		type: "Flying",
		zMovePower: 160,
		contestType: "Cute",
	},
	"bouncybubble": {
		num: 733,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		desc: "The user recovers 1/2 the HP lost by the target, rounded half up. If Big Root is held by the user, the HP recovered is 1.3x normal, rounded half down.",
		shortDesc: "User recovers 50% of the damage dealt.",
		id: "bouncybubble",
		isNonstandard: "LGPE",
		isUnreleased: true,
		isViable: true,
		name: "Bouncy Bubble",
		pp: 15,
		priority: 0,
		flags: {protect: 1, heal: 1},
		drain: [1, 2],
		secondary: null,
		target: "normal",
		type: "Water",
		contestType: "Clever",
	},
	"bravebird": {
		num: 413,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		desc: "If the target lost HP, the user takes recoil damage equal to 33% the HP lost by the target, rounded half up, but not less than 1 HP.",
		shortDesc: "Has 33% recoil.",
		id: "bravebird",
		isViable: true,
		name: "Brave Bird",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, distance: 1},
		recoil: [33, 100],
		secondary: null,
		target: "any",
		type: "Flying",
		zMovePower: 190,
		contestType: "Cool",
	},
	"breakneckblitz": {
		num: 622,
		accuracy: true,
		basePower: 1,
		category: "Physical",
		shortDesc: "Power is equal to the base move's Z-Power.",
		id: "breakneckblitz",
		isViable: true,
		name: "Breakneck Blitz",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "normaliumz",
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Cool",
	},
	"brickbreak": {
		num: 280,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		desc: "If this attack does not miss, the effects of Reflect, Light Screen, and Aurora Veil end for the target's side of the field before damage is calculated.",
		shortDesc: "Destroys screens, unless the target is immune.",
		id: "brickbreak",
		isViable: true,
		name: "Brick Break",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onTryHit(pokemon) {
			// will shatter screens through sub, before you hit
			if (pokemon.runImmunity('Fighting')) {
				pokemon.side.removeSideCondition('reflect');
				pokemon.side.removeSideCondition('lightscreen');
				pokemon.side.removeSideCondition('auroraveil');
			}
		},
		secondary: null,
		target: "normal",
		type: "Fighting",
		zMovePower: 140,
		contestType: "Cool",
	},
	"brine": {
		num: 362,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		desc: "Power doubles if the target has less than or equal to half of its maximum HP remaining.",
		shortDesc: "Power doubles if the target's HP is 50% or less.",
		id: "brine",
		name: "Brine",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onBasePower(basePower, pokemon, target) {
			if (target.hp * 2 <= target.maxhp) {
				return this.chainModify(2);
			}
		},
		secondary: null,
		target: "normal",
		type: "Water",
		zMovePower: 120,
		contestType: "Tough",
	},
	"brutalswing": {
		num: 693,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		desc: "No additional effect.",
		shortDesc: "No additional effect. Hits adjacent Pokemon.",
		id: "brutalswing",
		name: "Brutal Swing",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Dark",
		zMovePower: 120,
		contestType: "Tough",
	},
	"bubble": {
		num: 145,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		desc: "Has a 10% chance to lower the target's Speed by 1 stage.",
		shortDesc: "10% chance to lower the foe(s) Speed by 1.",
		id: "bubble",
		name: "Bubble",
		pp: 30,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			boosts: {
				spe: -1,
			},
		},
		target: "allAdjacentFoes",
		type: "Water",
		zMovePower: 100,
		contestType: "Cute",
	},
	"bubblebeam": {
		num: 61,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		desc: "Has a 10% chance to lower the target's Speed by 1 stage.",
		shortDesc: "10% chance to lower the target's Speed by 1.",
		id: "bubblebeam",
		name: "Bubble Beam",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			boosts: {
				spe: -1,
			},
		},
		target: "normal",
		type: "Water",
		zMovePower: 120,
		contestType: "Beautiful",
	},
	"bugbite": {
		num: 450,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		desc: "If this move is successful and the user has not fainted, it steals the target's held Berry if it is holding one and eats it immediately, gaining its effects even if the user's item is being ignored. Items lost to this move cannot be regained with Recycle or the Harvest Ability.",
		shortDesc: "User steals and eats the target's Berry.",
		id: "bugbite",
		name: "Bug Bite",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onHit(target, source) {
			let item = target.getItem();
			if (source.hp && item.isBerry && target.takeItem(source)) {
				this.add('-enditem', target, item.name, '[from] stealeat', '[move] Bug Bite', '[of] ' + source);
				if (this.singleEvent('Eat', item, null, source, null, null)) {
					this.runEvent('EatItem', source, null, null, item);
				}
				if (item.onEat) source.ateBerry = true;
			}
		},
		secondary: null,
		target: "normal",
		type: "Bug",
		zMovePower: 120,
		contestType: "Cute",
	},
	"bugbuzz": {
		num: 405,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		desc: "Has a 10% chance to lower the target's Special Defense by 1 stage.",
		shortDesc: "10% chance to lower the target's Sp. Def by 1.",
		id: "bugbuzz",
		isViable: true,
		name: "Bug Buzz",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1, authentic: 1},
		secondary: {
			chance: 10,
			boosts: {
				spd: -1,
			},
		},
		target: "normal",
		type: "Bug",
		zMovePower: 175,
		contestType: "Beautiful",
	},
	"bulkup": {
		num: 339,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Raises the user's Attack and Defense by 1 stage.",
		shortDesc: "Raises the user's Attack and Defense by 1.",
		id: "bulkup",
		isViable: true,
		name: "Bulk Up",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			atk: 1,
			def: 1,
		},
		secondary: null,
		target: "self",
		type: "Fighting",
		zMoveBoost: {atk: 1},
		contestType: "Cool",
	},
	"bulldoze": {
		num: 523,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		desc: "Has a 100% chance to lower the target's Speed by 1 stage.",
		shortDesc: "100% chance lower adjacent Pkmn Speed by 1.",
		id: "bulldoze",
		name: "Bulldoze",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1, nonsky: 1},
		secondary: {
			chance: 100,
			boosts: {
				spe: -1,
			},
		},
		target: "allAdjacent",
		type: "Ground",
		zMovePower: 120,
		contestType: "Tough",
	},
	"bulletpunch": {
		num: 418,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		desc: "No additional effect.",
		shortDesc: "Usually goes first.",
		id: "bulletpunch",
		isViable: true,
		name: "Bullet Punch",
		pp: 30,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		zMovePower: 100,
		contestType: "Tough",
	},
	"bulletseed": {
		num: 331,
		accuracy: 100,
		basePower: 25,
		category: "Physical",
		desc: "Hits two to five times. Has a 1/3 chance to hit two or three times, and a 1/6 chance to hit four or five times. If one of the hits breaks the target's substitute, it will take damage for the remaining hits. If the user has the Skill Link Ability, this move will always hit five times.",
		shortDesc: "Hits 2-5 times in one turn.",
		id: "bulletseed",
		isViable: true,
		name: "Bullet Seed",
		pp: 30,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Grass",
		zMovePower: 140,
		contestType: "Cool",
	},
	"burnup": {
		num: 682,
		accuracy: 100,
		basePower: 130,
		category: "Special",
		desc: "Fails unless the user is a Fire type. If this move is successful, the user's Fire type becomes typeless as long as it remains active.",
		shortDesc: "User's Fire type becomes typeless; must be Fire.",
		id: "burnup",
		name: "Burn Up",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		onTryMove(pokemon, target, move) {
			if (pokemon.hasType('Fire')) return;
			this.add('-fail', pokemon, 'move: Burn Up');
			this.attrLastMove('[still]');
			return null;
		},
		self: {
			onHit(pokemon) {
				pokemon.setType(pokemon.getTypes(true).map(type => type === "Fire" ? "???" : type));
				this.add('-start', pokemon, 'typechange', pokemon.types.join('/'), '[from] move: Burn Up');
			},
		},
		secondary: null,
		target: "normal",
		type: "Fire",
		zMovePower: 195,
		contestType: "Clever",
	},
	"buzzybuzz": {
		num: 734,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		desc: "Has a 100% chance to paralyze the foe.",
		shortDesc: "100% chance to paralyze the foe.",
		id: "buzzybuzz",
		isNonstandard: "LGPE",
		isUnreleased: true,
		isViable: true,
		name: "Buzzy Buzz",
		pp: 15,
		priority: 0,
		flags: {protect: 1},
		secondary: {
			chance: 100,
			status: 'par',
		},
		target: "normal",
		type: "Electric",
		contestType: "Clever",
	},
	"calmmind": {
		num: 347,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Raises the user's Special Attack and Special Defense by 1 stage.",
		shortDesc: "Raises the user's Sp. Atk and Sp. Def by 1.",
		id: "calmmind",
		isViable: true,
		name: "Calm Mind",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			spa: 1,
			spd: 1,
		},
		secondary: null,
		target: "self",
		type: "Psychic",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Clever",
	},
	"camouflage": {
		num: 293,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user's type changes based on the battle terrain. Normal type on the regular Wi-Fi terrain, Electric type during Electric Terrain, Fairy type during Misty Terrain, Grass type during Grassy Terrain, and Psychic type during Psychic Terrain. Fails if the user's type cannot be changed or if the user is already purely that type.",
		shortDesc: "Changes user's type by terrain (default Normal).",
		id: "camouflage",
		name: "Camouflage",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		onHit(target) {
			let newType = 'Normal';
			if (this.field.isTerrain('electricterrain')) {
				newType = 'Electric';
			} else if (this.field.isTerrain('grassyterrain')) {
				newType = 'Grass';
			} else if (this.field.isTerrain('mistyterrain')) {
				newType = 'Fairy';
			} else if (this.field.isTerrain('psychicterrain')) {
				newType = 'Psychic';
			}

			if (target.getTypes().join() === newType || !target.setType(newType)) return false;
			this.add('-start', target, 'typechange', newType);
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMoveBoost: {evasion: 1},
		contestType: "Clever",
	},
	"captivate": {
		num: 445,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "Lowers the target's Special Attack by 2 stages. The target is unaffected if both the user and the target are the same gender, or if either is genderless. Pokemon with the Oblivious Ability are immune.",
		shortDesc: "Lowers the foe(s) Sp. Atk by 2 if opposite gender.",
		id: "captivate",
		name: "Captivate",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		onTryHit(pokemon, source) {
			if ((pokemon.gender === 'M' && source.gender === 'F') || (pokemon.gender === 'F' && source.gender === 'M')) {
				return;
			}
			return false;
		},
		boosts: {
			spa: -2,
		},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Normal",
		zMoveBoost: {spd: 2},
		contestType: "Cute",
	},
	"catastropika": {
		num: 658,
		accuracy: true,
		basePower: 210,
		category: "Physical",
		shortDesc: "No additional effect.",
		id: "catastropika",
		name: "Catastropika",
		pp: 1,
		priority: 0,
		flags: {contact: 1},
		isZ: "pikaniumz",
		secondary: null,
		target: "normal",
		type: "Electric",
		contestType: "Cool",
	},
	"celebrate": {
		num: 606,
		accuracy: true,
		basePower: 0,
		category: "Status",
		shortDesc: "No competitive use.",
		id: "celebrate",
		name: "Celebrate",
		pp: 40,
		priority: 0,
		flags: {},
		onTryHit(target, source) {
			this.add('-activate', target, 'move: Celebrate');
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMoveBoost: {atk: 1, def: 1, spa: 1, spd: 1, spe: 1},
		contestType: "Cute",
	},
	"charge": {
		num: 268,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Raises the user's Special Defense by 1 stage. If the user uses an Electric-type attack on the next turn, its power will be doubled.",
		shortDesc: "+1 SpD, user's Electric move next turn 2x power.",
		id: "charge",
		name: "Charge",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		volatileStatus: 'charge',
		onHit(pokemon) {
			this.add('-activate', pokemon, 'move: Charge');
		},
		effect: {
			duration: 2,
			onRestart(pokemon) {
				this.effectData.duration = 2;
			},
			onBasePowerPriority: 3,
			onBasePower(basePower, attacker, defender, move) {
				if (move.type === 'Electric') {
					this.debug('charge boost');
					return this.chainModify(2);
				}
			},
		},
		boosts: {
			spd: 1,
		},
		secondary: null,
		target: "self",
		type: "Electric",
		zMoveBoost: {spd: 1},
		contestType: "Clever",
	},
	"chargebeam": {
		num: 451,
		accuracy: 90,
		basePower: 50,
		category: "Special",
		desc: "Has a 70% chance to raise the user's Special Attack by 1 stage.",
		shortDesc: "70% chance to raise the user's Sp. Atk by 1.",
		id: "chargebeam",
		name: "Charge Beam",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 70,
			self: {
				boosts: {
					spa: 1,
				},
			},
		},
		target: "normal",
		type: "Electric",
		zMovePower: 100,
		contestType: "Beautiful",
	},
	"charm": {
		num: 204,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "Lowers the target's Attack by 2 stages.",
		shortDesc: "Lowers the target's Attack by 2.",
		id: "charm",
		name: "Charm",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, mystery: 1},
		boosts: {
			atk: -2,
		},
		secondary: null,
		target: "normal",
		type: "Fairy",
		zMoveBoost: {def: 1},
		contestType: "Cute",
	},
	"chatter": {
		num: 448,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		desc: "Has a 100% chance to confuse the target.",
		shortDesc: "100% chance to confuse the target.",
		id: "chatter",
		isViable: true,
		name: "Chatter",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1, distance: 1, authentic: 1},
		noSketch: true,
		secondary: {
			chance: 100,
			volatileStatus: 'confusion',
		},
		target: "any",
		type: "Flying",
		zMovePower: 120,
		contestType: "Cute",
	},
	"chipaway": {
		num: 498,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		desc: "Ignores the target's stat stage changes, including evasiveness.",
		shortDesc: "Ignores the target's stat stage changes.",
		id: "chipaway",
		name: "Chip Away",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		ignoreDefensive: true,
		ignoreEvasion: true,
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 140,
		contestType: "Tough",
	},
	"circlethrow": {
		num: 509,
		accuracy: 90,
		basePower: 60,
		category: "Physical",
		desc: "If both the user and the target have not fainted, the target is forced to switch out and be replaced with a random unfainted ally. This effect fails if the target is under the effect of Ingrain, has the Suction Cups Ability, or this move hit a substitute.",
		shortDesc: "Forces the target to switch to a random ally.",
		id: "circlethrow",
		isViable: true,
		name: "Circle Throw",
		pp: 10,
		priority: -6,
		flags: {contact: 1, protect: 1, mirror: 1},
		forceSwitch: true,
		target: "normal",
		type: "Fighting",
		zMovePower: 120,
		contestType: "Cool",
	},
	"clamp": {
		num: 128,
		accuracy: 85,
		basePower: 35,
		category: "Physical",
		desc: "Prevents the target from switching for four or five turns (seven turns if the user is holding Grip Claw). Causes damage to the target equal to 1/8 of its maximum HP (1/6 if the user is holding Binding Band), rounded down, at the end of each turn during effect. The target can still switch out if it is holding Shed Shell or uses Baton Pass, Parting Shot, U-turn, or Volt Switch. The effect ends if either the user or the target leaves the field, or if the target uses Rapid Spin or Substitute successfully. This effect is not stackable or reset by using this or another binding move.",
		shortDesc: "Traps and damages the target for 4-5 turns.",
		id: "clamp",
		name: "Clamp",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Water",
		zMovePower: 100,
		contestType: "Tough",
	},
	"clangingscales": {
		num: 691,
		accuracy: 100,
		basePower: 110,
		category: "Special",
		desc: "Lowers the user's Defense by 1 stage.",
		shortDesc: "Lowers the user's Defense by 1.",
		id: "clangingscales",
		isViable: true,
		name: "Clanging Scales",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1, authentic: 1},
		selfBoost: {
			boosts: {
				def: -1,
			},
		},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Dragon",
		zMovePower: 185,
		contestType: "Tough",
	},
	"clangoroussoulblaze": {
		num: 728,
		accuracy: true,
		basePower: 185,
		category: "Special",
		desc: "Raises the user's Attack, Defense, Special Attack, Special Defense, and Speed by 1 stage.",
		shortDesc: "Raises the user's Atk/Def/SpAtk/SpDef/Spe by 1.",
		id: "clangoroussoulblaze",
		name: "Clangorous Soulblaze",
		pp: 1,
		priority: 0,
		flags: {sound: 1, authentic: 1},
		selfBoost: {
			boosts: {
				atk: 1,
				def: 1,
				spa: 1,
				spd: 1,
				spe: 1,
			},
		},
		isZ: "kommoniumz",
		secondary: {
			// Sheer Force negates the selfBoost even though it is not secondary
		},
		target: "allAdjacentFoes",
		type: "Dragon",
		contestType: "Cool",
	},
	"clearsmog": {
		num: 499,
		accuracy: true,
		basePower: 50,
		category: "Special",
		shortDesc: "Resets all of the target's stat stages to 0.",
		id: "clearsmog",
		isViable: true,
		name: "Clear Smog",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onHit(target) {
			target.clearBoosts();
			this.add('-clearboost', target);
		},
		secondary: null,
		target: "normal",
		type: "Poison",
		zMovePower: 100,
		contestType: "Beautiful",
	},
	"closecombat": {
		num: 370,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		desc: "Lowers the user's Defense and Special Defense by 1 stage.",
		shortDesc: "Lowers the user's Defense and Sp. Def by 1.",
		id: "closecombat",
		isViable: true,
		name: "Close Combat",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		self: {
			boosts: {
				def: -1,
				spd: -1,
			},
		},
		secondary: null,
		target: "normal",
		type: "Fighting",
		zMovePower: 190,
		contestType: "Tough",
	},
	"coil": {
		num: 489,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Raises the user's Attack, Defense, and accuracy by 1 stage.",
		shortDesc: "Raises user's Attack, Defense, accuracy by 1.",
		id: "coil",
		isViable: true,
		name: "Coil",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			atk: 1,
			def: 1,
			accuracy: 1,
		},
		secondary: null,
		target: "self",
		type: "Poison",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Tough",
	},
	"cometpunch": {
		num: 4,
		accuracy: 85,
		basePower: 18,
		category: "Physical",
		desc: "Hits two to five times. Has a 1/3 chance to hit two or three times, and a 1/6 chance to hit four or five times. If one of the hits breaks the target's substitute, it will take damage for the remaining hits. If the user has the Skill Link Ability, this move will always hit five times.",
		shortDesc: "Hits 2-5 times in one turn.",
		id: "cometpunch",
		name: "Comet Punch",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 100,
		contestType: "Tough",
	},
	"confide": {
		num: 590,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Lowers the target's Special Attack by 1 stage.",
		shortDesc: "Lowers the target's Sp. Atk by 1.",
		id: "confide",
		name: "Confide",
		pp: 20,
		priority: 0,
		flags: {reflectable: 1, mirror: 1, sound: 1, authentic: 1},
		boosts: {
			spa: -1,
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMoveBoost: {spd: 1},
		contestType: "Cute",
	},
	"confuseray": {
		num: 109,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "Causes the target to become confused.",
		shortDesc: "Confuses the target.",
		id: "confuseray",
		name: "Confuse Ray",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		volatileStatus: 'confusion',
		secondary: null,
		target: "normal",
		type: "Ghost",
		zMoveBoost: {spa: 1},
		contestType: "Clever",
	},
	"confusion": {
		num: 93,
		accuracy: 100,
		basePower: 50,
		category: "Special",
		desc: "Has a 10% chance to confuse the target.",
		shortDesc: "10% chance to confuse the target.",
		id: "confusion",
		name: "Confusion",
		pp: 25,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			volatileStatus: 'confusion',
		},
		target: "normal",
		type: "Psychic",
		zMovePower: 100,
		contestType: "Clever",
	},
	"constrict": {
		num: 132,
		accuracy: 100,
		basePower: 10,
		category: "Physical",
		desc: "Has a 10% chance to lower the target's Speed by 1 stage.",
		shortDesc: "10% chance to lower the target's Speed by 1.",
		id: "constrict",
		name: "Constrict",
		pp: 35,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			boosts: {
				spe: -1,
			},
		},
		target: "normal",
		type: "Normal",
		zMovePower: 100,
		contestType: "Tough",
	},
	"continentalcrush": {
		num: 632,
		accuracy: true,
		basePower: 1,
		category: "Physical",
		shortDesc: "Power is equal to the base move's Z-Power.",
		id: "continentalcrush",
		isViable: true,
		name: "Continental Crush",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "rockiumz",
		secondary: null,
		target: "normal",
		type: "Rock",
		contestType: "Cool",
	},
	"conversion": {
		num: 160,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user's type changes to match the original type of the move in its first move slot. Fails if the user cannot change its type, or if the type is one of the user's current types.",
		shortDesc: "Changes user's type to match its first move.",
		id: "conversion",
		name: "Conversion",
		pp: 30,
		priority: 0,
		flags: {snatch: 1},
		onHit(target) {
			let type = this.getMove(target.moveSlots[0].id).type;
			if (target.hasType(type) || !target.setType(type)) return false;
			this.add('-start', target, 'typechange', type);
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMoveBoost: {atk: 1, def: 1, spa: 1, spd: 1, spe: 1},
		contestType: "Beautiful",
	},
	"conversion2": {
		num: 176,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user's type changes to match a type that resists or is immune to the type of the last move used by the target, but not either of its current types. The determined type of the move is used rather than the original type. Fails if the target has not made a move, if the user cannot change its type, or if this move would only be able to select one of the user's current types.",
		shortDesc: "Changes user's type to resist target's last move.",
		id: "conversion2",
		name: "Conversion 2",
		pp: 30,
		priority: 0,
		flags: {authentic: 1},
		onHit(target, source) {
			if (!target.lastMove) {
				return false;
			}
			let possibleTypes = [];
			let attackType = target.lastMove.type;
			for (let type in this.data.TypeChart) {
				if (source.hasType(type)) continue;
				let typeCheck = this.data.TypeChart[type].damageTaken[attackType];
				if (typeCheck === 2 || typeCheck === 3) {
					possibleTypes.push(type);
				}
			}
			if (!possibleTypes.length) {
				return false;
			}
			let randomType = this.sample(possibleTypes);

			if (!source.setType(randomType)) return false;
			this.add('-start', source, 'typechange', randomType);
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMoveEffect: 'heal',
		contestType: "Beautiful",
	},
	"copycat": {
		num: 383,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user uses the last move used by any Pokemon, including itself. Fails if no move has been used, or if the last move used was Assist, Baneful Bunker, Beak Blast, Belch, Bestow, Celebrate, Chatter, Circle Throw, Copycat, Counter, Covet, Destiny Bond, Detect, Dragon Tail, Endure, Feint, Focus Punch, Follow Me, Helping Hand, Hold Hands, King's Shield, Mat Block, Me First, Metronome, Mimic, Mirror Coat, Mirror Move, Nature Power, Protect, Rage Powder, Roar, Shell Trap, Sketch, Sleep Talk, Snatch, Spiky Shield, Spotlight, Struggle, Switcheroo, Thief, Transform, Trick, Whirlwind, or any Z-Move.",
		shortDesc: "Uses the last move used in the battle.",
		id: "copycat",
		name: "Copycat",
		pp: 20,
		priority: 0,
		flags: {},
		onHit(pokemon) {
			let noCopycat = ['assist', 'banefulbunker', 'bestow', 'celebrate', 'chatter', 'circlethrow', 'copycat', 'counter', 'covet', 'destinybond', 'detect', 'dragontail', 'endure', 'feint', 'focuspunch', 'followme', 'helpinghand', 'mefirst', 'metronome', 'mimic', 'mirrorcoat', 'mirrormove', 'naturepower', 'protect', 'ragepowder', 'roar', 'sketch', 'sleeptalk', 'snatch', 'struggle', 'switcheroo', 'thief', 'transform', 'trick', 'whirlwind'];
			if (!this.lastMove || noCopycat.includes(this.lastMove.id) || this.lastMove.isZ) {
				return false;
			}
			this.useMove(this.lastMove.id, pokemon);
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMoveBoost: {accuracy: 1},
		contestType: "Cute",
	},
	"coreenforcer": {
		num: 687,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		desc: "If the user moves after the target, the target's Ability is rendered ineffective as long as it remains active. If the target uses Baton Pass, the replacement will remain under this effect. If the target's Ability is Battle Bond, Comatose, Disguise, Multitype, Power Construct, RKS System, Schooling, Shields Down, Stance Change, or Zen Mode, this effect does not happen, and receiving the effect through Baton Pass ends the effect immediately.",
		shortDesc: "Nullifies the foe(s) Ability if the foe(s) move first.",
		id: "coreenforcer",
		isViable: true,
		name: "Core Enforcer",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onHit(target) {
			if (['battlebond', 'comatose', 'disguise', 'multitype', 'powerconstruct', 'rkssystem', 'schooling', 'shieldsdown', 'stancechange', 'zenmode'].includes(target.ability)) return;
			if (target.newlySwitched || this.willMove(target)) return;
			target.addVolatile('gastroacid');
		},
		onAfterSubDamage(damage, target) {
			if (['battlebond', 'comatose', 'disguise', 'multitype', 'powerconstruct', 'rkssystem', 'schooling', 'shieldsdown', 'stancechange', 'zenmode'].includes(target.ability)) return;
			if (target.newlySwitched || this.willMove(target)) return;
			target.addVolatile('gastroacid');
		},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Dragon",
		zMovePower: 140,
		contestType: "Tough",
	},
	"corkscrewcrash": {
		num: 638,
		accuracy: true,
		basePower: 1,
		category: "Physical",
		shortDesc: "Power is equal to the base move's Z-Power.",
		id: "corkscrewcrash",
		isViable: true,
		name: "Corkscrew Crash",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "steeliumz",
		secondary: null,
		target: "normal",
		type: "Steel",
		contestType: "Cool",
	},
	"cosmicpower": {
		num: 322,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Raises the user's Defense and Special Defense by 1 stage.",
		shortDesc: "Raises the user's Defense and Sp. Def by 1.",
		id: "cosmicpower",
		name: "Cosmic Power",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			def: 1,
			spd: 1,
		},
		secondary: null,
		target: "self",
		type: "Psychic",
		zMoveBoost: {spd: 1},
		contestType: "Beautiful",
	},
	"cottonguard": {
		num: 538,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Raises the user's Defense by 3 stages.",
		shortDesc: "Raises the user's Defense by 3.",
		id: "cottonguard",
		isViable: true,
		name: "Cotton Guard",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			def: 3,
		},
		secondary: null,
		target: "self",
		type: "Grass",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Cute",
	},
	"cottonspore": {
		num: 178,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "Lowers the target's Speed by 2 stages.",
		shortDesc: "Lowers the target's Speed by 2.",
		id: "cottonspore",
		name: "Cotton Spore",
		pp: 40,
		priority: 0,
		flags: {powder: 1, protect: 1, reflectable: 1, mirror: 1},
		boosts: {
			spe: -2,
		},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Grass",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Beautiful",
	},
	"counter": {
		num: 68,
		accuracy: 100,
		basePower: 0,
		damageCallback(pokemon) {
			if (!pokemon.volatiles['counter']) return 0;
			return pokemon.volatiles['counter'].damage || 1;
		},
		category: "Physical",
		desc: "Deals damage to the last opposing Pokemon to hit the user with a physical attack this turn equal to twice the HP lost by the user from that attack. If the user did not lose HP from the attack, this move deals 1 HP of damage instead. If that opposing Pokemon's position is no longer in use and there is another opposing Pokemon on the field, the damage is done to it instead. Only the last hit of a multi-hit attack is counted. Fails if the user was not hit by an opposing Pokemon's physical attack this turn.",
		shortDesc: "If hit by physical attack, returns double damage.",
		id: "counter",
		name: "Counter",
		pp: 20,
		priority: -5,
		flags: {contact: 1, protect: 1},
		beforeTurnCallback(pokemon) {
			pokemon.addVolatile('counter');
		},
		onTryHit(target, source, move) {
			if (!source.volatiles['counter']) return false;
			if (source.volatiles['counter'].position === null) return false;
		},
		effect: {
			duration: 1,
			noCopy: true,
			onStart(target, source, move) {
				this.effectData.position = null;
				this.effectData.damage = 0;
			},
			onRedirectTargetPriority: -1,
			onRedirectTarget(target, source, source2) {
				if (source !== this.effectData.target) return;
				return source.side.foe.active[this.effectData.position];
			},
			onAfterDamage(damage, target, source, effect) {
				if (effect && effect.effectType === 'Move' && source.side !== target.side && this.getCategory(effect) === 'Physical') {
					this.effectData.position = source.position;
					this.effectData.damage = 2 * damage;
				}
			},
		},
		secondary: null,
		target: "scripted",
		type: "Fighting",
		zMovePower: 100,
		contestType: "Tough",
	},
	"covet": {
		num: 343,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		desc: "If this attack was successful and the user has not fainted, it steals the target's held item if the user is not holding one. The target's item is not stolen if it is a Mail or Z-Crystal, or if the target is a Kyogre holding a Blue Orb, a Groudon holding a Red Orb, a Giratina holding a Griseous Orb, an Arceus holding a Plate, a Genesect holding a Drive, a Silvally holding a Memory, or a Pokemon that can Mega Evolve holding the Mega Stone for its species. Items lost to this move cannot be regained with Recycle or the Harvest Ability.",
		shortDesc: "If the user has no item, it steals the target's.",
		id: "covet",
		name: "Covet",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onAfterHit(target, source, move) {
			if (source.item || source.volatiles['gem']) {
				return;
			}
			let yourItem = target.takeItem(source);
			if (!yourItem) {
				return;
			}
			if (!this.singleEvent('TakeItem', yourItem, target.itemData, source, target, move, yourItem) || !source.setItem(yourItem)) {
				target.item = yourItem.id; // bypass setItem so we don't break choicelock or anything
				return;
			}
			this.add('-item', source, yourItem, '[from] move: Covet', '[of] ' + target);
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 120,
		contestType: "Cute",
	},
	"crabhammer": {
		num: 152,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		desc: "Has a higher chance for a critical hit.",
		shortDesc: "High critical hit ratio.",
		id: "crabhammer",
		isViable: true,
		name: "Crabhammer",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		critRatio: 2,
		secondary: null,
		target: "normal",
		type: "Water",
		zMovePower: 180,
		contestType: "Tough",
	},
	"craftyshield": {
		num: 578,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user and its party members are protected from non-damaging attacks made by other Pokemon, including allies, during this turn. Fails if the user moves last this turn or if this move is already in effect for the user's side.",
		shortDesc: "Protects allies from Status moves this turn.",
		id: "craftyshield",
		name: "Crafty Shield",
		pp: 10,
		priority: 3,
		flags: {},
		sideCondition: 'craftyshield',
		onTryHitSide(side, source) {
			return !!this.willAct();
		},
		effect: {
			duration: 1,
			onStart(target, source) {
				this.add('-singleturn', source, 'Crafty Shield');
			},
			onTryHitPriority: 3,
			onTryHit(target, source, move) {
				if (move && (move.target === 'self' || move.category !== 'Status')) return;
				this.add('-activate', target, 'move: Crafty Shield');
				return this.NOT_FAIL;
			},
		},
		secondary: null,
		target: "allySide",
		type: "Fairy",
		zMoveBoost: {spd: 1},
		contestType: "Clever",
	},
	"crosschop": {
		num: 238,
		accuracy: 80,
		basePower: 100,
		category: "Physical",
		desc: "Has a higher chance for a critical hit.",
		shortDesc: "High critical hit ratio.",
		id: "crosschop",
		isViable: true,
		name: "Cross Chop",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		critRatio: 2,
		secondary: null,
		target: "normal",
		type: "Fighting",
		zMovePower: 180,
		contestType: "Cool",
	},
	"crosspoison": {
		num: 440,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		desc: "Has a 10% chance to poison the target and a higher chance for a critical hit.",
		shortDesc: "High critical hit ratio. 10% chance to poison.",
		id: "crosspoison",
		name: "Cross Poison",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			status: 'psn',
		},
		critRatio: 2,
		target: "normal",
		type: "Poison",
		zMovePower: 140,
		contestType: "Cool",
	},
	"crunch": {
		num: 242,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		desc: "Has a 20% chance to lower the target's Defense by 1 stage.",
		shortDesc: "20% chance to lower the target's Defense by 1.",
		id: "crunch",
		isViable: true,
		name: "Crunch",
		pp: 15,
		priority: 0,
		flags: {bite: 1, contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			boosts: {
				def: -1,
			},
		},
		target: "normal",
		type: "Dark",
		zMovePower: 160,
		contestType: "Tough",
	},
	"crushclaw": {
		num: 306,
		accuracy: 95,
		basePower: 75,
		category: "Physical",
		desc: "Has a 50% chance to lower the target's Defense by 1 stage.",
		shortDesc: "50% chance to lower the target's Defense by 1.",
		id: "crushclaw",
		name: "Crush Claw",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 50,
			boosts: {
				def: -1,
			},
		},
		target: "normal",
		type: "Normal",
		zMovePower: 140,
		contestType: "Cool",
	},
	"crushgrip": {
		num: 462,
		accuracy: 100,
		basePower: 0,
		basePowerCallback(pokemon, target) {
			return Math.floor(Math.floor((120 * (100 * Math.floor(target.hp * 4096 / target.maxhp)) + 2048 - 1) / 4096) / 100) || 1;
		},
		category: "Physical",
		desc: "Power is equal to 120 * (target's current HP / target's maximum HP), rounded half down, but not less than 1.",
		shortDesc: "More power the more HP the target has left.",
		id: "crushgrip",
		name: "Crush Grip",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 190,
		contestType: "Tough",
	},
	"curse": {
		num: 174,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "If the user is not a Ghost type, lowers the user's Speed by 1 stage and raises the user's Attack and Defense by 1 stage. If the user is a Ghost type, the user loses 1/2 of its maximum HP, rounded down and even if it would cause fainting, in exchange for the target losing 1/4 of its maximum HP, rounded down, at the end of each turn while it is active. If the target uses Baton Pass, the replacement will continue to be affected. Fails if there is no target or if the target is already affected.",
		shortDesc: "Curses if Ghost, else -1 Spe, +1 Atk, +1 Def.",
		id: "curse",
		name: "Curse",
		pp: 10,
		priority: 0,
		flags: {authentic: 1},
		volatileStatus: 'curse',
		onModifyMove(move, source, target) {
			if (!source.hasType('Ghost')) {
				// @ts-ignore
				move.target = move.nonGhostTarget;
			}
		},
		onTryHit(target, source, move) {
			if (!source.hasType('Ghost')) {
				delete move.volatileStatus;
				delete move.onHit;
				move.self = {boosts: {spe: -1, atk: 1, def: 1}};
			} else if (move.volatileStatus && target.volatiles.curse) {
				return false;
			}
		},
		onHit(target, source) {
			this.directDamage(source.maxhp / 2, source, source);
		},
		effect: {
			onStart(pokemon, source) {
				this.add('-start', pokemon, 'Curse', '[of] ' + source);
			},
			onResidualOrder: 10,
			onResidual(pokemon) {
				this.damage(pokemon.maxhp / 4);
			},
		},
		secondary: null,
		target: "normal",
		nonGhostTarget: "self",
		type: "Ghost",
		zMoveEffect: 'curse',
		contestType: "Tough",
	},
	"cut": {
		num: 15,
		accuracy: 95,
		basePower: 50,
		category: "Physical",
		shortDesc: "No additional effect.",
		id: "cut",
		name: "Cut",
		pp: 30,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 100,
		contestType: "Cool",
	},
	"darkpulse": {
		num: 399,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		desc: "Has a 20% chance to flinch the target.",
		shortDesc: "20% chance to flinch the target.",
		id: "darkpulse",
		isViable: true,
		name: "Dark Pulse",
		pp: 15,
		priority: 0,
		flags: {protect: 1, pulse: 1, mirror: 1, distance: 1},
		secondary: {
			chance: 20,
			volatileStatus: 'flinch',
		},
		target: "any",
		type: "Dark",
		zMovePower: 160,
		contestType: "Cool",
	},
	"darkvoid": {
		num: 464,
		accuracy: 50,
		basePower: 0,
		category: "Status",
		desc: "Causes the target to fall asleep. This move cannot be used successfully unless the user's current form, while considering Transform, is Darkrai.",
		shortDesc: "Darkrai: Causes the foe(s) to fall asleep.",
		id: "darkvoid",
		isViable: true,
		name: "Dark Void",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		status: 'slp',
		onTryMove(pokemon, target, move) {
			if (pokemon.template.species === 'Darkrai' || move.hasBounced) {
				return;
			}
			this.add('-fail', pokemon, 'move: Dark Void');
			this.hint("Only a Pokemon whose form is Darkrai can use this move.");
			return null;
		},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Dark",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Clever",
	},
	"darkestlariat": {
		num: 663,
		accuracy: 100,
		basePower: 85,
		category: "Physical",
		desc: "Ignores the target's stat stage changes, including evasiveness.",
		shortDesc: "Ignores the target's stat stage changes.",
		id: "darkestlariat",
		isViable: true,
		name: "Darkest Lariat",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		ignoreEvasion: true,
		ignoreDefensive: true,
		secondary: null,
		target: "normal",
		type: "Dark",
		zMovePower: 160,
		contestType: "Cool",
	},
	"dazzlinggleam": {
		num: 605,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		desc: "No additional effect.",
		shortDesc: "No additional effect. Hits adjacent foes.",
		id: "dazzlinggleam",
		isViable: true,
		name: "Dazzling Gleam",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Fairy",
		zMovePower: 160,
		contestType: "Beautiful",
	},
	"defendorder": {
		num: 455,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Raises the user's Defense and Special Defense by 1 stage.",
		shortDesc: "Raises the user's Defense and Sp. Def by 1.",
		id: "defendorder",
		isViable: true,
		name: "Defend Order",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			def: 1,
			spd: 1,
		},
		secondary: null,
		target: "self",
		type: "Bug",
		zMoveBoost: {def: 1},
		contestType: "Clever",
	},
	"defensecurl": {
		num: 111,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Raises the user's Defense by 1 stage. As long as the user remains active, the power of the user's Ice Ball and Rollout will be doubled (this effect is not stackable).",
		shortDesc: "Raises the user's Defense by 1.",
		id: "defensecurl",
		name: "Defense Curl",
		pp: 40,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			def: 1,
		},
		volatileStatus: 'defensecurl',
		effect: {
			noCopy: true,
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMoveBoost: {accuracy: 1},
		contestType: "Cute",
	},
	"defog": {
		num: 432,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Lowers the target's evasiveness by 1 stage. If this move is successful and whether or not the target's evasiveness was affected, the effects of Reflect, Light Screen, Aurora Veil, Safeguard, Mist, Spikes, Toxic Spikes, Stealth Rock, and Sticky Web end for the target's side, and the effects of Spikes, Toxic Spikes, Stealth Rock, and Sticky Web end for the user's side. Ignores a target's substitute, although a substitute will still block the lowering of evasiveness.",
		shortDesc: "-1 evasion; clears user and target side's hazards.",
		id: "defog",
		isViable: true,
		name: "Defog",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, authentic: 1},
		onHit(target, source, move) {
			let success = false;
			if (!target.volatiles['substitute'] || move.infiltrates) success = !!this.boost({evasion: -1});
			let removeTarget = ['reflect', 'lightscreen', 'auroraveil', 'safeguard', 'mist', 'spikes', 'toxicspikes', 'stealthrock', 'stickyweb'];
			let removeAll = ['spikes', 'toxicspikes', 'stealthrock', 'stickyweb'];
			for (const targetCondition of removeTarget) {
				if (target.side.removeSideCondition(targetCondition)) {
					if (!removeAll.includes(targetCondition)) continue;
					this.add('-sideend', target.side, this.getEffect(targetCondition).name, '[from] move: Defog', '[of] ' + source);
					success = true;
				}
			}
			for (const sideCondition of removeAll) {
				if (source.side.removeSideCondition(sideCondition)) {
					this.add('-sideend', source.side, this.getEffect(sideCondition).name, '[from] move: Defog', '[of] ' + source);
					success = true;
				}
			}
			return success;
		},
		secondary: null,
		target: "normal",
		type: "Flying",
		zMoveBoost: {accuracy: 1},
		contestType: "Cool",
	},
	"destinybond": {
		num: 194,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Until the user's next move, if an opposing Pokemon's attack knocks the user out, that Pokemon faints as well, unless the attack was Doom Desire or Future Sight. Fails if the user used this move successfully as its last move, disregarding moves used through the Dancer Ability.",
		shortDesc: "If an opponent knocks out the user, it also faints.",
		id: "destinybond",
		isViable: true,
		name: "Destiny Bond",
		pp: 5,
		priority: 0,
		flags: {authentic: 1},
		volatileStatus: 'destinybond',
		onPrepareHit(pokemon) {
			return !pokemon.removeVolatile('destinybond');
		},
		effect: {
			onStart(pokemon) {
				this.add('-singlemove', pokemon, 'Destiny Bond');
			},
			onFaint(target, source, effect) {
				if (!source || !effect || target.side === source.side) return;
				if (effect.effectType === 'Move' && !effect.isFutureMove) {
					this.add('-activate', target, 'move: Destiny Bond');
					source.faint();
				}
			},
			onBeforeMovePriority: -1,
			onBeforeMove(pokemon, target, move) {
				if (move.id === 'destinybond') return;
				this.debug('removing Destiny Bond before attack');
				pokemon.removeVolatile('destinybond');
			},
			onMoveAborted(pokemon, target, move) {
				pokemon.removeVolatile('destinybond');
			},
			onBeforeSwitchOutPriority: 1,
			onBeforeSwitchOut(pokemon) {
				pokemon.removeVolatile('destinybond');
			},
		},
		secondary: null,
		target: "self",
		type: "Ghost",
		zMoveEffect: 'redirect',
		contestType: "Clever",
	},
	"detect": {
		num: 197,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user is protected from most attacks made by other Pokemon during this turn. This move has a 1/X chance of being successful, where X starts at 1 and triples each time this move is successfully used. X resets to 1 if this move fails, if the user's last move used is not Baneful Bunker, Detect, Endure, King's Shield, Protect, Quick Guard, Spiky Shield, or Wide Guard, or if it was one of those moves and the user's protection was broken. Fails if the user moves last this turn.",
		shortDesc: "Prevents moves from affecting the user this turn.",
		id: "detect",
		isViable: true,
		name: "Detect",
		pp: 5,
		priority: 4,
		flags: {},
		stallingMove: true,
		volatileStatus: 'protect',
		onPrepareHit(pokemon) {
			return !!this.willAct() && this.runEvent('StallMove', pokemon);
		},
		onHit(pokemon) {
			pokemon.addVolatile('stall');
		},
		secondary: null,
		target: "self",
		type: "Fighting",
		zMoveBoost: {evasion: 1},
		contestType: "Cool",
	},
	"devastatingdrake": {
		num: 652,
		accuracy: true,
		basePower: 1,
		category: "Physical",
		shortDesc: "Power is equal to the base move's Z-Power.",
		id: "devastatingdrake",
		name: "Devastating Drake",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "dragoniumz",
		secondary: null,
		target: "normal",
		type: "Dragon",
		contestType: "Cool",
	},
	"diamondstorm": {
		num: 591,
		accuracy: 95,
		basePower: 100,
		category: "Physical",
		desc: "Has a 50% chance to raise the user's Defense by 2 stages.",
		shortDesc: "50% chance to raise user's Def by 2 for each hit.",
		id: "diamondstorm",
		isViable: true,
		name: "Diamond Storm",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 50,
			self: {
				boosts: {
					def: 2,
				},
			},
		},
		target: "allAdjacentFoes",
		type: "Rock",
		zMovePower: 180,
		contestType: "Beautiful",
	},
	"dig": {
		num: 91,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		desc: "This attack charges on the first turn and executes on the second. On the first turn, the user avoids all attacks other than Earthquake and Magnitude but takes double damage from them, and is also unaffected by weather. If the user is holding a Power Herb, the move completes in one turn.",
		shortDesc: "Digs underground turn 1, strikes turn 2.",
		id: "dig",
		name: "Dig",
		pp: 10,
		priority: 0,
		flags: {contact: 1, charge: 1, protect: 1, mirror: 1, nonsky: 1},
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name, defender);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		effect: {
			duration: 2,
			onImmunity(type, pokemon) {
				if (type === 'sandstorm' || type === 'hail') return false;
			},
			onTryImmunity(target, source, move) {
				if (move.id === 'earthquake' || move.id === 'magnitude' || move.id === 'helpinghand') {
					return;
				}
				if (source.hasAbility('noguard') || target.hasAbility('noguard')) {
					return;
				}
				if (source.volatiles['lockon'] && target === source.volatiles['lockon'].source) return;
				return false;
			},
			onSourceModifyDamage(damage, source, target, move) {
				if (move.id === 'earthquake' || move.id === 'magnitude') {
					return this.chainModify(2);
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Ground",
		zMovePower: 160,
		contestType: "Tough",
	},
	"disable": {
		num: 50,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "For 4 turns, the target's last move used becomes disabled. Fails if one of the target's moves is already disabled, if the target has not made a move, or if the target no longer knows the move.",
		shortDesc: "For 4 turns, disables the target's last move used.",
		id: "disable",
		isViable: true,
		name: "Disable",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, authentic: 1},
		volatileStatus: 'disable',
		onTryHit(target) {
			if (!target.lastMove || target.lastMove.isZ) {
				return false;
			}
		},
		effect: {
			duration: 5,
			noCopy: true, // doesn't get copied by Baton Pass
			onStart(pokemon, source, effect) {
				// The target hasn't taken its turn, or Cursed Body activated and the move was not used through Dancer or Instruct
				if (this.willMove(pokemon) || (pokemon === this.activePokemon && this.activeMove && !this.activeMove.isExternal)) {
					this.effectData.duration--;
				}
				if (!pokemon.lastMove) {
					this.debug('pokemon hasn\'t moved yet');
					return false;
				}
				for (const moveSlot of pokemon.moveSlots) {
					if (moveSlot.id === pokemon.lastMove.id) {
						if (!moveSlot.pp) {
							this.debug('Move out of PP');
							return false;
						} else {
							if (effect.id === 'cursedbody') {
								this.add('-start', pokemon, 'Disable', moveSlot.move, '[from] ability: Cursed Body', '[of] ' + source);
							} else {
								this.add('-start', pokemon, 'Disable', moveSlot.move);
							}
							this.effectData.move = pokemon.lastMove.id;
							return;
						}
					}
				}
				// this can happen if Disable works on a Z-move
				return false;
			},
			onResidualOrder: 14,
			onEnd(pokemon) {
				this.add('-end', pokemon, 'Disable');
			},
			onBeforeMovePriority: 7,
			onBeforeMove(attacker, defender, move) {
				if (!move.isZ && move.id === this.effectData.move) {
					this.add('cant', attacker, 'Disable', move);
					return false;
				}
			},
			onDisableMove(pokemon) {
				for (const moveSlot of pokemon.moveSlots) {
					if (moveSlot.id === this.effectData.move) {
						pokemon.disableMove(moveSlot.id);
					}
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Clever",
	},
	"disarmingvoice": {
		num: 574,
		accuracy: true,
		basePower: 40,
		category: "Special",
		desc: "This move does not check accuracy.",
		shortDesc: "This move does not check accuracy. Hits foes.",
		id: "disarmingvoice",
		name: "Disarming Voice",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1, authentic: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Fairy",
		zMovePower: 100,
		contestType: "Cute",
	},
	"discharge": {
		num: 435,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		desc: "Has a 30% chance to paralyze the target.",
		shortDesc: "30% chance to paralyze adjacent Pokemon.",
		id: "discharge",
		isViable: true,
		name: "Discharge",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			status: 'par',
		},
		target: "allAdjacent",
		type: "Electric",
		zMovePower: 160,
		contestType: "Beautiful",
	},
	"dive": {
		num: 291,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		desc: "This attack charges on the first turn and executes on the second. On the first turn, the user avoids all attacks other than Surf and Whirlpool but takes double damage from them, and is also unaffected by weather. If the user is holding a Power Herb, the move completes in one turn.",
		shortDesc: "Dives underwater turn 1, strikes turn 2.",
		id: "dive",
		name: "Dive",
		pp: 10,
		priority: 0,
		flags: {contact: 1, charge: 1, protect: 1, mirror: 1, nonsky: 1},
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name, defender);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		effect: {
			duration: 2,
			onImmunity(type, pokemon) {
				if (type === 'sandstorm' || type === 'hail') return false;
			},
			onTryImmunity(target, source, move) {
				if (move.id === 'surf' || move.id === 'whirlpool' || move.id === 'helpinghand') {
					return;
				}
				if (source.hasAbility('noguard') || target.hasAbility('noguard')) {
					return;
				}
				if (source.volatiles['lockon'] && target === source.volatiles['lockon'].source) return;
				return false;
			},
			onSourceModifyDamage(damage, source, target, move) {
				if (move.id === 'surf' || move.id === 'whirlpool') {
					return this.chainModify(2);
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Water",
		zMovePower: 160,
		contestType: "Beautiful",
	},
	"dizzypunch": {
		num: 146,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		desc: "Has a 20% chance to confuse the target.",
		shortDesc: "20% chance to confuse the target.",
		id: "dizzypunch",
		name: "Dizzy Punch",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: {
			chance: 20,
			volatileStatus: 'confusion',
		},
		target: "normal",
		type: "Normal",
		zMovePower: 140,
		contestType: "Cute",
	},
	"doomdesire": {
		num: 353,
		accuracy: 100,
		basePower: 140,
		category: "Special",
		desc: "Deals damage two turns after this move is used. At the end of that turn, the damage is calculated at that time and dealt to the Pokemon at the position the target had when the move was used. If the user is no longer active at the time, damage is calculated based on the user's natural Special Attack stat, types, and level, with no boosts from its held item or Ability. Fails if this move or Future Sight is already in effect for the target's position.",
		shortDesc: "Hits two turns after being used.",
		id: "doomdesire",
		name: "Doom Desire",
		pp: 5,
		priority: 0,
		flags: {},
		isFutureMove: true,
		onTry(source, target) {
			if (!target.side.addSlotCondition(target, 'futuremove')) return false;
			Object.assign(target.side.slotConditions[target.position]['futuremove'], {
				move: 'doomdesire',
				source: source,
				moveData: {
					id: 'doomdesire',
					name: "Doom Desire",
					accuracy: 100,
					basePower: 140,
					category: "Special",
					priority: 0,
					flags: {},
					effectType: 'Move',
					isFutureMove: true,
					type: 'Steel',
				},
			});
			this.add('-start', source, 'Doom Desire');
			return null;
		},
		secondary: null,
		target: "normal",
		type: "Steel",
		zMovePower: 200,
		contestType: "Beautiful",
	},
	"doubleedge": {
		num: 38,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		desc: "If the target lost HP, the user takes recoil damage equal to 33% the HP lost by the target, rounded half up, but not less than 1 HP.",
		shortDesc: "Has 33% recoil.",
		id: "doubleedge",
		isViable: true,
		name: "Double-Edge",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [33, 100],
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 190,
		contestType: "Tough",
	},
	"doublehit": {
		num: 458,
		accuracy: 90,
		basePower: 35,
		category: "Physical",
		desc: "Hits twice. If the first hit breaks the target's substitute, it will take damage for the second hit.",
		shortDesc: "Hits 2 times in one turn.",
		id: "doublehit",
		name: "Double Hit",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		multihit: 2,
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 140,
		contestType: "Cool",
	},
	"doubleironbash": {
		num: 742,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		desc: "Hits twice. If the first hit breaks the target's substitute, it will take damage for the second hit. Has a 30% chance to flinch the target.",
		shortDesc: "Hits twice. 30% chance to flinch.",
		id: "doubleironbash",
		isNonstandard: "LGPE",
		isUnreleased: true,
		isViable: true,
		name: "Double Iron Bash",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		multihit: 2,
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Steel",
		zMovePower: 180,
		contestType: "Clever",
	},
	"doublekick": {
		num: 24,
		accuracy: 100,
		basePower: 30,
		category: "Physical",
		desc: "Hits twice. If the first hit breaks the target's substitute, it will take damage for the second hit.",
		shortDesc: "Hits 2 times in one turn.",
		id: "doublekick",
		name: "Double Kick",
		pp: 30,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		multihit: 2,
		secondary: null,
		target: "normal",
		type: "Fighting",
		zMovePower: 100,
		contestType: "Cool",
	},
	"doubleslap": {
		num: 3,
		accuracy: 85,
		basePower: 15,
		category: "Physical",
		desc: "Hits two to five times. Has a 1/3 chance to hit two or three times, and a 1/6 chance to hit four or five times. If one of the hits breaks the target's substitute, it will take damage for the remaining hits. If the user has the Skill Link Ability, this move will always hit five times.",
		shortDesc: "Hits 2-5 times in one turn.",
		id: "doubleslap",
		name: "Double Slap",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 100,
		contestType: "Cute",
	},
	"doubleteam": {
		num: 104,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Raises the user's evasiveness by 1 stage.",
		shortDesc: "Raises the user's evasiveness by 1.",
		id: "doubleteam",
		name: "Double Team",
		pp: 15,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			evasion: 1,
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Cool",
	},
	"dracometeor": {
		num: 434,
		accuracy: 90,
		basePower: 130,
		category: "Special",
		desc: "Lowers the user's Special Attack by 2 stages.",
		shortDesc: "Lowers the user's Sp. Atk by 2.",
		id: "dracometeor",
		isViable: true,
		name: "Draco Meteor",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		self: {
			boosts: {
				spa: -2,
			},
		},
		secondary: null,
		target: "normal",
		type: "Dragon",
		zMovePower: 195,
		contestType: "Beautiful",
	},
	"dragonascent": {
		num: 620,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		desc: "Lowers the user's Defense and Special Defense by 1 stage.",
		shortDesc: "Lowers the user's Defense and Sp. Def by 1.",
		id: "dragonascent",
		isViable: true,
		name: "Dragon Ascent",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, distance: 1},
		self: {
			boosts: {
				def: -1,
				spd: -1,
			},
		},
		target: "any",
		type: "Flying",
		zMovePower: 190,
		contestType: "Beautiful",
	},
	"dragonbreath": {
		num: 225,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		desc: "Has a 30% chance to paralyze the target.",
		shortDesc: "30% chance to paralyze the target.",
		id: "dragonbreath",
		name: "Dragon Breath",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			status: 'par',
		},
		target: "normal",
		type: "Dragon",
		zMovePower: 120,
		contestType: "Cool",
	},
	"dragonclaw": {
		num: 337,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		shortDesc: "No additional effect.",
		id: "dragonclaw",
		isViable: true,
		name: "Dragon Claw",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		zMovePower: 160,
		contestType: "Cool",
	},
	"dragondance": {
		num: 349,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Raises the user's Attack and Speed by 1 stage.",
		shortDesc: "Raises the user's Attack and Speed by 1.",
		id: "dragondance",
		isViable: true,
		name: "Dragon Dance",
		pp: 20,
		priority: 0,
		flags: {snatch: 1, dance: 1},
		boosts: {
			atk: 1,
			spe: 1,
		},
		secondary: null,
		target: "self",
		type: "Dragon",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Cool",
	},
	"dragonhammer": {
		num: 692,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		shortDesc: "No additional effect.",
		id: "dragonhammer",
		isViable: true,
		name: "Dragon Hammer",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		zMovePower: 175,
		contestType: "Tough",
	},
	"dragonpulse": {
		num: 406,
		accuracy: 100,
		basePower: 85,
		category: "Special",
		shortDesc: "No additional effect.",
		id: "dragonpulse",
		isViable: true,
		name: "Dragon Pulse",
		pp: 10,
		priority: 0,
		flags: {protect: 1, pulse: 1, mirror: 1, distance: 1},
		secondary: null,
		target: "any",
		type: "Dragon",
		zMovePower: 160,
		contestType: "Beautiful",
	},
	"dragonrage": {
		num: 82,
		accuracy: 100,
		basePower: 0,
		damage: 40,
		category: "Special",
		shortDesc: "Deals 40 HP of damage to the target.",
		id: "dragonrage",
		name: "Dragon Rage",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		zMovePower: 100,
		contestType: "Cool",
	},
	"dragonrush": {
		num: 407,
		accuracy: 75,
		basePower: 100,
		category: "Physical",
		desc: "Has a 20% chance to flinch the target. Damage doubles and no accuracy check is done if the target has used Minimize while active.",
		shortDesc: "20% chance to flinch the target.",
		id: "dragonrush",
		name: "Dragon Rush",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Dragon",
		zMovePower: 180,
		contestType: "Tough",
	},
	"dragontail": {
		num: 525,
		accuracy: 90,
		basePower: 60,
		category: "Physical",
		desc: "If both the user and the target have not fainted, the target is forced to switch out and be replaced with a random unfainted ally. This effect fails if the target used Ingrain previously, has the Suction Cups Ability, or this move hit a substitute.",
		shortDesc: "Forces the target to switch to a random ally.",
		id: "dragontail",
		isViable: true,
		name: "Dragon Tail",
		pp: 10,
		priority: -6,
		flags: {contact: 1, protect: 1, mirror: 1},
		forceSwitch: true,
		target: "normal",
		type: "Dragon",
		zMovePower: 120,
		contestType: "Tough",
	},
	"drainingkiss": {
		num: 577,
		accuracy: 100,
		basePower: 50,
		category: "Special",
		desc: "The user recovers 3/4 the HP lost by the target, rounded half up. If Big Root is held by the user, the HP recovered is 1.3x normal, rounded half down.",
		shortDesc: "User recovers 75% of the damage dealt.",
		id: "drainingkiss",
		name: "Draining Kiss",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, heal: 1},
		drain: [3, 4],
		secondary: null,
		target: "normal",
		type: "Fairy",
		zMovePower: 100,
		contestType: "Cute",
	},
	"drainpunch": {
		num: 409,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		desc: "The user recovers 1/2 the HP lost by the target, rounded half up. If Big Root is held by the user, the HP recovered is 1.3x normal, rounded half down.",
		shortDesc: "User recovers 50% of the damage dealt.",
		id: "drainpunch",
		isViable: true,
		name: "Drain Punch",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1, heal: 1},
		drain: [1, 2],
		secondary: null,
		target: "normal",
		type: "Fighting",
		zMovePower: 140,
		contestType: "Tough",
	},
	"dreameater": {
		num: 138,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		desc: "The target is unaffected by this move unless it is asleep. The user recovers 1/2 the HP lost by the target, rounded half up. If Big Root is held by the user, the HP recovered is 1.3x normal, rounded half down.",
		shortDesc: "User gains 1/2 HP inflicted. Sleeping target only.",
		id: "dreameater",
		name: "Dream Eater",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, heal: 1},
		drain: [1, 2],
		onTryHit(target) {
			if (target.status !== 'slp' && !target.hasAbility('comatose')) {
				this.add('-immune', target);
				return null;
			}
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMovePower: 180,
		contestType: "Clever",
	},
	"drillpeck": {
		num: 65,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		shortDesc: "No additional effect.",
		id: "drillpeck",
		isViable: true,
		name: "Drill Peck",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, distance: 1},
		secondary: null,
		target: "any",
		type: "Flying",
		zMovePower: 160,
		contestType: "Cool",
	},
	"drillrun": {
		num: 529,
		accuracy: 95,
		basePower: 80,
		category: "Physical",
		desc: "Has a higher chance for a critical hit.",
		shortDesc: "High critical hit ratio.",
		id: "drillrun",
		isViable: true,
		name: "Drill Run",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		critRatio: 2,
		secondary: null,
		target: "normal",
		type: "Ground",
		zMovePower: 160,
		contestType: "Tough",
	},
	"dualchop": {
		num: 530,
		accuracy: 90,
		basePower: 40,
		category: "Physical",
		desc: "Hits twice. If the first hit breaks the target's substitute, it will take damage for the second hit.",
		shortDesc: "Hits 2 times in one turn.",
		id: "dualchop",
		name: "Dual Chop",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		multihit: 2,
		secondary: null,
		target: "normal",
		type: "Dragon",
		zMovePower: 100,
		contestType: "Tough",
	},
	"dynamicpunch": {
		num: 223,
		accuracy: 50,
		basePower: 100,
		category: "Physical",
		desc: "Has a 100% chance to confuse the target.",
		shortDesc: "100% chance to confuse the target.",
		id: "dynamicpunch",
		name: "Dynamic Punch",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: {
			chance: 100,
			volatileStatus: 'confusion',
		},
		target: "normal",
		type: "Fighting",
		zMovePower: 180,
		contestType: "Cool",
	},
	"earthpower": {
		num: 414,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		desc: "Has a 10% chance to lower the target's Special Defense by 1 stage.",
		shortDesc: "10% chance to lower the target's Sp. Def by 1.",
		id: "earthpower",
		isViable: true,
		name: "Earth Power",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, nonsky: 1},
		secondary: {
			chance: 10,
			boosts: {
				spd: -1,
			},
		},
		target: "normal",
		type: "Ground",
		zMovePower: 175,
		contestType: "Beautiful",
	},
	"earthquake": {
		num: 89,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		desc: "Damage doubles if the target is using Dig.",
		shortDesc: "Hits adjacent Pokemon. Double damage on Dig.",
		id: "earthquake",
		isViable: true,
		name: "Earthquake",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, nonsky: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Ground",
		zMovePower: 180,
		contestType: "Tough",
	},
	"echoedvoice": {
		num: 497,
		accuracy: 100,
		basePower: 40,
		basePowerCallback() {
			if (this.field.pseudoWeather.echoedvoice) {
				return 40 * this.field.pseudoWeather.echoedvoice.multiplier;
			}
			return 40;
		},
		category: "Special",
		desc: "For every consecutive turn that this move is used by at least one Pokemon, this move's power is multiplied by the number of turns to pass, but not more than 5.",
		shortDesc: "Power increases when used on consecutive turns.",
		id: "echoedvoice",
		name: "Echoed Voice",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1, authentic: 1},
		onTry() {
			this.field.addPseudoWeather('echoedvoice');
		},
		effect: {
			duration: 2,
			onStart() {
				this.effectData.multiplier = 1;
			},
			onRestart() {
				if (this.effectData.duration !== 2) {
					this.effectData.duration = 2;
					if (this.effectData.multiplier < 5) {
						this.effectData.multiplier++;
					}
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 100,
		contestType: "Beautiful",
	},
	"eerieimpulse": {
		num: 598,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "Lowers the target's Special Attack by 2 stages.",
		shortDesc: "Lowers the target's Sp. Atk by 2.",
		id: "eerieimpulse",
		name: "Eerie Impulse",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		boosts: {
			spa: -2,
		},
		secondary: null,
		target: "normal",
		type: "Electric",
		zMoveBoost: {spd: 1},
		contestType: "Clever",
	},
	"eggbomb": {
		num: 121,
		accuracy: 75,
		basePower: 100,
		category: "Physical",
		shortDesc: "No additional effect.",
		id: "eggbomb",
		name: "Egg Bomb",
		pp: 10,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 180,
		contestType: "Cute",
	},
	"electricterrain": {
		num: 604,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "For 5 turns, the terrain becomes Electric Terrain. During the effect, the power of Electric-type attacks made by grounded Pokemon is multiplied by 1.5 and grounded Pokemon cannot fall asleep; Pokemon already asleep do not wake up. Camouflage transforms the user into an Electric type, Nature Power becomes Thunderbolt, and Secret Power has a 30% chance to cause paralysis. Fails if the current terrain is Electric Terrain.",
		shortDesc: "5 turns. Grounded: +Electric power, can't sleep.",
		id: "electricterrain",
		name: "Electric Terrain",
		pp: 10,
		priority: 0,
		flags: {nonsky: 1},
		terrain: 'electricterrain',
		effect: {
			duration: 5,
			durationCallback(source, effect) {
				if (source && source.hasItem('terrainextender')) {
					return 8;
				}
				return 5;
			},
			onSetStatus(status, target, source, effect) {
				if (status.id === 'slp' && target.isGrounded() && !target.isSemiInvulnerable()) {
					if (effect.effectType === 'Move' && !effect.secondaries) {
						this.add('-activate', target, 'move: Electric Terrain');
					}
					return false;
				}
			},
			onTryAddVolatile(status, target) {
				if (!target.isGrounded() || target.isSemiInvulnerable()) return;
				if (status.id === 'yawn') {
					this.add('-activate', target, 'move: Electric Terrain');
					return null;
				}
			},
			onBasePower(basePower, attacker, defender, move) {
				if (move.type === 'Electric' && attacker.isGrounded() && !attacker.isSemiInvulnerable()) {
					this.debug('electric terrain boost');
					return this.chainModify(1.5);
				}
			},
			onStart(battle, source, effect) {
				if (effect && effect.effectType === 'Ability') {
					this.add('-fieldstart', 'move: Electric Terrain', '[from] ability: ' + effect, '[of] ' + source);
				} else {
					this.add('-fieldstart', 'move: Electric Terrain');
				}
			},
			onResidualOrder: 21,
			onResidualSubOrder: 2,
			onEnd() {
				this.add('-fieldend', 'move: Electric Terrain');
			},
		},
		secondary: null,
		target: "all",
		type: "Electric",
		zMoveBoost: {spe: 1},
		contestType: "Clever",
	},
	"electrify": {
		num: 582,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Causes the target's move to become Electric type this turn. Among effects that can change a move's type, this effect happens last. Fails if the target already moved this turn.",
		shortDesc: "Changes the target's move to Electric this turn.",
		id: "electrify",
		name: "Electrify",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1, mystery: 1},
		volatileStatus: 'electrify',
		onTryHit(target) {
			if (!this.willMove(target) && target.activeTurns) return false;
		},
		effect: {
			duration: 1,
			onStart(target) {
				this.add('-singleturn', target, 'move: Electrify');
			},
			onModifyMovePriority: -2,
			onModifyMove(move) {
				if (move.id !== 'struggle') {
					this.debug('Electrify making move type electric');
					move.type = 'Electric';
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Electric",
		zMoveBoost: {spa: 1},
		contestType: "Clever",
	},
	"electroball": {
		num: 486,
		accuracy: 100,
		basePower: 0,
		basePowerCallback(pokemon, target) {
			let ratio = (pokemon.getStat('spe') / target.getStat('spe'));
			this.debug([40, 60, 80, 120, 150][(Math.floor(ratio) > 4 ? 4 : Math.floor(ratio))] + ' bp');
			if (ratio >= 4) {
				return 150;
			}
			if (ratio >= 3) {
				return 120;
			}
			if (ratio >= 2) {
				return 80;
			}
			if (ratio >= 1) {
				return 60;
			}
			return 40;
		},
		category: "Special",
		desc: "The power of this move depends on (user's current Speed / target's current Speed), rounded down. Power is equal to 150 if the result is 4 or more, 120 if 3, 80 if 2, 60 if 1, 40 if less than 1. If the target's current Speed is 0, this move's power is 40.",
		shortDesc: "More power the faster the user is than the target.",
		id: "electroball",
		name: "Electro Ball",
		pp: 10,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
		zMovePower: 160,
		contestType: "Cool",
	},
	"electroweb": {
		num: 527,
		accuracy: 95,
		basePower: 55,
		category: "Special",
		desc: "Has a 100% chance to lower the target's Speed by 1 stage.",
		shortDesc: "100% chance to lower the foe(s) Speed by 1.",
		id: "electroweb",
		name: "Electroweb",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				spe: -1,
			},
		},
		target: "allAdjacentFoes",
		type: "Electric",
		zMovePower: 100,
		contestType: "Beautiful",
	},
	"embargo": {
		num: 373,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "For 5 turns, the target's held item has no effect. An item's effect of causing forme changes is unaffected, but any other effects from such items are negated. During the effect, Fling and Natural Gift are prevented from being used by the target. Items thrown at the target with Fling will still activate for it. If the target uses Baton Pass, the replacement will remain unable to use items.",
		shortDesc: "For 5 turns, the target's item has no effect.",
		id: "embargo",
		name: "Embargo",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		volatileStatus: 'embargo',
		effect: {
			duration: 5,
			onStart(pokemon) {
				this.add('-start', pokemon, 'Embargo');
			},
			// Item suppression implemented in Pokemon.ignoringItem() within sim/pokemon.js
			onResidualOrder: 18,
			onEnd(pokemon) {
				this.add('-end', pokemon, 'Embargo');
			},
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		zMoveBoost: {spa: 1},
		contestType: "Clever",
	},
	"ember": {
		num: 52,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		desc: "Has a 10% chance to burn the target.",
		shortDesc: "10% chance to burn the target.",
		id: "ember",
		name: "Ember",
		pp: 25,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			status: 'brn',
		},
		target: "normal",
		type: "Fire",
		zMovePower: 100,
		contestType: "Cute",
	},
	"encore": {
		num: 227,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "For its next 3 turns, the target is forced to repeat its last move used. If the affected move runs out of PP, the effect ends. Fails if the target is already under this effect, if it has not made a move, if the move has 0 PP, or if the move is Assist, Copycat, Encore, Me First, Metronome, Mimic, Mirror Move, Nature Power, Sketch, Sleep Talk, Struggle, Transform, or any Z-Move.",
		shortDesc: "Target repeats its last move for its next 3 turns.",
		id: "encore",
		isViable: true,
		name: "Encore",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, authentic: 1},
		volatileStatus: 'encore',
		effect: {
			duration: 3,
			noCopy: true, // doesn't get copied by Z-Baton Pass
			onStart(target) {
				let noEncore = ['assist', 'copycat', 'encore', 'mefirst', 'metronome', 'mimic', 'mirrormove', 'naturepower', 'sketch', 'sleeptalk', 'struggle', 'transform'];
				let moveIndex = target.lastMove ? target.moves.indexOf(target.lastMove.id) : -1;
				if (!target.lastMove || target.lastMove.isZ || noEncore.includes(target.lastMove.id) || !target.moveSlots[moveIndex] || target.moveSlots[moveIndex].pp <= 0) {
					// it failed
					delete target.volatiles['encore'];
					return false;
				}
				this.effectData.move = target.lastMove.id;
				this.add('-start', target, 'Encore');
				if (!this.willMove(target)) {
					this.effectData.duration++;
				}
			},
			onOverrideAction(pokemon, target, move) {
				if (move.id !== this.effectData.move) return this.effectData.move;
			},
			onResidualOrder: 13,
			onResidual(target) {
				if (target.moves.includes(this.effectData.move) && target.moveSlots[target.moves.indexOf(this.effectData.move)].pp <= 0) {
					// early termination if you run out of PP
					delete target.volatiles.encore;
					this.add('-end', target, 'Encore');
				}
			},
			onEnd(target) {
				this.add('-end', target, 'Encore');
			},
			onDisableMove(pokemon) {
				if (!this.effectData.move || !pokemon.hasMove(this.effectData.move)) {
					return;
				}
				for (const moveSlot of pokemon.moveSlots) {
					if (moveSlot.id !== this.effectData.move) {
						pokemon.disableMove(moveSlot.id);
					}
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMoveBoost: {spe: 1},
		contestType: "Cute",
	},
	"endeavor": {
		num: 283,
		accuracy: 100,
		basePower: 0,
		damageCallback(pokemon, target) {
			return target.hp - pokemon.hp;
		},
		category: "Physical",
		desc: "Deals damage to the target equal to (target's current HP - user's current HP). The target is unaffected if its current HP is less than or equal to the user's current HP.",
		shortDesc: "Lowers the target's HP to the user's HP.",
		id: "endeavor",
		isViable: true,
		name: "Endeavor",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onTry(pokemon, target) {
			if (pokemon.hp >= target.hp) {
				this.add('-immune', target);
				return null;
			}
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 160,
		contestType: "Tough",
	},
	"endure": {
		num: 203,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user will survive attacks made by other Pokemon during this turn with at least 1 HP. This move has a 1/X chance of being successful, where X starts at 1 and triples each time this move is successfully used. X resets to 1 if this move fails, if the user's last move used is not Baneful Bunker, Detect, Endure, King's Shield, Protect, Quick Guard, Spiky Shield, or Wide Guard, or if it was one of those moves and the user's protection was broken. Fails if the user moves last this turn.",
		shortDesc: "User survives attacks this turn with at least 1 HP.",
		id: "endure",
		name: "Endure",
		pp: 10,
		priority: 4,
		flags: {},
		stallingMove: true,
		volatileStatus: 'endure',
		onTryHit(pokemon) {
			return this.willAct() && this.runEvent('StallMove', pokemon);
		},
		onHit(pokemon) {
			pokemon.addVolatile('stall');
		},
		effect: {
			duration: 1,
			onStart(target) {
				this.add('-singleturn', target, 'move: Endure');
			},
			onDamagePriority: -10,
			onDamage(damage, target, source, effect) {
				if (effect && effect.effectType === 'Move' && damage >= target.hp) {
					this.add('-activate', target, 'move: Endure');
					return target.hp - 1;
				}
			},
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Tough",
	},
	"energyball": {
		num: 412,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		desc: "Has a 10% chance to lower the target's Special Defense by 1 stage.",
		shortDesc: "10% chance to lower the target's Sp. Def by 1.",
		id: "energyball",
		isViable: true,
		name: "Energy Ball",
		pp: 10,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			boosts: {
				spd: -1,
			},
		},
		target: "normal",
		type: "Grass",
		zMovePower: 175,
		contestType: "Beautiful",
	},
	"entrainment": {
		num: 494,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "Causes the target's Ability to become the same as the user's. Fails if the target's Ability is Battle Bond, Comatose, Disguise, Multitype, Power Construct, RKS System, Schooling, Shields Down, Stance Change, Truant, or the same Ability as the user, or if the user's Ability is Battle Bond, Comatose, Disguise, Flower Gift, Forecast, Illusion, Imposter, Multitype, Power Construct, Power of Alchemy, Receiver, RKS System, Schooling, Shields Down, Stance Change, Trace, or Zen Mode.",
		shortDesc: "The target's Ability changes to match the user's.",
		id: "entrainment",
		name: "Entrainment",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, mystery: 1},
		onTryHit(target, source) {
			if (target === source) return false;
			let bannedTargetAbilities = ['battlebond', 'comatose', 'disguise', 'multitype', 'powerconstruct', 'rkssystem', 'schooling', 'shieldsdown', 'stancechange', 'truant'];
			let bannedSourceAbilities = ['battlebond', 'comatose', 'disguise', 'flowergift', 'forecast', 'illusion', 'imposter', 'multitype', 'powerconstruct', 'powerofalchemy', 'receiver', 'rkssystem', 'schooling', 'shieldsdown', 'stancechange', 'trace', 'zenmode'];
			if (bannedTargetAbilities.includes(target.ability) || bannedSourceAbilities.includes(source.ability) || target.ability === source.ability) {
				return false;
			}
		},
		onHit(target, source) {
			let oldAbility = target.setAbility(source.ability);
			if (oldAbility) {
				this.add('-ability', target, this.getAbility(target.ability).name, '[from] move: Entrainment');
				return;
			}
			return false;
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMoveBoost: {spd: 1},
		contestType: "Cute",
	},
	"eruption": {
		num: 284,
		accuracy: 100,
		basePower: 150,
		basePowerCallback(pokemon, target, move) {
			return move.basePower * pokemon.hp / pokemon.maxhp;
		},
		category: "Special",
		desc: "Power is equal to (user's current HP * 150 / user's maximum HP), rounded down, but not less than 1.",
		shortDesc: "Less power as user's HP decreases. Hits foe(s).",
		id: "eruption",
		isViable: true,
		name: "Eruption",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Fire",
		zMovePower: 200,
		contestType: "Beautiful",
	},
	"explosion": {
		num: 153,
		accuracy: 100,
		basePower: 250,
		category: "Physical",
		desc: "The user faints after using this move, even if this move fails for having no target. This move is prevented from executing if any active Pokemon has the Damp Ability.",
		shortDesc: "Hits adjacent Pokemon. The user faints.",
		id: "explosion",
		isViable: true,
		name: "Explosion",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		selfdestruct: "always",
		secondary: null,
		target: "allAdjacent",
		type: "Normal",
		zMovePower: 200,
		contestType: "Beautiful",
	},
	"extrasensory": {
		num: 326,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		desc: "Has a 10% chance to flinch the target.",
		shortDesc: "10% chance to flinch the target.",
		id: "extrasensory",
		isViable: true,
		name: "Extrasensory",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Psychic",
		zMovePower: 160,
		contestType: "Cool",
	},
	"extremeevoboost": {
		num: 702,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Raises the user's Attack, Defense, Special Attack, Special Defense, and Speed by 2 stages.",
		shortDesc: "Raises user's Atk, Def, SpA, SpD, and Spe by 2.",
		id: "extremeevoboost",
		isViable: true,
		name: "Extreme Evoboost",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "eeviumz",
		boosts: {
			atk: 2,
			def: 2,
			spa: 2,
			spd: 2,
			spe: 2,
		},
		secondary: null,
		target: "self",
		type: "Normal",
		contestType: "Beautiful",
	},
	"extremespeed": {
		num: 245,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		desc: "No additional effect.",
		shortDesc: "Nearly always goes first.",
		id: "extremespeed",
		isViable: true,
		name: "Extreme Speed",
		pp: 5,
		priority: 2,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 160,
		contestType: "Cool",
	},
	"facade": {
		num: 263,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		desc: "Power doubles if the user is burned, paralyzed, or poisoned. The physical damage halving effect from the user's burn is ignored.",
		shortDesc: "Power doubles if user is burn/poison/paralyzed.",
		id: "facade",
		isViable: true,
		name: "Facade",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onBasePower(basePower, pokemon) {
			if (pokemon.status && pokemon.status !== 'slp') {
				return this.chainModify(2);
			}
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 140,
		contestType: "Cute",
	},
	"feintattack": {
		num: 185,
		accuracy: true,
		basePower: 60,
		category: "Physical",
		shortDesc: "This move does not check accuracy.",
		id: "feintattack",
		name: "Feint Attack",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		zMovePower: 120,
		contestType: "Clever",
	},
	"fairylock": {
		num: 587,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Prevents all active Pokemon from switching next turn. A Pokemon can still switch out if it is holding Shed Shell or uses Baton Pass, Parting Shot, U-turn, or Volt Switch. Fails if the effect is already active.",
		shortDesc: "Prevents all Pokemon from switching next turn.",
		id: "fairylock",
		name: "Fairy Lock",
		pp: 10,
		priority: 0,
		flags: {mirror: 1, authentic: 1},
		pseudoWeather: 'fairylock',
		effect: {
			duration: 2,
			onStart(target) {
				this.add('-fieldactivate', 'move: Fairy Lock');
			},
			onTrapPokemon(pokemon) {
				pokemon.tryTrap();
			},
		},
		secondary: null,
		target: "all",
		type: "Fairy",
		zMoveBoost: {def: 1},
		contestType: "Clever",
	},
	"fairywind": {
		num: 584,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		shortDesc: "No additional effect.",
		id: "fairywind",
		name: "Fairy Wind",
		pp: 30,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		zMovePower: 100,
		contestType: "Beautiful",
	},
	"fakeout": {
		num: 252,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		desc: "Has a 100% chance to flinch the target. Fails unless it is the user's first turn on the field.",
		shortDesc: "Hits first. First turn out only. 100% flinch chance.",
		id: "fakeout",
		isViable: true,
		name: "Fake Out",
		pp: 10,
		priority: 3,
		flags: {contact: 1, protect: 1, mirror: 1},
		onTry(pokemon, target) {
			if (pokemon.activeTurns > 1) {
				this.attrLastMove('[still]');
				this.add('-fail', pokemon);
				this.hint("Fake Out only works on your first turn out.");
				return null;
			}
		},
		secondary: {
			chance: 100,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Normal",
		zMovePower: 100,
		contestType: "Cute",
	},
	"faketears": {
		num: 313,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "Lowers the target's Special Defense by 2 stages.",
		shortDesc: "Lowers the target's Sp. Def by 2.",
		id: "faketears",
		name: "Fake Tears",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, mystery: 1},
		boosts: {
			spd: -2,
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		zMoveBoost: {spa: 1},
		contestType: "Cute",
	},
	"falseswipe": {
		num: 206,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		desc: "Leaves the target with at least 1 HP.",
		shortDesc: "Always leaves the target with at least 1 HP.",
		id: "falseswipe",
		name: "False Swipe",
		pp: 40,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		noFaint: true,
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 100,
		contestType: "Cool",
	},
	"featherdance": {
		num: 297,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "Lowers the target's Attack by 2 stages.",
		shortDesc: "Lowers the target's Attack by 2.",
		id: "featherdance",
		name: "Feather Dance",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, mystery: 1, dance: 1},
		boosts: {
			atk: -2,
		},
		secondary: null,
		target: "normal",
		type: "Flying",
		zMoveBoost: {def: 1},
		contestType: "Beautiful",
	},
	"feint": {
		num: 364,
		accuracy: 100,
		basePower: 30,
		category: "Physical",
		desc: "If this move is successful, it breaks through the target's Baneful Bunker, Detect, King's Shield, Protect, or Spiky Shield for this turn, allowing other Pokemon to attack the target normally. If the target's side is protected by Crafty Shield, Mat Block, Quick Guard, or Wide Guard, that protection is also broken for this turn and other Pokemon may attack the target's side normally.",
		shortDesc: "Nullifies Detect, Protect, and Quick/Wide Guard.",
		id: "feint",
		name: "Feint",
		pp: 10,
		priority: 2,
		flags: {mirror: 1},
		breaksProtect: true,
		// Breaking protection implemented in scripts.js
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 100,
		contestType: "Clever",
	},
	"fellstinger": {
		num: 565,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		desc: "Raises the user's Attack by 3 stages if this move knocks out the target.",
		shortDesc: "Raises user's Attack by 3 if this KOes the target.",
		id: "fellstinger",
		name: "Fell Stinger",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onAfterMoveSecondarySelf(pokemon, target, move) {
			if (!target || target.fainted || target.hp <= 0) this.boost({atk: 3}, pokemon, pokemon, move);
		},
		secondary: null,
		target: "normal",
		type: "Bug",
		zMovePower: 100,
		contestType: "Cool",
	},
	"fierydance": {
		num: 552,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		desc: "Has a 50% chance to raise the user's Special Attack by 1 stage.",
		shortDesc: "50% chance to raise the user's Sp. Atk by 1.",
		id: "fierydance",
		isViable: true,
		name: "Fiery Dance",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, dance: 1},
		secondary: {
			chance: 50,
			self: {
				boosts: {
					spa: 1,
				},
			},
		},
		target: "normal",
		type: "Fire",
		zMovePower: 160,
		contestType: "Beautiful",
	},
	"finalgambit": {
		num: 515,
		accuracy: 100,
		basePower: 0,
		damageCallback(pokemon) {
			let damage = pokemon.hp;
			pokemon.faint();
			return damage;
		},
		category: "Special",
		desc: "Deals damage to the target equal to the user's current HP. If this move is successful, the user faints.",
		shortDesc: "Does damage equal to the user's HP. User faints.",
		id: "finalgambit",
		isViable: true,
		name: "Final Gambit",
		pp: 5,
		priority: 0,
		flags: {protect: 1},
		selfdestruct: "ifHit",
		secondary: null,
		target: "normal",
		type: "Fighting",
		zMovePower: 180,
		contestType: "Tough",
	},
	"fireblast": {
		num: 126,
		accuracy: 85,
		basePower: 110,
		category: "Special",
		desc: "Has a 10% chance to burn the target.",
		shortDesc: "10% chance to burn the target.",
		id: "fireblast",
		isViable: true,
		name: "Fire Blast",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			status: 'brn',
		},
		target: "normal",
		type: "Fire",
		zMovePower: 185,
		contestType: "Beautiful",
	},
	"firefang": {
		num: 424,
		accuracy: 95,
		basePower: 65,
		category: "Physical",
		desc: "Has a 10% chance to burn the target and a 10% chance to flinch it.",
		shortDesc: "10% chance to burn. 10% chance to flinch.",
		id: "firefang",
		isViable: true,
		name: "Fire Fang",
		pp: 15,
		priority: 0,
		flags: {bite: 1, contact: 1, protect: 1, mirror: 1},
		secondaries: [
			{
				chance: 10,
				status: 'brn',
			}, {
				chance: 10,
				volatileStatus: 'flinch',
			},
		],
		target: "normal",
		type: "Fire",
		zMovePower: 120,
		contestType: "Cool",
	},
	"firelash": {
		num: 680,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		desc: "Has a 100% chance to lower the target's Defense by 1 stage.",
		shortDesc: "100% chance to lower the target's Defense by 1.",
		id: "firelash",
		isViable: true,
		name: "Fire Lash",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				def: -1,
			},
		},
		target: "normal",
		type: "Fire",
		zMovePower: 160,
		contestType: "Cute",
	},
	"firepledge": {
		num: 519,
		accuracy: 100,
		basePower: 80,
		basePowerCallback(target, source, move) {
			if (['grasspledge', 'waterpledge'].includes(move.sourceEffect)) {
				this.add('-combine');
				return 150;
			}
			return 80;
		},
		category: "Special",
		desc: "If one of the user's allies chose to use Grass Pledge or Water Pledge this turn and has not moved yet, it takes its turn immediately after the user and the user's move does nothing. If combined with Grass Pledge, the ally uses Fire Pledge with 150 power and a sea of fire appears on the target's side for 4 turns, which causes damage to non-Fire types equal to 1/8 of their maximum HP, rounded down, at the end of each turn during effect, including the last turn. If combined with Water Pledge, the ally uses Water Pledge with 150 power and a rainbow appears on the user's side for 4 turns, which doubles secondary effect chances but does not stack with the Serene Grace Ability. When used as a combined move, this move gains STAB no matter what the user's type is. This move does not consume the user's Fire Gem.",
		shortDesc: "Use with Grass or Water Pledge for added effect.",
		id: "firepledge",
		name: "Fire Pledge",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, nonsky: 1},
		onPrepareHit(target, source, move) {
			for (const action of this.queue) {
				// @ts-ignore
				if (!action.move || !action.pokemon || !action.pokemon.isActive || action.pokemon.fainted) continue;
				// @ts-ignore
				if (action.pokemon.side === source.side && ['grasspledge', 'waterpledge'].includes(action.move.id)) {
					// @ts-ignore
					this.prioritizeAction(action);
					this.add('-waiting', source, action.pokemon);
					return null;
				}
			}
		},
		onModifyMove(move) {
			if (move.sourceEffect === 'waterpledge') {
				move.type = 'Water';
				move.forceSTAB = true;
			}
			if (move.sourceEffect === 'grasspledge') {
				move.type = 'Fire';
				move.forceSTAB = true;
			}
		},
		onHit(target, source, move) {
			if (move.sourceEffect === 'grasspledge') {
				target.side.addSideCondition('firepledge');
			}
			if (move.sourceEffect === 'waterpledge') {
				source.side.addSideCondition('waterpledge');
			}
		},
		effect: {
			duration: 4,
			onStart(targetSide) {
				this.add('-sidestart', targetSide, 'Fire Pledge');
			},
			onEnd(targetSide) {
				this.add('-sideend', targetSide, 'Fire Pledge');
			},
			onResidual(side) {
				for (const pokemon of side.active) {
					if (pokemon && !pokemon.hasType('Fire')) {
						this.damage(pokemon.maxhp / 8, pokemon);
					}
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Fire",
		zMovePower: 160,
		contestType: "Beautiful",
	},
	"firepunch": {
		num: 7,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		desc: "Has a 10% chance to burn the target.",
		shortDesc: "10% chance to burn the target.",
		id: "firepunch",
		isViable: true,
		name: "Fire Punch",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: {
			chance: 10,
			status: 'brn',
		},
		target: "normal",
		type: "Fire",
		zMovePower: 140,
		contestType: "Tough",
	},
	"firespin": {
		num: 83,
		accuracy: 85,
		basePower: 35,
		category: "Special",
		desc: "Prevents the target from switching for four or five turns (seven turns if the user is holding Grip Claw). Causes damage to the target equal to 1/8 of its maximum HP (1/6 if the user is holding Binding Band), rounded down, at the end of each turn during effect. The target can still switch out if it is holding Shed Shell or uses Baton Pass, Parting Shot, U-turn, or Volt Switch. The effect ends if either the user or the target leaves the field, or if the target uses Rapid Spin or Substitute successfully. This effect is not stackable or reset by using this or another binding move.",
		shortDesc: "Traps and damages the target for 4-5 turns.",
		id: "firespin",
		name: "Fire Spin",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Fire",
		zMovePower: 100,
		contestType: "Beautiful",
	},
	"firstimpression": {
		num: 660,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		desc: "Fails unless it is the user's first turn on the field.",
		shortDesc: "Hits first. First turn out only.",
		id: "firstimpression",
		isViable: true,
		name: "First Impression",
		pp: 10,
		priority: 2,
		flags: {contact: 1, protect: 1, mirror: 1},
		onTry(pokemon, target) {
			if (pokemon.activeTurns > 1) {
				this.add('-fail', pokemon);
				this.attrLastMove('[still]');
				this.hint("First Impression only works on your first turn out.");
				return null;
			}
		},
		secondary: null,
		target: "normal",
		type: "Bug",
		zMovePower: 175,
		contestType: "Cute",
	},
	"fissure": {
		num: 90,
		accuracy: 30,
		basePower: 0,
		category: "Physical",
		desc: "Deals damage to the target equal to the target's maximum HP. Ignores accuracy and evasiveness modifiers. This attack's accuracy is equal to (user's level - target's level + 30)%, and fails if the target is at a higher level. Pokemon with the Sturdy Ability are immune.",
		shortDesc: "OHKOs the target. Fails if user is a lower level.",
		id: "fissure",
		name: "Fissure",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, nonsky: 1},
		ohko: true,
		secondary: null,
		target: "normal",
		type: "Ground",
		zMovePower: 180,
		contestType: "Tough",
	},
	"flail": {
		num: 175,
		accuracy: 100,
		basePower: 0,
		basePowerCallback(pokemon, target) {
			let ratio = pokemon.hp * 48 / pokemon.maxhp;
			if (ratio < 2) {
				return 200;
			}
			if (ratio < 5) {
				return 150;
			}
			if (ratio < 10) {
				return 100;
			}
			if (ratio < 17) {
				return 80;
			}
			if (ratio < 33) {
				return 40;
			}
			return 20;
		},
		category: "Physical",
		desc: "The power of this move is 20 if X is 33 to 48, 40 if X is 17 to 32, 80 if X is 10 to 16, 100 if X is 5 to 9, 150 if X is 2 to 4, and 200 if X is 0 or 1, where X is equal to (user's current HP * 48 / user's maximum HP), rounded down.",
		shortDesc: "More power the less HP the user has left.",
		id: "flail",
		name: "Flail",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 160,
		contestType: "Cute",
	},
	"flameburst": {
		num: 481,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		desc: "If this move is successful, the target's ally loses 1/16 of its maximum HP, rounded down, unless it has the Magic Guard Ability.",
		shortDesc: "Damages Pokemon next to the target as well.",
		id: "flameburst",
		name: "Flame Burst",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onHit(target, source, move) {
			if (target.side.active.length === 1) {
				return;
			}
			for (const ally of target.side.active) {
				if (ally && this.isAdjacent(target, ally)) {
					this.damage(ally.maxhp / 16, ally, source, this.getEffect('Flame Burst'));
				}
			}
		},
		onAfterSubDamage(damage, target, source, move) {
			if (target.side.active.length === 1) {
				return;
			}
			for (const ally of target.side.active) {
				if (ally && this.isAdjacent(target, ally)) {
					this.damage(ally.maxhp / 16, ally, source, this.getEffect('Flame Burst'));
				}
			}
		},
		secondary: null,
		target: "normal",
		type: "Fire",
		zMovePower: 140,
		contestType: "Beautiful",
	},
	"flamecharge": {
		num: 488,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		desc: "Has a 100% chance to raise the user's Speed by 1 stage.",
		shortDesc: "100% chance to raise the user's Speed by 1.",
		id: "flamecharge",
		isViable: true,
		name: "Flame Charge",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			self: {
				boosts: {
					spe: 1,
				},
			},
		},
		target: "normal",
		type: "Fire",
		zMovePower: 100,
		contestType: "Cool",
	},
	"flamewheel": {
		num: 172,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		desc: "Has a 10% chance to burn the target.",
		shortDesc: "10% chance to burn the target. Thaws user.",
		id: "flamewheel",
		name: "Flame Wheel",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, defrost: 1},
		secondary: {
			chance: 10,
			status: 'brn',
		},
		target: "normal",
		type: "Fire",
		zMovePower: 120,
		contestType: "Beautiful",
	},
	"flamethrower": {
		num: 53,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		desc: "Has a 10% chance to burn the target.",
		shortDesc: "10% chance to burn the target.",
		id: "flamethrower",
		isViable: true,
		name: "Flamethrower",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			status: 'brn',
		},
		target: "normal",
		type: "Fire",
		zMovePower: 175,
		contestType: "Beautiful",
	},
	"flareblitz": {
		num: 394,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		desc: "Has a 10% chance to burn the target. If the target lost HP, the user takes recoil damage equal to 33% the HP lost by the target, rounded half up, but not less than 1 HP.",
		shortDesc: "Has 33% recoil. 10% chance to burn. Thaws user.",
		id: "flareblitz",
		isViable: true,
		name: "Flare Blitz",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, defrost: 1},
		recoil: [33, 100],
		secondary: {
			chance: 10,
			status: 'brn',
		},
		target: "normal",
		type: "Fire",
		zMovePower: 190,
		contestType: "Cool",
	},
	"flash": {
		num: 148,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "Lowers the target's accuracy by 1 stage.",
		shortDesc: "Lowers the target's accuracy by 1.",
		id: "flash",
		name: "Flash",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		boosts: {
			accuracy: -1,
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMoveBoost: {evasion: 1},
		contestType: "Beautiful",
	},
	"flashcannon": {
		num: 430,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		desc: "Has a 10% chance to lower the target's Special Defense by 1 stage.",
		shortDesc: "10% chance to lower the target's Sp. Def by 1.",
		id: "flashcannon",
		isViable: true,
		name: "Flash Cannon",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			boosts: {
				spd: -1,
			},
		},
		target: "normal",
		type: "Steel",
		zMovePower: 160,
		contestType: "Beautiful",
	},
	"flatter": {
		num: 260,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "Raises the target's Special Attack by 1 stage and confuses it.",
		shortDesc: "Raises the target's Sp. Atk by 1 and confuses it.",
		id: "flatter",
		name: "Flatter",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, mystery: 1},
		volatileStatus: 'confusion',
		boosts: {
			spa: 1,
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		zMoveBoost: {spd: 1},
		contestType: "Clever",
	},
	"fleurcannon": {
		num: 705,
		accuracy: 90,
		basePower: 130,
		category: "Special",
		desc: "Lowers the user's Special Attack by 2 stages.",
		shortDesc: "Lowers the user's Sp. Atk by 2.",
		id: "fleurcannon",
		isViable: true,
		name: "Fleur Cannon",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		self: {
			boosts: {
				spa: -2,
			},
		},
		secondary: null,
		target: "normal",
		type: "Fairy",
		zMovePower: 195,
		contestType: "Beautiful",
	},
	"fling": {
		num: 374,
		accuracy: 100,
		basePower: 0,
		category: "Physical",
		desc: "The power of this move is based on the user's held item. The held item is lost and it activates for the target if applicable. If there is no target or the target avoids this move by protecting itself, the user's held item is still lost. The user can regain a thrown item with Recycle or the Harvest Ability. Fails if the user has no held item, if the held item cannot be thrown, if the user is under the effect of Embargo or Magic Room, or if the user has the Klutz Ability.",
		shortDesc: "Flings the user's item at the target. Power varies.",
		id: "fling",
		name: "Fling",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, mystery: 1},
		onPrepareHit(target, source, move) {
			if (source.ignoringItem()) return false;
			let item = source.getItem();
			if (!this.singleEvent('TakeItem', item, source.itemData, source, source, move, item)) return false;
			if (!item.fling) return false;
			move.basePower = item.fling.basePower;
			if (item.isBerry) {
				move.onHit = function (foe) {
					if (this.singleEvent('Eat', item, null, foe, null, null)) {
						this.runEvent('EatItem', foe, null, null, item);
					}
					if (item.onEat) foe.ateBerry = true;
				};
			} else if (item.fling.effect) {
				move.onHit = item.fling.effect;
			} else {
				if (!move.secondaries) move.secondaries = [];
				if (item.fling.status) {
					move.secondaries.push({status: item.fling.status});
				} else if (item.fling.volatileStatus) {
					move.secondaries.push({volatileStatus: item.fling.volatileStatus});
				}
			}
			source.setItem('');
			source.lastItem = item.id;
			source.usedItemThisTurn = true;
			this.add("-enditem", source, item.name, '[from] move: Fling');
			this.runEvent('AfterUseItem', source, null, null, item);
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		zMovePower: 100,
		contestType: "Cute",
	},
	"floatyfall": {
		num: 731,
		accuracy: 95,
		basePower: 90,
		category: "Physical",
		desc: "Has a 30% chance to flinch the target.",
		shortDesc: "30% chance to flinch the target.",
		id: "floatyfall",
		isNonstandard: "LGPE",
		isUnreleased: true,
		isViable: true,
		name: "Floaty Fall",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, gravity: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Flying",
		contestType: "Cool",
	},
	"floralhealing": {
		num: 666,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The target restores 1/2 of its maximum HP, rounded half up. If the terrain is Grassy Terrain, the target instead restores 2/3 of its maximum HP, rounded half down.",
		shortDesc: "Heals the target by 50% of its max HP.",
		id: "floralhealing",
		name: "Floral Healing",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, heal: 1, mystery: 1},
		onHit(target, source) {
			let success = false;
			if (this.field.isTerrain('grassyterrain')) {
				success = !!this.heal(this.modify(target.maxhp, 0.667)); // TODO: find out the real value
			} else {
				success = !!this.heal(Math.ceil(target.maxhp * 0.5));
			}
			if (success && target.side.id !== source.side.id) {
				target.staleness = 'external';
			}
			return success;
		},
		secondary: null,
		target: "normal",
		type: "Fairy",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Beautiful",
	},
	"flowershield": {
		num: 579,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Raises the Defense of all active Grass-type Pokemon by 1 stage. Fails if there are no active Grass-type Pokemon.",
		shortDesc: "Raises Defense by 1 of all active Grass types.",
		id: "flowershield",
		name: "Flower Shield",
		pp: 10,
		priority: 0,
		flags: {distance: 1},
		onHitField(target, source, move) {
			let targets = [];
			for (const pokemon of this.getAllActive()) {
				if (pokemon.hasType('Grass')) {
					// This move affects every Grass-type Pokemon in play.
					targets.push(pokemon);
				}
			}
			let success = false;
			for (const target of targets) {
				success = this.boost({def: 1}, target, source, move) || success;
			}
			return success;
		},
		secondary: null,
		target: "all",
		type: "Fairy",
		zMoveBoost: {def: 1},
		contestType: "Beautiful",
	},
	"fly": {
		num: 19,
		accuracy: 95,
		basePower: 90,
		category: "Physical",
		desc: "This attack charges on the first turn and executes on the second. On the first turn, the user avoids all attacks other than Gust, Hurricane, Sky Uppercut, Smack Down, Thousand Arrows, Thunder, and Twister, and Gust and Twister have doubled power when used against it. If the user is holding a Power Herb, the move completes in one turn.",
		shortDesc: "Flies up on first turn, then strikes the next turn.",
		id: "fly",
		name: "Fly",
		pp: 15,
		priority: 0,
		flags: {contact: 1, charge: 1, protect: 1, mirror: 1, gravity: 1, distance: 1},
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name, defender);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		effect: {
			duration: 2,
			onTryImmunity(target, source, move) {
				if (move.id === 'gust' || move.id === 'twister') {
					return;
				}
				if (move.id === 'skyuppercut' || move.id === 'thunder' || move.id === 'hurricane' || move.id === 'smackdown' || move.id === 'thousandarrows' || move.id === 'helpinghand') {
					return;
				}
				if (source.hasAbility('noguard') || target.hasAbility('noguard')) {
					return;
				}
				if (source.volatiles['lockon'] && target === source.volatiles['lockon'].source) return;
				return false;
			},
			onSourceModifyDamage(damage, source, target, move) {
				if (move.id === 'gust' || move.id === 'twister') {
					return this.chainModify(2);
				}
			},
		},
		secondary: null,
		target: "any",
		type: "Flying",
		zMovePower: 175,
		contestType: "Clever",
	},
	"flyingpress": {
		num: 560,
		accuracy: 95,
		basePower: 100,
		category: "Physical",
		desc: "This move combines Flying in its type effectiveness against the target. Damage doubles and no accuracy check is done if the target has used Minimize while active.",
		shortDesc: "Combines Flying in its type effectiveness.",
		id: "flyingpress",
		name: "Flying Press",
		pp: 10,
		flags: {contact: 1, protect: 1, mirror: 1, gravity: 1, distance: 1, nonsky: 1},
		onEffectiveness(typeMod, target, type, move) {
			return typeMod + this.getEffectiveness('Flying', type);
		},
		priority: 0,
		secondary: null,
		target: "any",
		type: "Fighting",
		zMovePower: 170,
		contestType: "Tough",
	},
	"focusblast": {
		num: 411,
		accuracy: 70,
		basePower: 120,
		category: "Special",
		desc: "Has a 10% chance to lower the target's Special Defense by 1 stage.",
		shortDesc: "10% chance to lower the target's Sp. Def by 1.",
		id: "focusblast",
		isViable: true,
		name: "Focus Blast",
		pp: 5,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			boosts: {
				spd: -1,
			},
		},
		target: "normal",
		type: "Fighting",
		zMovePower: 190,
		contestType: "Cool",
	},
	"focusenergy": {
		num: 116,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Raises the user's chance for a critical hit by 2 stages. Fails if the user already has the effect. Baton Pass can be used to transfer this effect to an ally.",
		shortDesc: "Raises the user's critical hit ratio by 2.",
		id: "focusenergy",
		name: "Focus Energy",
		pp: 30,
		priority: 0,
		flags: {snatch: 1},
		volatileStatus: 'focusenergy',
		effect: {
			onStart(target, source, effect) {
				if (effect && effect.id === 'zpower') {
					this.add('-start', target, 'move: Focus Energy', '[zeffect]');
				} else if (effect && (['imposter', 'psychup', 'transform'].includes(effect.id))) {
					this.add('-start', target, 'move: Focus Energy', '[silent]');
				} else {
					this.add('-start', target, 'move: Focus Energy');
				}
			},
			onModifyCritRatio(critRatio) {
				return critRatio + 2;
			},
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMoveBoost: {accuracy: 1},
		contestType: "Cool",
	},
	"focuspunch": {
		num: 264,
		accuracy: 100,
		basePower: 150,
		category: "Physical",
		desc: "The user loses its focus and does nothing if it is hit by a damaging attack this turn before it can execute the move.",
		shortDesc: "Fails if the user takes damage before it hits.",
		id: "focuspunch",
		isViable: true,
		name: "Focus Punch",
		pp: 20,
		priority: -3,
		flags: {contact: 1, protect: 1, punch: 1},
		beforeTurnCallback(pokemon) {
			pokemon.addVolatile('focuspunch');
		},
		beforeMoveCallback(pokemon) {
			if (pokemon.volatiles['focuspunch'] && pokemon.volatiles['focuspunch'].lostFocus) {
				this.add('cant', pokemon, 'Focus Punch', 'Focus Punch');
				return true;
			}
		},
		effect: {
			duration: 1,
			onStart(pokemon) {
				this.add('-singleturn', pokemon, 'move: Focus Punch');
			},
			onHit(pokemon, source, move) {
				if (move.category !== 'Status') {
					pokemon.volatiles['focuspunch'].lostFocus = true;
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Fighting",
		zMovePower: 200,
		contestType: "Tough",
	},
	"followme": {
		num: 266,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Until the end of the turn, all single-target attacks from the opposing side are redirected to the user. Such attacks are redirected to the user before they can be reflected by Magic Coat or the Magic Bounce Ability, or drawn in by the Lightning Rod or Storm Drain Abilities. Fails if it is not a Double Battle or Battle Royal. This effect is ignored while the user is under the effect of Sky Drop.",
		shortDesc: "The foes' moves target the user on the turn used.",
		id: "followme",
		name: "Follow Me",
		pp: 20,
		priority: 2,
		flags: {},
		volatileStatus: 'followme',
		onTryHit(target) {
			if (target.side.active.length < 2) return false;
		},
		effect: {
			duration: 1,
			onStart(target, source, effect) {
				if (effect && effect.id === 'zpower') {
					this.add('-singleturn', target, 'move: Follow Me', '[zeffect]');
				} else {
					this.add('-singleturn', target, 'move: Follow Me');
				}
			},
			onFoeRedirectTargetPriority: 1,
			onFoeRedirectTarget(target, source, source2, move) {
				if (!this.effectData.target.isSkyDropped() && this.validTarget(this.effectData.target, source, move.target)) {
					this.debug("Follow Me redirected target of move");
					return this.effectData.target;
				}
			},
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Cute",
	},
	"forcepalm": {
		num: 395,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		desc: "Has a 30% chance to paralyze the target.",
		shortDesc: "30% chance to paralyze the target.",
		id: "forcepalm",
		name: "Force Palm",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			status: 'par',
		},
		target: "normal",
		type: "Fighting",
		zMovePower: 120,
		contestType: "Cool",
	},
	"foresight": {
		num: 193,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "As long as the target remains active, its evasiveness stat stage is ignored during accuracy checks against it if it is greater than 0, and Normal- and Fighting-type attacks can hit the target if it is a Ghost type. Fails if the target is already affected, or affected by Miracle Eye or Odor Sleuth.",
		shortDesc: "Fighting, Normal hit Ghost. Evasiveness ignored.",
		id: "foresight",
		name: "Foresight",
		pp: 40,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, authentic: 1},
		volatileStatus: 'foresight',
		onTryHit(target) {
			if (target.volatiles['miracleeye']) return false;
		},
		effect: {
			noCopy: true,
			onStart(pokemon) {
				this.add('-start', pokemon, 'Foresight');
			},
			onNegateImmunity(pokemon, type) {
				if (pokemon.hasType('Ghost') && ['Normal', 'Fighting'].includes(type)) return false;
			},
			onModifyBoost(boosts) {
				if (boosts.evasion && boosts.evasion > 0) {
					boosts.evasion = 0;
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMoveEffect: 'crit2',
		contestType: "Clever",
	},
	"forestscurse": {
		num: 571,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "Causes the Grass type to be added to the target, effectively making it have two or three types. Fails if the target is already a Grass type. If Trick-or-Treat adds a type to the target, it replaces the type added by this move and vice versa.",
		shortDesc: "Adds Grass to the target's type(s).",
		id: "forestscurse",
		name: "Forest's Curse",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, mystery: 1},
		onHit(target) {
			if (target.hasType('Grass')) return false;
			if (!target.addType('Grass')) return false;
			this.add('-start', target, 'typeadd', 'Grass', '[from] move: Forest\'s Curse');
		},
		secondary: null,
		target: "normal",
		type: "Grass",
		zMoveBoost: {atk: 1, def: 1, spa: 1, spd: 1, spe: 1},
		contestType: "Clever",
	},
	"foulplay": {
		num: 492,
		accuracy: 100,
		basePower: 95,
		category: "Physical",
		desc: "Damage is calculated using the target's Attack stat, including stat stage changes. The user's Ability, item, and burn are used as normal.",
		shortDesc: "Uses target's Attack stat in damage calculation.",
		id: "foulplay",
		isViable: true,
		name: "Foul Play",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		useTargetOffensive: true,
		secondary: null,
		target: "normal",
		type: "Dark",
		zMovePower: 175,
		contestType: "Clever",
	},
	"freezedry": {
		num: 573,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		desc: "Has a 10% chance to freeze the target. This move's type effectiveness against Water is changed to be super effective no matter what this move's type is.",
		shortDesc: "10% chance to freeze. Super effective on Water.",
		id: "freezedry",
		isViable: true,
		name: "Freeze-Dry",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onEffectiveness(typeMod, target, type) {
			if (type === 'Water') return 1;
		},
		secondary: {
			chance: 10,
			status: 'frz',
		},
		target: "normal",
		type: "Ice",
		zMovePower: 140,
		contestType: "Beautiful",
	},
	"freezeshock": {
		num: 553,
		accuracy: 90,
		basePower: 140,
		category: "Physical",
		desc: "Has a 30% chance to paralyze the target. This attack charges on the first turn and executes on the second. If the user is holding a Power Herb, the move completes in one turn.",
		shortDesc: "Charges turn 1. Hits turn 2. 30% paralyze.",
		id: "freezeshock",
		name: "Freeze Shock",
		pp: 5,
		priority: 0,
		flags: {charge: 1, protect: 1, mirror: 1},
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name, defender);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		secondary: {
			chance: 30,
			status: 'par',
		},
		target: "normal",
		type: "Ice",
		zMovePower: 200,
		contestType: "Beautiful",
	},
	"freezyfrost": {
		num: 739,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		desc: "Resets the stat stages of all active Pokemon to 0.",
		shortDesc: "Eliminates all stat changes.",
		id: "freezyfrost",
		isNonstandard: "LGPE",
		isUnreleased: true,
		isViable: true,
		name: "Freezy Frost",
		pp: 15,
		priority: 0,
		flags: {protect: 1},
		onHit() {
			this.add('-clearallboost');
			for (const pokemon of this.getAllActive()) {
				pokemon.clearBoosts();
			}
		},
		secondary: null,
		target: "normal",
		type: "Ice",
		contestType: "Clever",
	},
	"frenzyplant": {
		num: 338,
		accuracy: 90,
		basePower: 150,
		category: "Special",
		desc: "If this move is successful, the user must recharge on the following turn and cannot select a move.",
		shortDesc: "User cannot move next turn.",
		id: "frenzyplant",
		name: "Frenzy Plant",
		pp: 5,
		priority: 0,
		flags: {recharge: 1, protect: 1, mirror: 1, nonsky: 1},
		self: {
			volatileStatus: 'mustrecharge',
		},
		secondary: null,
		target: "normal",
		type: "Grass",
		zMovePower: 200,
		contestType: "Cool",
	},
	"frostbreath": {
		num: 524,
		accuracy: 90,
		basePower: 60,
		category: "Special",
		desc: "This move is always a critical hit unless the target is under the effect of Lucky Chant or has the Battle Armor or Shell Armor Abilities.",
		shortDesc: "Always results in a critical hit.",
		id: "frostbreath",
		name: "Frost Breath",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		willCrit: true,
		secondary: null,
		target: "normal",
		type: "Ice",
		zMovePower: 120,
		contestType: "Beautiful",
	},
	"frustration": {
		num: 218,
		accuracy: 100,
		basePower: 0,
		basePowerCallback(pokemon) {
			return Math.floor(((255 - pokemon.happiness) * 10) / 25) || 1;
		},
		category: "Physical",
		desc: "Power is equal to the greater of ((255 - user's Happiness) * 2/5), rounded down, or 1.",
		shortDesc: "Max 102 power at minimum Happiness.",
		id: "frustration",
		isViable: true,
		name: "Frustration",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 160,
		contestType: "Cute",
	},
	"furyattack": {
		num: 31,
		accuracy: 85,
		basePower: 15,
		category: "Physical",
		desc: "Hits two to five times. Has a 1/3 chance to hit two or three times, and a 1/6 chance to hit four or five times. If one of the hits breaks the target's substitute, it will take damage for the remaining hits. If the user has the Skill Link Ability, this move will always hit five times.",
		shortDesc: "Hits 2-5 times in one turn.",
		id: "furyattack",
		name: "Fury Attack",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 100,
		contestType: "Cool",
	},
	"furycutter": {
		num: 210,
		accuracy: 95,
		basePower: 40,
		basePowerCallback(pokemon, target, move) {
			if (!pokemon.volatiles.furycutter || move.hit === 1) {
				pokemon.addVolatile('furycutter');
			}
			return this.clampIntRange(move.basePower * pokemon.volatiles.furycutter.multiplier, 1, 160);
		},
		category: "Physical",
		desc: "Power doubles with each successful hit, up to a maximum of 160 power. The power is reset if this move misses or another move is used.",
		shortDesc: "Power doubles with each hit, up to 160.",
		id: "furycutter",
		name: "Fury Cutter",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		effect: {
			duration: 2,
			onStart() {
				this.effectData.multiplier = 1;
			},
			onRestart() {
				if (this.effectData.multiplier < 4) {
					this.effectData.multiplier <<= 1;
				}
				this.effectData.duration = 2;
			},
		},
		secondary: null,
		target: "normal",
		type: "Bug",
		zMovePower: 100,
		contestType: "Cool",
	},
	"furyswipes": {
		num: 154,
		accuracy: 80,
		basePower: 18,
		category: "Physical",
		desc: "Hits two to five times. Has a 1/3 chance to hit two or three times, and a 1/6 chance to hit four or five times. If one of the hits breaks the target's substitute, it will take damage for the remaining hits. If the user has the Skill Link Ability, this move will always hit five times.",
		shortDesc: "Hits 2-5 times in one turn.",
		id: "furyswipes",
		name: "Fury Swipes",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 100,
		contestType: "Tough",
	},
	"fusionbolt": {
		num: 559,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		desc: "Power doubles if the last move used by any Pokemon this turn was Fusion Flare.",
		shortDesc: "Power doubles if used after Fusion Flare.",
		id: "fusionbolt",
		isViable: true,
		name: "Fusion Bolt",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onBasePower(basePower, pokemon) {
			if (this.lastMoveThisTurn && this.lastMoveThisTurn.id === 'fusionflare') {
				this.debug('double power');
				return this.chainModify(2);
			}
		},
		secondary: null,
		target: "normal",
		type: "Electric",
		zMovePower: 180,
		contestType: "Cool",
	},
	"fusionflare": {
		num: 558,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		desc: "Power doubles if the last move used by any Pokemon this turn was Fusion Bolt.",
		shortDesc: "Power doubles if used after Fusion Bolt.",
		id: "fusionflare",
		isViable: true,
		name: "Fusion Flare",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		onBasePower(basePower, pokemon) {
			if (this.lastMoveThisTurn && this.lastMoveThisTurn.id === 'fusionbolt') {
				this.debug('double power');
				return this.chainModify(2);
			}
		},
		secondary: null,
		target: "normal",
		type: "Fire",
		zMovePower: 180,
		contestType: "Beautiful",
	},
	"futuresight": {
		num: 248,
		accuracy: 100,
		basePower: 120,
		category: "Special",
		desc: "Deals damage two turns after this move is used. At the end of that turn, the damage is calculated at that time and dealt to the Pokemon at the position the target had when the move was used. If the user is no longer active at the time, damage is calculated based on the user's natural Special Attack stat, types, and level, with no boosts from its held item or Ability. Fails if this move or Doom Desire is already in effect for the target's position.",
		shortDesc: "Hits two turns after being used.",
		id: "futuresight",
		name: "Future Sight",
		pp: 10,
		priority: 0,
		flags: {},
		ignoreImmunity: true,
		isFutureMove: true,
		onTry(source, target) {
			if (!target.side.addSlotCondition(target, 'futuremove')) return false;
			Object.assign(target.side.slotConditions[target.position]['futuremove'], {
				duration: 3,
				move: 'futuresight',
				source: source,
				moveData: {
					id: 'futuresight',
					name: "Future Sight",
					accuracy: 100,
					basePower: 120,
					category: "Special",
					priority: 0,
					flags: {},
					ignoreImmunity: false,
					effectType: 'Move',
					isFutureMove: true,
					type: 'Psychic',
				},
			});
			this.add('-start', source, 'move: Future Sight');
			return null;
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMovePower: 190,
		contestType: "Clever",
	},
	"gastroacid": {
		num: 380,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "Causes the target's Ability to be rendered ineffective as long as it remains active. If the target uses Baton Pass, the replacement will remain under this effect. If the target's Ability is Battle Bond, Comatose, Disguise, Multitype, Power Construct, RKS System, Schooling, Shields Down, Stance Change, or Zen Mode, this move fails, and receiving the effect through Baton Pass ends the effect immediately.",
		shortDesc: "Nullifies the target's Ability.",
		id: "gastroacid",
		name: "Gastro Acid",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, mystery: 1},
		volatileStatus: 'gastroacid',
		onTryHit(pokemon) {
			let bannedAbilities = ['battlebond', 'comatose', 'disguise', 'multitype', 'powerconstruct', 'rkssystem', 'schooling', 'shieldsdown', 'stancechange', 'zenmode'];
			if (bannedAbilities.includes(pokemon.ability)) {
				return false;
			}
		},
		effect: {
			// Ability suppression implemented in Pokemon.ignoringAbility() within sim/pokemon.js
			onStart(pokemon) {
				this.add('-endability', pokemon);
				this.singleEvent('End', this.getAbility(pokemon.ability), pokemon.abilityData, pokemon, pokemon, 'gastroacid');
			},
		},
		secondary: null,
		target: "normal",
		type: "Poison",
		zMoveBoost: {spe: 1},
		contestType: "Tough",
	},
	"geargrind": {
		num: 544,
		accuracy: 85,
		basePower: 50,
		category: "Physical",
		desc: "Hits twice. If the first hit breaks the target's substitute, it will take damage for the second hit.",
		shortDesc: "Hits 2 times in one turn.",
		id: "geargrind",
		isViable: true,
		name: "Gear Grind",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		multihit: 2,
		secondary: null,
		target: "normal",
		type: "Steel",
		zMovePower: 180,
		contestType: "Clever",
	},
	"gearup": {
		num: 674,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Raises the Attack and Special Attack of Pokemon on the user's side with the Plus or Minus Abilities by 1 stage.",
		shortDesc: "Raises Atk, Sp. Atk of allies with Plus/Minus by 1.",
		id: "gearup",
		name: "Gear Up",
		pp: 20,
		priority: 0,
		flags: {snatch: 1, authentic: 1},
		onHitSide(side, source, move) {
			const targets = [];
			for (const pokemon of side.active) {
				if (pokemon.hasAbility(['plus', 'minus'])) {
					targets.push(pokemon);
				}
			}
			if (!targets.length) return false;
			let didSomething = false;
			for (const target of targets) {
				didSomething = this.boost({atk: 1, spa: 1}, target, source, move, false, true) || didSomething;
			}
			return didSomething;
		},
		secondary: null,
		target: "allySide",
		type: "Steel",
		zMoveBoost: {spa: 1},
		contestType: "Clever",
	},
	"genesissupernova": {
		num: 703,
		accuracy: true,
		basePower: 185,
		category: "Special",
		desc: "If this move is successful, the terrain becomes Psychic Terrain.",
		shortDesc: "Summons Psychic Terrain.",
		id: "genesissupernova",
		name: "Genesis Supernova",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "mewniumz",
		secondary: {
			chance: 100,
			self: {
				onHit() {
					this.field.setTerrain('psychicterrain');
				},
			},
		},
		target: "normal",
		type: "Psychic",
		contestType: "Cool",
	},
	"geomancy": {
		num: 601,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Raises the user's Special Attack, Special Defense, and Speed by 2 stages. This attack charges on the first turn and executes on the second. If the user is holding a Power Herb, the move completes in one turn.",
		shortDesc: "Charges, then raises SpA, SpD, Spe by 2 turn 2.",
		id: "geomancy",
		isViable: true,
		name: "Geomancy",
		pp: 10,
		priority: 0,
		flags: {charge: 1, nonsky: 1},
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name, defender);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		boosts: {
			spa: 2,
			spd: 2,
			spe: 2,
		},
		secondary: null,
		target: "self",
		type: "Fairy",
		zMoveBoost: {atk: 1, def: 1, spa: 1, spd: 1, spe: 1},
		contestType: "Beautiful",
	},
	"gigadrain": {
		num: 202,
		accuracy: 100,
		basePower: 75,
		category: "Special",
		desc: "The user recovers 1/2 the HP lost by the target, rounded half up. If Big Root is held by the user, the HP recovered is 1.3x normal, rounded half down.",
		shortDesc: "User recovers 50% of the damage dealt.",
		id: "gigadrain",
		isViable: true,
		name: "Giga Drain",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, heal: 1},
		drain: [1, 2],
		secondary: null,
		target: "normal",
		type: "Grass",
		zMovePower: 140,
		contestType: "Clever",
	},
	"gigaimpact": {
		num: 416,
		accuracy: 90,
		basePower: 150,
		category: "Physical",
		desc: "If this move is successful, the user must recharge on the following turn and cannot select a move.",
		shortDesc: "User cannot move next turn.",
		id: "gigaimpact",
		name: "Giga Impact",
		pp: 5,
		priority: 0,
		flags: {contact: 1, recharge: 1, protect: 1, mirror: 1},
		self: {
			volatileStatus: 'mustrecharge',
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 200,
		contestType: "Tough",
	},
	"gigavolthavoc": {
		num: 646,
		accuracy: true,
		basePower: 1,
		category: "Physical",
		shortDesc: "Power is equal to the base move's Z-Power.",
		id: "gigavolthavoc",
		isViable: true,
		name: "Gigavolt Havoc",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "electriumz",
		secondary: null,
		target: "normal",
		type: "Electric",
		contestType: "Cool",
	},
	"glaciate": {
		num: 549,
		accuracy: 95,
		basePower: 65,
		category: "Special",
		desc: "Has a 100% chance to lower the target's Speed by 1 stage.",
		shortDesc: "100% chance to lower the foe(s) Speed by 1.",
		id: "glaciate",
		name: "Glaciate",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				spe: -1,
			},
		},
		target: "allAdjacentFoes",
		type: "Ice",
		zMovePower: 120,
		contestType: "Beautiful",
	},
	"glare": {
		num: 137,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "Paralyzes the target.",
		shortDesc: "Paralyzes the target.",
		id: "glare",
		isViable: true,
		name: "Glare",
		pp: 30,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		status: 'par',
		secondary: null,
		target: "normal",
		type: "Normal",
		zMoveBoost: {spd: 1},
		contestType: "Tough",
	},
	"glitzyglow": {
		num: 736,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		desc: "This move summons Light Screen for 5 turns upon use.",
		shortDesc: "Summons Light Screen.",
		id: "glitzyglow",
		isNonstandard: "LGPE",
		isUnreleased: true,
		isViable: true,
		name: "Glitzy Glow",
		pp: 15,
		priority: 0,
		flags: {protect: 1},
		self: {
			sideCondition: 'lightscreen',
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		contestType: "Clever",
	},
	"grassknot": {
		num: 447,
		accuracy: 100,
		basePower: 0,
		basePowerCallback(pokemon, target) {
			let targetWeight = target.getWeight();
			if (targetWeight >= 200) {
				this.debug('120 bp');
				return 120;
			}
			if (targetWeight >= 100) {
				this.debug('100 bp');
				return 100;
			}
			if (targetWeight >= 50) {
				this.debug('80 bp');
				return 80;
			}
			if (targetWeight >= 25) {
				this.debug('60 bp');
				return 60;
			}
			if (targetWeight >= 10) {
				this.debug('40 bp');
				return 40;
			}
			this.debug('20 bp');
			return 20;
		},
		category: "Special",
		desc: "This move's power is 20 if the target weighs less than 10 kg, 40 if less than 25 kg, 60 if less than 50 kg, 80 if less than 100 kg, 100 if less than 200 kg, and 120 if greater than or equal to 200 kg.",
		shortDesc: "More power the heavier the target.",
		id: "grassknot",
		isViable: true,
		name: "Grass Knot",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, nonsky: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		zMovePower: 160,
		contestType: "Cute",
	},
	"grasspledge": {
		num: 520,
		accuracy: 100,
		basePower: 80,
		basePowerCallback(target, source, move) {
			if (['waterpledge', 'firepledge'].includes(move.sourceEffect)) {
				this.add('-combine');
				return 150;
			}
			return 80;
		},
		category: "Special",
		desc: "If one of the user's allies chose to use Fire Pledge or Water Pledge this turn and has not moved yet, it takes its turn immediately after the user and the user's move does nothing. If combined with Fire Pledge, the ally uses Fire Pledge with 150 power and a sea of fire appears on the target's side for 4 turns, which causes damage to non-Fire types equal to 1/8 of their maximum HP, rounded down, at the end of each turn during effect, including the last turn. If combined with Water Pledge, the ally uses Grass Pledge with 150 power and a swamp appears on the target's side for 4 turns, which quarters the Speed of each Pokemon on that side. When used as a combined move, this move gains STAB no matter what the user's type is. This move does not consume the user's Grass Gem.",
		shortDesc: "Use with Fire or Water Pledge for added effect.",
		id: "grasspledge",
		name: "Grass Pledge",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, nonsky: 1},
		onPrepareHit(target, source, move) {
			for (const action of this.queue) {
				// @ts-ignore
				if (!action.move || !action.pokemon || !action.pokemon.isActive || action.pokemon.fainted) continue;
				// @ts-ignore
				if (action.pokemon.side === source.side && ['waterpledge', 'firepledge'].includes(action.move.id)) {
					// @ts-ignore
					this.prioritizeAction(action);
					this.add('-waiting', source, action.pokemon);
					return null;
				}
			}
		},
		onModifyMove(move) {
			if (move.sourceEffect === 'waterpledge') {
				move.type = 'Grass';
				move.forceSTAB = true;
			}
			if (move.sourceEffect === 'firepledge') {
				move.type = 'Fire';
				move.forceSTAB = true;
			}
		},
		onHit(target, source, move) {
			if (move.sourceEffect === 'waterpledge') {
				target.side.addSideCondition('grasspledge');
			}
			if (move.sourceEffect === 'firepledge') {
				target.side.addSideCondition('firepledge');
			}
		},
		effect: {
			duration: 4,
			onStart(targetSide) {
				this.add('-sidestart', targetSide, 'Grass Pledge');
			},
			onEnd(targetSide) {
				this.add('-sideend', targetSide, 'Grass Pledge');
			},
			onModifySpe(spe, pokemon) {
				return this.chainModify(0.25);
			},
		},
		secondary: null,
		target: "normal",
		type: "Grass",
		zMovePower: 160,
		contestType: "Beautiful",
	},
	"grasswhistle": {
		num: 320,
		accuracy: 55,
		basePower: 0,
		category: "Status",
		shortDesc: "Causes the target to fall asleep.",
		id: "grasswhistle",
		name: "Grass Whistle",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, sound: 1, authentic: 1},
		status: 'slp',
		secondary: null,
		target: "normal",
		type: "Grass",
		zMoveBoost: {spe: 1},
		contestType: "Clever",
	},
	"grassyterrain": {
		num: 580,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "For 5 turns, the terrain becomes Grassy Terrain. During the effect, the power of Grass-type attacks used by grounded Pokemon is multiplied by 1.5, the power of Bulldoze, Earthquake, and Magnitude used against grounded Pokemon is multiplied by 0.5, and grounded Pokemon have 1/16 of their maximum HP, rounded down, restored at the end of each turn, including the last turn. Camouflage transforms the user into a Grass type, Nature Power becomes Energy Ball, and Secret Power has a 30% chance to cause sleep. Fails if the current terrain is Grassy Terrain.",
		shortDesc: "5 turns. Grounded: +Grass power,+1/16 max HP.",
		id: "grassyterrain",
		name: "Grassy Terrain",
		pp: 10,
		priority: 0,
		flags: {nonsky: 1},
		terrain: 'grassyterrain',
		effect: {
			duration: 5,
			durationCallback(source, effect) {
				if (source && source.hasItem('terrainextender')) {
					return 8;
				}
				return 5;
			},
			onBasePower(basePower, attacker, defender, move) {
				let weakenedMoves = ['earthquake', 'bulldoze', 'magnitude'];
				if (weakenedMoves.includes(move.id)) {
					this.debug('move weakened by grassy terrain');
					return this.chainModify(0.5);
				}
				if (move.type === 'Grass' && attacker.isGrounded()) {
					this.debug('grassy terrain boost');
					return this.chainModify(1.5);
				}
			},
			onStart(battle, source, effect) {
				if (effect && effect.effectType === 'Ability') {
					this.add('-fieldstart', 'move: Grassy Terrain', '[from] ability: ' + effect, '[of] ' + source);
				} else {
					this.add('-fieldstart', 'move: Grassy Terrain');
				}
			},
			onResidualOrder: 5,
			onResidualSubOrder: 3,
			onResidual() {
				this.eachEvent('Terrain');
			},
			onTerrain(pokemon) {
				if (pokemon.isGrounded() && !pokemon.isSemiInvulnerable()) {
					this.debug('Pokemon is grounded, healing through Grassy Terrain.');
					this.heal(pokemon.maxhp / 16, pokemon, pokemon);
				}
			},
			onEnd() {
				if (!this.effectData.duration) this.eachEvent('Terrain');
				this.add('-fieldend', 'move: Grassy Terrain');
			},
		},
		secondary: null,
		target: "all",
		type: "Grass",
		zMoveBoost: {def: 1},
		contestType: "Beautiful",
	},
	"gravity": {
		num: 356,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "For 5 turns, the evasiveness of all active Pokemon is multiplied by 0.6. At the time of use, Bounce, Fly, Magnet Rise, Sky Drop, and Telekinesis end immediately for all active Pokemon. During the effect, Bounce, Fly, Flying Press, High Jump Kick, Jump Kick, Magnet Rise, Sky Drop, Splash, and Telekinesis are prevented from being used by all active Pokemon. Ground-type attacks, Spikes, Toxic Spikes, Sticky Web, and the Arena Trap Ability can affect Flying types or Pokemon with the Levitate Ability. Fails if this move is already in effect.",
		shortDesc: "For 5 turns, negates all Ground immunities.",
		id: "gravity",
		name: "Gravity",
		pp: 5,
		priority: 0,
		flags: {nonsky: 1},
		pseudoWeather: 'gravity',
		effect: {
			duration: 5,
			durationCallback(source, effect) {
				if (source && source.hasAbility('persistent')) {
					this.add('-activate', source, 'ability: Persistent', effect);
					return 7;
				}
				return 5;
			},
			onStart() {
				this.add('-fieldstart', 'move: Gravity');
				for (const pokemon of this.getAllActive()) {
					let applies = false;
					if (pokemon.removeVolatile('bounce') || pokemon.removeVolatile('fly')) {
						applies = true;
						this.cancelMove(pokemon);
						pokemon.removeVolatile('twoturnmove');
					}
					if (pokemon.volatiles['skydrop']) {
						applies = true;
						this.cancelMove(pokemon);

						if (pokemon.volatiles['skydrop'].source) {
							this.add('-end', pokemon.volatiles['twoturnmove'].source, 'Sky Drop', '[interrupt]');
						}
						pokemon.removeVolatile('skydrop');
						pokemon.removeVolatile('twoturnmove');
					}
					if (pokemon.volatiles['magnetrise']) {
						applies = true;
						delete pokemon.volatiles['magnetrise'];
					}
					if (pokemon.volatiles['telekinesis']) {
						applies = true;
						delete pokemon.volatiles['telekinesis'];
					}
					if (applies) this.add('-activate', pokemon, 'move: Gravity');
				}
			},
			onModifyAccuracy(accuracy) {
				if (typeof accuracy !== 'number') return;
				return accuracy * 5 / 3;
			},
			onDisableMove(pokemon) {
				for (const moveSlot of pokemon.moveSlots) {
					if (this.getMove(moveSlot.id).flags['gravity']) {
						pokemon.disableMove(moveSlot.id);
					}
				}
			},
			// groundedness implemented in battle.engine.js:BattlePokemon#isGrounded
			onBeforeMovePriority: 6,
			onBeforeMove(pokemon, target, move) {
				if (move.flags['gravity']) {
					this.add('cant', pokemon, 'move: Gravity', move);
					return false;
				}
			},
			onResidualOrder: 22,
			onEnd() {
				this.add('-fieldend', 'move: Gravity');
			},
		},
		secondary: null,
		target: "all",
		type: "Psychic",
		zMoveBoost: {spa: 1},
		contestType: "Clever",
	},
	"growl": {
		num: 45,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "Lowers the target's Attack by 1 stage.",
		shortDesc: "Lowers the foe(s) Attack by 1.",
		id: "growl",
		name: "Growl",
		pp: 40,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, sound: 1, authentic: 1},
		boosts: {
			atk: -1,
		},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Normal",
		zMoveBoost: {def: 1},
		contestType: "Cute",
	},
	"growth": {
		num: 74,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Raises the user's Attack and Special Attack by 1 stage. If the weather is Sunny Day, raises the user's Attack and Special Attack by 2 stages.",
		shortDesc: "Raises user's Attack and Sp. Atk by 1; 2 in Sun.",
		id: "growth",
		name: "Growth",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		onModifyMove(move) {
			if (this.field.isWeather(['sunnyday', 'desolateland'])) move.boosts = {atk: 2, spa: 2};
		},
		boosts: {
			atk: 1,
			spa: 1,
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMoveBoost: {spa: 1},
		contestType: "Beautiful",
	},
	"grudge": {
		num: 288,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Until the user's next turn, if an opposing Pokemon's attack knocks the user out, that move loses all its remaining PP.",
		shortDesc: "If the user faints, the attack used loses all its PP.",
		id: "grudge",
		name: "Grudge",
		pp: 5,
		priority: 0,
		flags: {authentic: 1},
		volatileStatus: 'grudge',
		effect: {
			onStart(pokemon) {
				this.add('-singlemove', pokemon, 'Grudge');
			},
			onFaint(target, source, effect) {
				if (!source || source.fainted || !effect) return;
				if (effect.effectType === 'Move' && !effect.isFutureMove && source.lastMove) {
					for (const moveSlot of source.moveSlots) {
						if (moveSlot.id === source.lastMove.id) {
							moveSlot.pp = 0;
							this.add('-activate', source, 'move: Grudge', this.getMove(source.lastMove.id).name);
						}
					}
				}
			},
			onBeforeMovePriority: 100,
			onBeforeMove(pokemon) {
				this.debug('removing Grudge before attack');
				pokemon.removeVolatile('grudge');
			},
		},
		secondary: null,
		target: "self",
		type: "Ghost",
		zMoveEffect: 'redirect',
		contestType: "Tough",
	},
	"guardsplit": {
		num: 470,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user and the target have their Defense and Special Defense stats set to be equal to the average of the user and the target's Defense and Special Defense stats, respectively, rounded down. Stat stage changes are unaffected.",
		shortDesc: "Averages Defense and Sp. Def stats with target.",
		id: "guardsplit",
		name: "Guard Split",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mystery: 1},
		onHit(target, source) {
			let newdef = Math.floor((target.storedStats.def + source.storedStats.def) / 2);
			target.storedStats.def = newdef;
			source.storedStats.def = newdef;
			let newspd = Math.floor((target.storedStats.spd + source.storedStats.spd) / 2);
			target.storedStats.spd = newspd;
			source.storedStats.spd = newspd;
			this.add('-activate', source, 'move: Guard Split', '[of] ' + target);
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMoveBoost: {spe: 1},
		contestType: "Clever",
	},
	"guardswap": {
		num: 385,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user swaps its Defense and Special Defense stat stage changes with the target.",
		shortDesc: "Swaps Defense and Sp. Def changes with target.",
		id: "guardswap",
		name: "Guard Swap",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, authentic: 1, mystery: 1},
		onHit(target, source) {
			let targetBoosts = {};
			let sourceBoosts = {};

			for (const stat of ['def', 'spd']) {
				// @ts-ignore
				targetBoosts[stat] = target.boosts[stat];
				// @ts-ignore
				sourceBoosts[stat] = source.boosts[stat];
			}

			source.setBoost(targetBoosts);
			target.setBoost(sourceBoosts);

			this.add('-swapboost', source, target, 'def, spd', '[from] move: Guard Swap');
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMoveBoost: {spe: 1},
		contestType: "Clever",
	},
	"guardianofalola": {
		num: 698,
		accuracy: true,
		basePower: 0,
		damageCallback(pokemon, target) {
			if (target.volatiles['banefulbunker'] || target.volatiles['kingsshield'] || target.side.getSideCondition('matblock') || target.volatiles['protect'] || target.volatiles['spikyshield']) {
				this.add('-zbroken', target);
				return this.clampIntRange(Math.ceil(Math.floor(target.hp * 3 / 4) / 4 - 0.5), 1);
			}
			return this.clampIntRange(Math.floor(target.hp * 3 / 4), 1);
		},
		category: "Special",
		desc: "Deals damage to the target equal to 3/4 of its current HP, rounded down, but not less than 1 HP.",
		shortDesc: "Does damage equal to 3/4 target's current HP.",
		id: "guardianofalola",
		name: "Guardian of Alola",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "tapuniumz",
		secondary: null,
		target: "normal",
		type: "Fairy",
		contestType: "Tough",
	},
	"guillotine": {
		num: 12,
		accuracy: 30,
		basePower: 0,
		category: "Physical",
		desc: "Deals damage to the target equal to the target's maximum HP. Ignores accuracy and evasiveness modifiers. This attack's accuracy is equal to (user's level - target's level + 30)%, and fails if the target is at a higher level. Pokemon with the Sturdy Ability are immune.",
		shortDesc: "OHKOs the target. Fails if user is a lower level.",
		id: "guillotine",
		name: "Guillotine",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		ohko: true,
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 180,
		contestType: "Cool",
	},
	"gunkshot": {
		num: 441,
		accuracy: 80,
		basePower: 120,
		category: "Physical",
		desc: "Has a 30% chance to poison the target.",
		shortDesc: "30% chance to poison the target.",
		id: "gunkshot",
		isViable: true,
		name: "Gunk Shot",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			status: 'psn',
		},
		target: "normal",
		type: "Poison",
		zMovePower: 190,
		contestType: "Tough",
	},
	"gust": {
		num: 16,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		desc: "Power doubles if the target is using Bounce, Fly, or Sky Drop, or is under the effect of Sky Drop.",
		shortDesc: "Power doubles during Bounce, Fly, and Sky Drop.",
		id: "gust",
		name: "Gust",
		pp: 35,
		priority: 0,
		flags: {protect: 1, mirror: 1, distance: 1},
		secondary: null,
		target: "any",
		type: "Flying",
		zMovePower: 100,
		contestType: "Clever",
	},
	"gyroball": {
		num: 360,
		accuracy: 100,
		basePower: 0,
		basePowerCallback(pokemon, target) {
			let power = (Math.floor(25 * target.getStat('spe') / pokemon.getStat('spe')) || 1);
			if (power > 150) power = 150;
			this.debug('' + power + ' bp');
			return power;
		},
		category: "Physical",
		desc: "Power is equal to (25 * target's current Speed / user's current Speed) + 1, rounded down, but not more than 150. If the user's current Speed is 0, this move's power is 1.",
		shortDesc: "More power the slower the user than the target.",
		id: "gyroball",
		isViable: true,
		name: "Gyro Ball",
		pp: 5,
		priority: 0,
		flags: {bullet: 1, contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		zMovePower: 160,
		contestType: "Cool",
	},
	"hail": {
		num: 258,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "For 5 turns, the weather becomes Hail. At the end of each turn except the last, all active Pokemon lose 1/16 of their maximum HP, rounded down, unless they are an Ice type or have the Ice Body, Magic Guard, Overcoat, or Snow Cloak Abilities. Lasts for 8 turns if the user is holding Icy Rock. Fails if the current weather is Hail.",
		shortDesc: "For 5 turns, hail crashes down.",
		id: "hail",
		name: "Hail",
		pp: 10,
		priority: 0,
		flags: {},
		weather: 'hail',
		secondary: null,
		target: "all",
		type: "Ice",
		zMoveBoost: {spe: 1},
		contestType: "Beautiful",
	},
	"hammerarm": {
		num: 359,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		desc: "Lowers the user's Speed by 1 stage.",
		shortDesc: "Lowers the user's Speed by 1.",
		id: "hammerarm",
		isViable: true,
		name: "Hammer Arm",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		self: {
			boosts: {
				spe: -1,
			},
		},
		secondary: null,
		target: "normal",
		type: "Fighting",
		zMovePower: 180,
		contestType: "Tough",
	},
	"happyhour": {
		num: 603,
		accuracy: true,
		basePower: 0,
		category: "Status",
		shortDesc: "No competitive use.",
		id: "happyhour",
		name: "Happy Hour",
		pp: 30,
		priority: 0,
		flags: {},
		onTryHit(target, source) {
			this.add('-activate', target, 'move: Happy Hour');
		},
		secondary: null,
		target: "allySide",
		type: "Normal",
		zMoveBoost: {atk: 1, def: 1, spa: 1, spd: 1, spe: 1},
		contestType: "Cute",
	},
	"harden": {
		num: 106,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Raises the user's Defense by 1 stage.",
		shortDesc: "Raises the user's Defense by 1.",
		id: "harden",
		name: "Harden",
		pp: 30,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			def: 1,
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMoveBoost: {def: 1},
		contestType: "Tough",
	},
	"haze": {
		num: 114,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Resets the stat stages of all active Pokemon to 0.",
		shortDesc: "Eliminates all stat changes.",
		id: "haze",
		isViable: true,
		name: "Haze",
		pp: 30,
		priority: 0,
		flags: {authentic: 1},
		onHitField() {
			this.add('-clearallboost');
			for (const pokemon of this.getAllActive()) {
				pokemon.clearBoosts();
			}
		},
		secondary: null,
		target: "all",
		type: "Ice",
		zMoveEffect: 'heal',
		contestType: "Beautiful",
	},
	"headcharge": {
		num: 543,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		desc: "If the target lost HP, the user takes recoil damage equal to 1/4 the HP lost by the target, rounded half up, but not less than 1 HP.",
		shortDesc: "Has 1/4 recoil.",
		id: "headcharge",
		isViable: true,
		name: "Head Charge",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [1, 4],
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 190,
		contestType: "Tough",
	},
	"headsmash": {
		num: 457,
		accuracy: 80,
		basePower: 150,
		category: "Physical",
		desc: "If the target lost HP, the user takes recoil damage equal to 1/2 the HP lost by the target, rounded half up, but not less than 1 HP.",
		shortDesc: "Has 1/2 recoil.",
		id: "headsmash",
		isViable: true,
		name: "Head Smash",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [1, 2],
		secondary: null,
		target: "normal",
		type: "Rock",
		zMovePower: 200,
		contestType: "Tough",
	},
	"headbutt": {
		num: 29,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		desc: "Has a 30% chance to flinch the target.",
		shortDesc: "30% chance to flinch the target.",
		id: "headbutt",
		name: "Headbutt",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Normal",
		zMovePower: 140,
		contestType: "Tough",
	},
	"healbell": {
		num: 215,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Every Pokemon in the user's party is cured of its major status condition. Active Pokemon with the Soundproof Ability are not cured.",
		shortDesc: "Cures the user's party of all status conditions.",
		id: "healbell",
		isViable: true,
		name: "Heal Bell",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, sound: 1, distance: 1, authentic: 1},
		onHit(pokemon, source) {
			this.add('-activate', source, 'move: Heal Bell');
			let side = pokemon.side;
			let success = false;
			for (const ally of side.pokemon) {
				if (ally.hasAbility('soundproof')) continue;
				if (ally.cureStatus()) success = true;
			}
			return success;
		},
		target: "allyTeam",
		type: "Normal",
		zMoveEffect: 'heal',
		contestType: "Beautiful",
	},
	"healblock": {
		num: 377,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "For 5 turns, the target is prevented from restoring any HP as long as it remains active. During the effect, healing and draining moves are unusable, and Abilities and items that grant healing will not heal the user. If an affected Pokemon uses Baton Pass, the replacement will remain unable to restore its HP. Pain Split and the Regenerator Ability are unaffected.",
		shortDesc: "For 5 turns, the foe(s) is prevented from healing.",
		id: "healblock",
		name: "Heal Block",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		volatileStatus: 'healblock',
		effect: {
			duration: 5,
			durationCallback(target, source, effect) {
				if (source && source.hasAbility('persistent')) {
					this.add('-activate', source, 'ability: Persistent', effect);
					return 7;
				}
				return 5;
			},
			onStart(pokemon) {
				this.add('-start', pokemon, 'move: Heal Block');
			},
			onDisableMove(pokemon) {
				for (const moveSlot of pokemon.moveSlots) {
					if (this.getMove(moveSlot.id).flags['heal']) {
						pokemon.disableMove(moveSlot.id);
					}
				}
			},
			onBeforeMovePriority: 6,
			onBeforeMove(pokemon, target, move) {
				if (move.flags['heal'] && !move.isZ) {
					this.add('cant', pokemon, 'move: Heal Block', move);
					return false;
				}
			},
			onResidualOrder: 17,
			onEnd(pokemon) {
				this.add('-end', pokemon, 'move: Heal Block');
			},
			onTryHeal(damage, target, source, effect) {
				if ((effect && effect.id === 'zpower') || this.effectData.isZ) return damage;
				return false;
			},
		},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Psychic",
		zMoveBoost: {spa: 2},
		contestType: "Clever",
	},
	"healorder": {
		num: 456,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user restores 1/2 of its maximum HP, rounded half up.",
		shortDesc: "Heals the user by 50% of its max HP.",
		id: "healorder",
		isViable: true,
		name: "Heal Order",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		heal: [1, 2],
		secondary: null,
		target: "self",
		type: "Bug",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Clever",
	},
	"healpulse": {
		num: 505,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The target restores 1/2 of its maximum HP, rounded half up. If the user has the Mega Launcher Ability, the target instead restores 3/4 of its maximum HP, rounded half down.",
		shortDesc: "Heals the target by 50% of its max HP.",
		id: "healpulse",
		name: "Heal Pulse",
		pp: 10,
		priority: 0,
		flags: {protect: 1, pulse: 1, reflectable: 1, distance: 1, heal: 1, mystery: 1},
		onHit(target, source) {
			let success = false;
			if (source.hasAbility('megalauncher')) {
				success = !!this.heal(this.modify(target.maxhp, 0.75));
			} else {
				success = !!this.heal(Math.ceil(target.maxhp * 0.5));
			}
			if (success && target.side.id !== source.side.id) {
				target.staleness = 'external';
			}
			return success;
		},
		secondary: null,
		target: "any",
		type: "Psychic",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Beautiful",
	},
	"healingwish": {
		num: 361,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user faints and the Pokemon brought out to replace it has its HP fully restored along with having any major status condition cured. The new Pokemon is sent out at the end of the turn, and the healing happens before hazards take effect. Fails if the user is the last unfainted Pokemon in its party.",
		shortDesc: "User faints. Replacement is fully healed.",
		id: "healingwish",
		isViable: true,
		name: "Healing Wish",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		onTryHit(pokemon, target, move) {
			if (!this.canSwitch(pokemon.side)) {
				delete move.selfdestruct;
				return false;
			}
		},
		selfdestruct: "ifHit",
		slotCondition: 'healingwish',
		effect: {
			duration: 2,
			onSwitchInPriority: 1,
			onSwitchIn(target) {
				if (!target.fainted) {
					target.heal(target.maxhp);
					target.setStatus('');
					this.add('-heal', target, target.getHealth, '[from] move: Healing Wish');
					target.side.removeSlotCondition(target, 'healingwish');
				}
			},
		},
		secondary: null,
		target: "self",
		type: "Psychic",
		contestType: "Beautiful",
	},
	"heartstamp": {
		num: 531,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		desc: "Has a 30% chance to flinch the target.",
		shortDesc: "30% chance to flinch the target.",
		id: "heartstamp",
		name: "Heart Stamp",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Psychic",
		zMovePower: 120,
		contestType: "Cute",
	},
	"heartswap": {
		num: 391,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user swaps all its stat stage changes with the target.",
		shortDesc: "Swaps all stat changes with target.",
		id: "heartswap",
		name: "Heart Swap",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, authentic: 1, mystery: 1},
		onHit(target, source) {
			let targetBoosts = {};
			let sourceBoosts = {};

			for (let i in target.boosts) {
				// @ts-ignore
				targetBoosts[i] = target.boosts[i];
				// @ts-ignore
				sourceBoosts[i] = source.boosts[i];
			}

			target.setBoost(sourceBoosts);
			source.setBoost(targetBoosts);

			this.add('-swapboost', source, target, '[from] move: Heart Swap');
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMoveEffect: 'crit2',
		contestType: "Clever",
	},
	"heatcrash": {
		num: 535,
		accuracy: 100,
		basePower: 0,
		basePowerCallback(pokemon, target) {
			let targetWeight = target.getWeight();
			let pokemonWeight = pokemon.getWeight();
			if (pokemonWeight > targetWeight * 5) {
				return 120;
			}
			if (pokemonWeight > targetWeight * 4) {
				return 100;
			}
			if (pokemonWeight > targetWeight * 3) {
				return 80;
			}
			if (pokemonWeight > targetWeight * 2) {
				return 60;
			}
			return 40;
		},
		category: "Physical",
		desc: "The power of this move depends on (user's weight / target's weight), rounded down. Power is equal to 120 if the result is 5 or more, 100 if 4, 80 if 3, 60 if 2, and 40 if 1 or less. Damage doubles and no accuracy check is done if the target has used Minimize while active.",
		shortDesc: "More power the heavier the user than the target.",
		id: "heatcrash",
		name: "Heat Crash",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, nonsky: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		zMovePower: 160,
		contestType: "Tough",
	},
	"heatwave": {
		num: 257,
		accuracy: 90,
		basePower: 95,
		category: "Special",
		desc: "Has a 10% chance to burn the target.",
		shortDesc: "10% chance to burn the foe(s).",
		id: "heatwave",
		isViable: true,
		name: "Heat Wave",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			status: 'brn',
		},
		target: "allAdjacentFoes",
		type: "Fire",
		zMovePower: 175,
		contestType: "Beautiful",
	},
	"heavyslam": {
		num: 484,
		accuracy: 100,
		basePower: 0,
		basePowerCallback(pokemon, target) {
			let targetWeight = target.getWeight();
			let pokemonWeight = pokemon.getWeight();
			if (pokemonWeight > targetWeight * 5) {
				return 120;
			}
			if (pokemonWeight > targetWeight * 4) {
				return 100;
			}
			if (pokemonWeight > targetWeight * 3) {
				return 80;
			}
			if (pokemonWeight > targetWeight * 2) {
				return 60;
			}
			return 40;
		},
		category: "Physical",
		desc: "The power of this move depends on (user's weight / target's weight), rounded down. Power is equal to 120 if the result is 5 or more, 100 if 4, 80 if 3, 60 if 2, and 40 if 1 or less. Damage doubles and no accuracy check is done if the target has used Minimize while active.",
		shortDesc: "More power the heavier the user than the target.",
		id: "heavyslam",
		isViable: true,
		name: "Heavy Slam",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, nonsky: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		zMovePower: 160,
		contestType: "Tough",
	},
	"helpinghand": {
		num: 270,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The power of the target's attack this turn is multiplied by 1.5 (this effect is stackable). Fails if there is no ally adjacent to the user or if the ally already moved this turn, but does not fail if the ally is using a two-turn move.",
		shortDesc: "One adjacent ally's move power is 1.5x this turn.",
		id: "helpinghand",
		name: "Helping Hand",
		pp: 20,
		priority: 5,
		flags: {authentic: 1},
		volatileStatus: 'helpinghand',
		onTryHit(target) {
			if (!target.newlySwitched && !this.willMove(target)) return false;
		},
		effect: {
			duration: 1,
			onStart(target, source) {
				this.effectData.multiplier = 1.5;
				this.add('-singleturn', target, 'Helping Hand', '[of] ' + source);
			},
			onRestart(target, source) {
				this.effectData.multiplier *= 1.5;
				this.add('-singleturn', target, 'Helping Hand', '[of] ' + source);
			},
			onBasePowerPriority: 3,
			onBasePower(basePower) {
				this.debug('Boosting from Helping Hand: ' + this.effectData.multiplier);
				return this.chainModify(this.effectData.multiplier);
			},
		},
		secondary: null,
		target: "adjacentAlly",
		type: "Normal",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Clever",
	},
	"hex": {
		num: 506,
		accuracy: 100,
		basePower: 65,
		basePowerCallback(pokemon, target, move) {
			if (target.status || target.hasAbility('comatose')) return move.basePower * 2;
			return move.basePower;
		},
		category: "Special",
		desc: "Power doubles if the target has a major status condition.",
		shortDesc: "Power doubles if the target has a status ailment.",
		id: "hex",
		isViable: true,
		name: "Hex",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		zMovePower: 160,
		contestType: "Clever",
	},
	"hiddenpower": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		desc: "This move's type depends on the user's individual values (IVs), and can be any type but Fairy and Normal.",
		shortDesc: "Varies in type based on the user's IVs.",
		id: "hiddenpower",
		name: "Hidden Power",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onModifyMove(move, pokemon) {
			move.type = pokemon.hpType || 'Dark';
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 120,
		contestType: "Clever",
	},
	"hiddenpowerbug": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		desc: "",
		shortDesc: "",
		id: "hiddenpower",
		name: "Hidden Power Bug",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
		contestType: "Clever",
	},
	"hiddenpowerdark": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		desc: "",
		shortDesc: "",
		id: "hiddenpower",
		name: "Hidden Power Dark",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		contestType: "Clever",
	},
	"hiddenpowerdragon": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		desc: "",
		shortDesc: "",
		id: "hiddenpower",
		name: "Hidden Power Dragon",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		contestType: "Clever",
	},
	"hiddenpowerelectric": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		desc: "",
		shortDesc: "",
		id: "hiddenpower",
		isViable: true,
		name: "Hidden Power Electric",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
		contestType: "Clever",
	},
	"hiddenpowerfighting": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		desc: "",
		shortDesc: "",
		id: "hiddenpower",
		isViable: true,
		name: "Hidden Power Fighting",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		contestType: "Clever",
	},
	"hiddenpowerfire": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		desc: "",
		shortDesc: "",
		id: "hiddenpower",
		isViable: true,
		name: "Hidden Power Fire",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		contestType: "Clever",
	},
	"hiddenpowerflying": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		desc: "",
		shortDesc: "",
		id: "hiddenpower",
		name: "Hidden Power Flying",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Flying",
		contestType: "Clever",
	},
	"hiddenpowerghost": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		desc: "",
		shortDesc: "",
		id: "hiddenpower",
		name: "Hidden Power Ghost",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		contestType: "Clever",
	},
	"hiddenpowergrass": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		desc: "",
		shortDesc: "",
		id: "hiddenpower",
		isViable: true,
		name: "Hidden Power Grass",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		contestType: "Clever",
	},
	"hiddenpowerground": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		desc: "",
		shortDesc: "",
		id: "hiddenpower",
		name: "Hidden Power Ground",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ground",
		contestType: "Clever",
	},
	"hiddenpowerice": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		desc: "",
		shortDesc: "",
		id: "hiddenpower",
		isViable: true,
		name: "Hidden Power Ice",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		contestType: "Clever",
	},
	"hiddenpowerpoison": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		desc: "",
		shortDesc: "",
		id: "hiddenpower",
		name: "Hidden Power Poison",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		contestType: "Clever",
	},
	"hiddenpowerpsychic": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		desc: "",
		shortDesc: "",
		id: "hiddenpower",
		name: "Hidden Power Psychic",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		contestType: "Clever",
	},
	"hiddenpowerrock": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		desc: "",
		shortDesc: "",
		id: "hiddenpower",
		name: "Hidden Power Rock",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rock",
		contestType: "Clever",
	},
	"hiddenpowersteel": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		desc: "",
		shortDesc: "",
		id: "hiddenpower",
		name: "Hidden Power Steel",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		contestType: "Clever",
	},
	"hiddenpowerwater": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		desc: "",
		shortDesc: "",
		id: "hiddenpower",
		name: "Hidden Power Water",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		contestType: "Clever",
	},
	"highhorsepower": {
		num: 667,
		accuracy: 95,
		basePower: 95,
		category: "Physical",
		shortDesc: "No additional effect.",
		id: "highhorsepower",
		name: "High Horsepower",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ground",
		zMovePower: 175,
		contestType: "Tough",
	},
	"highjumpkick": {
		num: 136,
		accuracy: 90,
		basePower: 130,
		category: "Physical",
		desc: "If this attack is not successful, the user loses half of its maximum HP, rounded down, as crash damage. Pokemon with the Magic Guard Ability are unaffected by crash damage.",
		shortDesc: "User is hurt by 50% of its max HP if it misses.",
		id: "highjumpkick",
		isViable: true,
		name: "High Jump Kick",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, gravity: 1},
		hasCustomRecoil: true,
		onMoveFail(target, source, move) {
			this.damage(source.maxhp / 2, source, source, this.getEffect('High Jump Kick'));
		},
		secondary: null,
		target: "normal",
		type: "Fighting",
		zMovePower: 195,
		contestType: "Cool",
	},
	"holdback": {
		num: 610,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		desc: "Leaves the target with at least 1 HP.",
		shortDesc: "Always leaves the target with at least 1 HP.",
		id: "holdback",
		name: "Hold Back",
		pp: 40,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		noFaint: true,
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 100,
		contestType: "Cool",
	},
	"holdhands": {
		num: 615,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "No competitive use. Fails if there is no ally adjacent to the user.",
		shortDesc: "No competitive use.",
		id: "holdhands",
		name: "Hold Hands",
		pp: 40,
		priority: 0,
		flags: {authentic: 1},
		secondary: null,
		target: "adjacentAlly",
		type: "Normal",
		zMoveBoost: {atk: 1, def: 1, spa: 1, spd: 1, spe: 1},
		contestType: "Cute",
	},
	"honeclaws": {
		num: 468,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Raises the user's Attack and accuracy by 1 stage.",
		shortDesc: "Raises the user's Attack and accuracy by 1.",
		id: "honeclaws",
		isViable: true,
		name: "Hone Claws",
		pp: 15,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			atk: 1,
			accuracy: 1,
		},
		secondary: null,
		target: "self",
		type: "Dark",
		zMoveBoost: {atk: 1},
		contestType: "Cute",
	},
	"hornattack": {
		num: 30,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		shortDesc: "No additional effect.",
		id: "hornattack",
		name: "Horn Attack",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 120,
		contestType: "Cool",
	},
	"horndrill": {
		num: 32,
		accuracy: 30,
		basePower: 0,
		category: "Physical",
		desc: "Deals damage to the target equal to the target's maximum HP. Ignores accuracy and evasiveness modifiers. This attack's accuracy is equal to (user's level - target's level + 30)%, and fails if the target is at a higher level. Pokemon with the Sturdy Ability are immune.",
		shortDesc: "OHKOs the target. Fails if user is a lower level.",
		id: "horndrill",
		name: "Horn Drill",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		ohko: true,
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 180,
		contestType: "Cool",
	},
	"hornleech": {
		num: 532,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		desc: "The user recovers 1/2 the HP lost by the target, rounded half up. If Big Root is held by the user, the HP recovered is 1.3x normal, rounded half down.",
		shortDesc: "User recovers 50% of the damage dealt.",
		id: "hornleech",
		isViable: true,
		name: "Horn Leech",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, heal: 1},
		drain: [1, 2],
		secondary: null,
		target: "normal",
		type: "Grass",
		zMovePower: 140,
		contestType: "Tough",
	},
	"howl": {
		num: 336,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Raises the user's Attack by 1 stage.",
		shortDesc: "Raises the user's Attack by 1.",
		id: "howl",
		name: "Howl",
		pp: 40,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			atk: 1,
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMoveBoost: {atk: 1},
		contestType: "Cool",
	},
	"hurricane": {
		num: 542,
		accuracy: 70,
		basePower: 110,
		category: "Special",
		desc: "Has a 30% chance to confuse the target. This move can hit a target using Bounce, Fly, or Sky Drop, or is under the effect of Sky Drop. If the weather is Primordial Sea or Rain Dance, this move does not check accuracy. If the weather is Desolate Land or Sunny Day, this move's accuracy is 50%.",
		shortDesc: "30% chance to confuse target. Can't miss in rain.",
		id: "hurricane",
		isViable: true,
		name: "Hurricane",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, distance: 1},
		onModifyMove(move) {
			if (this.field.isWeather(['raindance', 'primordialsea'])) {
				move.accuracy = true;
			} else if (this.field.isWeather(['sunnyday', 'desolateland'])) {
				move.accuracy = 50;
			}
		},
		secondary: {
			chance: 30,
			volatileStatus: 'confusion',
		},
		target: "any",
		type: "Flying",
		zMovePower: 185,
		contestType: "Tough",
	},
	"hydrocannon": {
		num: 308,
		accuracy: 90,
		basePower: 150,
		category: "Special",
		desc: "If this move is successful, the user must recharge on the following turn and cannot select a move.",
		shortDesc: "User cannot move next turn.",
		id: "hydrocannon",
		name: "Hydro Cannon",
		pp: 5,
		priority: 0,
		flags: {recharge: 1, protect: 1, mirror: 1},
		self: {
			volatileStatus: 'mustrecharge',
		},
		secondary: null,
		target: "normal",
		type: "Water",
		zMovePower: 200,
		contestType: "Beautiful",
	},
	"hydropump": {
		num: 56,
		accuracy: 80,
		basePower: 110,
		category: "Special",
		shortDesc: "No additional effect.",
		id: "hydropump",
		isViable: true,
		name: "Hydro Pump",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		zMovePower: 185,
		contestType: "Beautiful",
	},
	"hydrovortex": {
		num: 642,
		accuracy: true,
		basePower: 1,
		category: "Physical",
		shortDesc: "Power is equal to the base move's Z-Power.",
		id: "hydrovortex",
		isViable: true,
		name: "Hydro Vortex",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "wateriumz",
		secondary: null,
		target: "normal",
		type: "Water",
		contestType: "Cool",
	},
	"hyperbeam": {
		num: 63,
		accuracy: 90,
		basePower: 150,
		category: "Special",
		desc: "If this move is successful, the user must recharge on the following turn and cannot select a move.",
		shortDesc: "User cannot move next turn.",
		id: "hyperbeam",
		name: "Hyper Beam",
		pp: 5,
		priority: 0,
		flags: {recharge: 1, protect: 1, mirror: 1},
		self: {
			volatileStatus: 'mustrecharge',
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 200,
		contestType: "Cool",
	},
	"hyperfang": {
		num: 158,
		accuracy: 90,
		basePower: 80,
		category: "Physical",
		desc: "Has a 10% chance to flinch the target.",
		shortDesc: "10% chance to flinch the target.",
		id: "hyperfang",
		name: "Hyper Fang",
		pp: 15,
		priority: 0,
		flags: {bite: 1, contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Normal",
		zMovePower: 160,
		contestType: "Cool",
	},
	"hyperspacefury": {
		num: 621,
		accuracy: true,
		basePower: 100,
		category: "Physical",
		desc: "Lowers the user's Defense by 1 stage. This move cannot be used successfully unless the user's current form, while considering Transform, is Hoopa Unbound. If this move is successful, it breaks through the target's Baneful Bunker, Detect, King's Shield, Protect, or Spiky Shield for this turn, allowing other Pokemon to attack the target normally. If the target's side is protected by Crafty Shield, Mat Block, Quick Guard, or Wide Guard, that protection is also broken for this turn and other Pokemon may attack the target's side normally.",
		shortDesc: "Hoopa-U: Lowers user's Def by 1; breaks protect.",
		id: "hyperspacefury",
		isViable: true,
		name: "Hyperspace Fury",
		pp: 5,
		priority: 0,
		flags: {mirror: 1, authentic: 1},
		breaksProtect: true,
		onTry(pokemon) {
			if (pokemon.template.species === 'Hoopa-Unbound') {
				return;
			}
			this.hint("Only a Pokemon whose form is Hoopa Unbound can use this move.");
			if (pokemon.template.species === 'Hoopa') {
				this.add('-fail', pokemon, 'move: Hyperspace Fury', '[forme]');
				return null;
			}
			this.add('-fail', pokemon, 'move: Hyperspace Fury');
			return null;
		},
		self: {
			boosts: {
				def: -1,
			},
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		zMovePower: 180,
		contestType: "Tough",
	},
	"hyperspacehole": {
		num: 593,
		accuracy: true,
		basePower: 80,
		category: "Special",
		desc: "If this move is successful, it breaks through the target's Baneful Bunker, Detect, King's Shield, Protect, or Spiky Shield for this turn, allowing other Pokemon to attack the target normally. If the target's side is protected by Crafty Shield, Mat Block, Quick Guard, or Wide Guard, that protection is also broken for this turn and other Pokemon may attack the target's side normally.",
		shortDesc: "Breaks the target's protection for this turn.",
		id: "hyperspacehole",
		name: "Hyperspace Hole",
		pp: 5,
		priority: 0,
		flags: {mirror: 1, authentic: 1},
		breaksProtect: true,
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMovePower: 160,
		contestType: "Clever",
	},
	"hypervoice": {
		num: 304,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		desc: "No additional effect.",
		shortDesc: "No additional effect. Hits adjacent foes.",
		id: "hypervoice",
		isViable: true,
		name: "Hyper Voice",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1, authentic: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Normal",
		zMovePower: 175,
		contestType: "Cool",
	},
	"hypnosis": {
		num: 95,
		accuracy: 60,
		basePower: 0,
		category: "Status",
		shortDesc: "Causes the target to fall asleep.",
		id: "hypnosis",
		name: "Hypnosis",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		status: 'slp',
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMoveBoost: {spe: 1},
		contestType: "Clever",
	},
	"iceball": {
		num: 301,
		accuracy: 90,
		basePower: 30,
		basePowerCallback(pokemon, target, move) {
			let bp = move.basePower;
			if (pokemon.volatiles.iceball && pokemon.volatiles.iceball.hitCount) {
				bp *= Math.pow(2, pokemon.volatiles.iceball.hitCount);
			}
			if (pokemon.status !== 'slp') pokemon.addVolatile('iceball');
			if (pokemon.volatiles.defensecurl) {
				bp *= 2;
			}
			this.debug("Ice Ball bp: " + bp);
			return bp;
		},
		category: "Physical",
		desc: "If this move is successful, the user is locked into this move and cannot make another move until it misses, 5 turns have passed, or the attack cannot be used. Power doubles with each successful hit of this move and doubles again if Defense Curl was used previously by the user. If this move is called by Sleep Talk, the move is used for one turn. If this move hits an active Disguise during the effect, the power multiplier is paused but the turn counter is not, potentially allowing the multiplier to be used on the user's next move after this effect ends.",
		shortDesc: "Power doubles with each hit. Repeats for 5 turns.",
		id: "iceball",
		name: "Ice Ball",
		pp: 20,
		priority: 0,
		flags: {bullet: 1, contact: 1, protect: 1, mirror: 1},
		effect: {
			duration: 2,
			onLockMove: 'iceball',
			onStart() {
				this.effectData.hitCount = 1;
			},
			onRestart() {
				this.effectData.hitCount++;
				if (this.effectData.hitCount < 5) {
					this.effectData.duration = 2;
				}
			},
			onResidual(target) {
				if (target.lastMove && target.lastMove.id === 'struggle') {
					// don't lock
					delete target.volatiles['iceball'];
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Ice",
		zMovePower: 100,
		contestType: "Beautiful",
	},
	"icebeam": {
		num: 58,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		desc: "Has a 10% chance to freeze the target.",
		shortDesc: "10% chance to freeze the target.",
		id: "icebeam",
		isViable: true,
		name: "Ice Beam",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			status: 'frz',
		},
		target: "normal",
		type: "Ice",
		zMovePower: 175,
		contestType: "Beautiful",
	},
	"iceburn": {
		num: 554,
		accuracy: 90,
		basePower: 140,
		category: "Special",
		desc: "Has a 30% chance to burn the target. This attack charges on the first turn and executes on the second. If the user is holding a Power Herb, the move completes in one turn.",
		shortDesc: "Charges turn 1. Hits turn 2. 30% burn.",
		id: "iceburn",
		name: "Ice Burn",
		pp: 5,
		priority: 0,
		flags: {charge: 1, protect: 1, mirror: 1},
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name, defender);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		secondary: {
			chance: 30,
			status: 'brn',
		},
		target: "normal",
		type: "Ice",
		zMovePower: 200,
		contestType: "Beautiful",
	},
	"icefang": {
		num: 423,
		accuracy: 95,
		basePower: 65,
		category: "Physical",
		desc: "Has a 10% chance to freeze the target and a 10% chance to flinch it.",
		shortDesc: "10% chance to freeze. 10% chance to flinch.",
		id: "icefang",
		isViable: true,
		name: "Ice Fang",
		pp: 15,
		priority: 0,
		flags: {bite: 1, contact: 1, protect: 1, mirror: 1},
		secondaries: [
			{
				chance: 10,
				status: 'frz',
			}, {
				chance: 10,
				volatileStatus: 'flinch',
			},
		],
		target: "normal",
		type: "Ice",
		zMovePower: 120,
		contestType: "Cool",
	},
	"icehammer": {
		num: 665,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		desc: "Lowers the user's Speed by 1 stage.",
		shortDesc: "Lowers the user's Speed by 1.",
		id: "icehammer",
		isViable: true,
		name: "Ice Hammer",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		self: {
			boosts: {
				spe: -1,
			},
		},
		secondary: null,
		target: "normal",
		type: "Ice",
		zMovePower: 180,
		contestType: "Tough",
	},
	"icepunch": {
		num: 8,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		desc: "Has a 10% chance to freeze the target.",
		shortDesc: "10% chance to freeze the target.",
		id: "icepunch",
		isViable: true,
		name: "Ice Punch",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: {
			chance: 10,
			status: 'frz',
		},
		target: "normal",
		type: "Ice",
		zMovePower: 140,
		contestType: "Beautiful",
	},
	"iceshard": {
		num: 420,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		desc: "No additional effect.",
		shortDesc: "Usually goes first.",
		id: "iceshard",
		isViable: true,
		name: "Ice Shard",
		pp: 30,
		priority: 1,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		zMovePower: 100,
		contestType: "Beautiful",
	},
	"iciclecrash": {
		num: 556,
		accuracy: 90,
		basePower: 85,
		category: "Physical",
		desc: "Has a 30% chance to flinch the target.",
		shortDesc: "30% chance to flinch the target.",
		id: "iciclecrash",
		isViable: true,
		name: "Icicle Crash",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Ice",
		zMovePower: 160,
		contestType: "Beautiful",
	},
	"iciclespear": {
		num: 333,
		accuracy: 100,
		basePower: 25,
		category: "Physical",
		desc: "Hits two to five times. Has a 1/3 chance to hit two or three times, and a 1/6 chance to hit four or five times. If one of the hits breaks the target's substitute, it will take damage for the remaining hits. If the user has the Skill Link Ability, this move will always hit five times.",
		shortDesc: "Hits 2-5 times in one turn.",
		id: "iciclespear",
		isViable: true,
		name: "Icicle Spear",
		pp: 30,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Ice",
		zMovePower: 140,
		contestType: "Beautiful",
	},
	"icywind": {
		num: 196,
		accuracy: 95,
		basePower: 55,
		category: "Special",
		desc: "Has a 100% chance to lower the target's Speed by 1 stage.",
		shortDesc: "100% chance to lower the foe(s) Speed by 1.",
		id: "icywind",
		name: "Icy Wind",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				spe: -1,
			},
		},
		target: "allAdjacentFoes",
		type: "Ice",
		zMovePower: 100,
		contestType: "Beautiful",
	},
	"imprison": {
		num: 286,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user prevents all opposing Pokemon from using any moves that the user also knows as long as the user remains active.",
		shortDesc: "No foe can use any move known by the user.",
		id: "imprison",
		name: "Imprison",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, authentic: 1},
		volatileStatus: 'imprison',
		effect: {
			noCopy: true,
			onStart(target) {
				this.add('-start', target, 'move: Imprison');
			},
			onFoeDisableMove(pokemon) {
				for (const moveSlot of this.effectData.source.moveSlots) {
					if (moveSlot.id === 'struggle') continue;
					pokemon.disableMove(moveSlot.id, 'hidden');
				}
				pokemon.maybeDisabled = true;
			},
			onFoeBeforeMovePriority: 4,
			onFoeBeforeMove(attacker, defender, move) {
				if (move.id !== 'struggle' && this.effectData.source.hasMove(move.id) && !move.isZ) {
					this.add('cant', attacker, 'move: Imprison', move);
					return false;
				}
			},
		},
		secondary: null,
		pressureTarget: "foeSide",
		target: "self",
		type: "Psychic",
		zMoveBoost: {spd: 2},
		contestType: "Clever",
	},
	"incinerate": {
		num: 510,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		desc: "The target loses its held item if it is a Berry or a Gem. This move cannot cause Pokemon with the Sticky Hold Ability to lose their held item. Items lost to this move cannot be regained with Recycle or the Harvest Ability.",
		shortDesc: "Destroys the foe(s) Berry/Gem.",
		id: "incinerate",
		name: "Incinerate",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onHit(pokemon, source) {
			let item = pokemon.getItem();
			if ((item.isBerry || item.isGem) && pokemon.takeItem(source)) {
				this.add('-enditem', pokemon, item.name, '[from] move: Incinerate');
			}
		},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Fire",
		zMovePower: 120,
		contestType: "Tough",
	},
	"inferno": {
		num: 517,
		accuracy: 50,
		basePower: 100,
		category: "Special",
		desc: "Has a 100% chance to burn the target.",
		shortDesc: "100% chance to burn the target.",
		id: "inferno",
		name: "Inferno",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			status: 'brn',
		},
		target: "normal",
		type: "Fire",
		zMovePower: 180,
		contestType: "Beautiful",
	},
	"infernooverdrive": {
		num: 640,
		accuracy: true,
		basePower: 1,
		category: "Physical",
		shortDesc: "Power is equal to the base move's Z-Power.",
		id: "infernooverdrive",
		isViable: true,
		name: "Inferno Overdrive",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "firiumz",
		secondary: null,
		target: "normal",
		type: "Fire",
		contestType: "Cool",
	},
	"infestation": {
		num: 611,
		accuracy: 100,
		basePower: 20,
		category: "Special",
		desc: "Prevents the target from switching for four or five turns (seven turns if the user is holding Grip Claw). Causes damage to the target equal to 1/8 of its maximum HP (1/6 if the user is holding Binding Band), rounded down, at the end of each turn during effect. The target can still switch out if it is holding Shed Shell or uses Baton Pass, Parting Shot, U-turn, or Volt Switch. The effect ends if either the user or the target leaves the field, or if the target uses Rapid Spin or Substitute successfully. This effect is not stackable or reset by using this or another binding move.",
		shortDesc: "Traps and damages the target for 4-5 turns.",
		id: "infestation",
		name: "Infestation",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Bug",
		zMovePower: 100,
		contestType: "Cute",
	},
	"ingrain": {
		num: 275,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user has 1/16 of its maximum HP restored at the end of each turn, but it is prevented from switching out and other Pokemon cannot force the user to switch out. The user can still switch out if it uses Baton Pass, Parting Shot, U-turn, or Volt Switch. If the user leaves the field using Baton Pass, the replacement will remain trapped and still receive the healing effect. During the effect, the user can be hit normally by Ground-type attacks and be affected by Spikes, Toxic Spikes, and Sticky Web, even if the user is a Flying type or has the Levitate Ability.",
		shortDesc: "Traps/grounds user; heals 1/16 max HP per turn.",
		id: "ingrain",
		name: "Ingrain",
		pp: 20,
		priority: 0,
		flags: {snatch: 1, nonsky: 1},
		volatileStatus: 'ingrain',
		effect: {
			onStart(pokemon) {
				this.add('-start', pokemon, 'move: Ingrain');
			},
			onResidualOrder: 7,
			onResidual(pokemon) {
				this.heal(pokemon.maxhp / 16);
			},
			onTrapPokemon(pokemon) {
				pokemon.tryTrap();
			},
			// groundedness implemented in battle.engine.js:BattlePokemon#isGrounded
			onDragOut(pokemon) {
				this.add('-activate', pokemon, 'move: Ingrain');
				return null;
			},
		},
		secondary: null,
		target: "self",
		type: "Grass",
		zMoveBoost: {spd: 1},
		contestType: "Clever",
	},
	"instruct": {
		num: 689,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The target immediately uses its last used move. Fails if the target has not made a move, if the move has 0 PP, if the target is preparing to use Beak Blast, Focus Punch, or Shell Trap, or if the move is Assist, Beak Blast, Belch, Bide, Celebrate, Copycat, Focus Punch, Ice Ball, Instruct, King's Shield, Me First, Metronome, Mimic, Mirror Move, Nature Power, Outrage, Petal Dance, Rollout, Shell Trap, Sketch, Sleep Talk, Struggle, Thrash, Transform, Uproar, any two-turn move, any recharge move, or any Z-Move.",
		shortDesc: "The target immediately uses its last used move.",
		id: "instruct",
		name: "Instruct",
		pp: 15,
		priority: 0,
		flags: {protect: 1, authentic: 1, mystery: 1},
		onHit(target, source) {
			if (!target.lastMove) return false;
			let lastMove = target.lastMove;
			let moveIndex = target.moves.indexOf(lastMove.id);
			let noInstruct = [
				'assist', 'beakblast', 'bide', 'celebrate', 'copycat', 'focuspunch', 'iceball', 'instruct', 'kingsshield', 'mefirst', 'metronome', 'mimic', 'mirrormove', 'naturepower', 'outrage', 'petaldance', 'rollout', 'shelltrap', 'sketch', 'sleeptalk', 'thrash', 'transform',
			];
			if (noInstruct.includes(lastMove.id) || lastMove.isZ || lastMove.flags['charge'] || lastMove.flags['recharge'] || target.volatiles['beakblast'] || target.volatiles['focuspunch'] || target.volatiles['shelltrap'] || (target.moveSlots[moveIndex] && target.moveSlots[moveIndex].pp <= 0)) {
				return false;
			}
			// Instructed Fake Out etc. should fail
			target.activeTurns++;
			this.add('-singleturn', target, 'move: Instruct', '[of] ' + source);
			this.runMove(target.lastMove.id, target, /** @type {number} */(target.lastMoveTargetLoc));
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMoveBoost: {spa: 1},
		contestType: "Clever",
	},
	"iondeluge": {
		num: 569,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Causes Normal-type moves to become Electric type this turn. The effect happens after other effects that change a move's type.",
		shortDesc: "Normal moves become Electric type this turn.",
		id: "iondeluge",
		name: "Ion Deluge",
		pp: 25,
		priority: 1,
		flags: {},
		pseudoWeather: 'iondeluge',
		effect: {
			duration: 1,
			onStart(target) {
				this.add('-fieldactivate', 'move: Ion Deluge');
			},
			onModifyMovePriority: -2,
			onModifyMove(move) {
				if (move.type === 'Normal') {
					move.type = 'Electric';
					this.debug(move.name + "'s type changed to Electric");
				}
			},
		},
		secondary: null,
		target: "all",
		type: "Electric",
		zMoveBoost: {spa: 1},
		contestType: "Beautiful",
	},
	"irondefense": {
		num: 334,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Raises the user's Defense by 2 stages.",
		shortDesc: "Raises the user's Defense by 2.",
		id: "irondefense",
		name: "Iron Defense",
		pp: 15,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			def: 2,
		},
		secondary: null,
		target: "self",
		type: "Steel",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Tough",
	},
	"ironhead": {
		num: 442,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		desc: "Has a 30% chance to flinch the target.",
		shortDesc: "30% chance to flinch the target.",
		id: "ironhead",
		isViable: true,
		name: "Iron Head",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Steel",
		zMovePower: 160,
		contestType: "Tough",
	},
	"irontail": {
		num: 231,
		accuracy: 75,
		basePower: 100,
		category: "Physical",
		desc: "Has a 30% chance to lower the target's Defense by 1 stage.",
		shortDesc: "30% chance to lower the target's Defense by 1.",
		id: "irontail",
		name: "Iron Tail",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			boosts: {
				def: -1,
			},
		},
		target: "normal",
		type: "Steel",
		zMovePower: 180,
		contestType: "Cool",
	},
	"judgment": {
		num: 449,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		desc: "This move's type depends on the user's held Plate.",
		shortDesc: "Type varies based on the held Plate.",
		id: "judgment",
		isViable: true,
		name: "Judgment",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onModifyMove(move, pokemon) {
			if (pokemon.ignoringItem()) return;
			const item = pokemon.getItem();
			if (item.id && item.onPlate && !item.zMove) {
				move.type = item.onPlate;
			}
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 180,
		contestType: "Beautiful",
	},
	"jumpkick": {
		num: 26,
		accuracy: 95,
		basePower: 100,
		category: "Physical",
		desc: "If this attack is not successful, the user loses half of its maximum HP, rounded down, as crash damage. Pokemon with the Magic Guard Ability are unaffected by crash damage.",
		shortDesc: "User is hurt by 50% of its max HP if it misses.",
		id: "jumpkick",
		isViable: true,
		name: "Jump Kick",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, gravity: 1},
		hasCustomRecoil: true,
		onMoveFail(target, source, move) {
			this.damage(source.maxhp / 2, source, source, this.getEffect('Jump Kick'));
		},
		secondary: null,
		target: "normal",
		type: "Fighting",
		zMovePower: 180,
		contestType: "Cool",
	},
	"karatechop": {
		num: 2,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		desc: "Has a higher chance for a critical hit.",
		shortDesc: "High critical hit ratio.",
		id: "karatechop",
		name: "Karate Chop",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		critRatio: 2,
		secondary: null,
		target: "normal",
		type: "Fighting",
		zMovePower: 100,
		contestType: "Tough",
	},
	"kinesis": {
		num: 134,
		accuracy: 80,
		basePower: 0,
		category: "Status",
		desc: "Lowers the target's accuracy by 1 stage.",
		shortDesc: "Lowers the target's accuracy by 1.",
		id: "kinesis",
		name: "Kinesis",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		boosts: {
			accuracy: -1,
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMoveBoost: {evasion: 1},
		contestType: "Clever",
	},
	"kingsshield": {
		num: 588,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user is protected from most attacks made by other Pokemon during this turn, and Pokemon trying to make contact with the user have their Attack lowered by 2 stages. Non-damaging moves go through this protection. This move has a 1/X chance of being successful, where X starts at 1 and triples each time this move is successfully used. X resets to 1 if this move fails, if the user's last move used is not Baneful Bunker, Detect, Endure, King's Shield, Protect, Quick Guard, Spiky Shield, or Wide Guard, or if it was one of those moves and the user's protection was broken. Fails if the user moves last this turn.",
		shortDesc: "Protects from attacks. Contact: lowers Atk by 2.",
		id: "kingsshield",
		isViable: true,
		name: "King's Shield",
		pp: 10,
		priority: 4,
		flags: {},
		stallingMove: true,
		volatileStatus: 'kingsshield',
		onTryHit(pokemon) {
			return !!this.willAct() && this.runEvent('StallMove', pokemon);
		},
		onHit(pokemon) {
			pokemon.addVolatile('stall');
		},
		effect: {
			duration: 1,
			onStart(target) {
				this.add('-singleturn', target, 'Protect');
			},
			onTryHitPriority: 3,
			onTryHit(target, source, move) {
				if (!move.flags['protect'] || move.category === 'Status') {
					if (move.isZ) target.getMoveHitData(move).zBrokeProtect = true;
					return;
				}
				this.add('-activate', target, 'move: Protect');
				let lockedmove = source.getVolatile('lockedmove');
				if (lockedmove) {
					// Outrage counter is reset
					if (source.volatiles['lockedmove'].duration === 2) {
						delete source.volatiles['lockedmove'];
					}
				}
				if (move.flags['contact']) {
					this.boost({atk: -2}, source, target, this.getActiveMove("King's Shield"));
				}
				return this.NOT_FAIL;
			},
			onHit(target, source, move) {
				if (move.isZPowered && move.flags['contact']) {
					this.boost({atk: -2}, source, target, this.getActiveMove("King's Shield"));
				}
			},
		},
		secondary: null,
		target: "self",
		type: "Steel",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Cool",
	},
	"knockoff": {
		num: 282,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		desc: "If the target is holding an item that can be removed from it, ignoring the Sticky Hold Ability, this move's power is multiplied by 1.5. If the user has not fainted, the target loses its held item. This move cannot remove Z-Crystals, cause Pokemon with the Sticky Hold Ability to lose their held item, cause Pokemon that can Mega Evolve to lose the Mega Stone for their species, or cause a Kyogre, a Groudon, a Giratina, an Arceus, a Genesect, or a Silvally to lose their Blue Orb, Red Orb, Griseous Orb, Plate, Drive, or Memory respectively. Items lost to this move cannot be regained with Recycle or the Harvest Ability.",
		shortDesc: "1.5x damage if foe holds an item. Removes item.",
		id: "knockoff",
		isViable: true,
		name: "Knock Off",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onBasePower(basePower, source, target, move) {
			let item = target.getItem();
			if (!this.singleEvent('TakeItem', item, target.itemData, target, source, move, item)) return;
			if (item.id) {
				return this.chainModify(1.5);
			}
		},
		onAfterHit(target, source) {
			if (source.hp) {
				let item = target.takeItem();
				if (item) {
					this.add('-enditem', target, item.name, '[from] move: Knock Off', '[of] ' + source);
				}
			}
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		zMovePower: 120,
		contestType: "Clever",
	},
	"landswrath": {
		num: 616,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		desc: "No additional effect.",
		shortDesc: "No additional effect. Hits adjacent foes.",
		id: "landswrath",
		name: "Land's Wrath",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, nonsky: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Ground",
		zMovePower: 185,
		contestType: "Beautiful",
	},
	"laserfocus": {
		num: 673,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Until the end of the next turn, the user's attacks will be critical hits.",
		shortDesc: "Until the end of the next turn, user's moves crit.",
		id: "laserfocus",
		name: "Laser Focus",
		pp: 30,
		priority: 0,
		flags: {snatch: 1},
		volatileStatus: 'laserfocus',
		effect: {
			duration: 2,
			onStart(pokemon, source, effect) {
				if (effect && (['imposter', 'psychup', 'transform'].includes(effect.id))) {
					this.add('-start', pokemon, 'move: Laser Focus', '[silent]');
				} else {
					this.add('-start', pokemon, 'move: Laser Focus');
				}
			},
			onRestart(pokemon) {
				this.effectData.duration = 2;
				this.add('-start', pokemon, 'move: Laser Focus');
			},
			onModifyCritRatio(critRatio) {
				return 5;
			},
			onEnd(pokemon) {
				this.add('-end', pokemon, 'move: Laser Focus', '[silent]');
			},
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMoveBoost: {atk: 1},
		contestType: "Cool",
	},
	"lastresort": {
		num: 387,
		accuracy: 100,
		basePower: 140,
		category: "Physical",
		desc: "This move fails unless the user knows this move and at least one other move, and has used all the other moves it knows at least once each since it became active or Transformed.",
		shortDesc: "Fails unless each known move has been used.",
		id: "lastresort",
		name: "Last Resort",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onTryHit(target, source) {
			if (source.moveSlots.length < 2) return false; // Last Resort fails unless the user knows at least 2 moves
			let hasLastResort = false; // User must actually have Last Resort for it to succeed
			for (const moveSlot of source.moveSlots) {
				if (moveSlot.id === 'lastresort') {
					hasLastResort = true;
					continue;
				}
				if (!moveSlot.used) return false;
			}
			return hasLastResort;
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 200,
		contestType: "Cute",
	},
	"lavaplume": {
		num: 436,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		desc: "Has a 30% chance to burn the target.",
		shortDesc: "30% chance to burn adjacent Pokemon.",
		id: "lavaplume",
		isViable: true,
		name: "Lava Plume",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			status: 'brn',
		},
		target: "allAdjacent",
		type: "Fire",
		zMovePower: 160,
		contestType: "Tough",
	},
	"leafblade": {
		num: 348,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		desc: "Has a higher chance for a critical hit.",
		shortDesc: "High critical hit ratio.",
		id: "leafblade",
		isViable: true,
		name: "Leaf Blade",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		critRatio: 2,
		secondary: null,
		target: "normal",
		type: "Grass",
		zMovePower: 175,
		contestType: "Cool",
	},
	"leafstorm": {
		num: 437,
		accuracy: 90,
		basePower: 130,
		category: "Special",
		desc: "Lowers the user's Special Attack by 2 stages.",
		shortDesc: "Lowers the user's Sp. Atk by 2.",
		id: "leafstorm",
		isViable: true,
		name: "Leaf Storm",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		self: {
			boosts: {
				spa: -2,
			},
		},
		secondary: null,
		target: "normal",
		type: "Grass",
		zMovePower: 195,
		contestType: "Beautiful",
	},
	"leaftornado": {
		num: 536,
		accuracy: 90,
		basePower: 65,
		category: "Special",
		desc: "Has a 50% chance to lower the target's accuracy by 1 stage.",
		shortDesc: "50% chance to lower the target's accuracy by 1.",
		id: "leaftornado",
		name: "Leaf Tornado",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 50,
			boosts: {
				accuracy: -1,
			},
		},
		target: "normal",
		type: "Grass",
		zMovePower: 120,
		contestType: "Cool",
	},
	"leafage": {
		num: 670,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		shortDesc: "No additional effect.",
		id: "leafage",
		name: "Leafage",
		pp: 40,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		zMovePower: 100,
		contestType: "Tough",
	},
	"leechlife": {
		num: 141,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		desc: "The user recovers 1/2 the HP lost by the target, rounded half up. If Big Root is held by the user, the HP recovered is 1.3x normal, rounded half down.",
		shortDesc: "User recovers 50% of the damage dealt.",
		id: "leechlife",
		isViable: true,
		name: "Leech Life",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, heal: 1},
		drain: [1, 2],
		secondary: null,
		target: "normal",
		type: "Bug",
		zMovePower: 160,
		contestType: "Clever",
	},
	"leechseed": {
		num: 73,
		accuracy: 90,
		basePower: 0,
		category: "Status",
		desc: "The Pokemon at the user's position steals 1/8 of the target's maximum HP, rounded down, at the end of each turn. If Big Root is held by the recipient, the HP recovered is 1.3x normal, rounded half down. If the target uses Baton Pass, the replacement will continue being leeched. If the target switches out or uses Rapid Spin successfully, the effect ends. Grass-type Pokemon are immune to this move on use, but not its effect.",
		shortDesc: "1/8 of target's HP is restored to user every turn.",
		id: "leechseed",
		isViable: true,
		name: "Leech Seed",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		volatileStatus: 'leechseed',
		effect: {
			onStart(target) {
				this.add('-start', target, 'move: Leech Seed');
			},
			onResidualOrder: 8,
			onResidual(pokemon) {
				let target = this.effectData.source.side.active[pokemon.volatiles['leechseed'].sourcePosition];
				if (!target || target.fainted || target.hp <= 0) {
					this.debug('Nothing to leech into');
					return;
				}
				let damage = this.damage(pokemon.maxhp / 8, pokemon, target);
				if (damage) {
					this.heal(damage, target, pokemon);
				}
			},
		},
		onTryHit(target) {
			if (target.hasType('Grass')) {
				this.add('-immune', target);
				return null;
			}
		},
		secondary: null,
		target: "normal",
		type: "Grass",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Clever",
	},
	"leer": {
		num: 43,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "Lowers the target's Defense by 1 stage.",
		shortDesc: "Lowers the foe(s) Defense by 1.",
		id: "leer",
		name: "Leer",
		pp: 30,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		boosts: {
			def: -1,
		},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Normal",
		zMoveBoost: {atk: 1},
		contestType: "Cool",
	},
	"letssnuggleforever": {
		num: 726,
		accuracy: true,
		basePower: 190,
		category: "Physical",
		shortDesc: "No additional effect.",
		id: "letssnuggleforever",
		name: "Let's Snuggle Forever",
		pp: 1,
		priority: 0,
		flags: {contact: 1},
		isZ: "mimikiumz",
		secondary: null,
		target: "normal",
		type: "Fairy",
		contestType: "Cool",
	},
	"lick": {
		num: 122,
		accuracy: 100,
		basePower: 30,
		category: "Physical",
		desc: "Has a 30% chance to paralyze the target.",
		shortDesc: "30% chance to paralyze the target.",
		id: "lick",
		name: "Lick",
		pp: 30,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			status: 'par',
		},
		target: "normal",
		type: "Ghost",
		zMovePower: 100,
		contestType: "Cute",
	},
	"lightofruin": {
		num: 617,
		accuracy: 90,
		basePower: 140,
		category: "Special",
		desc: "If the target lost HP, the user takes recoil damage equal to 1/2 the HP lost by the target, rounded half up, but not less than 1 HP.",
		shortDesc: "Has 1/2 recoil.",
		id: "lightofruin",
		isViable: true,
		name: "Light of Ruin",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		isUnreleased: true,
		recoil: [1, 2],
		secondary: null,
		target: "normal",
		type: "Fairy",
		zMovePower: 200,
		contestType: "Beautiful",
	},
	"lightscreen": {
		num: 113,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "For 5 turns, the user and its party members take 0.5x damage from special attacks, or 0.66x damage if in a Double Battle. Damage is not reduced further with Aurora Veil. Critical hits ignore this effect. It is removed from the user's side if the user or an ally is successfully hit by Brick Break, Psychic Fangs, or Defog. Lasts for 8 turns if the user is holding Light Clay. Fails if the effect is already active on the user's side.",
		shortDesc: "For 5 turns, special damage to allies is halved.",
		id: "lightscreen",
		isViable: true,
		name: "Light Screen",
		pp: 30,
		priority: 0,
		flags: {snatch: 1},
		sideCondition: 'lightscreen',
		effect: {
			duration: 5,
			durationCallback(target, source, effect) {
				if (source && source.hasItem('lightclay')) {
					return 8;
				}
				return 5;
			},
			onAnyModifyDamage(damage, source, target, move) {
				if (target !== source && target.side === this.effectData.target && this.getCategory(move) === 'Special') {
					if (!target.getMoveHitData(move).crit && !move.infiltrates) {
						this.debug('Light Screen weaken');
						if (target.side.active.length > 1) return this.chainModify([0xAAC, 0x1000]);
						return this.chainModify(0.5);
					}
				}
			},
			onStart(side) {
				this.add('-sidestart', side, 'move: Light Screen');
			},
			onResidualOrder: 21,
			onResidualSubOrder: 1,
			onEnd(side) {
				this.add('-sideend', side, 'move: Light Screen');
			},
		},
		secondary: null,
		target: "allySide",
		type: "Psychic",
		zMoveBoost: {spd: 1},
		contestType: "Beautiful",
	},
	"lightthatburnsthesky": {
		num: 723,
		accuracy: true,
		basePower: 200,
		category: "Special",
		desc: "This move becomes a physical attack if the user's Attack is greater than its Special Attack, including stat stage changes. This move and its effects ignore the Abilities of other Pokemon.",
		shortDesc: "Physical if user's Atk > Sp. Atk. Ignores Abilities.",
		id: "lightthatburnsthesky",
		name: "Light That Burns the Sky",
		pp: 1,
		priority: 0,
		flags: {},
		onModifyMove(move, pokemon) {
			if (pokemon.getStat('atk', false, true) > pokemon.getStat('spa', false, true)) move.category = 'Physical';
		},
		ignoreAbility: true,
		isZ: "ultranecroziumz",
		secondary: null,
		target: "normal",
		type: "Psychic",
		contestType: "Cool",
	},
	"liquidation": {
		num: 710,
		accuracy: 100,
		basePower: 85,
		category: "Physical",
		desc: "Has a 20% chance to lower the target's Defense by 1 stage.",
		shortDesc: "20% chance to lower the target's Defense by 1.",
		id: "liquidation",
		isViable: true,
		name: "Liquidation",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			boosts: {
				def: -1,
			},
		},
		target: "normal",
		type: "Water",
		zMovePower: 160,
		contestType: "Cool",
	},
	"lockon": {
		num: 199,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Until the end of the next turn, the target cannot avoid the user's moves, even if the target is in the middle of a two-turn move. The effect ends if either the user or the target leaves the field. Fails if this effect is active for the user.",
		shortDesc: "User's next move will not miss the target.",
		id: "lockon",
		name: "Lock-On",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onTryHit(target, source) {
			if (source.volatiles['lockon']) return false;
		},
		onHit(target, source) {
			source.addVolatile('lockon', target);
			this.add('-activate', source, 'move: Lock-On', '[of] ' + target);
		},
		effect: {
			noCopy: true, // doesn't get copied by Baton Pass
			duration: 2,
			onSourceAccuracy(accuracy, target, source, move) {
				if (move && source === this.effectData.target && target === this.effectData.source) return true;
			},
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMoveBoost: {spe: 1},
		contestType: "Clever",
	},
	"lovelykiss": {
		num: 142,
		accuracy: 75,
		basePower: 0,
		category: "Status",
		shortDesc: "Causes the target to fall asleep.",
		id: "lovelykiss",
		isViable: true,
		name: "Lovely Kiss",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		status: 'slp',
		secondary: null,
		target: "normal",
		type: "Normal",
		zMoveBoost: {spe: 1},
		contestType: "Beautiful",
	},
	"lowkick": {
		num: 67,
		accuracy: 100,
		basePower: 0,
		basePowerCallback(pokemon, target) {
			let targetWeight = target.getWeight();
			if (targetWeight >= 200) {
				return 120;
			}
			if (targetWeight >= 100) {
				return 100;
			}
			if (targetWeight >= 50) {
				return 80;
			}
			if (targetWeight >= 25) {
				return 60;
			}
			if (targetWeight >= 10) {
				return 40;
			}
			return 20;
		},
		category: "Physical",
		desc: "This move's power is 20 if the target weighs less than 10 kg, 40 if less than 25 kg, 60 if less than 50 kg, 80 if less than 100 kg, 100 if less than 200 kg, and 120 if greater than or equal to 200 kg.",
		shortDesc: "More power the heavier the target.",
		id: "lowkick",
		isViable: true,
		name: "Low Kick",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		zMovePower: 160,
		contestType: "Tough",
	},
	"lowsweep": {
		num: 490,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		desc: "Has a 100% chance to lower the target's Speed by 1 stage.",
		shortDesc: "100% chance to lower the target's Speed by 1.",
		id: "lowsweep",
		name: "Low Sweep",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				spe: -1,
			},
		},
		target: "normal",
		type: "Fighting",
		zMovePower: 120,
		contestType: "Clever",
	},
	"luckychant": {
		num: 381,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "For 5 turns, the user and its party members cannot be struck by a critical hit. Fails if the effect is already active on the user's side.",
		shortDesc: "For 5 turns, shields user's party from critical hits.",
		id: "luckychant",
		name: "Lucky Chant",
		pp: 30,
		priority: 0,
		flags: {snatch: 1},
		sideCondition: 'luckychant',
		effect: {
			duration: 5,
			onStart(side) {
				this.add('-sidestart', side, 'move: Lucky Chant'); // "The Lucky Chant shielded [side.name]'s team from critical hits!"
			},
			onCriticalHit: false,
			onResidualOrder: 21,
			onResidualSubOrder: 5,
			onEnd(side) {
				this.add('-sideend', side, 'move: Lucky Chant'); // "[side.name]'s team's Lucky Chant wore off!"
			},
		},
		secondary: null,
		target: "allySide",
		type: "Normal",
		zMoveBoost: {evasion: 1},
		contestType: "Cute",
	},
	"lunardance": {
		num: 461,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user faints and the Pokemon brought out to replace it has its HP and PP fully restored along with having any major status condition cured. The new Pokemon is sent out at the end of the turn, and the healing happens before hazards take effect. Fails if the user is the last unfainted Pokemon in its party.",
		shortDesc: "User faints. Replacement is fully healed, with PP.",
		id: "lunardance",
		isViable: true,
		name: "Lunar Dance",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, heal: 1, dance: 1},
		onTryHit(pokemon, target, move) {
			if (!this.canSwitch(pokemon.side)) {
				delete move.selfdestruct;
				return false;
			}
		},
		selfdestruct: "ifHit",
		sideCondition: 'lunardance',
		effect: {
			duration: 2,
			onStart(side, source) {
				this.debug('Lunar Dance started on ' + side.name);
				this.effectData.positions = [];
				for (const i of side.active.keys()) {
					this.effectData.positions[i] = false;
				}
				this.effectData.positions[source.position] = true;
			},
			onRestart(side, source) {
				this.effectData.positions[source.position] = true;
			},
			onSwitchInPriority: 1,
			onSwitchIn(target) {
				const positions = /**@type {boolean[]} */ (this.effectData.positions);
				if (target.position !== this.effectData.sourcePosition) {
					return;
				}
				if (!target.fainted) {
					target.heal(target.maxhp);
					target.setStatus('');
					for (const moveSlot of target.moveSlots) {
						moveSlot.pp = moveSlot.maxpp;
					}
					this.add('-heal', target, target.getHealth, '[from] move: Lunar Dance');
					positions[target.position] = false;
				}
				if (!positions.some(affected => affected === true)) {
					target.side.removeSideCondition('lunardance');
				}
			},
		},
		secondary: null,
		target: "self",
		type: "Psychic",
		contestType: "Beautiful",
	},
	"lunge": {
		num: 679,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		desc: "Has a 100% chance to lower the target's Attack by 1 stage.",
		shortDesc: "100% chance to lower the target's Attack by 1.",
		id: "lunge",
		isViable: true,
		name: "Lunge",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				atk: -1,
			},
		},
		target: "normal",
		type: "Bug",
		zMovePower: 160,
		contestType: "Cute",
	},
	"lusterpurge": {
		num: 295,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		desc: "Has a 50% chance to lower the target's Special Defense by 1 stage.",
		shortDesc: "50% chance to lower the target's Sp. Def by 1.",
		id: "lusterpurge",
		name: "Luster Purge",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 50,
			boosts: {
				spd: -1,
			},
		},
		target: "normal",
		type: "Psychic",
		zMovePower: 140,
		contestType: "Clever",
	},
	"machpunch": {
		num: 183,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		desc: "No additional effect.",
		shortDesc: "Usually goes first.",
		id: "machpunch",
		isViable: true,
		name: "Mach Punch",
		pp: 30,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		zMovePower: 100,
		contestType: "Cool",
	},
	"magiccoat": {
		num: 277,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Until the end of the turn, the user is unaffected by certain non-damaging moves directed at it and will instead use such moves against the original user. Moves reflected in this way are unable to be reflected again by this or the Magic Bounce Ability's effect. Spikes, Stealth Rock, Sticky Web, and Toxic Spikes can only be reflected once per side, by the leftmost Pokemon under this or the Magic Bounce Ability's effect. The Lightning Rod and Storm Drain Abilities redirect their respective moves before this move takes effect.",
		shortDesc: "Bounces back certain non-damaging moves.",
		id: "magiccoat",
		isViable: true,
		name: "Magic Coat",
		pp: 15,
		priority: 4,
		flags: {},
		volatileStatus: 'magiccoat',
		effect: {
			duration: 1,
			onStart(target, source, effect) {
				this.add('-singleturn', target, 'move: Magic Coat');
				if (effect && effect.effectType === 'Move') {
					this.effectData.pranksterBoosted = effect.pranksterBoosted;
				}
			},
			onTryHitPriority: 2,
			onTryHit(target, source, move) {
				if (target === source || move.hasBounced || !move.flags['reflectable']) {
					return;
				}
				let newMove = this.getActiveMove(move.id);
				newMove.hasBounced = true;
				newMove.pranksterBoosted = this.effectData.pranksterBoosted;
				this.useMove(newMove, target, source);
				return null;
			},
			onAllyTryHitSide(target, source, move) {
				if (target.side === source.side || move.hasBounced || !move.flags['reflectable']) {
					return;
				}
				let newMove = this.getActiveMove(move.id);
				newMove.hasBounced = true;
				newMove.pranksterBoosted = false;
				this.useMove(newMove, this.effectData.target, source);
				return null;
			},
		},
		secondary: null,
		target: "self",
		type: "Psychic",
		zMoveBoost: {spd: 2},
		contestType: "Beautiful",
	},
	"magicroom": {
		num: 478,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "For 5 turns, the held items of all active Pokemon have no effect. An item's effect of causing forme changes is unaffected, but any other effects from such items are negated. During the effect, Fling and Natural Gift are prevented from being used by all active Pokemon. If this move is used during the effect, the effect ends.",
		shortDesc: "For 5 turns, all held items have no effect.",
		id: "magicroom",
		name: "Magic Room",
		pp: 10,
		priority: 0,
		flags: {mirror: 1},
		pseudoWeather: 'magicroom',
		effect: {
			duration: 5,
			durationCallback(source, effect) {
				if (source && source.hasAbility('persistent')) {
					this.add('-activate', source, 'ability: Persistent', effect);
					return 7;
				}
				return 5;
			},
			onStart(target, source) {
				this.add('-fieldstart', 'move: Magic Room', '[of] ' + source);
			},
			onRestart(target, source) {
				this.field.removePseudoWeather('magicroom');
			},
			// Item suppression implemented in Pokemon.ignoringItem() within sim/pokemon.js
			onResidualOrder: 25,
			onEnd() {
				this.add('-fieldend', 'move: Magic Room', '[of] ' + this.effectData.source);
			},
		},
		secondary: null,
		target: "all",
		type: "Psychic",
		zMoveBoost: {spd: 1},
		contestType: "Clever",
	},
	"magicalleaf": {
		num: 345,
		accuracy: true,
		basePower: 60,
		category: "Special",
		shortDesc: "This move does not check accuracy.",
		id: "magicalleaf",
		name: "Magical Leaf",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		zMovePower: 120,
		contestType: "Beautiful",
	},
	"magmastorm": {
		num: 463,
		accuracy: 75,
		basePower: 100,
		category: "Special",
		desc: "Prevents the target from switching for four or five turns (seven turns if the user is holding Grip Claw). Causes damage to the target equal to 1/8 of its maximum HP (1/6 if the user is holding Binding Band), rounded down, at the end of each turn during effect. The target can still switch out if it is holding Shed Shell or uses Baton Pass, Parting Shot, U-turn, or Volt Switch. The effect ends if either the user or the target leaves the field, or if the target uses Rapid Spin or Substitute successfully. This effect is not stackable or reset by using this or another binding move.",
		shortDesc: "Traps and damages the target for 4-5 turns.",
		id: "magmastorm",
		isViable: true,
		name: "Magma Storm",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Fire",
		zMovePower: 180,
		contestType: "Tough",
	},
	"magnetbomb": {
		num: 443,
		accuracy: true,
		basePower: 60,
		category: "Physical",
		shortDesc: "This move does not check accuracy.",
		id: "magnetbomb",
		name: "Magnet Bomb",
		pp: 20,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		zMovePower: 120,
		contestType: "Cool",
	},
	"magneticflux": {
		num: 602,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Raises the Defense and Special Defense of Pokemon on the user's side with the Plus or Minus Abilities by 1 stage.",
		shortDesc: "Raises Def, Sp. Def of allies with Plus/Minus by 1.",
		id: "magneticflux",
		name: "Magnetic Flux",
		pp: 20,
		priority: 0,
		flags: {snatch: 1, distance: 1, authentic: 1},
		onHitSide(side, source, move) {
			const targets = [];
			for (const pokemon of side.active) {
				if (pokemon.hasAbility(['plus', 'minus'])) {
					targets.push(pokemon);
				}
			}
			if (!targets.length) return false;
			let didSomething = false;
			for (const target of targets) {
				didSomething = this.boost({def: 1, spd: 1}, target, source, move, false, true) || didSomething;
			}
			return didSomething;
		},
		secondary: null,
		target: "allySide",
		type: "Electric",
		zMoveBoost: {spd: 1},
		contestType: "Clever",
	},
	"magnetrise": {
		num: 393,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "For 5 turns, the user is immune to Ground-type attacks and the effects of Spikes, Toxic Spikes, Sticky Web, and the Arena Trap Ability as long as it remains active. If the user uses Baton Pass, the replacement will gain the effect. Ingrain, Smack Down, Thousand Arrows, and Iron Ball override this move if the user is under any of their effects. Fails if the user is already under this effect or the effects of Ingrain, Smack Down, or Thousand Arrows.",
		shortDesc: "For 5 turns, the user has immunity to Ground.",
		id: "magnetrise",
		name: "Magnet Rise",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, gravity: 1},
		volatileStatus: 'magnetrise',
		effect: {
			duration: 5,
			onStart(target) {
				if (target.volatiles['smackdown'] || target.volatiles['ingrain']) return false;
				this.add('-start', target, 'Magnet Rise');
			},
			onImmunity(type) {
				if (type === 'Ground') return false;
			},
			onResidualOrder: 15,
			onEnd(target) {
				this.add('-end', target, 'Magnet Rise');
			},
		},
		secondary: null,
		target: "self",
		type: "Electric",
		zMoveBoost: {evasion: 1},
		contestType: "Clever",
	},
	"magnitude": {
		num: 222,
		accuracy: 100,
		basePower: 0,
		category: "Physical",
		desc: "The power of this move varies; 5% chances for 10 and 150 power, 10% chances for 30 and 110 power, 20% chances for 50 and 90 power, and 30% chance for 70 power. Damage doubles if the target is using Dig.",
		shortDesc: "Hits adjacent Pokemon. Power varies; 2x on Dig.",
		id: "magnitude",
		name: "Magnitude",
		pp: 30,
		priority: 0,
		flags: {protect: 1, mirror: 1, nonsky: 1},
		onModifyMove(move, pokemon) {
			let i = this.random(100);
			if (i < 5) {
				move.magnitude = 4;
				move.basePower = 10;
			} else if (i < 15) {
				move.magnitude = 5;
				move.basePower = 30;
			} else if (i < 35) {
				move.magnitude = 6;
				move.basePower = 50;
			} else if (i < 65) {
				move.magnitude = 7;
				move.basePower = 70;
			} else if (i < 85) {
				move.magnitude = 8;
				move.basePower = 90;
			} else if (i < 95) {
				move.magnitude = 9;
				move.basePower = 110;
			} else {
				move.magnitude = 10;
				move.basePower = 150;
			}
		},
		onUseMoveMessage(pokemon, target, move) {
			this.add('-activate', pokemon, 'move: Magnitude', move.magnitude);
		},
		secondary: null,
		target: "allAdjacent",
		type: "Ground",
		zMovePower: 140,
		contestType: "Tough",
	},
	"maliciousmoonsault": {
		num: 696,
		accuracy: true,
		basePower: 180,
		category: "Physical",
		desc: "Damage doubles and no accuracy check is done if the target has used Minimize while active.",
		shortDesc: "Damage doubles if the target used Minimize.",
		id: "maliciousmoonsault",
		name: "Malicious Moonsault",
		pp: 1,
		priority: 0,
		flags: {contact: 1},
		isZ: "inciniumz",
		secondary: null,
		target: "normal",
		type: "Dark",
		contestType: "Cool",
	},
	"matblock": {
		num: 561,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user and its party members are protected from damaging attacks made by other Pokemon, including allies, during this turn. Fails unless it is the user's first turn on the field, if the user moves last this turn, or if this move is already in effect for the user's side.",
		shortDesc: "Protects allies from attacks. First turn out only.",
		id: "matblock",
		name: "Mat Block",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, nonsky: 1},
		stallingMove: true,
		sideCondition: 'matblock',
		onTryHitSide(side, source) {
			if (source.activeTurns > 1) {
				this.hint("Mat Block only works on your first turn out.");
				return false;
			}
		},
		effect: {
			duration: 1,
			onStart(target, source) {
				this.add('-singleturn', source, 'Mat Block');
			},
			onTryHitPriority: 3,
			onTryHit(target, source, move) {
				if (!move.flags['protect']) {
					if (move.isZ) target.getMoveHitData(move).zBrokeProtect = true;
					return;
				}
				if (move && (move.target === 'self' || move.category === 'Status')) return;
				this.add('-activate', target, 'move: Mat Block', move.name);
				let lockedmove = source.getVolatile('lockedmove');
				if (lockedmove) {
					// Outrage counter is reset
					if (source.volatiles['lockedmove'].duration === 2) {
						delete source.volatiles['lockedmove'];
					}
				}
				return this.NOT_FAIL;
			},
		},
		secondary: null,
		target: "allySide",
		type: "Fighting",
		zMoveBoost: {def: 1},
		contestType: "Cool",
	},
	"mefirst": {
		num: 382,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user uses the move the target chose for use this turn against it, if possible, with its power multiplied by 1.5. The move must be a damaging move other than Beak Blast, Chatter, Counter, Covet, Focus Punch, Me First, Metal Burst, Mirror Coat, Shell Trap, Struggle, Thief, or any Z-Move. Fails if the target moves before the user. Ignores the target's substitute for the purpose of copying the move.",
		shortDesc: "Copies a foe at 1.5x power. User must be faster.",
		id: "mefirst",
		name: "Me First",
		pp: 20,
		priority: 0,
		flags: {protect: 1, authentic: 1},
		onTryHit(target, pokemon) {
			let action = this.willMove(target);
			if (action) {
				let noMeFirst = [
					'beakblast', 'chatter', 'counter', 'covet', 'focuspunch', 'mefirst', 'metalburst', 'mirrorcoat', 'shelltrap', 'struggle', 'thief',
				];
				let move = this.getActiveMove(action.move.id);
				if (!action.zmove && !move.isZ && move.category !== 'Status' && !noMeFirst.includes(move.id)) {
					pokemon.addVolatile('mefirst');
					this.useMove(move, pokemon, target);
					return null;
				}
			}
			return false;
		},
		effect: {
			duration: 1,
			onBasePowerPriority: 4,
			onBasePower(basePower) {
				return this.chainModify(1.5);
			},
		},
		secondary: null,
		target: "adjacentFoe",
		type: "Normal",
		zMoveBoost: {spe: 2},
		contestType: "Clever",
	},
	"meanlook": {
		num: 212,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Prevents the target from switching out. The target can still switch out if it is holding Shed Shell or uses Baton Pass, Parting Shot, U-turn, or Volt Switch. If the target leaves the field using Baton Pass, the replacement will remain trapped. The effect ends if the user leaves the field.",
		shortDesc: "Prevents the target from switching out.",
		id: "meanlook",
		name: "Mean Look",
		pp: 5,
		priority: 0,
		flags: {reflectable: 1, mirror: 1},
		onHit(target, source, move) {
			return target.addVolatile('trapped', source, move, 'trapper');
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMoveBoost: {spd: 1},
		contestType: "Beautiful",
	},
	"meditate": {
		num: 96,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Raises the user's Attack by 1 stage.",
		shortDesc: "Raises the user's Attack by 1.",
		id: "meditate",
		name: "Meditate",
		pp: 40,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			atk: 1,
		},
		secondary: null,
		target: "self",
		type: "Psychic",
		zMoveBoost: {atk: 1},
		contestType: "Beautiful",
	},
	"megadrain": {
		num: 72,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		desc: "The user recovers 1/2 the HP lost by the target, rounded half up. If Big Root is held by the user, the HP recovered is 1.3x normal, rounded half down.",
		shortDesc: "User recovers 50% of the damage dealt.",
		id: "megadrain",
		name: "Mega Drain",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, heal: 1},
		drain: [1, 2],
		secondary: null,
		target: "normal",
		type: "Grass",
		zMovePower: 120,
		contestType: "Clever",
	},
	"megakick": {
		num: 25,
		accuracy: 75,
		basePower: 120,
		category: "Physical",
		shortDesc: "No additional effect.",
		id: "megakick",
		name: "Mega Kick",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 190,
		contestType: "Cool",
	},
	"megapunch": {
		num: 5,
		accuracy: 85,
		basePower: 80,
		category: "Physical",
		shortDesc: "No additional effect.",
		id: "megapunch",
		name: "Mega Punch",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 160,
		contestType: "Tough",
	},
	"megahorn": {
		num: 224,
		accuracy: 85,
		basePower: 120,
		category: "Physical",
		shortDesc: "No additional effect.",
		id: "megahorn",
		isViable: true,
		name: "Megahorn",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
		zMovePower: 190,
		contestType: "Cool",
	},
	"memento": {
		num: 262,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "Lowers the target's Attack and Special Attack by 2 stages. The user faints unless this move misses or there is no target. Fails entirely if this move hits a substitute, but does not fail if the target's stats cannot be changed.",
		shortDesc: "Lowers target's Attack, Sp. Atk by 2. User faints.",
		id: "memento",
		isViable: true,
		name: "Memento",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		boosts: {
			atk: -2,
			spa: -2,
		},
		selfdestruct: "ifHit",
		secondary: null,
		target: "normal",
		type: "Dark",
		zMoveEffect: 'healreplacement',
		contestType: "Tough",
	},
	"menacingmoonrazemaelstrom": {
		num: 725,
		accuracy: true,
		basePower: 200,
		category: "Special",
		desc: "This move and its effects ignore the Abilities of other Pokemon.",
		shortDesc: "Ignores the Abilities of other Pokemon.",
		id: "menacingmoonrazemaelstrom",
		name: "Menacing Moonraze Maelstrom",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "lunaliumz",
		ignoreAbility: true,
		secondary: null,
		target: "normal",
		type: "Ghost",
		contestType: "Cool",
	},
	"metalburst": {
		num: 368,
		accuracy: 100,
		basePower: 0,
		damageCallback(pokemon) {
			if (!pokemon.volatiles['metalburst']) return 0;
			return pokemon.volatiles['metalburst'].damage || 1;
		},
		category: "Physical",
		desc: "Deals damage to the last opposing Pokemon to hit the user with an attack this turn equal to 1.5 times the HP lost by the user from that attack, rounded down. If the user did not lose HP from the attack, this move deals 1 HP of damage instead. If that opposing Pokemon's position is no longer in use and there is another opposing Pokemon on the field, the damage is done to it instead. Only the last hit of a multi-hit attack is counted. Fails if the user was not hit by an opposing Pokemon's attack this turn.",
		shortDesc: "If hit by an attack, returns 1.5x damage.",
		id: "metalburst",
		name: "Metal Burst",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		beforeTurnCallback(pokemon) {
			pokemon.addVolatile('metalburst');
		},
		onTryHit(target, source, move) {
			if (!source.volatiles['metalburst']) return false;
			if (source.volatiles['metalburst'].position === null) return false;
		},
		effect: {
			duration: 1,
			noCopy: true,
			onStart(target, source, move) {
				this.effectData.position = null;
				this.effectData.damage = 0;
			},
			onRedirectTargetPriority: -1,
			onRedirectTarget(target, source, source2) {
				if (source !== this.effectData.target) return;
				return source.side.foe.active[this.effectData.position];
			},
			onAfterDamage(damage, target, source, effect) {
				if (effect && effect.effectType === 'Move' && source.side !== target.side) {
					this.effectData.position = source.position;
					this.effectData.damage = 1.5 * damage;
				}
			},
		},
		secondary: null,
		target: "scripted",
		type: "Steel",
		zMovePower: 100,
		contestType: "Cool",
	},
	"metalclaw": {
		num: 232,
		accuracy: 95,
		basePower: 50,
		category: "Physical",
		desc: "Has a 10% chance to raise the user's Attack by 1 stage.",
		shortDesc: "10% chance to raise the user's Attack by 1.",
		id: "metalclaw",
		name: "Metal Claw",
		pp: 35,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			self: {
				boosts: {
					atk: 1,
				},
			},
		},
		target: "normal",
		type: "Steel",
		zMovePower: 100,
		contestType: "Cool",
	},
	"metalsound": {
		num: 319,
		accuracy: 85,
		basePower: 0,
		category: "Status",
		desc: "Lowers the target's Special Defense by 2 stages.",
		shortDesc: "Lowers the target's Sp. Def by 2.",
		id: "metalsound",
		name: "Metal Sound",
		pp: 40,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, sound: 1, authentic: 1, mystery: 1},
		boosts: {
			spd: -2,
		},
		secondary: null,
		target: "normal",
		type: "Steel",
		zMoveBoost: {spa: 1},
		contestType: "Clever",
	},
	"meteormash": {
		num: 309,
		accuracy: 90,
		basePower: 90,
		category: "Physical",
		desc: "Has a 20% chance to raise the user's Attack by 1 stage.",
		shortDesc: "20% chance to raise the user's Attack by 1.",
		id: "meteormash",
		isViable: true,
		name: "Meteor Mash",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: {
			chance: 20,
			self: {
				boosts: {
					atk: 1,
				},
			},
		},
		target: "normal",
		type: "Steel",
		zMovePower: 175,
		contestType: "Cool",
	},
	"metronome": {
		num: 118,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "A random move is selected for use, other than After You, Assist, Baneful Bunker, Beak Blast, Belch, Bestow, Celebrate, Chatter, Copycat, Counter, Covet, Crafty Shield, Destiny Bond, Detect, Diamond Storm, Endure, Feint, Fleur Cannon, Focus Punch, Follow Me, Freeze Shock, Helping Hand, Hold Hands, Hyperspace Hole, Ice Burn, Instruct, King's Shield, Light of Ruin, Mat Block, Me First, Metronome, Mimic, Mind Blown, Mirror Coat, Mirror Move, Nature Power, Photon Geyser, Plasma Fists, Protect, Quash, Quick Guard, Rage Powder, Relic Song, Secret Sword, Shell Trap, Sketch, Sleep Talk, Snarl, Snatch, Snore, Spectral Thief, Spiky Shield, Spotlight, Steam Eruption, Struggle, Switcheroo, Techno Blast, Thief, Thousand Arrows, Thousand Waves, Transform, Trick, V-create, or Wide Guard.",
		shortDesc: "Picks a random move.",
		id: "metronome",
		name: "Metronome",
		pp: 10,
		priority: 0,
		flags: {},
		noMetronome: ['afteryou', 'assist', 'banefulbunker', 'beakblast', 'belch', 'bestow', 'celebrate', 'chatter', 'copycat', 'counter', 'covet', 'craftyshield', 'destinybond', 'detect', 'diamondstorm', 'dragonascent', 'endure', 'feint', 'fleurcannon', 'focuspunch', 'followme', 'freezeshock', 'helpinghand', 'holdhands', 'hyperspacefury', 'hyperspacehole', 'iceburn', 'instruct', 'kingsshield', 'lightofruin', 'matblock', 'mefirst', 'metronome', 'mimic', 'mindblown', 'mirrorcoat', 'mirrormove', 'naturepower', 'originpulse', 'photongeyser', 'plasmafists', 'precipiceblades', 'protect', 'quash', 'quickguard', 'ragepowder', 'relicsong', 'secretsword', 'shelltrap', 'sketch', 'sleeptalk', 'snarl', 'snatch', 'snore', 'spectralthief', 'spikyshield', 'spotlight', 'steameruption', 'struggle', 'switcheroo', 'technoblast', 'thief', 'thousandarrows', 'thousandwaves', 'transform', 'trick', 'vcreate', 'wideguard'],
		onHit(target, source, effect) {
			let moves = [];
			for (let i in exports.BattleMovedex) {
				let move = exports.BattleMovedex[i];
				if (i !== move.id) continue;
				if (move.isZ || move.isNonstandard) continue;
				// @ts-ignore
				if (effect.noMetronome.includes(move.id)) continue;
				if (this.getMove(i).gen > this.gen) continue;
				moves.push(move);
			}
			let randomMove = '';
			if (moves.length) {
				moves.sort((a, b) => a.num - b.num);
				randomMove = this.sample(moves).id;
			}
			if (!randomMove) {
				return false;
			}
			this.useMove(randomMove, target);
		},
		secondary: null,
		target: "self",
		type: "Normal",
		contestType: "Cute",
	},
	"milkdrink": {
		num: 208,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user restores 1/2 of its maximum HP, rounded half up.",
		shortDesc: "Heals the user by 50% of its max HP.",
		id: "milkdrink",
		isViable: true,
		name: "Milk Drink",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		heal: [1, 2],
		secondary: null,
		target: "self",
		type: "Normal",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Cute",
	},
	"mimic": {
		num: 102,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "While the user remains active, this move is replaced by the last move used by the target. The copied move has the maximum PP for that move. Fails if the target has not made a move, if the user has Transformed, if the user already knows the move, or if the move is Chatter, Mimic, Sketch, Struggle, Transform, or any Z-Move.",
		shortDesc: "The last move the target used replaces this one.",
		id: "mimic",
		name: "Mimic",
		pp: 10,
		priority: 0,
		flags: {protect: 1, authentic: 1, mystery: 1},
		onHit(target, source) {
			let disallowedMoves = ['chatter', 'mimic', 'sketch', 'struggle', 'transform'];
			if (source.transformed || !target.lastMove || disallowedMoves.includes(target.lastMove.id) || source.moves.indexOf(target.lastMove.id) >= 0 || target.lastMove.isZ) return false;
			let mimicIndex = source.moves.indexOf('mimic');
			if (mimicIndex < 0) return false;
			let move = this.getMove(target.lastMove.id);
			source.moveSlots[mimicIndex] = {
				move: move.name,
				id: move.id,
				pp: move.pp,
				maxpp: move.pp,
				target: move.target,
				disabled: false,
				used: false,
				virtual: true,
			};
			this.add('-start', source, 'Mimic', move.name);
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMoveBoost: {accuracy: 1},
		contestType: "Cute",
	},
	"mindblown": {
		num: 720,
		accuracy: 100,
		basePower: 150,
		category: "Special",
		desc: "Whether or not this move is successful and even if it would cause fainting, the user loses 1/2 of its maximum HP, rounded up, unless the user has the Magic Guard Ability. This move is prevented from executing and the user does not lose HP if any active Pokemon has the Damp Ability, or if this move is Fire type and the user is affected by Powder or the weather is Primordial Sea.",
		shortDesc: "User loses 50% max HP. Hits adjacent Pokemon.",
		id: "mindblown",
		isViable: true,
		name: "Mind Blown",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		mindBlownRecoil: true,
		onAfterMove(pokemon, target, move) {
			if (move.mindBlownRecoil && !move.multihit) {
				this.damage(Math.round(pokemon.maxhp / 2), pokemon, pokemon, this.getEffect('Mind Blown'), true);
			}
		},
		secondary: null,
		target: "allAdjacent",
		type: "Fire",
		zMovePower: 200,
		contestType: "Cool",
	},
	"mindreader": {
		num: 170,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Until the end of the next turn, the target cannot avoid the user's moves, even if the target is in the middle of a two-turn move. The effect ends if either the user or the target leaves the field. Fails if this effect is active for the user.",
		shortDesc: "User's next move will not miss the target.",
		id: "mindreader",
		name: "Mind Reader",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onTryHit(target, source) {
			if (source.volatiles['lockon']) return false;
		},
		onHit(target, source) {
			source.addVolatile('lockon', target);
			this.add('-activate', source, 'move: Mind Reader', '[of] ' + target);
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMoveBoost: {spa: 1},
		contestType: "Clever",
	},
	"minimize": {
		num: 107,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Raises the user's evasiveness by 2 stages. Whether or not the user's evasiveness was changed, Body Slam, Dragon Rush, Flying Press, Heat Crash, Heavy Slam, Malicious Moonsault, Steamroller, and Stomp will not check accuracy and have their damage doubled if used against the user while it is active.",
		shortDesc: "Raises the user's evasiveness by 2.",
		id: "minimize",
		name: "Minimize",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		volatileStatus: 'minimize',
		effect: {
			noCopy: true,
			onSourceModifyDamage(damage, source, target, move) {
				if (['stomp', 'steamroller', 'bodyslam', 'flyingpress', 'dragonrush', 'heatcrash', 'heavyslam', 'maliciousmoonsault'].includes(move.id)) {
					return this.chainModify(2);
				}
			},
			onAccuracy(accuracy, target, source, move) {
				if (['stomp', 'steamroller', 'bodyslam', 'flyingpress', 'dragonrush', 'heatcrash', 'heavyslam', 'maliciousmoonsault'].includes(move.id)) {
					return true;
				}
				return accuracy;
			},
		},
		boosts: {
			evasion: 2,
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Cute",
	},
	"miracleeye": {
		num: 357,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "As long as the target remains active, its evasiveness stat stage is ignored during accuracy checks against it if it is greater than 0, and Psychic-type attacks can hit the target if it is a Dark type. Fails if the target is already affected, or affected by Foresight or Odor Sleuth.",
		shortDesc: "Psychic hits Dark. Evasiveness ignored.",
		id: "miracleeye",
		name: "Miracle Eye",
		pp: 40,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, authentic: 1},
		volatileStatus: 'miracleeye',
		onTryHit(target) {
			if (target.volatiles['foresight']) return false;
		},
		effect: {
			noCopy: true,
			onStart(pokemon) {
				this.add('-start', pokemon, 'Miracle Eye');
			},
			onNegateImmunity(pokemon, type) {
				if (pokemon.hasType('Dark') && type === 'Psychic') return false;
			},
			onModifyBoost(boosts) {
				if (boosts.evasion && boosts.evasion > 0) {
					boosts.evasion = 0;
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMoveBoost: {spa: 1},
		contestType: "Clever",
	},
	"mirrorcoat": {
		num: 243,
		accuracy: 100,
		basePower: 0,
		damageCallback(pokemon) {
			if (!pokemon.volatiles['mirrorcoat']) return 0;
			return pokemon.volatiles['mirrorcoat'].damage || 1;
		},
		category: "Special",
		desc: "Deals damage to the last opposing Pokemon to hit the user with a special attack this turn equal to twice the HP lost by the user from that attack. If the user did not lose HP from the attack, this move deals 1 HP of damage instead. If that opposing Pokemon's position is no longer in use and there is another opposing Pokemon on the field, the damage is done to it instead. Only the last hit of a multi-hit attack is counted. Fails if the user was not hit by an opposing Pokemon's special attack this turn.",
		shortDesc: "If hit by special attack, returns double damage.",
		id: "mirrorcoat",
		name: "Mirror Coat",
		pp: 20,
		priority: -5,
		flags: {protect: 1},
		beforeTurnCallback(pokemon) {
			pokemon.addVolatile('mirrorcoat');
		},
		onTryHit(target, source, move) {
			if (!source.volatiles['mirrorcoat']) return false;
			if (source.volatiles['mirrorcoat'].position === null) return false;
		},
		effect: {
			duration: 1,
			noCopy: true,
			onStart(target, source, move) {
				this.effectData.position = null;
				this.effectData.damage = 0;
			},
			onRedirectTargetPriority: -1,
			onRedirectTarget(target, source, source2) {
				if (source !== this.effectData.target) return;
				return source.side.foe.active[this.effectData.position];
			},
			onAfterDamage(damage, target, source, effect) {
				if (effect && effect.effectType === 'Move' && source.side !== target.side && this.getCategory(effect) === 'Special') {
					this.effectData.position = source.position;
					this.effectData.damage = 2 * damage;
				}
			},
		},
		secondary: null,
		target: "scripted",
		type: "Psychic",
		zMovePower: 100,
		contestType: "Beautiful",
	},
	"mirrormove": {
		num: 119,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user uses the last move used by the target. The copied move is used against that target, if possible. Fails if the target has not made a move, or if the last move used cannot be copied by this move.",
		shortDesc: "User uses the target's last used move against it.",
		id: "mirrormove",
		name: "Mirror Move",
		pp: 20,
		priority: 0,
		flags: {},
		onTryHit(target, pokemon) {
			if (!target.lastMove || !target.lastMove.flags['mirror'] || target.lastMove.isZ) {
				return false;
			}
			this.useMove(target.lastMove.id, pokemon, target);
			return null;
		},
		secondary: null,
		target: "normal",
		type: "Flying",
		zMoveBoost: {atk: 2},
		contestType: "Clever",
	},
	"mirrorshot": {
		num: 429,
		accuracy: 85,
		basePower: 65,
		category: "Special",
		desc: "Has a 30% chance to lower the target's accuracy by 1 stage.",
		shortDesc: "30% chance to lower the target's accuracy by 1.",
		id: "mirrorshot",
		name: "Mirror Shot",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			boosts: {
				accuracy: -1,
			},
		},
		target: "normal",
		type: "Steel",
		zMovePower: 120,
		contestType: "Beautiful",
	},
	"mist": {
		num: 54,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "For 5 turns, the user and its party members are protected from having their stat stages lowered by other Pokemon. Fails if the effect is already active on the user's side.",
		shortDesc: "For 5 turns, protects user's party from stat drops.",
		id: "mist",
		name: "Mist",
		pp: 30,
		priority: 0,
		flags: {snatch: 1},
		sideCondition: 'mist',
		effect: {
			duration: 5,
			onBoost(boost, target, source, effect) {
				if (source && target !== source && (!effect.infiltrates || target.side === source.side)) {
					let showMsg = false;
					for (let i in boost) {
						// @ts-ignore
						if (boost[i] < 0) {
							// @ts-ignore
							delete boost[i];
							showMsg = true;
						}
					}
					if (showMsg && !effect.secondaries) this.add('-activate', target, 'move: Mist');
				}
			},
			onStart(side) {
				this.add('-sidestart', side, 'Mist');
			},
			onResidualOrder: 21,
			onResidualSubOrder: 3,
			onEnd(side) {
				this.add('-sideend', side, 'Mist');
			},
		},
		secondary: null,
		target: "allySide",
		type: "Ice",
		zMoveEffect: 'heal',
		contestType: "Beautiful",
	},
	"mistball": {
		num: 296,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		desc: "Has a 50% chance to lower the target's Special Attack by 1 stage.",
		shortDesc: "50% chance to lower the target's Sp. Atk by 1.",
		id: "mistball",
		name: "Mist Ball",
		pp: 5,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 50,
			boosts: {
				spa: -1,
			},
		},
		target: "normal",
		type: "Psychic",
		zMovePower: 140,
		contestType: "Clever",
	},
	"mistyterrain": {
		num: 581,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "For 5 turns, the terrain becomes Misty Terrain. During the effect, the power of Dragon-type attacks used against grounded Pokemon is multiplied by 0.5 and grounded Pokemon cannot be inflicted with a major status condition nor confusion. Camouflage transforms the user into a Fairy type, Nature Power becomes Moonblast, and Secret Power has a 30% chance to lower Special Attack by 1 stage. Fails if the current terrain is Misty Terrain.",
		shortDesc: "5 turns. Can't status,-Dragon power vs grounded.",
		id: "mistyterrain",
		name: "Misty Terrain",
		pp: 10,
		priority: 0,
		flags: {nonsky: 1},
		terrain: 'mistyterrain',
		effect: {
			duration: 5,
			durationCallback(source, effect) {
				if (source && source.hasItem('terrainextender')) {
					return 8;
				}
				return 5;
			},
			onSetStatus(status, target, source, effect) {
				if (!target.isGrounded() || target.isSemiInvulnerable()) return;
				if (effect && effect.status) {
					this.add('-activate', target, 'move: Misty Terrain');
				}
				return false;
			},
			onTryAddVolatile(status, target, source, effect) {
				if (!target.isGrounded() || target.isSemiInvulnerable()) return;
				if (status.id === 'confusion') {
					if (effect.effectType === 'Move' && !effect.secondaries) this.add('-activate', target, 'move: Misty Terrain');
					return null;
				}
			},
			onBasePower(basePower, attacker, defender, move) {
				if (move.type === 'Dragon' && defender.isGrounded() && !defender.isSemiInvulnerable()) {
					this.debug('misty terrain weaken');
					return this.chainModify(0.5);
				}
			},
			onStart(battle, source, effect) {
				if (effect && effect.effectType === 'Ability') {
					this.add('-fieldstart', 'move: Misty Terrain', '[from] ability: ' + effect, '[of] ' + source);
				} else {
					this.add('-fieldstart', 'move: Misty Terrain');
				}
			},
			onResidualOrder: 21,
			onResidualSubOrder: 2,
			onEnd(side) {
				this.add('-fieldend', 'Misty Terrain');
			},
		},
		secondary: null,
		target: "all",
		type: "Fairy",
		zMoveBoost: {spd: 1},
		contestType: "Beautiful",
	},
	"moonblast": {
		num: 585,
		accuracy: 100,
		basePower: 95,
		category: "Special",
		desc: "Has a 30% chance to lower the target's Special Attack by 1 stage.",
		shortDesc: "30% chance to lower the target's Sp. Atk by 1.",
		id: "moonblast",
		isViable: true,
		name: "Moonblast",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			boosts: {
				spa: -1,
			},
		},
		target: "normal",
		type: "Fairy",
		zMovePower: 175,
		contestType: "Beautiful",
	},
	"moongeistbeam": {
		num: 714,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		desc: "This move and its effects ignore the Abilities of other Pokemon.",
		shortDesc: "Ignores the Abilities of other Pokemon.",
		id: "moongeistbeam",
		isViable: true,
		name: "Moongeist Beam",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		ignoreAbility: true,
		secondary: null,
		target: "normal",
		type: "Ghost",
		zMovePower: 180,
		contestType: "Cool",
	},
	"moonlight": {
		num: 236,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user restores 1/2 of its maximum HP if Delta Stream or no weather conditions are in effect, 2/3 of its maximum HP if the weather is Desolate Land or Sunny Day, and 1/4 of its maximum HP if the weather is Hail, Primordial Sea, Rain Dance, or Sandstorm, all rounded half down.",
		shortDesc: "Heals the user by a weather-dependent amount.",
		id: "moonlight",
		isViable: true,
		name: "Moonlight",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		onHit(pokemon) {
			let factor = 0.5;
			if (this.field.isWeather(['sunnyday', 'desolateland'])) {
				factor = 0.667;
			} else if (this.field.isWeather(['raindance', 'primordialsea', 'sandstorm', 'hail'])) {
				factor = 0.25;
			}
			return !!this.heal(this.modify(pokemon.maxhp, factor));
		},
		secondary: null,
		target: "self",
		type: "Fairy",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Beautiful",
	},
	"morningsun": {
		num: 234,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user restores 1/2 of its maximum HP if Delta Stream or no weather conditions are in effect, 2/3 of its maximum HP if the weather is Desolate Land or Sunny Day, and 1/4 of its maximum HP if the weather is Hail, Primordial Sea, Rain Dance, or Sandstorm, all rounded half down.",
		shortDesc: "Heals the user by a weather-dependent amount.",
		id: "morningsun",
		isViable: true,
		name: "Morning Sun",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		onHit(pokemon) {
			let factor = 0.5;
			if (this.field.isWeather(['sunnyday', 'desolateland'])) {
				factor = 0.667;
			} else if (this.field.isWeather(['raindance', 'primordialsea', 'sandstorm', 'hail'])) {
				factor = 0.25;
			}
			return !!this.heal(this.modify(pokemon.maxhp, factor));
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Beautiful",
	},
	"mudslap": {
		num: 189,
		accuracy: 100,
		basePower: 20,
		category: "Special",
		desc: "Has a 100% chance to lower the target's accuracy by 1 stage.",
		shortDesc: "100% chance to lower the target's accuracy by 1.",
		id: "mudslap",
		name: "Mud-Slap",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				accuracy: -1,
			},
		},
		target: "normal",
		type: "Ground",
		zMovePower: 100,
		contestType: "Cute",
	},
	"mudbomb": {
		num: 426,
		accuracy: 85,
		basePower: 65,
		category: "Special",
		desc: "Has a 30% chance to lower the target's accuracy by 1 stage.",
		shortDesc: "30% chance to lower the target's accuracy by 1.",
		id: "mudbomb",
		name: "Mud Bomb",
		pp: 10,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			boosts: {
				accuracy: -1,
			},
		},
		target: "normal",
		type: "Ground",
		zMovePower: 120,
		contestType: "Cute",
	},
	"mudshot": {
		num: 341,
		accuracy: 95,
		basePower: 55,
		category: "Special",
		desc: "Has a 100% chance to lower the target's Speed by 1 stage.",
		shortDesc: "100% chance to lower the target's Speed by 1.",
		id: "mudshot",
		name: "Mud Shot",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				spe: -1,
			},
		},
		target: "normal",
		type: "Ground",
		zMovePower: 100,
		contestType: "Tough",
	},
	"mudsport": {
		num: 300,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "For 5 turns, all Electric-type attacks used by any active Pokemon have their power multiplied by 0.33. Fails if this effect is already active.",
		shortDesc: "For 5 turns, Electric-type attacks have 1/3 power.",
		id: "mudsport",
		name: "Mud Sport",
		pp: 15,
		priority: 0,
		flags: {nonsky: 1},
		pseudoWeather: 'mudsport',
		effect: {
			duration: 5,
			onStart(side, source) {
				this.add('-fieldstart', 'move: Mud Sport', '[of] ' + source);
			},
			onBasePowerPriority: 1,
			onBasePower(basePower, attacker, defender, move) {
				if (move.type === 'Electric') {
					this.debug('mud sport weaken');
					return this.chainModify([0x548, 0x1000]);
				}
			},
			onResidualOrder: 21,
			onEnd() {
				this.add('-fieldend', 'move: Mud Sport');
			},
		},
		secondary: null,
		target: "all",
		type: "Ground",
		zMoveBoost: {spd: 1},
		contestType: "Cute",
	},
	"muddywater": {
		num: 330,
		accuracy: 85,
		basePower: 90,
		category: "Special",
		desc: "Has a 30% chance to lower the target's accuracy by 1 stage.",
		shortDesc: "30% chance to lower the foe(s) accuracy by 1.",
		id: "muddywater",
		name: "Muddy Water",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, nonsky: 1},
		secondary: {
			chance: 30,
			boosts: {
				accuracy: -1,
			},
		},
		target: "allAdjacentFoes",
		type: "Water",
		zMovePower: 175,
		contestType: "Tough",
	},
	"multiattack": {
		num: 718,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		desc: "This move's type depends on the user's held Memory.",
		shortDesc: "Type varies based on the held Memory.",
		id: "multiattack",
		isViable: true,
		name: "Multi-Attack",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onModifyMove(move, pokemon) {
			if (pokemon.ignoringItem()) return;
			move.type = this.runEvent('Memory', pokemon, null, move, 'Normal');
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 185,
		contestType: "Tough",
	},
	"mysticalfire": {
		num: 595,
		accuracy: 100,
		basePower: 75,
		category: "Special",
		desc: "Has a 100% chance to lower the target's Special Attack by 1 stage.",
		shortDesc: "100% chance to lower the target's Sp. Atk by 1.",
		id: "mysticalfire",
		name: "Mystical Fire",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				spa: -1,
			},
		},
		target: "normal",
		type: "Fire",
		zMovePower: 140,
		contestType: "Beautiful",
	},
	"nastyplot": {
		num: 417,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Raises the user's Special Attack by 2 stages.",
		shortDesc: "Raises the user's Sp. Atk by 2.",
		id: "nastyplot",
		isViable: true,
		name: "Nasty Plot",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			spa: 2,
		},
		secondary: null,
		target: "self",
		type: "Dark",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Clever",
	},
	"naturalgift": {
		num: 363,
		accuracy: 100,
		basePower: 0,
		category: "Physical",
		desc: "The type and power of this move depend on the user's held Berry, and the Berry is lost. Fails if the user is not holding a Berry, if the user has the Klutz Ability, or if Embargo or Magic Room is in effect for the user.",
		shortDesc: "Power and type depends on the user's Berry.",
		id: "naturalgift",
		name: "Natural Gift",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onPrepareHit(target, pokemon, move) {
			if (pokemon.ignoringItem()) return false;
			let item = pokemon.getItem();
			if (!item.naturalGift) return false;
			move.basePower = item.naturalGift.basePower;
			move.type = item.naturalGift.type;
			pokemon.setItem('');
			pokemon.lastItem = item.id;
			pokemon.usedItemThisTurn = true;
			this.runEvent('AfterUseItem', pokemon, null, null, item);
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 160,
		contestType: "Clever",
	},
	"naturepower": {
		num: 267,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "This move calls another move for use based on the battle terrain. Tri Attack on the regular Wi-Fi terrain, Thunderbolt during Electric Terrain, Moonblast during Misty Terrain, Energy Ball during Grassy Terrain, and Psychic during Psychic Terrain.",
		shortDesc: "Attack depends on terrain (default Tri Attack).",
		id: "naturepower",
		isViable: true,
		name: "Nature Power",
		pp: 20,
		priority: 0,
		flags: {},
		onTryHit(target, pokemon) {
			let move = 'triattack';
			if (this.field.isTerrain('electricterrain')) {
				move = 'thunderbolt';
			} else if (this.field.isTerrain('grassyterrain')) {
				move = 'energyball';
			} else if (this.field.isTerrain('mistyterrain')) {
				move = 'moonblast';
			} else if (this.field.isTerrain('psychicterrain')) {
				move = 'psychic';
			}
			this.useMove(move, pokemon, target);
			return null;
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Beautiful",
	},
	"naturesmadness": {
		num: 717,
		accuracy: 90,
		basePower: 0,
		damageCallback(pokemon, target) {
			return this.clampIntRange(Math.floor(target.hp / 2), 1);
		},
		category: "Special",
		desc: "Deals damage to the target equal to half of its current HP, rounded down, but not less than 1 HP.",
		shortDesc: "Does damage equal to 1/2 target's current HP.",
		id: "naturesmadness",
		isViable: true,
		name: "Nature's Madness",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		zMovePower: 100,
		contestType: "Tough",
	},
	"needlearm": {
		num: 302,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		desc: "Has a 30% chance to flinch the target.",
		shortDesc: "30% chance to flinch the target.",
		id: "needlearm",
		name: "Needle Arm",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Grass",
		zMovePower: 120,
		contestType: "Clever",
	},
	"neverendingnightmare": {
		num: 636,
		accuracy: true,
		basePower: 1,
		category: "Physical",
		shortDesc: "Power is equal to the base move's Z-Power.",
		id: "neverendingnightmare",
		isViable: true,
		name: "Never-Ending Nightmare",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "ghostiumz",
		secondary: null,
		target: "normal",
		type: "Ghost",
		contestType: "Cool",
	},
	"nightdaze": {
		num: 539,
		accuracy: 95,
		basePower: 85,
		category: "Special",
		desc: "Has a 40% chance to lower the target's accuracy by 1 stage.",
		shortDesc: "40% chance to lower the target's accuracy by 1.",
		id: "nightdaze",
		name: "Night Daze",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 40,
			boosts: {
				accuracy: -1,
			},
		},
		target: "normal",
		type: "Dark",
		zMovePower: 160,
		contestType: "Cool",
	},
	"nightshade": {
		num: 101,
		accuracy: 100,
		basePower: 0,
		damage: 'level',
		category: "Special",
		desc: "Deals damage to the target equal to the user's level.",
		shortDesc: "Does damage equal to the user's level.",
		id: "nightshade",
		isViable: true,
		name: "Night Shade",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		zMovePower: 100,
		contestType: "Clever",
	},
	"nightslash": {
		num: 400,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		desc: "Has a higher chance for a critical hit.",
		shortDesc: "High critical hit ratio.",
		id: "nightslash",
		isViable: true,
		name: "Night Slash",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		critRatio: 2,
		secondary: null,
		target: "normal",
		type: "Dark",
		zMovePower: 140,
		contestType: "Cool",
	},
	"nightmare": {
		num: 171,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "Causes the target to lose 1/4 of its maximum HP, rounded down, at the end of each turn as long as it is asleep. This move does not affect the target unless it is asleep. The effect ends when the target wakes up, even if it falls asleep again in the same turn.",
		shortDesc: "A sleeping target is hurt by 1/4 max HP per turn.",
		id: "nightmare",
		name: "Nightmare",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		volatileStatus: 'nightmare',
		effect: {
			noCopy: true,
			onStart(pokemon) {
				if (pokemon.status !== 'slp' && !pokemon.hasAbility('comatose')) {
					return false;
				}
				this.add('-start', pokemon, 'Nightmare');
			},
			onResidualOrder: 9,
			onResidual(pokemon) {
				this.damage(pokemon.maxhp / 4);
			},
		},
		secondary: null,
		target: "normal",
		type: "Ghost",
		zMoveBoost: {spa: 1},
		contestType: "Clever",
	},
	"nobleroar": {
		num: 568,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "Lowers the target's Attack and Special Attack by 1 stage.",
		shortDesc: "Lowers the target's Attack and Sp. Atk by 1.",
		id: "nobleroar",
		name: "Noble Roar",
		pp: 30,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, sound: 1, authentic: 1},
		boosts: {
			atk: -1,
			spa: -1,
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMoveBoost: {def: 1},
		contestType: "Tough",
	},
	"nuzzle": {
		num: 609,
		accuracy: 100,
		basePower: 20,
		category: "Physical",
		desc: "Has a 100% chance to paralyze the target.",
		shortDesc: "100% chance to paralyze the target.",
		id: "nuzzle",
		isViable: true,
		name: "Nuzzle",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			status: 'par',
		},
		target: "normal",
		type: "Electric",
		zMovePower: 100,
		contestType: "Cute",
	},
	"oblivionwing": {
		num: 613,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		desc: "The user recovers 3/4 the HP lost by the target, rounded half up. If Big Root is held by the user, the HP recovered is 1.3x normal, rounded half down.",
		shortDesc: "User recovers 75% of the damage dealt.",
		id: "oblivionwing",
		isViable: true,
		name: "Oblivion Wing",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, distance: 1, heal: 1},
		drain: [3, 4],
		secondary: null,
		target: "any",
		type: "Flying",
		zMovePower: 160,
		contestType: "Cool",
	},
	"oceanicoperetta": {
		num: 697,
		accuracy: true,
		basePower: 195,
		category: "Special",
		shortDesc: "No additional effect.",
		id: "oceanicoperetta",
		name: "Oceanic Operetta",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "primariumz",
		secondary: null,
		target: "normal",
		type: "Water",
		contestType: "Cool",
	},
	"octazooka": {
		num: 190,
		accuracy: 85,
		basePower: 65,
		category: "Special",
		desc: "Has a 50% chance to lower the target's accuracy by 1 stage.",
		shortDesc: "50% chance to lower the target's accuracy by 1.",
		id: "octazooka",
		name: "Octazooka",
		pp: 10,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 50,
			boosts: {
				accuracy: -1,
			},
		},
		target: "normal",
		type: "Water",
		zMovePower: 120,
		contestType: "Tough",
	},
	"odorsleuth": {
		num: 316,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "As long as the target remains active, its evasiveness stat stage is ignored during accuracy checks against it if it is greater than 0, and Normal- and Fighting-type attacks can hit the target if it is a Ghost type. Fails if the target is already affected, or affected by Foresight or Miracle Eye.",
		shortDesc: "Fighting, Normal hit Ghost. Evasiveness ignored.",
		id: "odorsleuth",
		name: "Odor Sleuth",
		pp: 40,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, authentic: 1, mystery: 1},
		volatileStatus: 'foresight',
		onTryHit(target) {
			if (target.volatiles['miracleeye']) return false;
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMoveBoost: {atk: 1},
		contestType: "Clever",
	},
	"ominouswind": {
		num: 466,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		desc: "Has a 10% chance to raise the user's Attack, Defense, Special Attack, Special Defense, and Speed by 1 stage.",
		shortDesc: "10% chance to raise all stats by 1 (not acc/eva).",
		id: "ominouswind",
		name: "Ominous Wind",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			self: {
				boosts: {
					atk: 1,
					def: 1,
					spa: 1,
					spd: 1,
					spe: 1,
				},
			},
		},
		target: "normal",
		type: "Ghost",
		zMovePower: 120,
		contestType: "Beautiful",
	},
	"originpulse": {
		num: 618,
		accuracy: 85,
		basePower: 110,
		category: "Special",
		desc: "No additional effect.",
		shortDesc: "No additional effect. Hits adjacent foes.",
		id: "originpulse",
		isViable: true,
		name: "Origin Pulse",
		pp: 10,
		priority: 0,
		flags: {protect: 1, pulse: 1, mirror: 1},
		target: "allAdjacentFoes",
		type: "Water",
		zMovePower: 185,
		contestType: "Beautiful",
	},
	"outrage": {
		num: 200,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		desc: "The user spends two or three turns locked into this move and becomes confused immediately after its move on the last turn of the effect if it is not already. This move targets an opposing Pokemon at random on each turn. If the user is prevented from moving, is asleep at the beginning of a turn, or the attack is not successful against the target on the first turn of the effect or the second turn of a three-turn effect, the effect ends without causing confusion. If this move is called by Sleep Talk and the user is asleep, the move is used for one turn and does not confuse the user.",
		shortDesc: "Lasts 2-3 turns. Confuses the user afterwards.",
		id: "outrage",
		isViable: true,
		name: "Outrage",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		self: {
			volatileStatus: 'lockedmove',
		},
		onAfterMove(pokemon) {
			if (pokemon.volatiles['lockedmove'] && pokemon.volatiles['lockedmove'].duration === 1) {
				pokemon.removeVolatile('lockedmove');
			}
		},
		secondary: null,
		target: "randomNormal",
		type: "Dragon",
		zMovePower: 190,
		contestType: "Cool",
	},
	"overheat": {
		num: 315,
		accuracy: 90,
		basePower: 130,
		category: "Special",
		desc: "Lowers the user's Special Attack by 2 stages.",
		shortDesc: "Lowers the user's Sp. Atk by 2.",
		id: "overheat",
		isViable: true,
		name: "Overheat",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		self: {
			boosts: {
				spa: -2,
			},
		},
		secondary: null,
		target: "normal",
		type: "Fire",
		zMovePower: 195,
		contestType: "Beautiful",
	},
	"painsplit": {
		num: 220,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user and the target's HP become the average of their current HP, rounded down, but not more than the maximum HP of either one.",
		shortDesc: "Shares HP of user and target equally.",
		id: "painsplit",
		isViable: true,
		name: "Pain Split",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1, mystery: 1},
		onHit(target, pokemon) {
			let averagehp = Math.floor((target.hp + pokemon.hp) / 2) || 1;
			target.sethp(averagehp);
			this.add('-sethp', target, target.getHealth, '[from] move: Pain Split', '[silent]');
			pokemon.sethp(averagehp);
			this.add('-sethp', pokemon, pokemon.getHealth, '[from] move: Pain Split');
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMoveBoost: {def: 1},
		contestType: "Clever",
	},
	"paraboliccharge": {
		num: 570,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		desc: "The user recovers 1/2 the HP lost by the target, rounded half up. If Big Root is held by the user, the HP recovered is 1.3x normal, rounded half down.",
		shortDesc: "User recovers 50% of the damage dealt.",
		id: "paraboliccharge",
		name: "Parabolic Charge",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1, heal: 1},
		drain: [1, 2],
		secondary: null,
		target: "allAdjacent",
		type: "Electric",
		zMovePower: 120,
		contestType: "Clever",
	},
	"partingshot": {
		num: 575,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "Lowers the target's Attack and Special Attack by 1 stage. If this move is successful, the user switches out even if it is trapped and is replaced immediately by a selected party member. The user does not switch out if the target's Attack and Special Attack stat stages were both unchanged, or if there are no unfainted party members.",
		shortDesc: "Lowers target's Atk, Sp. Atk by 1. User switches.",
		id: "partingshot",
		isViable: true,
		name: "Parting Shot",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, sound: 1, authentic: 1},
		selfSwitch: true,
		boosts: {
			atk: -1,
			spa: -1,
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		zMoveEffect: 'healreplacement',
		contestType: "Cool",
	},
	"payday": {
		num: 6,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		desc: "No additional effect.",
		shortDesc: "Scatters coins.",
		id: "payday",
		name: "Pay Day",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onHit() {
			this.add('-fieldactivate', 'move: Pay Day');
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 100,
		contestType: "Clever",
	},
	"payback": {
		num: 371,
		accuracy: 100,
		basePower: 50,
		basePowerCallback(pokemon, target, move) {
			if (target.newlySwitched || this.willMove(target)) {
				this.debug('Payback NOT boosted');
				return move.basePower;
			}
			this.debug('Payback damage boost');
			return move.basePower * 2;
		},
		category: "Physical",
		desc: "Power doubles if the user moves after the target this turn, including actions taken through Instruct or the Dancer Ability. Switching in does not count as an action.",
		shortDesc: "Power doubles if the user moves after the target.",
		id: "payback",
		name: "Payback",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		zMovePower: 100,
		contestType: "Tough",
	},
	"peck": {
		num: 64,
		accuracy: 100,
		basePower: 35,
		category: "Physical",
		shortDesc: "No additional effect.",
		id: "peck",
		name: "Peck",
		pp: 35,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, distance: 1},
		secondary: null,
		target: "any",
		type: "Flying",
		zMovePower: 100,
		contestType: "Cool",
	},
	"perishsong": {
		num: 195,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Each active Pokemon receives a perish count of 4 if it doesn't already have a perish count. At the end of each turn including the turn used, the perish count of all active Pokemon lowers by 1 and Pokemon faint if the number reaches 0. The perish count is removed from Pokemon that switch out. If a Pokemon uses Baton Pass while it has a perish count, the replacement will gain the perish count and continue to count down.",
		shortDesc: "All active Pokemon will faint in 3 turns.",
		id: "perishsong",
		isViable: true,
		name: "Perish Song",
		pp: 5,
		priority: 0,
		flags: {sound: 1, distance: 1, authentic: 1},
		onHitField(target, source, move) {
			let result = false;
			let message = false;
			for (const pokemon of this.getAllActive()) {
				if (!this.runEvent('Accuracy', pokemon, source, move, true)) {
					this.add('-miss', source, pokemon);
					result = true;
				} else if (this.runEvent('TryHit', pokemon, source, move) === null) {
					result = true;
				} else if (!pokemon.volatiles['perishsong']) {
					pokemon.addVolatile('perishsong');
					this.add('-start', pokemon, 'perish3', '[silent]');
					result = true;
					message = true;
				}
			}
			if (!result) return false;
			if (message) this.add('-fieldactivate', 'move: Perish Song');
		},
		effect: {
			duration: 4,
			onEnd(target) {
				this.add('-start', target, 'perish0');
				target.faint();
			},
			onResidualOrder: 20,
			onResidual(pokemon) {
				let duration = pokemon.volatiles['perishsong'].duration;
				this.add('-start', pokemon, 'perish' + duration);
			},
		},
		secondary: null,
		target: "all",
		type: "Normal",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Beautiful",
	},
	"petalblizzard": {
		num: 572,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		desc: "No additional effect.",
		shortDesc: "No additional effect. Hits adjacent Pokemon.",
		id: "petalblizzard",
		isViable: true,
		name: "Petal Blizzard",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Grass",
		zMovePower: 175,
		contestType: "Beautiful",
	},
	"petaldance": {
		num: 80,
		accuracy: 100,
		basePower: 120,
		category: "Special",
		desc: "The user spends two or three turns locked into this move and becomes confused immediately after its move on the last turn of the effect if it is not already. This move targets an opposing Pokemon at random on each turn. If the user is prevented from moving, is asleep at the beginning of a turn, or the attack is not successful against the target on the first turn of the effect or the second turn of a three-turn effect, the effect ends without causing confusion. If this move is called by Sleep Talk and the user is asleep, the move is used for one turn and does not confuse the user.",
		shortDesc: "Lasts 2-3 turns. Confuses the user afterwards.",
		id: "petaldance",
		name: "Petal Dance",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, dance: 1},
		self: {
			volatileStatus: 'lockedmove',
		},
		onAfterMove(pokemon) {
			if (pokemon.volatiles['lockedmove'] && pokemon.volatiles['lockedmove'].duration === 1) {
				pokemon.removeVolatile('lockedmove');
			}
		},
		secondary: null,
		target: "randomNormal",
		type: "Grass",
		zMovePower: 190,
		contestType: "Beautiful",
	},
	"phantomforce": {
		num: 566,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		desc: "If this move is successful, it breaks through the target's Baneful Bunker, Detect, King's Shield, Protect, or Spiky Shield for this turn, allowing other Pokemon to attack the target normally. If the target's side is protected by Crafty Shield, Mat Block, Quick Guard, or Wide Guard, that protection is also broken for this turn and other Pokemon may attack the target's side normally. This attack charges on the first turn and executes on the second. On the first turn, the user avoids all attacks. If the user is holding a Power Herb, the move completes in one turn.",
		shortDesc: "Disappears turn 1. Hits turn 2. Breaks protection.",
		id: "phantomforce",
		name: "Phantom Force",
		pp: 10,
		priority: 0,
		flags: {contact: 1, charge: 1, mirror: 1},
		breaksProtect: true,
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name, defender);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		effect: {
			duration: 2,
			onTryImmunity(target, source, move) {
				if (move.id === 'helpinghand') {
					return;
				}
				if (source.hasAbility('noguard') || target.hasAbility('noguard')) {
					return;
				}
				if (source.volatiles['lockon'] && target === source.volatiles['lockon'].source) return;
				return false;
			},
		},
		secondary: null,
		target: "normal",
		type: "Ghost",
		zMovePower: 175,
		contestType: "Cool",
	},
	"photongeyser": {
		num: 722,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		desc: "This move becomes a physical attack if the user's Attack is greater than its Special Attack, including stat stage changes. This move and its effects ignore the Abilities of other Pokemon.",
		shortDesc: "Physical if user's Atk > Sp. Atk. Ignores Abilities.",
		id: "photongeyser",
		isViable: true,
		name: "Photon Geyser",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onModifyMove(move, pokemon) {
			if (pokemon.getStat('atk', false, true) > pokemon.getStat('spa', false, true)) move.category = 'Physical';
		},
		ignoreAbility: true,
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMovePower: 180,
		contestType: "Cool",
	},
	"pikapapow": {
		num: 732,
		accuracy: true,
		basePower: 0,
		basePowerCallback(pokemon) {
			return Math.floor((pokemon.happiness * 10) / 25) || 1;
		},
		category: "Special",
		desc: "Power is equal to the greater of (user's Happiness * 2/5), rounded down, or 1.",
		shortDesc: "Max happiness: 102 power. Can't miss.",
		id: "pikapapow",
		isNonstandard: "LGPE",
		isUnreleased: true,
		isViable: true,
		name: "Pika Papow",
		pp: 20,
		priority: 0,
		flags: {protect: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
		contestType: "Cute",
	},
	"pinmissile": {
		num: 42,
		accuracy: 95,
		basePower: 25,
		category: "Physical",
		desc: "Hits two to five times. Has a 1/3 chance to hit two or three times, and a 1/6 chance to hit four or five times. If one of the hits breaks the target's substitute, it will take damage for the remaining hits. If the user has the Skill Link Ability, this move will always hit five times.",
		shortDesc: "Hits 2-5 times in one turn.",
		id: "pinmissile",
		name: "Pin Missile",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Bug",
		zMovePower: 140,
		contestType: "Cool",
	},
	"plasmafists": {
		num: 721,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		desc: "If this move is successful, causes Normal-type moves to become Electric type this turn.",
		shortDesc: "Normal moves become Electric type this turn.",
		id: "plasmafists",
		isViable: true,
		name: "Plasma Fists",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		pseudoWeather: 'iondeluge',
		secondary: null,
		target: "normal",
		type: "Electric",
		zMovePower: 180,
		contestType: "Cool",
	},
	"playnice": {
		num: 589,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Lowers the target's Attack by 1 stage.",
		shortDesc: "Lowers the target's Attack by 1.",
		id: "playnice",
		name: "Play Nice",
		pp: 20,
		priority: 0,
		flags: {reflectable: 1, mirror: 1, authentic: 1},
		boosts: {
			atk: -1,
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMoveBoost: {def: 1},
		contestType: "Cute",
	},
	"playrough": {
		num: 583,
		accuracy: 90,
		basePower: 90,
		category: "Physical",
		desc: "Has a 10% chance to lower the target's Attack by 1 stage.",
		shortDesc: "10% chance to lower the target's Attack by 1.",
		id: "playrough",
		isViable: true,
		name: "Play Rough",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			boosts: {
				atk: -1,
			},
		},
		target: "normal",
		type: "Fairy",
		zMovePower: 175,
		contestType: "Cute",
	},
	"pluck": {
		num: 365,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		desc: "If this move is successful and the user has not fainted, it steals the target's held Berry if it is holding one and eats it immediately, gaining its effects even if the user's item is being ignored. Items lost to this move cannot be regained with Recycle or the Harvest Ability.",
		shortDesc: "User steals and eats the target's Berry.",
		id: "pluck",
		name: "Pluck",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, distance: 1},
		onHit(target, source) {
			let item = target.getItem();
			if (source.hp && item.isBerry && target.takeItem(source)) {
				this.add('-enditem', target, item.name, '[from] stealeat', '[move] Pluck', '[of] ' + source);
				if (this.singleEvent('Eat', item, null, source, null, null)) {
					this.runEvent('EatItem', source, null, null, item);
				}
				if (item.onEat) source.ateBerry = true;
			}
		},
		secondary: null,
		target: "any",
		type: "Flying",
		zMovePower: 120,
		contestType: "Cute",
	},
	"poisonfang": {
		num: 305,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		desc: "Has a 50% chance to badly poison the target.",
		shortDesc: "50% chance to badly poison the target.",
		id: "poisonfang",
		name: "Poison Fang",
		pp: 15,
		priority: 0,
		flags: {bite: 1, contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 50,
			status: 'tox',
		},
		target: "normal",
		type: "Poison",
		zMovePower: 100,
		contestType: "Clever",
	},
	"poisongas": {
		num: 139,
		accuracy: 90,
		basePower: 0,
		category: "Status",
		desc: "Poisons the target.",
		shortDesc: "Poisons the foe(s).",
		id: "poisongas",
		name: "Poison Gas",
		pp: 40,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		status: 'psn',
		secondary: null,
		target: "allAdjacentFoes",
		type: "Poison",
		zMoveBoost: {def: 1},
		contestType: "Clever",
	},
	"poisonjab": {
		num: 398,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		desc: "Has a 30% chance to poison the target.",
		shortDesc: "30% chance to poison the target.",
		id: "poisonjab",
		isViable: true,
		name: "Poison Jab",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			status: 'psn',
		},
		target: "normal",
		type: "Poison",
		zMovePower: 160,
		contestType: "Tough",
	},
	"poisonpowder": {
		num: 77,
		accuracy: 75,
		basePower: 0,
		category: "Status",
		desc: "Poisons the target.",
		shortDesc: "Poisons the target.",
		id: "poisonpowder",
		name: "Poison Powder",
		pp: 35,
		priority: 0,
		flags: {powder: 1, protect: 1, reflectable: 1, mirror: 1},
		status: 'psn',
		secondary: null,
		target: "normal",
		type: "Poison",
		zMoveBoost: {def: 1},
		contestType: "Clever",
	},
	"poisonsting": {
		num: 40,
		accuracy: 100,
		basePower: 15,
		category: "Physical",
		desc: "Has a 30% chance to poison the target.",
		shortDesc: "30% chance to poison the target.",
		id: "poisonsting",
		name: "Poison Sting",
		pp: 35,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			status: 'psn',
		},
		target: "normal",
		type: "Poison",
		zMovePower: 100,
		contestType: "Clever",
	},
	"poisontail": {
		num: 342,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		desc: "Has a 10% chance to poison the target and a higher chance for a critical hit.",
		shortDesc: "High critical hit ratio. 10% chance to poison.",
		id: "poisontail",
		name: "Poison Tail",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		critRatio: 2,
		secondary: {
			chance: 10,
			status: 'psn',
		},
		target: "normal",
		type: "Poison",
		zMovePower: 100,
		contestType: "Clever",
	},
	"pollenpuff": {
		num: 676,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		desc: "If the target is an ally, this move restores 1/2 of its maximum HP, rounded down, instead of dealing damage.",
		shortDesc: "If the target is an ally, heals 50% of its max HP.",
		id: "pollenpuff",
		name: "Pollen Puff",
		pp: 15,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		onTryHit(target, source, move) {
			if (source.side === target.side) {
				move.basePower = 0;
				move.heal = [1, 2];
			}
		},
		secondary: null,
		target: "normal",
		type: "Bug",
		zMovePower: 175,
		contestType: "Cute",
	},
	"pound": {
		num: 1,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		shortDesc: "No additional effect.",
		id: "pound",
		name: "Pound",
		pp: 35,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 100,
		contestType: "Tough",
	},
	"powder": {
		num: 600,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "If the target uses a Fire-type move this turn, it is prevented from executing and the target loses 1/4 of its maximum HP, rounded half up. This effect does not happen if the Fire-type move is prevented by Primordial Sea.",
		shortDesc: "If using a Fire move, target loses 1/4 max HP.",
		id: "powder",
		name: "Powder",
		pp: 20,
		priority: 1,
		flags: {powder: 1, protect: 1, reflectable: 1, mirror: 1, authentic: 1},
		volatileStatus: 'powder',
		effect: {
			duration: 1,
			onStart(target) {
				this.add('-singleturn', target, 'Powder');
			},
			onTryMovePriority: -1,
			onTryMove(pokemon, target, move) {
				if (move.type === 'Fire') {
					this.add('-activate', pokemon, 'move: Powder');
					this.damage(this.clampIntRange(Math.round(pokemon.maxhp / 4), 1));
					return false;
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Bug",
		zMoveBoost: {spd: 2},
		contestType: "Clever",
	},
	"powdersnow": {
		num: 181,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		desc: "Has a 10% chance to freeze the target.",
		shortDesc: "10% chance to freeze the foe(s).",
		id: "powdersnow",
		name: "Powder Snow",
		pp: 25,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			status: 'frz',
		},
		target: "allAdjacentFoes",
		type: "Ice",
		zMovePower: 100,
		contestType: "Beautiful",
	},
	"powergem": {
		num: 408,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		shortDesc: "No additional effect.",
		id: "powergem",
		isViable: true,
		name: "Power Gem",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rock",
		zMovePower: 160,
		contestType: "Beautiful",
	},
	"powersplit": {
		num: 471,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user and the target have their Attack and Special Attack stats set to be equal to the average of the user and the target's Attack and Special Attack stats, respectively, rounded down. Stat stage changes are unaffected.",
		shortDesc: "Averages Attack and Sp. Atk stats with target.",
		id: "powersplit",
		name: "Power Split",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mystery: 1},
		onHit(target, source) {
			let newatk = Math.floor((target.storedStats.atk + source.storedStats.atk) / 2);
			target.storedStats.atk = newatk;
			source.storedStats.atk = newatk;
			let newspa = Math.floor((target.storedStats.spa + source.storedStats.spa) / 2);
			target.storedStats.spa = newspa;
			source.storedStats.spa = newspa;
			this.add('-activate', source, 'move: Power Split', '[of] ' + target);
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMoveBoost: {spe: 1},
		contestType: "Clever",
	},
	"powerswap": {
		num: 384,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user swaps its Attack and Special Attack stat stage changes with the target.",
		shortDesc: "Swaps Attack and Sp. Atk stat stages with target.",
		id: "powerswap",
		name: "Power Swap",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, authentic: 1, mystery: 1},
		onHit(target, source) {
			let targetBoosts = {};
			let sourceBoosts = {};

			for (const stat of ['atk', 'spa']) {
				// @ts-ignore
				targetBoosts[stat] = target.boosts[stat];
				// @ts-ignore
				sourceBoosts[stat] = source.boosts[stat];
			}

			source.setBoost(targetBoosts);
			target.setBoost(sourceBoosts);

			this.add('-swapboost', source, target, 'atk, spa', '[from] move: Power Swap');
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMoveBoost: {spe: 1},
		contestType: "Clever",
	},
	"powertrick": {
		num: 379,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user swaps its Attack and Defense stats, and stat stage changes remain on their respective stats. This move can be used again to swap the stats back. If the user uses Baton Pass, the replacement will have its Attack and Defense stats swapped if the effect is active. If the user has its stats recalculated by changing forme while its stats are swapped, this effect is ignored but is still active for the purposes of Baton Pass.",
		shortDesc: "Switches user's Attack and Defense stats.",
		id: "powertrick",
		name: "Power Trick",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		volatileStatus: 'powertrick',
		effect: {
			onStart(pokemon) {
				this.add('-start', pokemon, 'Power Trick');
				let newatk = pokemon.storedStats.def;
				let newdef = pokemon.storedStats.atk;
				pokemon.storedStats.atk = newatk;
				pokemon.storedStats.def = newdef;
			},
			onCopy(pokemon) {
				let newatk = pokemon.storedStats.def;
				let newdef = pokemon.storedStats.atk;
				pokemon.storedStats.atk = newatk;
				pokemon.storedStats.def = newdef;
			},
			onEnd(pokemon) {
				this.add('-end', pokemon, 'Power Trick');
				let newatk = pokemon.storedStats.def;
				let newdef = pokemon.storedStats.atk;
				pokemon.storedStats.atk = newatk;
				pokemon.storedStats.def = newdef;
			},
			onRestart(pokemon) {
				pokemon.removeVolatile('Power Trick');
			},
		},
		secondary: null,
		target: "self",
		type: "Psychic",
		zMoveBoost: {atk: 1},
		contestType: "Clever",
	},
	"powertrip": {
		num: 681,
		accuracy: 100,
		basePower: 20,
		basePowerCallback(pokemon, target, move) {
			return move.basePower + 20 * pokemon.positiveBoosts();
		},
		category: "Physical",
		desc: "Power is equal to 20+(X*20), where X is the user's total stat stage changes that are greater than 0.",
		shortDesc: " + 20 power for each of the user's stat boosts.",
		id: "powertrip",
		name: "Power Trip",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		zMovePower: 160,
		contestType: "Clever",
	},
	"poweruppunch": {
		num: 612,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		desc: "Has a 100% chance to raise the user's Attack by 1 stage.",
		shortDesc: "100% chance to raise the user's Attack by 1.",
		id: "poweruppunch",
		isViable: true,
		name: "Power-Up Punch",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: {
			chance: 100,
			self: {
				boosts: {
					atk: 1,
				},
			},
		},
		target: "normal",
		type: "Fighting",
		zMovePower: 100,
		contestType: "Tough",
	},
	"powerwhip": {
		num: 438,
		accuracy: 85,
		basePower: 120,
		category: "Physical",
		shortDesc: "No additional effect.",
		id: "powerwhip",
		isViable: true,
		name: "Power Whip",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		zMovePower: 190,
		contestType: "Tough",
	},
	"precipiceblades": {
		num: 619,
		accuracy: 85,
		basePower: 120,
		category: "Physical",
		desc: "No additional effect.",
		shortDesc: "No additional effect. Hits adjacent foes.",
		id: "precipiceblades",
		isViable: true,
		name: "Precipice Blades",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, nonsky: 1},
		target: "allAdjacentFoes",
		type: "Ground",
		zMovePower: 190,
		contestType: "Cool",
	},
	"present": {
		num: 217,
		accuracy: 90,
		basePower: 0,
		category: "Physical",
		desc: "If this move is successful, it deals damage or heals the target. 40% chance for 40 power, 30% chance for 80 power, 10% chance for 120 power, and 20% chance to heal the target by 1/4 of its maximum HP, rounded down.",
		shortDesc: "40, 80, 120 power, or heals target 1/4 max HP.",
		id: "present",
		name: "Present",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onModifyMove(move, pokemon, target) {
			let rand = this.random(10);
			if (rand < 2) {
				move.heal = [1, 4];
			} else if (rand < 6) {
				move.basePower = 40;
			} else if (rand < 9) {
				move.basePower = 80;
			} else {
				move.basePower = 120;
			}
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 100,
		contestType: "Cute",
	},
	"prismaticlaser": {
		num: 711,
		accuracy: 100,
		basePower: 160,
		category: "Special",
		desc: "If this move is successful, the user must recharge on the following turn and cannot select a move.",
		shortDesc: "User cannot move next turn.",
		id: "prismaticlaser",
		name: "Prismatic Laser",
		pp: 10,
		priority: 0,
		flags: {recharge: 1, protect: 1, mirror: 1},
		self: {
			volatileStatus: 'mustrecharge',
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMovePower: 200,
		contestType: "Cool",
	},
	"protect": {
		num: 182,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user is protected from most attacks made by other Pokemon during this turn. This move has a 1/X chance of being successful, where X starts at 1 and triples each time this move is successfully used. X resets to 1 if this move fails, if the user's last move used is not Baneful Bunker, Detect, Endure, King's Shield, Protect, Quick Guard, Spiky Shield, or Wide Guard, or if it was one of those moves and the user's protection was broken. Fails if the user moves last this turn.",
		shortDesc: "Prevents moves from affecting the user this turn.",
		id: "protect",
		isViable: true,
		name: "Protect",
		pp: 10,
		priority: 4,
		flags: {},
		stallingMove: true,
		volatileStatus: 'protect',
		onPrepareHit(pokemon) {
			return !!this.willAct() && this.runEvent('StallMove', pokemon);
		},
		onHit(pokemon) {
			pokemon.addVolatile('stall');
		},
		effect: {
			duration: 1,
			onStart(target) {
				this.add('-singleturn', target, 'Protect');
			},
			onTryHitPriority: 3,
			onTryHit(target, source, move) {
				if (!move.flags['protect']) {
					if (move.isZ) target.getMoveHitData(move).zBrokeProtect = true;
					return;
				}
				this.add('-activate', target, 'move: Protect');
				let lockedmove = source.getVolatile('lockedmove');
				if (lockedmove) {
					// Outrage counter is reset
					if (source.volatiles['lockedmove'].duration === 2) {
						delete source.volatiles['lockedmove'];
					}
				}
				return this.NOT_FAIL;
			},
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Cute",
	},
	"psybeam": {
		num: 60,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		desc: "Has a 10% chance to confuse the target.",
		shortDesc: "10% chance to confuse the target.",
		id: "psybeam",
		name: "Psybeam",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			volatileStatus: 'confusion',
		},
		target: "normal",
		type: "Psychic",
		zMovePower: 120,
		contestType: "Beautiful",
	},
	"psychup": {
		num: 244,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user copies all of the target's current stat stage changes.",
		shortDesc: "Copies the target's current stat stages.",
		id: "psychup",
		name: "Psych Up",
		pp: 10,
		priority: 0,
		flags: {authentic: 1, mystery: 1},
		onHit(target, source) {
			for (let i in target.boosts) {
				// @ts-ignore
				source.boosts[i] = target.boosts[i];
			}
			if (target.volatiles['focusenergy']) source.addVolatile('focusenergy');
			if (target.volatiles['laserfocus']) source.addVolatile('laserfocus');
			this.add('-copyboost', source, target, '[from] move: Psych Up');
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMoveEffect: 'heal',
		contestType: "Clever",
	},
	"psychic": {
		num: 94,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		desc: "Has a 10% chance to lower the target's Special Defense by 1 stage.",
		shortDesc: "10% chance to lower the target's Sp. Def by 1.",
		id: "psychic",
		isViable: true,
		name: "Psychic",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			boosts: {
				spd: -1,
			},
		},
		target: "normal",
		type: "Psychic",
		zMovePower: 175,
		contestType: "Clever",
	},
	"psychicfangs": {
		num: 706,
		accuracy: 100,
		basePower: 85,
		category: "Physical",
		desc: "If this attack does not miss, the effects of Reflect, Light Screen, and Aurora Veil end for the target's side of the field before damage is calculated.",
		shortDesc: "Destroys screens, unless the target is immune.",
		id: "psychicfangs",
		isViable: true,
		name: "Psychic Fangs",
		pp: 10,
		priority: 0,
		flags: {bite: 1, contact: 1, protect: 1, mirror: 1},
		onTryHit(pokemon) {
			// will shatter screens through sub, before you hit
			if (pokemon.runImmunity('Psychic')) {
				pokemon.side.removeSideCondition('reflect');
				pokemon.side.removeSideCondition('lightscreen');
				pokemon.side.removeSideCondition('auroraveil');
			}
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMovePower: 160,
		contestType: "Clever",
	},
	"psychicterrain": {
		num: 678,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "For 5 turns, the terrain becomes Psychic Terrain. During the effect, the power of Psychic-type attacks made by grounded Pokemon is multiplied by 1.5 and grounded Pokemon cannot be hit by moves with priority greater than 0, unless the target is an ally. Camouflage transforms the user into a Psychic type, Nature Power becomes Psychic, and Secret Power has a 30% chance to lower the target's Speed by 1 stage. Fails if the current terrain is Psychic Terrain.",
		shortDesc: "5 turns. Grounded: +Psychic power, priority-safe.",
		id: "psychicterrain",
		name: "Psychic Terrain",
		pp: 10,
		priority: 0,
		flags: {nonsky: 1},
		terrain: 'psychicterrain',
		effect: {
			duration: 5,
			durationCallback(source, effect) {
				if (source && source.hasItem('terrainextender')) {
					return 8;
				}
				return 5;
			},
			onTryHitPriority: 4,
			onTryHit(target, source, effect) {
				if (!target.isGrounded() || target.isSemiInvulnerable() || target.side === source.side) return;
				if (effect && (effect.priority <= 0.1 || effect.target === 'self')) {
					return;
				}
				this.add('-activate', target, 'move: Psychic Terrain');
				return null;
			},
			onBasePower(basePower, attacker, defender, move) {
				if (move.type === 'Psychic' && attacker.isGrounded() && !attacker.isSemiInvulnerable()) {
					this.debug('psychic terrain boost');
					return this.chainModify(1.5);
				}
			},
			onStart(battle, source, effect) {
				if (effect && effect.effectType === 'Ability') {
					this.add('-fieldstart', 'move: Psychic Terrain', '[from] ability: ' + effect, '[of] ' + source);
				} else {
					this.add('-fieldstart', 'move: Psychic Terrain');
				}
			},
			onResidualOrder: 21,
			onResidualSubOrder: 2,
			onEnd() {
				this.add('-fieldend', 'move: Psychic Terrain');
			},
		},
		secondary: null,
		target: "all",
		type: "Psychic",
		zMoveBoost: {spa: 1},
		contestType: "Clever",
	},
	"psychoboost": {
		num: 354,
		accuracy: 90,
		basePower: 140,
		category: "Special",
		desc: "Lowers the user's Special Attack by 2 stages.",
		shortDesc: "Lowers the user's Sp. Atk by 2.",
		id: "psychoboost",
		isViable: true,
		name: "Psycho Boost",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		self: {
			boosts: {
				spa: -2,
			},
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMovePower: 200,
		contestType: "Clever",
	},
	"psychocut": {
		num: 427,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		desc: "Has a higher chance for a critical hit.",
		shortDesc: "High critical hit ratio.",
		id: "psychocut",
		isViable: true,
		name: "Psycho Cut",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		critRatio: 2,
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMovePower: 140,
		contestType: "Cool",
	},
	"psychoshift": {
		num: 375,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "The user's major status condition is transferred to the target, and the user is then cured. Fails if the user has no major status condition or if the target already has one.",
		shortDesc: "Transfers the user's status ailment to the target.",
		id: "psychoshift",
		name: "Psycho Shift",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onPrepareHit(target, source, move) {
			if (!source.status) return false;
			move.status = source.status;
		},
		self: {
			onHit(pokemon) {
				pokemon.cureStatus();
			},
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMoveBoost: {spa: 2},
		contestType: "Clever",
	},
	"psyshock": {
		num: 473,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		defensiveCategory: "Physical",
		desc: "Deals damage to the target based on its Defense instead of Special Defense.",
		shortDesc: "Damages target based on Defense, not Sp. Def.",
		id: "psyshock",
		isViable: true,
		name: "Psyshock",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMovePower: 160,
		contestType: "Beautiful",
	},
	"psystrike": {
		num: 540,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		defensiveCategory: "Physical",
		desc: "Deals damage to the target based on its Defense instead of Special Defense.",
		shortDesc: "Damages target based on Defense, not Sp. Def.",
		id: "psystrike",
		isViable: true,
		name: "Psystrike",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMovePower: 180,
		contestType: "Cool",
	},
	"psywave": {
		num: 149,
		accuracy: 100,
		basePower: 0,
		damageCallback(pokemon) {
			return (this.random(50, 151) * pokemon.level) / 100;
		},
		category: "Special",
		desc: "Deals damage to the target equal to (user's level) * (X + 50) / 100, where X is a random number from 0 to 100, rounded down, but not less than 1 HP.",
		shortDesc: "Random damage equal to 0.5x-1.5x user's level.",
		id: "psywave",
		name: "Psywave",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMovePower: 100,
		contestType: "Clever",
	},
	"pulverizingpancake": {
		num: 701,
		accuracy: true,
		basePower: 210,
		category: "Physical",
		shortDesc: "No additional effect.",
		id: "pulverizingpancake",
		name: "Pulverizing Pancake",
		pp: 1,
		priority: 0,
		flags: {contact: 1},
		isZ: "snorliumz",
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Cool",
	},
	"punishment": {
		num: 386,
		accuracy: 100,
		basePower: 0,
		basePowerCallback(pokemon, target) {
			let power = 60 + 20 * target.positiveBoosts();
			if (power > 200) power = 200;
			return power;
		},
		category: "Physical",
		desc: "Power is equal to 60+(X*20), where X is the target's total stat stage changes that are greater than 0, but not more than 200 power.",
		shortDesc: "60 power +20 for each of the target's stat boosts.",
		id: "punishment",
		name: "Punishment",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		zMovePower: 160,
		contestType: "Cool",
	},
	"purify": {
		num: 685,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The target is cured if it has a major status condition. If the target was cured, the user restores 1/2 of its maximum HP, rounded half up.",
		shortDesc: "Cures target's status; heals user 1/2 max HP if so.",
		id: "purify",
		name: "Purify",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, heal: 1},
		onHit(target, source) {
			if (!target.cureStatus()) return false;
			this.heal(Math.ceil(source.maxhp * 0.5), source);
		},
		secondary: null,
		target: "normal",
		type: "Poison",
		zMoveBoost: {atk: 1, def: 1, spa: 1, spd: 1, spe: 1},
		contestType: "Beautiful",
	},
	"pursuit": {
		num: 228,
		accuracy: 100,
		basePower: 40,
		basePowerCallback(pokemon, target, move) {
			// You can't get here unless the pursuit succeeds
			if (target.beingCalledBack) {
				this.debug('Pursuit damage boost');
				return move.basePower * 2;
			}
			return move.basePower;
		},
		category: "Physical",
		desc: "If an opposing Pokemon switches out this turn, this move hits that Pokemon before it leaves the field, even if it was not the original target. If the user moves after an opponent using Parting Shot, U-turn, or Volt Switch, but not Baton Pass, it will hit that opponent before it leaves the field. Power doubles and no accuracy check is done if the user hits an opponent switching out, and the user's turn is over; if an opponent faints from this, the replacement Pokemon does not become active until the end of the turn.",
		shortDesc: "Power doubles if a foe is switching out.",
		id: "pursuit",
		isViable: true,
		name: "Pursuit",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		beforeTurnCallback(pokemon) {
			for (const side of this.sides) {
				if (side === pokemon.side) continue;
				side.addSideCondition('pursuit', pokemon);
				const data = side.getSideConditionData('pursuit');
				if (!data.sources) {
					data.sources = [];
				}
				data.sources.push(pokemon);
			}
		},
		onModifyMove(move, source, target) {
			if (target && target.beingCalledBack) move.accuracy = true;
		},
		onTryHit(target, pokemon) {
			target.side.removeSideCondition('pursuit');
		},
		effect: {
			duration: 1,
			onBeforeSwitchOut(pokemon) {
				this.debug('Pursuit start');
				let alreadyAdded = false;
				for (const source of this.effectData.sources) {
					if (!this.cancelMove(source) || !source.hp) continue;
					if (!alreadyAdded) {
						this.add('-activate', pokemon, 'move: Pursuit');
						alreadyAdded = true;
					}
					// Run through each action in queue to check if the Pursuit user is supposed to Mega Evolve this turn.
					// If it is, then Mega Evolve before moving.
					if (source.canMegaEvo || source.canUltraBurst) {
						for (const [actionIndex, action] of this.queue.entries()) {
							if (action.pokemon === source && action.choice === 'megaEvo') {
								this.runMegaEvo(source);
								this.queue.splice(actionIndex, 1);
								break;
							}
						}
					}
					this.runMove('pursuit', source, this.getTargetLoc(pokemon, source));
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		zMovePower: 100,
		contestType: "Clever",
	},
	"quash": {
		num: 511,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "Causes the target to take its turn after all other Pokemon this turn, no matter the priority of its selected move. Fails if the target already moved this turn.",
		shortDesc: "Forces the target to move last this turn.",
		id: "quash",
		name: "Quash",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onHit(target) {
			if (target.side.active.length < 2) return false; // fails in singles
			let action = this.willMove(target);
			if (action) {
				action.priority = -7.1;
				this.cancelMove(target);
				for (let i = this.queue.length - 1; i >= 0; i--) {
					if (this.queue[i].choice === 'residual') {
						this.queue.splice(i, 0, action);
						break;
					}
				}
				this.add('-activate', target, 'move: Quash');
			} else {
				return false;
			}
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		zMoveBoost: {spe: 1},
		contestType: "Clever",
	},
	"quickattack": {
		num: 98,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		desc: "No additional effect.",
		shortDesc: "Usually goes first.",
		id: "quickattack",
		isViable: true,
		name: "Quick Attack",
		pp: 30,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 100,
		contestType: "Cool",
	},
	"quickguard": {
		num: 501,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user and its party members are protected from attacks with original or altered priority greater than 0 made by other Pokemon, including allies, during this turn. This move modifies the same 1/X chance of being successful used by other protection moves, where X starts at 1 and triples each time this move is successfully used, but does not use the chance to check for failure. X resets to 1 if this move fails, if the user's last move used is not Baneful Bunker, Detect, Endure, King's Shield, Protect, Quick Guard, Spiky Shield, or Wide Guard, or if it was one of those moves and the user's protection was broken. Fails if the user moves last this turn or if this move is already in effect for the user's side.",
		shortDesc: "Protects allies from priority attacks this turn.",
		id: "quickguard",
		name: "Quick Guard",
		pp: 15,
		priority: 3,
		flags: {snatch: 1},
		sideCondition: 'quickguard',
		onTryHitSide(side, source) {
			return !!this.willAct();
		},
		onHitSide(side, source) {
			source.addVolatile('stall');
		},
		effect: {
			duration: 1,
			onStart(target, source) {
				this.add('-singleturn', source, 'Quick Guard');
			},
			onTryHitPriority: 4,
			onTryHit(target, source, move) {
				// Quick Guard blocks moves with positive priority, even those given increased priority by Prankster or Gale Wings.
				// (e.g. it blocks 0 priority moves boosted by Prankster or Gale Wings; Quick Claw/Custap Berry do not count)
				if (move.priority <= 0.1) return;
				if (!move.flags['protect']) {
					if (move.isZ) target.getMoveHitData(move).zBrokeProtect = true;
					return;
				}
				this.add('-activate', target, 'move: Quick Guard');
				let lockedmove = source.getVolatile('lockedmove');
				if (lockedmove) {
					// Outrage counter is reset
					if (source.volatiles['lockedmove'].duration === 2) {
						delete source.volatiles['lockedmove'];
					}
				}
				return this.NOT_FAIL;
			},
		},
		secondary: null,
		target: "allySide",
		type: "Fighting",
		zMoveBoost: {def: 1},
		contestType: "Cool",
	},
	"quiverdance": {
		num: 483,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Raises the user's Special Attack, Special Defense, and Speed by 1 stage.",
		shortDesc: "Raises the user's Sp. Atk, Sp. Def, Speed by 1.",
		id: "quiverdance",
		isViable: true,
		name: "Quiver Dance",
		pp: 20,
		priority: 0,
		flags: {snatch: 1, dance: 1},
		boosts: {
			spa: 1,
			spd: 1,
			spe: 1,
		},
		secondary: null,
		target: "self",
		type: "Bug",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Beautiful",
	},
	"rage": {
		num: 99,
		accuracy: 100,
		basePower: 20,
		category: "Physical",
		desc: "Once this move is successfully used, the user's Attack is raised by 1 stage every time it is hit by another Pokemon's attack as long as this move is chosen for use.",
		shortDesc: "Raises the user's Attack by 1 if hit during use.",
		id: "rage",
		name: "Rage",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		self: {
			volatileStatus: 'rage',
		},
		effect: {
			onStart(pokemon) {
				this.add('-singlemove', pokemon, 'Rage');
			},
			onHit(target, source, move) {
				if (target !== source && move.category !== 'Status') {
					this.boost({atk: 1});
				}
			},
			onBeforeMovePriority: 100,
			onBeforeMove(pokemon) {
				this.debug('removing Rage before attack');
				pokemon.removeVolatile('rage');
			},
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 100,
		contestType: "Tough",
	},
	"ragepowder": {
		num: 476,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Until the end of the turn, all single-target attacks from the opposing side are redirected to the user. Such attacks are redirected to the user before they can be reflected by Magic Coat or the Magic Bounce Ability, or drawn in by the Lightning Rod or Storm Drain Abilities. Fails if it is not a Double Battle or Battle Royal. This effect is ignored while the user is under the effect of Sky Drop.",
		shortDesc: "The foes' moves target the user on the turn used.",
		id: "ragepowder",
		name: "Rage Powder",
		pp: 20,
		priority: 2,
		flags: {powder: 1},
		volatileStatus: 'ragepowder',
		onTryHit(target) {
			if (target.side.active.length < 2) return false;
		},
		effect: {
			duration: 1,
			onStart(pokemon) {
				this.add('-singleturn', pokemon, 'move: Rage Powder');
			},
			onFoeRedirectTargetPriority: 1,
			onFoeRedirectTarget(target, source, source2, move) {
				if (!this.effectData.target.isSkyDropped() && source.runStatusImmunity('powder') && this.validTarget(this.effectData.target, source, move.target)) {
					this.debug("Rage Powder redirected target of move");
					return this.effectData.target;
				}
			},
		},
		secondary: null,
		target: "self",
		type: "Bug",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Clever",
	},
	"raindance": {
		num: 240,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "For 5 turns, the weather becomes Rain Dance. The damage of Water-type attacks is multiplied by 1.5 and the damage of Fire-type attacks is multiplied by 0.5 during the effect. Lasts for 8 turns if the user is holding Damp Rock. Fails if the current weather is Rain Dance.",
		shortDesc: "For 5 turns, heavy rain powers Water moves.",
		id: "raindance",
		name: "Rain Dance",
		pp: 5,
		priority: 0,
		flags: {},
		weather: 'RainDance',
		secondary: null,
		target: "all",
		type: "Water",
		zMoveBoost: {spe: 1},
		contestType: "Beautiful",
	},
	"rapidspin": {
		num: 229,
		accuracy: 100,
		basePower: 20,
		category: "Physical",
		desc: "If this move is successful and the user has not fainted, the effects of Leech Seed and binding moves end for the user, and all hazards are removed from the user's side of the field.",
		shortDesc: "Frees user from hazards, binding, Leech Seed.",
		id: "rapidspin",
		isViable: true,
		name: "Rapid Spin",
		pp: 40,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		self: {
			onHit(pokemon) {
				if (pokemon.hp && pokemon.removeVolatile('leechseed')) {
					this.add('-end', pokemon, 'Leech Seed', '[from] move: Rapid Spin', '[of] ' + pokemon);
				}
				let sideConditions = ['spikes', 'toxicspikes', 'stealthrock', 'stickyweb'];
				for (const condition of sideConditions) {
					if (pokemon.hp && pokemon.side.removeSideCondition(condition)) {
						this.add('-sideend', pokemon.side, this.getEffect(condition).name, '[from] move: Rapid Spin', '[of] ' + pokemon);
					}
				}
				if (pokemon.hp && pokemon.volatiles['partiallytrapped']) {
					pokemon.removeVolatile('partiallytrapped');
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 100,
		contestType: "Cool",
	},
	"razorleaf": {
		num: 75,
		accuracy: 95,
		basePower: 55,
		category: "Physical",
		desc: "Has a higher chance for a critical hit.",
		shortDesc: "High critical hit ratio. Hits adjacent foes.",
		id: "razorleaf",
		name: "Razor Leaf",
		pp: 25,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		critRatio: 2,
		secondary: null,
		target: "allAdjacentFoes",
		type: "Grass",
		zMovePower: 100,
		contestType: "Cool",
	},
	"razorshell": {
		num: 534,
		accuracy: 95,
		basePower: 75,
		category: "Physical",
		desc: "Has a 50% chance to lower the target's Defense by 1 stage.",
		shortDesc: "50% chance to lower the target's Defense by 1.",
		id: "razorshell",
		isViable: true,
		name: "Razor Shell",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 50,
			boosts: {
				def: -1,
			},
		},
		target: "normal",
		type: "Water",
		zMovePower: 140,
		contestType: "Cool",
	},
	"razorwind": {
		num: 13,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		desc: "Has a higher chance for a critical hit. This attack charges on the first turn and executes on the second. If the user is holding a Power Herb, the move completes in one turn.",
		shortDesc: "Charges, then hits foe(s) turn 2. High crit ratio.",
		id: "razorwind",
		name: "Razor Wind",
		pp: 10,
		priority: 0,
		flags: {charge: 1, protect: 1, mirror: 1},
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name, defender);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		critRatio: 2,
		secondary: null,
		target: "allAdjacentFoes",
		type: "Normal",
		zMovePower: 160,
		contestType: "Cool",
	},
	"recover": {
		num: 105,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user restores 1/2 of its maximum HP, rounded half up.",
		shortDesc: "Heals the user by 50% of its max HP.",
		id: "recover",
		isViable: true,
		name: "Recover",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		heal: [1, 2],
		secondary: null,
		target: "self",
		type: "Normal",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Clever",
	},
	"recycle": {
		num: 278,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user regains the item it last used. Fails if the user is holding an item, if the user has not held an item, if the item was a popped Air Balloon, if the item was picked up by a Pokemon with the Pickup Ability, or if the item was lost to Bug Bite, Covet, Incinerate, Knock Off, Pluck, or Thief. Items thrown with Fling can be regained.",
		shortDesc: "Restores the item the user last used.",
		id: "recycle",
		name: "Recycle",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		onHit(pokemon) {
			if (pokemon.item || !pokemon.lastItem) return false;
			pokemon.setItem(pokemon.lastItem);
			pokemon.lastItem = '';
			this.add('-item', pokemon, pokemon.getItem(), '[from] move: Recycle');
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMoveBoost: {spe: 2},
		contestType: "Clever",
	},
	"reflect": {
		num: 115,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "For 5 turns, the user and its party members take 0.5x damage from physical attacks, or 0.66x damage if in a Double Battle. Damage is not reduced further with Aurora Veil. Critical hits ignore this effect. It is removed from the user's side if the user or an ally is successfully hit by Brick Break, Psychic Fangs, or Defog. Lasts for 8 turns if the user is holding Light Clay. Fails if the effect is already active on the user's side.",
		shortDesc: "For 5 turns, physical damage to allies is halved.",
		id: "reflect",
		isViable: true,
		name: "Reflect",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		sideCondition: 'reflect',
		effect: {
			duration: 5,
			durationCallback(target, source, effect) {
				if (source && source.hasItem('lightclay')) {
					return 8;
				}
				return 5;
			},
			onAnyModifyDamage(damage, source, target, move) {
				if (target !== source && target.side === this.effectData.target && this.getCategory(move) === 'Physical') {
					if (!target.getMoveHitData(move).crit && !move.infiltrates) {
						this.debug('Reflect weaken');
						if (target.side.active.length > 1) return this.chainModify([0xAAC, 0x1000]);
						return this.chainModify(0.5);
					}
				}
			},
			onStart(side) {
				this.add('-sidestart', side, 'Reflect');
			},
			onResidualOrder: 21,
			onEnd(side) {
				this.add('-sideend', side, 'Reflect');
			},
		},
		secondary: null,
		target: "allySide",
		type: "Psychic",
		zMoveBoost: {def: 1},
		contestType: "Clever",
	},
	"reflecttype": {
		num: 513,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Causes the user's types to become the same as the current types of the target. If the target's current types include typeless and a non-added type, typeless is ignored. If the target's current types include typeless and an added type from Forest's Curse or Trick-or-Treat, typeless is copied as the Normal type instead. Fails if the user is an Arceus or a Silvally, or if the target's current type is typeless alone.",
		shortDesc: "User becomes the same type as the target.",
		id: "reflecttype",
		name: "Reflect Type",
		pp: 15,
		priority: 0,
		flags: {protect: 1, authentic: 1, mystery: 1},
		onHit(target, source) {
			if (source.template && (source.template.num === 493 || source.template.num === 773)) return false;
			let newBaseTypes = target.getTypes(true).filter(type => type !== '???');
			if (!newBaseTypes.length) {
				if (target.addedType) {
					newBaseTypes = ['Normal'];
				} else {
					return false;
				}
			}
			this.add('-start', source, 'typechange', '[from] move: Reflect Type', '[of] ' + target);
			source.setType(newBaseTypes);
			source.addedType = target.addedType;
			source.knownType = target.side === source.side && target.knownType;
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMoveBoost: {spa: 1},
		contestType: "Clever",
	},
	"refresh": {
		num: 287,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user cures its burn, poison, or paralysis. Fails if the user is not burned, poisoned, or paralyzed.",
		shortDesc: "User cures its burn, poison, or paralysis.",
		id: "refresh",
		isViable: true,
		name: "Refresh",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		onHit(pokemon) {
			if (['', 'slp', 'frz'].includes(pokemon.status)) return false;
			pokemon.cureStatus();
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMoveEffect: 'heal',
		contestType: "Cute",
	},
	"relicsong": {
		num: 547,
		accuracy: 100,
		basePower: 75,
		category: "Special",
		desc: "Has a 10% chance to cause the target to fall asleep. If this move is successful on at least one target and the user is a Meloetta, it changes to Pirouette Forme if it is currently in Aria Forme, or changes to Aria Forme if it is currently in Pirouette Forme. This forme change does not happen if the Meloetta has the Sheer Force Ability. The Pirouette Forme reverts to Aria Forme when Meloetta is not active.",
		shortDesc: "10% chance to sleep foe(s). Meloetta transforms.",
		id: "relicsong",
		isViable: true,
		name: "Relic Song",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1, authentic: 1},
		secondary: {
			chance: 10,
			status: 'slp',
		},
		onHit(target, pokemon, move) {
			if (pokemon.baseTemplate.baseSpecies === 'Meloetta' && !pokemon.transformed) {
				move.willChangeForme = true;
			}
		},
		onAfterMoveSecondarySelf(pokemon, target, move) {
			if (move.willChangeForme) {
				pokemon.formeChange(pokemon.template.speciesid === 'meloettapirouette' ? 'Meloetta' : 'Meloetta-Pirouette', this.effect, false, '[msg]');
			}
		},
		target: "allAdjacentFoes",
		type: "Normal",
		zMovePower: 140,
		contestType: "Beautiful",
	},
	"rest": {
		num: 156,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user falls asleep for the next two turns and restores all of its HP, curing itself of any major status condition in the process. Fails if the user has full HP, is already asleep, or if another effect is preventing sleep.",
		shortDesc: "User sleeps 2 turns and restores HP and status.",
		id: "rest",
		isViable: true,
		name: "Rest",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		onTryMove(pokemon) {
			if (pokemon.hp < pokemon.maxhp && pokemon.status !== 'slp' && !pokemon.hasAbility('comatose')) return;
			this.add('-fail', pokemon);
			return null;
		},
		onHit(target, source, move) {
			if (!target.setStatus('slp', source, move)) return false;
			target.statusData.time = 3;
			target.statusData.startTime = 3;
			this.heal(target.maxhp); // Aesthetic only as the healing happens after you fall asleep in-game
		},
		secondary: null,
		target: "self",
		type: "Psychic",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Cute",
	},
	"retaliate": {
		num: 514,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		desc: "Power doubles if one of the user's party members fainted last turn.",
		shortDesc: "Power doubles if an ally fainted last turn.",
		id: "retaliate",
		name: "Retaliate",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onBasePower(basePower, pokemon) {
			if (pokemon.side.faintedLastTurn) {
				this.debug('Boosted for a faint last turn');
				return this.chainModify(2);
			}
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 140,
		contestType: "Cool",
	},
	"return": {
		num: 216,
		accuracy: 100,
		basePower: 0,
		basePowerCallback(pokemon) {
			return Math.floor((pokemon.happiness * 10) / 25) || 1;
		},
		category: "Physical",
		desc: "Power is equal to the greater of (user's Happiness * 2/5), rounded down, or 1.",
		shortDesc: "Max 102 power at maximum Happiness.",
		id: "return",
		isViable: true,
		name: "Return",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 160,
		contestType: "Cute",
	},
	"revelationdance": {
		num: 686,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		desc: "This move's type depends on the user's primary type. If the user's primary type is typeless, this move's type is the user's secondary type if it has one, otherwise the added type from Forest's Curse or Trick-or-Treat. This move is typeless if the user's type is typeless alone.",
		shortDesc: "Type varies based on the user's primary type.",
		id: "revelationdance",
		isViable: true,
		name: "Revelation Dance",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, dance: 1},
		onModifyMove(move, pokemon) {
			let type = pokemon.types[0];
			if (type === "Bird") type = "???";
			move.type = type;
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 175,
		contestType: "Beautiful",
	},
	"revenge": {
		num: 279,
		accuracy: 100,
		basePower: 60,
		basePowerCallback(pokemon, target, move) {
			let damagedByTarget = pokemon.attackedBy.some(p =>
				p.source === target && p.damage > 0 && p.thisTurn
			);
			if (damagedByTarget) {
				this.debug('Boosted for getting hit by ' + target);
				return move.basePower * 2;
			}
			return move.basePower;
		},
		category: "Physical",
		desc: "Power doubles if the user was hit by the target this turn.",
		shortDesc: "Power doubles if user is damaged by the target.",
		id: "revenge",
		name: "Revenge",
		pp: 10,
		priority: -4,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		zMovePower: 120,
		contestType: "Tough",
	},
	"reversal": {
		num: 179,
		accuracy: 100,
		basePower: 0,
		basePowerCallback(pokemon, target) {
			let ratio = pokemon.hp * 48 / pokemon.maxhp;
			if (ratio < 2) {
				return 200;
			}
			if (ratio < 5) {
				return 150;
			}
			if (ratio < 10) {
				return 100;
			}
			if (ratio < 17) {
				return 80;
			}
			if (ratio < 33) {
				return 40;
			}
			return 20;
		},
		category: "Physical",
		desc: "The power of this move is 20 if X is 33 to 48, 40 if X is 17 to 32, 80 if X is 10 to 16, 100 if X is 5 to 9, 150 if X is 2 to 4, and 200 if X is 0 or 1, where X is equal to (user's current HP * 48 / user's maximum HP), rounded down.",
		shortDesc: "More power the less HP the user has left.",
		id: "reversal",
		name: "Reversal",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		zMovePower: 160,
		contestType: "Cool",
	},
	"roar": {
		num: 46,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The target is forced to switch out and be replaced with a random unfainted ally. Fails if the target is the last unfainted Pokemon in its party, or if the target used Ingrain previously or has the Suction Cups Ability.",
		shortDesc: "Forces the target to switch to a random ally.",
		id: "roar",
		isViable: true,
		name: "Roar",
		pp: 20,
		priority: -6,
		flags: {reflectable: 1, mirror: 1, sound: 1, authentic: 1, mystery: 1},
		forceSwitch: true,
		secondary: null,
		target: "normal",
		type: "Normal",
		zMoveBoost: {def: 1},
		contestType: "Cool",
	},
	"roaroftime": {
		num: 459,
		accuracy: 90,
		basePower: 150,
		category: "Special",
		desc: "If this move is successful, the user must recharge on the following turn and cannot select a move.",
		shortDesc: "User cannot move next turn.",
		id: "roaroftime",
		name: "Roar of Time",
		pp: 5,
		priority: 0,
		flags: {recharge: 1, protect: 1, mirror: 1},
		self: {
			volatileStatus: 'mustrecharge',
		},
		secondary: null,
		target: "normal",
		type: "Dragon",
		zMovePower: 200,
		contestType: "Beautiful",
	},
	"rockblast": {
		num: 350,
		accuracy: 90,
		basePower: 25,
		category: "Physical",
		desc: "Hits two to five times. Has a 1/3 chance to hit two or three times, and a 1/6 chance to hit four or five times. If one of the hits breaks the target's substitute, it will take damage for the remaining hits. If the user has the Skill Link Ability, this move will always hit five times.",
		shortDesc: "Hits 2-5 times in one turn.",
		id: "rockblast",
		isViable: true,
		name: "Rock Blast",
		pp: 10,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Rock",
		zMovePower: 140,
		contestType: "Tough",
	},
	"rockclimb": {
		num: 431,
		accuracy: 85,
		basePower: 90,
		category: "Physical",
		desc: "Has a 20% chance to confuse the target.",
		shortDesc: "20% chance to confuse the target.",
		id: "rockclimb",
		name: "Rock Climb",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			volatileStatus: 'confusion',
		},
		target: "normal",
		type: "Normal",
		zMovePower: 175,
		contestType: "Tough",
	},
	"rockpolish": {
		num: 397,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Raises the user's Speed by 2 stages.",
		shortDesc: "Raises the user's Speed by 2.",
		id: "rockpolish",
		isViable: true,
		name: "Rock Polish",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			spe: 2,
		},
		secondary: null,
		target: "self",
		type: "Rock",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Tough",
	},
	"rockslide": {
		num: 157,
		accuracy: 90,
		basePower: 75,
		category: "Physical",
		desc: "Has a 30% chance to flinch the target.",
		shortDesc: "30% chance to flinch the foe(s).",
		id: "rockslide",
		isViable: true,
		name: "Rock Slide",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "allAdjacentFoes",
		type: "Rock",
		zMovePower: 140,
		contestType: "Tough",
	},
	"rocksmash": {
		num: 249,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		desc: "Has a 50% chance to lower the target's Defense by 1 stage.",
		shortDesc: "50% chance to lower the target's Defense by 1.",
		id: "rocksmash",
		name: "Rock Smash",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 50,
			boosts: {
				def: -1,
			},
		},
		target: "normal",
		type: "Fighting",
		zMovePower: 100,
		contestType: "Tough",
	},
	"rockthrow": {
		num: 88,
		accuracy: 90,
		basePower: 50,
		category: "Physical",
		shortDesc: "No additional effect.",
		id: "rockthrow",
		name: "Rock Throw",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rock",
		zMovePower: 100,
		contestType: "Tough",
	},
	"rocktomb": {
		num: 317,
		accuracy: 95,
		basePower: 60,
		category: "Physical",
		desc: "Has a 100% chance to lower the target's Speed by 1 stage.",
		shortDesc: "100% chance to lower the target's Speed by 1.",
		id: "rocktomb",
		name: "Rock Tomb",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				spe: -1,
			},
		},
		target: "normal",
		type: "Rock",
		zMovePower: 120,
		contestType: "Clever",
	},
	"rockwrecker": {
		num: 439,
		accuracy: 90,
		basePower: 150,
		category: "Physical",
		desc: "If this move is successful, the user must recharge on the following turn and cannot select a move.",
		shortDesc: "User cannot move next turn.",
		id: "rockwrecker",
		name: "Rock Wrecker",
		pp: 5,
		priority: 0,
		flags: {bullet: 1, recharge: 1, protect: 1, mirror: 1},
		self: {
			volatileStatus: 'mustrecharge',
		},
		secondary: null,
		target: "normal",
		type: "Rock",
		zMovePower: 200,
		contestType: "Tough",
	},
	"roleplay": {
		num: 272,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user's Ability changes to match the target's Ability. Fails if the user's Ability is Battle Bond, Comatose, Disguise, Multitype, Power Construct, RKS System, Schooling, Shields Down, Stance Change, or already matches the target, or if the target's Ability is Battle Bond, Comatose, Disguise, Flower Gift, Forecast, Illusion, Imposter, Multitype, Power Construct, Power of Alchemy, Receiver, RKS System, Schooling, Shields Down, Stance Change, Trace, Wonder Guard, or Zen Mode.",
		shortDesc: "User replaces its Ability with the target's.",
		id: "roleplay",
		name: "Role Play",
		pp: 10,
		priority: 0,
		flags: {authentic: 1, mystery: 1},
		onTryHit(target, source) {
			let bannedTargetAbilities = ['battlebond', 'comatose', 'disguise', 'flowergift', 'forecast', 'illusion', 'imposter', 'multitype', 'powerconstruct', 'powerofalchemy', 'receiver', 'rkssystem', 'schooling', 'shieldsdown', 'stancechange', 'trace', 'wonderguard', 'zenmode'];
			let bannedSourceAbilities = ['battlebond', 'comatose', 'disguise', 'multitype', 'powerconstruct', 'rkssystem', 'schooling', 'shieldsdown', 'stancechange'];
			if (bannedTargetAbilities.includes(target.ability) || bannedSourceAbilities.includes(source.ability) || target.ability === source.ability) {
				return false;
			}
		},
		onHit(target, source) {
			let oldAbility = source.setAbility(target.ability);
			if (oldAbility) {
				this.add('-ability', source, this.getAbility(source.ability).name, '[from] move: Role Play', '[of] ' + target);
				return;
			}
			return false;
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMoveBoost: {spe: 1},
		contestType: "Cute",
	},
	"rollingkick": {
		num: 27,
		accuracy: 85,
		basePower: 60,
		category: "Physical",
		desc: "Has a 30% chance to flinch the target.",
		shortDesc: "30% chance to flinch the target.",
		id: "rollingkick",
		name: "Rolling Kick",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Fighting",
		zMovePower: 120,
		contestType: "Cool",
	},
	"rollout": {
		num: 205,
		accuracy: 90,
		basePower: 30,
		basePowerCallback(pokemon, target, move) {
			let bp = move.basePower;
			if (pokemon.volatiles.rollout && pokemon.volatiles.rollout.hitCount) {
				bp *= Math.pow(2, pokemon.volatiles.rollout.hitCount);
			}
			if (pokemon.status !== 'slp') pokemon.addVolatile('rollout');
			if (pokemon.volatiles.defensecurl) {
				bp *= 2;
			}
			this.debug("Rollout bp: " + bp);
			return bp;
		},
		category: "Physical",
		desc: "If this move is successful, the user is locked into this move and cannot make another move until it misses, 5 turns have passed, or the attack cannot be used. Power doubles with each successful hit of this move and doubles again if Defense Curl was used previously by the user. If this move is called by Sleep Talk, the move is used for one turn. If this move hits an active Disguise during the effect, the power multiplier is paused but the turn counter is not, potentially allowing the multiplier to be used on the user's next move after this effect ends.",
		shortDesc: "Power doubles with each hit. Repeats for 5 turns.",
		id: "rollout",
		name: "Rollout",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		effect: {
			duration: 2,
			onLockMove: 'rollout',
			onStart() {
				this.effectData.hitCount = 1;
			},
			onRestart() {
				this.effectData.hitCount++;
				if (this.effectData.hitCount < 5) {
					this.effectData.duration = 2;
				}
			},
			onResidual(target) {
				if (target.lastMove && target.lastMove.id === 'struggle') {
					// don't lock
					delete target.volatiles['rollout'];
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Rock",
		zMovePower: 100,
		contestType: "Cute",
	},
	"roost": {
		num: 355,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user restores 1/2 of its maximum HP, rounded half up. Until the end of the turn, Flying-type users lose their Flying type and pure Flying-type users become Normal type. Does nothing if the user's HP is full.",
		shortDesc: "Heals 50% HP. Flying-type removed 'til turn ends.",
		id: "roost",
		isViable: true,
		name: "Roost",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		heal: [1, 2],
		self: {
			volatileStatus: 'roost',
		},
		effect: {
			duration: 1,
			onResidualOrder: 20,
			onStart(target) {
				this.add('-singleturn', target, 'move: Roost');
			},
			onTypePriority: -1,
			onType(types, pokemon) {
				this.effectData.typeWas = types;
				return types.filter(type => type !== 'Flying');
			},
		},
		secondary: null,
		target: "self",
		type: "Flying",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Clever",
	},
	"rototiller": {
		num: 563,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Raises the Attack and Special Attack of all grounded Grass-type Pokemon on the field by 1 stage.",
		shortDesc: "Raises Atk/Sp. Atk of grounded Grass types by 1.",
		id: "rototiller",
		name: "Rototiller",
		pp: 10,
		priority: 0,
		flags: {distance: 1, nonsky: 1},
		onHitField(target, source) {
			let targets = [];
			let anyAirborne = false;
			for (const pokemon of this.getAllActive()) {
				if (!pokemon.runImmunity('Ground')) {
					this.add('-immune', pokemon);
					anyAirborne = true;
					continue;
				}
				if (pokemon.hasType('Grass')) {
					// This move affects every grounded Grass-type Pokemon in play.
					targets.push(pokemon);
				}
			}
			if (!targets.length && !anyAirborne) return false; // Fails when there are no grounded Grass types or airborne Pokemon
			for (const pokemon of targets) {
				this.boost({atk: 1, spa: 1}, pokemon, source);
			}
		},
		secondary: null,
		target: "all",
		type: "Ground",
		zMoveBoost: {atk: 1},
		contestType: "Tough",
	},
	"round": {
		num: 496,
		accuracy: 100,
		basePower: 60,
		basePowerCallback(target, source, move) {
			if (move.sourceEffect === 'round') {
				return move.basePower * 2;
			}
			return move.basePower;
		},
		category: "Special",
		desc: "If there are other active Pokemon that chose this move for use this turn, those Pokemon take their turn immediately after the user, in Speed order, and this move's power is 120 for each other user.",
		shortDesc: "Power doubles if others used Round this turn.",
		id: "round",
		name: "Round",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1, authentic: 1},
		onTry() {
			for (const action of this.queue) {
				// @ts-ignore
				if (!action.pokemon || !action.move) continue;
				// @ts-ignore
				if (action.move.id === 'round') {
					// @ts-ignore
					this.prioritizeAction(action);
					return;
				}
			}
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 120,
		contestType: "Beautiful",
	},
	"sacredfire": {
		num: 221,
		accuracy: 95,
		basePower: 100,
		category: "Physical",
		desc: "Has a 50% chance to burn the target.",
		shortDesc: "50% chance to burn the target. Thaws user.",
		id: "sacredfire",
		isViable: true,
		name: "Sacred Fire",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		secondary: {
			chance: 50,
			status: 'brn',
		},
		target: "normal",
		type: "Fire",
		zMovePower: 180,
		contestType: "Beautiful",
	},
	"sacredsword": {
		num: 533,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		desc: "Ignores the target's stat stage changes, including evasiveness.",
		shortDesc: "Ignores the target's stat stage changes.",
		id: "sacredsword",
		isViable: true,
		name: "Sacred Sword",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		ignoreEvasion: true,
		ignoreDefensive: true,
		secondary: null,
		target: "normal",
		type: "Fighting",
		zMovePower: 175,
		contestType: "Cool",
	},
	"safeguard": {
		num: 219,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "For 5 turns, the user and its party members cannot have major status conditions or confusion inflicted on them by other Pokemon. It is removed from the user's side if the user or an ally is successfully hit by Defog. Fails if the effect is already active on the user's side.",
		shortDesc: "For 5 turns, protects user's party from status.",
		id: "safeguard",
		name: "Safeguard",
		pp: 25,
		priority: 0,
		flags: {snatch: 1},
		sideCondition: 'safeguard',
		effect: {
			duration: 5,
			durationCallback(target, source, effect) {
				if (source && source.hasAbility('persistent')) {
					this.add('-activate', source, 'ability: Persistent', effect);
					return 7;
				}
				return 5;
			},
			onSetStatus(status, target, source, effect) {
				if (source && target !== source && effect && (!effect.infiltrates || target.side === source.side)) {
					this.debug('interrupting setStatus');
					if (effect.id === 'synchronize' || (effect.effectType === 'Move' && !effect.secondaries)) {
						this.add('-activate', target, 'move: Safeguard');
					}
					return null;
				}
			},
			onTryAddVolatile(status, target, source, effect) {
				if ((status.id === 'confusion' || status.id === 'yawn') && source && target !== source && effect && (!effect.infiltrates || target.side === source.side)) {
					if (effect.effectType === 'Move' && !effect.secondaries) this.add('-activate', target, 'move: Safeguard');
					return null;
				}
			},
			onStart(side) {
				this.add('-sidestart', side, 'Safeguard');
			},
			onResidualOrder: 21,
			onResidualSubOrder: 2,
			onEnd(side) {
				this.add('-sideend', side, 'Safeguard');
			},
		},
		secondary: null,
		target: "allySide",
		type: "Normal",
		zMoveBoost: {spe: 1},
		contestType: "Beautiful",
	},
	"sandattack": {
		num: 28,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "Lowers the target's accuracy by 1 stage.",
		shortDesc: "Lowers the target's accuracy by 1.",
		id: "sandattack",
		name: "Sand Attack",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		boosts: {
			accuracy: -1,
		},
		secondary: null,
		target: "normal",
		type: "Ground",
		zMoveBoost: {evasion: 1},
		contestType: "Cute",
	},
	"sandtomb": {
		num: 328,
		accuracy: 85,
		basePower: 35,
		category: "Physical",
		desc: "Prevents the target from switching for four or five turns (seven turns if the user is holding Grip Claw). Causes damage to the target equal to 1/8 of its maximum HP (1/6 if the user is holding Binding Band), rounded down, at the end of each turn during effect. The target can still switch out if it is holding Shed Shell or uses Baton Pass, Parting Shot, U-turn, or Volt Switch. The effect ends if either the user or the target leaves the field, or if the target uses Rapid Spin or Substitute successfully. This effect is not stackable or reset by using this or another binding move.",
		shortDesc: "Traps and damages the target for 4-5 turns.",
		id: "sandtomb",
		name: "Sand Tomb",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Ground",
		zMovePower: 100,
		contestType: "Clever",
	},
	"sandstorm": {
		num: 201,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "For 5 turns, the weather becomes Sandstorm. At the end of each turn except the last, all active Pokemon lose 1/16 of their maximum HP, rounded down, unless they are a Ground, Rock, or Steel type, or have the Magic Guard, Overcoat, Sand Force, Sand Rush, or Sand Veil Abilities. During the effect, the Special Defense of Rock-type Pokemon is multiplied by 1.5 when taking damage from a special attack. Lasts for 8 turns if the user is holding Smooth Rock. Fails if the current weather is Sandstorm.",
		shortDesc: "For 5 turns, a sandstorm rages.",
		id: "sandstorm",
		name: "Sandstorm",
		pp: 10,
		priority: 0,
		flags: {},
		weather: 'Sandstorm',
		secondary: null,
		target: "all",
		type: "Rock",
		zMoveBoost: {spe: 1},
		contestType: "Tough",
	},
	"sappyseed": {
		num: 738,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		desc: "This move summons Leech Seed on the foe.",
		shortDesc: "Summons Leech Seed.",
		id: "sappyseed",
		isNonstandard: "LGPE",
		isUnreleased: true,
		isViable: true,
		name: "Sappy Seed",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1},
		onHit(target, source) {
			if (target.hasType('Grass')) return null;
			target.addVolatile('leechseed', source);
		},
		secondary: null,
		target: "normal",
		type: "Grass",
		contestType: "Clever",
	},
	"savagespinout": {
		num: 634,
		accuracy: true,
		basePower: 1,
		category: "Physical",
		shortDesc: "Power is equal to the base move's Z-Power.",
		id: "savagespinout",
		name: "Savage Spin-Out",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "buginiumz",
		secondary: null,
		target: "normal",
		type: "Bug",
		contestType: "Cool",
	},
	"scald": {
		num: 503,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		desc: "Has a 30% chance to burn the target. The target thaws out if it is frozen.",
		shortDesc: "30% chance to burn the target. Thaws target.",
		id: "scald",
		isViable: true,
		name: "Scald",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		thawsTarget: true,
		secondary: {
			chance: 30,
			status: 'brn',
		},
		target: "normal",
		type: "Water",
		zMovePower: 160,
		contestType: "Tough",
	},
	"scaryface": {
		num: 184,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "Lowers the target's Speed by 2 stages.",
		shortDesc: "Lowers the target's Speed by 2.",
		id: "scaryface",
		name: "Scary Face",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, mystery: 1},
		boosts: {
			spe: -2,
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMoveBoost: {spe: 1},
		contestType: "Tough",
	},
	"scratch": {
		num: 10,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		shortDesc: "No additional effect.",
		id: "scratch",
		name: "Scratch",
		pp: 35,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 100,
		contestType: "Tough",
	},
	"screech": {
		num: 103,
		accuracy: 85,
		basePower: 0,
		category: "Status",
		desc: "Lowers the target's Defense by 2 stages.",
		shortDesc: "Lowers the target's Defense by 2.",
		id: "screech",
		name: "Screech",
		pp: 40,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, sound: 1, authentic: 1, mystery: 1},
		boosts: {
			def: -2,
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMoveBoost: {atk: 1},
		contestType: "Clever",
	},
	"searingshot": {
		num: 545,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		desc: "Has a 30% chance to burn the target.",
		shortDesc: "30% chance to burn adjacent Pokemon.",
		id: "searingshot",
		isViable: true,
		name: "Searing Shot",
		pp: 5,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			status: 'brn',
		},
		target: "allAdjacent",
		type: "Fire",
		zMovePower: 180,
		contestType: "Cool",
	},
	"searingsunrazesmash": {
		num: 724,
		accuracy: true,
		basePower: 200,
		category: "Physical",
		desc: "This move and its effects ignore the Abilities of other Pokemon.",
		shortDesc: "Ignores the Abilities of other Pokemon.",
		id: "searingsunrazesmash",
		name: "Searing Sunraze Smash",
		pp: 1,
		priority: 0,
		flags: {contact: 1},
		isZ: "solganiumz",
		ignoreAbility: true,
		secondary: null,
		target: "normal",
		type: "Steel",
		contestType: "Cool",
	},
	"secretpower": {
		num: 290,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		desc: "Has a 30% chance to cause a secondary effect on the target based on the battle terrain. Causes paralysis on the regular Wi-Fi terrain, causes paralysis during Electric Terrain, lowers Special Attack by 1 stage during Misty Terrain, causes sleep during Grassy Terrain and lowers Speed by 1 stage during Psychic Terrain.",
		shortDesc: "Effect varies with terrain. (30% paralysis chance)",
		id: "secretpower",
		name: "Secret Power",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onModifyMove(move, pokemon) {
			if (this.field.isTerrain('')) return;
			move.secondaries = [];
			if (this.field.isTerrain('electricterrain')) {
				move.secondaries.push({
					chance: 30,
					status: 'par',
				});
			} else if (this.field.isTerrain('grassyterrain')) {
				move.secondaries.push({
					chance: 30,
					status: 'slp',
				});
			} else if (this.field.isTerrain('mistyterrain')) {
				move.secondaries.push({
					chance: 30,
					boosts: {
						spa: -1,
					},
				});
			} else if (this.field.isTerrain('psychicterrain')) {
				move.secondaries.push({
					chance: 30,
					boosts: {
						spe: -1,
					},
				});
			}
		},
		secondary: {
			chance: 30,
			status: 'par',
		},
		target: "normal",
		type: "Normal",
		zMovePower: 140,
		contestType: "Clever",
	},
	"secretsword": {
		num: 548,
		accuracy: 100,
		basePower: 85,
		category: "Special",
		defensiveCategory: "Physical",
		desc: "Deals damage to the target based on its Defense instead of Special Defense.",
		shortDesc: "Damages target based on Defense, not Sp. Def.",
		id: "secretsword",
		isViable: true,
		name: "Secret Sword",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		zMovePower: 160,
		contestType: "Beautiful",
	},
	"seedbomb": {
		num: 402,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		shortDesc: "No additional effect.",
		id: "seedbomb",
		isViable: true,
		name: "Seed Bomb",
		pp: 15,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		zMovePower: 160,
		contestType: "Tough",
	},
	"seedflare": {
		num: 465,
		accuracy: 85,
		basePower: 120,
		category: "Special",
		desc: "Has a 40% chance to lower the target's Special Defense by 2 stages.",
		shortDesc: "40% chance to lower the target's Sp. Def by 2.",
		id: "seedflare",
		isViable: true,
		name: "Seed Flare",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 40,
			boosts: {
				spd: -2,
			},
		},
		target: "normal",
		type: "Grass",
		zMovePower: 190,
		contestType: "Beautiful",
	},
	"seismictoss": {
		num: 69,
		accuracy: 100,
		basePower: 0,
		damage: 'level',
		category: "Physical",
		desc: "Deals damage to the target equal to the user's level.",
		shortDesc: "Does damage equal to the user's level.",
		id: "seismictoss",
		isViable: true,
		name: "Seismic Toss",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, nonsky: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		zMovePower: 100,
		contestType: "Tough",
	},
	"selfdestruct": {
		num: 120,
		accuracy: 100,
		basePower: 200,
		category: "Physical",
		desc: "The user faints after using this move, even if this move fails for having no target. This move is prevented from executing if any active Pokemon has the Damp Ability.",
		shortDesc: "Hits adjacent Pokemon. The user faints.",
		id: "selfdestruct",
		name: "Self-Destruct",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		selfdestruct: "always",
		secondary: null,
		target: "allAdjacent",
		type: "Normal",
		zMovePower: 200,
		contestType: "Beautiful",
	},
	"shadowball": {
		num: 247,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		desc: "Has a 20% chance to lower the target's Special Defense by 1 stage.",
		shortDesc: "20% chance to lower the target's Sp. Def by 1.",
		id: "shadowball",
		isViable: true,
		name: "Shadow Ball",
		pp: 15,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			boosts: {
				spd: -1,
			},
		},
		target: "normal",
		type: "Ghost",
		zMovePower: 160,
		contestType: "Clever",
	},
	"shadowbone": {
		num: 708,
		accuracy: 100,
		basePower: 85,
		category: "Physical",
		desc: "Has a 20% chance to lower the target's Defense by 1 stage.",
		shortDesc: "20% chance to lower the target's Defense by 1.",
		id: "shadowbone",
		isViable: true,
		name: "Shadow Bone",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			boosts: {
				def: -1,
			},
		},
		target: "normal",
		type: "Ghost",
		zMovePower: 160,
		contestType: "Cool",
	},
	"shadowclaw": {
		num: 421,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		desc: "Has a higher chance for a critical hit.",
		shortDesc: "High critical hit ratio.",
		id: "shadowclaw",
		isViable: true,
		name: "Shadow Claw",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		critRatio: 2,
		secondary: null,
		target: "normal",
		type: "Ghost",
		zMovePower: 140,
		contestType: "Cool",
	},
	"shadowforce": {
		num: 467,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		desc: "If this move is successful, it breaks through the target's Baneful Bunker, Detect, King's Shield, Protect, or Spiky Shield for this turn, allowing other Pokemon to attack the target normally. If the target's side is protected by Crafty Shield, Mat Block, Quick Guard, or Wide Guard, that protection is also broken for this turn and other Pokemon may attack the target's side normally. This attack charges on the first turn and executes on the second. On the first turn, the user avoids all attacks. If the user is holding a Power Herb, the move completes in one turn.",
		shortDesc: "Disappears turn 1. Hits turn 2. Breaks protection.",
		id: "shadowforce",
		isViable: true,
		name: "Shadow Force",
		pp: 5,
		priority: 0,
		flags: {contact: 1, charge: 1, mirror: 1},
		breaksProtect: true,
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name, defender);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		effect: {
			duration: 2,
			onTryImmunity(target, source, move) {
				if (move.id === 'helpinghand') {
					return;
				}
				if (source.hasAbility('noguard') || target.hasAbility('noguard')) {
					return;
				}
				if (source.volatiles['lockon'] && target === source.volatiles['lockon'].source) return;
				return false;
			},
		},
		secondary: null,
		target: "normal",
		type: "Ghost",
		zMovePower: 190,
		contestType: "Cool",
	},
	"shadowpunch": {
		num: 325,
		accuracy: true,
		basePower: 60,
		category: "Physical",
		shortDesc: "This move does not check accuracy.",
		id: "shadowpunch",
		isViable: true,
		name: "Shadow Punch",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		zMovePower: 120,
		contestType: "Clever",
	},
	"shadowsneak": {
		num: 425,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		desc: "No additional effect.",
		shortDesc: "Usually goes first.",
		id: "shadowsneak",
		isViable: true,
		name: "Shadow Sneak",
		pp: 30,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		zMovePower: 100,
		contestType: "Clever",
	},
	"sharpen": {
		num: 159,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Raises the user's Attack by 1 stage.",
		shortDesc: "Raises the user's Attack by 1.",
		id: "sharpen",
		name: "Sharpen",
		pp: 30,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			atk: 1,
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMoveBoost: {atk: 1},
		contestType: "Cute",
	},
	"shatteredpsyche": {
		num: 648,
		accuracy: true,
		basePower: 1,
		category: "Physical",
		shortDesc: "Power is equal to the base move's Z-Power.",
		id: "shatteredpsyche",
		isViable: true,
		name: "Shattered Psyche",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "psychiumz",
		secondary: null,
		target: "normal",
		type: "Psychic",
		contestType: "Cool",
	},
	"sheercold": {
		num: 329,
		accuracy: 30,
		basePower: 0,
		category: "Special",
		desc: "Deals damage to the target equal to the target's maximum HP. Ignores accuracy and evasiveness modifiers. This attack's accuracy is equal to (user's level - target's level + X)%, where X is 30 if the user is an Ice type and 20 otherwise, and fails if the target is at a higher level. Ice-type Pokemon and Pokemon with the Sturdy Ability are immune.",
		shortDesc: "OHKOs non-Ice targets. Fails if user's lower level.",
		id: "sheercold",
		name: "Sheer Cold",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		ohko: 'Ice',
		target: "normal",
		type: "Ice",
		zMovePower: 180,
		contestType: "Beautiful",
	},
	"shellsmash": {
		num: 504,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Lowers the user's Defense and Special Defense by 1 stage. Raises the user's Attack, Special Attack, and Speed by 2 stages.",
		shortDesc: "Lowers Def, SpD by 1; raises Atk, SpA, Spe by 2.",
		id: "shellsmash",
		isViable: true,
		name: "Shell Smash",
		pp: 15,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			def: -1,
			spd: -1,
			atk: 2,
			spa: 2,
			spe: 2,
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Tough",
	},
	"shelltrap": {
		num: 704,
		accuracy: 100,
		basePower: 150,
		category: "Special",
		desc: "Fails unless the user is hit by a physical attack from an opponent this turn before it can execute the move. If the user was hit and has not fainted, it attacks immediately after being hit, and the effect ends. If the opponent's physical attack had a secondary effect removed by the Sheer Force Ability, it does not count for the purposes of this effect.",
		shortDesc: "User must take physical damage before moving.",
		id: "shelltrap",
		name: "Shell Trap",
		pp: 5,
		priority: -3,
		flags: {protect: 1},
		beforeTurnCallback(pokemon) {
			pokemon.addVolatile('shelltrap');
		},
		// TODO: In order to correct PP usage, after spread move order has been reworked,
		// switch this to `onTry` + add `this.attrLastMove('[still]');`.
		beforeMoveCallback(pokemon) {
			if (!pokemon.volatiles['shelltrap'] || !pokemon.volatiles['shelltrap'].gotHit) {
				this.add('cant', pokemon, 'Shell Trap', 'Shell Trap');
				return true;
			}
		},
		effect: {
			duration: 1,
			onStart(pokemon) {
				this.add('-singleturn', pokemon, 'move: Shell Trap');
			},
			onHit(pokemon, source, move) {
				if (pokemon.side !== source.side && move.category === 'Physical') {
					pokemon.volatiles['shelltrap'].gotHit = true;
				}
			},
		},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Fire",
		zMovePower: 200,
		contestType: "Tough",
	},
	"shiftgear": {
		num: 508,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Raises the user's Speed by 2 stages and its Attack by 1 stage.",
		shortDesc: "Raises the user's Speed by 2 and Attack by 1.",
		id: "shiftgear",
		isViable: true,
		name: "Shift Gear",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			spe: 2,
			atk: 1,
		},
		secondary: null,
		target: "self",
		type: "Steel",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Clever",
	},
	"shockwave": {
		num: 351,
		accuracy: true,
		basePower: 60,
		category: "Special",
		shortDesc: "This move does not check accuracy.",
		id: "shockwave",
		name: "Shock Wave",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
		zMovePower: 120,
		contestType: "Cool",
	},
	"shoreup": {
		num: 659,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user restores 1/2 of its maximum HP, rounded half down. If the weather is Sandstorm, the user instead restores 2/3 of its maximum HP, rounded half down.",
		shortDesc: "User restores 1/2 its max HP; 2/3 in Sandstorm.",
		id: "shoreup",
		isViable: true,
		name: "Shore Up",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		onHit(pokemon) {
			let factor = 0.5;
			if (this.field.isWeather('sandstorm')) {
				factor = 0.667;
			}
			return !!this.heal(this.modify(pokemon.maxhp, factor));
		},
		secondary: null,
		target: "self",
		type: "Ground",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Beautiful",
	},
	"signalbeam": {
		num: 324,
		accuracy: 100,
		basePower: 75,
		category: "Special",
		desc: "Has a 10% chance to confuse the target.",
		shortDesc: "10% chance to confuse the target.",
		id: "signalbeam",
		isViable: true,
		name: "Signal Beam",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			volatileStatus: 'confusion',
		},
		target: "normal",
		type: "Bug",
		zMovePower: 140,
		contestType: "Beautiful",
	},
	"silverwind": {
		num: 318,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		desc: "Has a 10% chance to raise the user's Attack, Defense, Special Attack, Special Defense, and Speed by 1 stage.",
		shortDesc: "10% chance to raise all stats by 1 (not acc/eva).",
		id: "silverwind",
		name: "Silver Wind",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			self: {
				boosts: {
					atk: 1,
					def: 1,
					spa: 1,
					spd: 1,
					spe: 1,
				},
			},
		},
		target: "normal",
		type: "Bug",
		zMovePower: 120,
		contestType: "Beautiful",
	},
	"simplebeam": {
		num: 493,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "Causes the target's Ability to become Simple. Fails if the target's Ability is Battle Bond, Comatose, Disguise, Multitype, Power Construct, RKS System, Schooling, Shields Down, Simple, Stance Change, Truant, or Zen Mode.",
		shortDesc: "The target's Ability becomes Simple.",
		id: "simplebeam",
		name: "Simple Beam",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, mystery: 1},
		onTryHit(pokemon) {
			let bannedAbilities = ['battlebond', 'comatose', 'disguise', 'multitype', 'powerconstruct', 'rkssystem', 'schooling', 'shieldsdown', 'simple', 'stancechange', 'truant', 'zenmode'];
			if (bannedAbilities.includes(pokemon.ability)) {
				return false;
			}
		},
		onHit(pokemon) {
			let oldAbility = pokemon.setAbility('simple');
			if (oldAbility) {
				this.add('-ability', pokemon, 'Simple', '[from] move: Simple Beam');
				return;
			}
			return false;
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMoveBoost: {spa: 1},
		contestType: "Cute",
	},
	"sing": {
		num: 47,
		accuracy: 55,
		basePower: 0,
		category: "Status",
		shortDesc: "Causes the target to fall asleep.",
		id: "sing",
		name: "Sing",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, sound: 1, authentic: 1},
		status: 'slp',
		secondary: null,
		target: "normal",
		type: "Normal",
		zMoveBoost: {spe: 1},
		contestType: "Cute",
	},
	"sinisterarrowraid": {
		num: 695,
		accuracy: true,
		basePower: 180,
		category: "Physical",
		shortDesc: "No additional effect.",
		id: "sinisterarrowraid",
		name: "Sinister Arrow Raid",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "decidiumz",
		secondary: null,
		target: "normal",
		type: "Ghost",
		contestType: "Cool",
	},
	"sizzlyslide": {
		num: 735,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		desc: "Has a 100% chance to burn the foe.",
		shortDesc: "100% chance to burn the foe.",
		id: "sizzlyslide",
		isNonstandard: "LGPE",
		isUnreleased: true,
		isViable: true,
		name: "Sizzly Slide",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, defrost: 1},
		secondary: {
			chance: 100,
			status: 'brn',
		},
		target: "normal",
		type: "Fire",
		contestType: "Clever",
	},
	"sketch": {
		num: 166,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "This move is permanently replaced by the last move used by the target. The copied move has the maximum PP for that move. Fails if the target has not made a move, if the user has Transformed, or if the move is Chatter, Sketch, Struggle, or any move the user knows.",
		shortDesc: "Permanently copies the last move target used.",
		id: "sketch",
		name: "Sketch",
		pp: 1,
		noPPBoosts: true,
		priority: 0,
		flags: {authentic: 1, mystery: 1},
		onHit(target, source) {
			let disallowedMoves = ['chatter', 'sketch', 'struggle'];
			if (source.transformed || !target.lastMove || disallowedMoves.includes(target.lastMove.id) || source.moves.indexOf(target.lastMove.id) >= 0 || target.lastMove.isZ) return false;
			let sketchIndex = source.moves.indexOf('sketch');
			if (sketchIndex < 0) return false;
			let move = this.getMove(target.lastMove);
			let sketchedMove = {
				move: move.name,
				id: move.id,
				pp: move.pp,
				maxpp: move.pp,
				target: move.target,
				disabled: false,
				used: false,
			};
			source.moveSlots[sketchIndex] = sketchedMove;
			source.baseMoveSlots[sketchIndex] = sketchedMove;
			this.add('-activate', source, 'move: Sketch', move.name);
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMoveBoost: {atk: 1, def: 1, spa: 1, spd: 1, spe: 1},
		contestType: "Clever",
	},
	"skillswap": {
		num: 285,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user swaps its Ability with the target's Ability. Fails if either the user or the target's Ability is Battle Bond, Comatose, Disguise, Illusion, Multitype, Power Construct, RKS System, Schooling, Shields Down, Stance Change, Wonder Guard, or Zen Mode.",
		shortDesc: "The user and the target trade Abilities.",
		id: "skillswap",
		name: "Skill Swap",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, authentic: 1, mystery: 1},
		onTryHit(target, source) {
			let bannedAbilities = ['battlebond', 'comatose', 'disguise', 'illusion', 'multitype', 'powerconstruct', 'rkssystem', 'schooling', 'shieldsdown', 'stancechange', 'wonderguard', 'zenmode'];
			if (bannedAbilities.includes(target.ability) || bannedAbilities.includes(source.ability)) {
				return false;
			}
		},
		onHit(target, source, move) {
			let targetAbility = this.getAbility(target.ability);
			let sourceAbility = this.getAbility(source.ability);
			if (target.side === source.side) {
				this.add('-activate', source, 'move: Skill Swap', '', '', '[of] ' + target);
			} else {
				this.add('-activate', source, 'move: Skill Swap', targetAbility, sourceAbility, '[of] ' + target);
			}
			this.singleEvent('End', sourceAbility, source.abilityData, source);
			this.singleEvent('End', targetAbility, target.abilityData, target);
			if (targetAbility.id !== sourceAbility.id) {
				source.ability = targetAbility.id;
				target.ability = sourceAbility.id;
				source.abilityData = {id: toID(source.ability), target: source};
				target.abilityData = {id: toID(target.ability), target: target};
			}
			this.singleEvent('Start', targetAbility, source.abilityData, source);
			this.singleEvent('Start', sourceAbility, target.abilityData, target);
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMoveBoost: {spe: 1},
		contestType: "Clever",
	},
	"skullbash": {
		num: 130,
		accuracy: 100,
		basePower: 130,
		category: "Physical",
		desc: "This attack charges on the first turn and executes on the second. Raises the user's Defense by 1 stage on the first turn. If the user is holding a Power Herb, the move completes in one turn.",
		shortDesc: "Raises user's Defense by 1 on turn 1. Hits turn 2.",
		id: "skullbash",
		name: "Skull Bash",
		pp: 10,
		priority: 0,
		flags: {contact: 1, charge: 1, protect: 1, mirror: 1},
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name, defender);
			this.boost({def: 1}, attacker, attacker, move);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 195,
		contestType: "Tough",
	},
	"skyattack": {
		num: 143,
		accuracy: 90,
		basePower: 140,
		category: "Physical",
		desc: "Has a 30% chance to flinch the target and a higher chance for a critical hit. This attack charges on the first turn and executes on the second. If the user is holding a Power Herb, the move completes in one turn.",
		shortDesc: "Charges, then hits turn 2. 30% flinch. High crit.",
		id: "skyattack",
		name: "Sky Attack",
		pp: 5,
		priority: 0,
		flags: {charge: 1, protect: 1, mirror: 1, distance: 1},
		critRatio: 2,
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name, defender);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "any",
		type: "Flying",
		zMovePower: 200,
		contestType: "Cool",
	},
	"skydrop": {
		num: 507,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		desc: "This attack takes the target into the air with the user on the first turn and executes on the second. Pokemon weighing 200 kg or more cannot be lifted. On the first turn, the user and the target avoid all attacks other than Gust, Hurricane, Sky Uppercut, Smack Down, Thousand Arrows, Thunder, and Twister. The user and the target cannot make a move between turns, but the target can select a move to use. This move cannot damage Flying-type Pokemon. Fails on the first turn if the target is an ally, if the target has a substitute, or if the target is using Bounce, Dig, Dive, Fly, Phantom Force, Shadow Force, or Sky Drop.",
		shortDesc: "User and foe fly up turn 1. Damages on turn 2.",
		id: "skydrop",
		name: "Sky Drop",
		pp: 10,
		priority: 0,
		flags: {contact: 1, charge: 1, protect: 1, mirror: 1, gravity: 1, distance: 1},
		onModifyMove(move, source) {
			if (!source.volatiles['skydrop']) {
				move.accuracy = true;
				move.flags.contact = 0;
			}
		},
		onMoveFail(target, source) {
			if (source.volatiles['twoturnmove'] && source.volatiles['twoturnmove'].duration === 1) {
				source.removeVolatile('skydrop');
				source.removeVolatile('twoturnmove');
				this.add('-end', target, 'Sky Drop', '[interrupt]');
			}
		},
		onTryHit(target, source, move) {
			if (target.fainted) return false;
			if (source.removeVolatile(move.id)) {
				if (target !== source.volatiles['twoturnmove'].source) return false;

				if (target.hasType('Flying')) {
					this.add('-immune', target);
					return null;
				}
			} else {
				if (target.volatiles['substitute'] || target.side === source.side) {
					return false;
				}
				if (target.getWeight() >= 200) {
					this.add('-fail', target, 'move: Sky Drop', '[heavy]');
					return null;
				}

				this.add('-prepare', source, move.name, target);
				source.addVolatile('twoturnmove', target);
				return null;
			}
		},
		onHit(target, source) {
			this.add('-end', target, 'Sky Drop');
		},
		effect: {
			duration: 2,
			onAnyDragOut(pokemon) {
				if (pokemon === this.effectData.target || pokemon === this.effectData.source) return false;
			},
			onFoeTrapPokemonPriority: -15,
			onFoeTrapPokemon(defender) {
				if (defender !== this.effectData.source) return;
				defender.trapped = true;
			},
			onFoeBeforeMovePriority: 12,
			onFoeBeforeMove(attacker, defender, move) {
				if (attacker === this.effectData.source) {
					this.effectData.source.activeTurns--;
					this.debug('Sky drop nullifying.');
					return null;
				}
			},
			onRedirectTargetPriority: 99,
			onRedirectTarget(target, source, source2) {
				if (source !== this.effectData.target) return;
				if (this.effectData.source.fainted) return;
				return this.effectData.source;
			},
			onAnyTryImmunity(target, source, move) {
				if (target !== this.effectData.target && target !== this.effectData.source) {
					return;
				}
				if (source === this.effectData.target && target === this.effectData.source) {
					return;
				}
				if (move.id === 'gust' || move.id === 'twister') {
					return;
				}
				if (move.id === 'skyuppercut' || move.id === 'thunder' || move.id === 'hurricane' || move.id === 'smackdown' || move.id === 'thousandarrows' || move.id === 'helpinghand') {
					return;
				}
				if (source.hasAbility('noguard') || target.hasAbility('noguard')) {
					return;
				}
				if (source.volatiles['lockon'] && target === source.volatiles['lockon'].source) return;
				return false;
			},
			onAnyBasePower(basePower, target, source, move) {
				if (target !== this.effectData.target && target !== this.effectData.source) {
					return;
				}
				if (source === this.effectData.target && target === this.effectData.source) {
					return;
				}
				if (move.id === 'gust' || move.id === 'twister') {
					return this.chainModify(2);
				}
			},
			onFaint(target) {
				if (target.volatiles['skydrop'] && target.volatiles['twoturnmove'].source) {
					this.add('-end', target.volatiles['twoturnmove'].source, 'Sky Drop', '[interrupt]');
				}
			},
		},
		secondary: null,
		target: "any",
		type: "Flying",
		zMovePower: 120,
		contestType: "Tough",
	},
	"skyuppercut": {
		num: 327,
		accuracy: 90,
		basePower: 85,
		category: "Physical",
		desc: "This move can hit a target using Bounce, Fly, or Sky Drop, or is under the effect of Sky Drop.",
		shortDesc: "Can hit Pokemon using Bounce, Fly, or Sky Drop.",
		id: "skyuppercut",
		name: "Sky Uppercut",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		zMovePower: 160,
		contestType: "Cool",
	},
	"slackoff": {
		num: 303,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user restores 1/2 of its maximum HP, rounded half up.",
		shortDesc: "Heals the user by 50% of its max HP.",
		id: "slackoff",
		isViable: true,
		name: "Slack Off",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		heal: [1, 2],
		secondary: null,
		target: "self",
		type: "Normal",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Cute",
	},
	"slam": {
		num: 21,
		accuracy: 75,
		basePower: 80,
		category: "Physical",
		shortDesc: "No additional effect.",
		id: "slam",
		name: "Slam",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, nonsky: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 160,
		contestType: "Tough",
	},
	"slash": {
		num: 163,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		desc: "Has a higher chance for a critical hit.",
		shortDesc: "High critical hit ratio.",
		id: "slash",
		name: "Slash",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		critRatio: 2,
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 140,
		contestType: "Cool",
	},
	"sleeppowder": {
		num: 79,
		accuracy: 75,
		basePower: 0,
		category: "Status",
		shortDesc: "Causes the target to fall asleep.",
		id: "sleeppowder",
		isViable: true,
		name: "Sleep Powder",
		pp: 15,
		priority: 0,
		flags: {powder: 1, protect: 1, reflectable: 1, mirror: 1},
		status: 'slp',
		secondary: null,
		target: "normal",
		type: "Grass",
		zMoveBoost: {spe: 1},
		contestType: "Clever",
	},
	"sleeptalk": {
		num: 214,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "One of the user's known moves, besides this move, is selected for use at random. Fails if the user is not asleep. The selected move does not have PP deducted from it, and can currently have 0 PP. This move cannot select Assist, Beak Blast, Belch, Bide, Celebrate, Chatter, Copycat, Focus Punch, Hold Hands, Me First, Metronome, Mimic, Mirror Move, Nature Power, Shell Trap, Sketch, Sleep Talk, Struggle, Uproar, any two-turn move, or any Z-Move.",
		shortDesc: "User must be asleep. Uses another known move.",
		id: "sleeptalk",
		isViable: true,
		name: "Sleep Talk",
		pp: 10,
		priority: 0,
		flags: {},
		sleepUsable: true,
		onTryHit(pokemon) {
			if (pokemon.status !== 'slp' && !pokemon.hasAbility('comatose')) return false;
		},
		onHit(pokemon) {
			let moves = [];
			for (const moveSlot of pokemon.moveSlots) {
				const move = moveSlot.id;
				const noSleepTalk = [
					'assist', 'beakblast', 'belch', 'bide', 'celebrate', 'chatter', 'copycat', 'focuspunch', 'mefirst', 'metronome', 'mimic', 'mirrormove', 'naturepower', 'shelltrap', 'sketch', 'sleeptalk', 'uproar',
				];
				if (move && !(noSleepTalk.includes(move) || this.getMove(move).flags['charge'] || (this.getMove(move).isZ && this.getMove(move).basePower !== 1))) {
					moves.push(move);
				}
			}
			let randomMove = '';
			if (moves.length) randomMove = this.sample(moves);
			if (!randomMove) {
				return false;
			}
			this.useMove(randomMove, pokemon);
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMoveEffect: 'crit2',
		contestType: "Cute",
	},
	"sludge": {
		num: 124,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		desc: "Has a 30% chance to poison the target.",
		shortDesc: "30% chance to poison the target.",
		id: "sludge",
		name: "Sludge",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			status: 'psn',
		},
		target: "normal",
		type: "Poison",
		zMovePower: 120,
		contestType: "Tough",
	},
	"sludgebomb": {
		num: 188,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		desc: "Has a 30% chance to poison the target.",
		shortDesc: "30% chance to poison the target.",
		id: "sludgebomb",
		isViable: true,
		name: "Sludge Bomb",
		pp: 10,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			status: 'psn',
		},
		target: "normal",
		type: "Poison",
		zMovePower: 175,
		contestType: "Tough",
	},
	"sludgewave": {
		num: 482,
		accuracy: 100,
		basePower: 95,
		category: "Special",
		desc: "Has a 10% chance to poison the target.",
		shortDesc: "10% chance to poison adjacent Pokemon.",
		id: "sludgewave",
		isViable: true,
		name: "Sludge Wave",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			status: 'psn',
		},
		target: "allAdjacent",
		type: "Poison",
		zMovePower: 175,
		contestType: "Tough",
	},
	"smackdown": {
		num: 479,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		desc: "This move can hit a target using Bounce, Fly, or Sky Drop, or is under the effect of Sky Drop. If this move hits a target under the effect of Bounce, Fly, Magnet Rise, or Telekinesis, the effect ends. If the target is a Flying type that has not used Roost this turn or a Pokemon with the Levitate Ability, it loses its immunity to Ground-type attacks and the Arena Trap Ability as long as it remains active. During the effect, Magnet Rise fails for the target and Telekinesis fails against the target.",
		shortDesc: "Removes the target's Ground immunity.",
		id: "smackdown",
		name: "Smack Down",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, nonsky: 1},
		volatileStatus: 'smackdown',
		effect: {
			noCopy: true,
			onStart(pokemon) {
				let applies = false;
				if (pokemon.hasType('Flying') || pokemon.hasAbility('levitate')) applies = true;
				if (pokemon.hasItem('ironball') || pokemon.volatiles['ingrain'] || this.field.getPseudoWeather('gravity')) applies = false;
				if (pokemon.removeVolatile('fly') || pokemon.removeVolatile('bounce')) {
					applies = true;
					this.cancelMove(pokemon);
					pokemon.removeVolatile('twoturnmove');
				}
				if (pokemon.volatiles['magnetrise']) {
					applies = true;
					delete pokemon.volatiles['magnetrise'];
				}
				if (pokemon.volatiles['telekinesis']) {
					applies = true;
					delete pokemon.volatiles['telekinesis'];
				}
				if (!applies) return false;
				this.add('-start', pokemon, 'Smack Down');
			},
			onRestart(pokemon) {
				if (pokemon.removeVolatile('fly') || pokemon.removeVolatile('bounce')) {
					this.cancelMove(pokemon);
					this.add('-start', pokemon, 'Smack Down');
				}
			},
			// groundedness implemented in battle.engine.js:BattlePokemon#isGrounded
		},
		secondary: null,
		target: "normal",
		type: "Rock",
		zMovePower: 100,
		contestType: "Tough",
	},
	"smartstrike": {
		num: 684,
		accuracy: true,
		basePower: 70,
		category: "Physical",
		shortDesc: "This move does not check accuracy.",
		id: "smartstrike",
		name: "Smart Strike",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		zMovePower: 140,
		contestType: "Cool",
	},
	"smellingsalts": {
		num: 265,
		accuracy: 100,
		basePower: 70,
		basePowerCallback(pokemon, target, move) {
			if (target.status === 'par') return move.basePower * 2;
			return move.basePower;
		},
		category: "Physical",
		desc: "Power doubles if the target is paralyzed. If the user has not fainted, the target is cured of paralysis.",
		shortDesc: "Power doubles if target is paralyzed, and cures it.",
		id: "smellingsalts",
		name: "Smelling Salts",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onHit(target) {
			if (target.status === 'par') target.cureStatus();
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 140,
		contestType: "Tough",
	},
	"smog": {
		num: 123,
		accuracy: 70,
		basePower: 30,
		category: "Special",
		desc: "Has a 40% chance to poison the target.",
		shortDesc: "40% chance to poison the target.",
		id: "smog",
		name: "Smog",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 40,
			status: 'psn',
		},
		target: "normal",
		type: "Poison",
		zMovePower: 100,
		contestType: "Tough",
	},
	"smokescreen": {
		num: 108,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "Lowers the target's accuracy by 1 stage.",
		shortDesc: "Lowers the target's accuracy by 1.",
		id: "smokescreen",
		name: "Smokescreen",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		boosts: {
			accuracy: -1,
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMoveBoost: {evasion: 1},
		contestType: "Clever",
	},
	"snarl": {
		num: 555,
		accuracy: 95,
		basePower: 55,
		category: "Special",
		desc: "Has a 100% chance to lower the target's Special Attack by 1 stage.",
		shortDesc: "100% chance to lower the foe(s) Sp. Atk by 1.",
		id: "snarl",
		name: "Snarl",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1, authentic: 1},
		secondary: {
			chance: 100,
			boosts: {
				spa: -1,
			},
		},
		target: "allAdjacentFoes",
		type: "Dark",
		zMovePower: 100,
		contestType: "Tough",
	},
	"snatch": {
		num: 289,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "If another Pokemon uses certain non-damaging moves this turn, the user steals that move to use itself. If multiple Pokemon use one of those moves this turn, the applicable moves are all stolen by the first Pokemon in turn order that used this move this turn. This effect is ignored while the user is under the effect of Sky Drop.",
		shortDesc: "User steals certain support moves to use itself.",
		id: "snatch",
		name: "Snatch",
		pp: 10,
		priority: 4,
		flags: {authentic: 1},
		volatileStatus: 'snatch',
		effect: {
			duration: 1,
			onStart(pokemon) {
				this.add('-singleturn', pokemon, 'Snatch');
			},
			onAnyTryMove(source, target, move) {
				let snatchUser = this.effectData.source;
				if (snatchUser.isSkyDropped()) return;
				if (move && !move.isZ && move.flags['snatch'] && move.sourceEffect !== 'snatch') {
					snatchUser.removeVolatile('snatch');
					this.add('-activate', snatchUser, 'move: Snatch', '[of] ' + source);
					this.useMove(move.id, snatchUser);
					return null;
				}
			},
		},
		secondary: null,
		pressureTarget: "foeSide",
		target: "self",
		type: "Dark",
		zMoveBoost: {spe: 2},
		contestType: "Clever",
	},
	"snore": {
		num: 173,
		accuracy: 100,
		basePower: 50,
		category: "Special",
		desc: "Has a 30% chance to flinch the target. Fails if the user is not asleep.",
		shortDesc: "User must be asleep. 30% chance to flinch target.",
		id: "snore",
		name: "Snore",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1, authentic: 1},
		sleepUsable: true,
		onTryHit(target, source) {
			if (source.status !== 'slp' && !source.hasAbility('comatose')) return false;
		},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Normal",
		zMovePower: 100,
		contestType: "Cute",
	},
	"spectralthief": {
		num: 712,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		desc: "The target's stat stages greater than 0 are stolen from it and applied to the user before dealing damage.",
		shortDesc: "Steals target's boosts before dealing damage.",
		id: "spectralthief",
		isViable: true,
		name: "Spectral Thief",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, authentic: 1},
		stealsBoosts: true,
		// Boost stealing implemented in scripts.js
		secondary: null,
		target: "normal",
		type: "Ghost",
		zMovePower: 175,
		contestType: "Cool",
	},
	"speedswap": {
		num: 683,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user swaps its Speed stat with the target. Stat stage changes are unaffected.",
		shortDesc: "Swaps Speed stat with target.",
		id: "speedswap",
		name: "Speed Swap",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, authentic: 1, mystery: 1},
		onHit(target, source) {
			const targetSpe = target.storedStats.spe;
			target.storedStats.spe = source.storedStats.spe;
			source.storedStats.spe = targetSpe;
			this.add('-activate', source, 'move: Speed Swap', '[of] ' + target);
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMoveBoost: {spe: 1},
		contestType: "Clever",
	},
	"spikyshield": {
		num: 596,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user is protected from most attacks made by other Pokemon during this turn, and Pokemon making contact with the user lose 1/8 of their maximum HP, rounded down. This move has a 1/X chance of being successful, where X starts at 1 and triples each time this move is successfully used. X resets to 1 if this move fails, if the user's last move used is not Baneful Bunker, Detect, Endure, King's Shield, Protect, Quick Guard, Spiky Shield, or Wide Guard, or if it was one of those moves and the user's protection was broken. Fails if the user moves last this turn.",
		shortDesc: "Protects from moves. Contact: loses 1/8 max HP.",
		id: "spikyshield",
		isViable: true,
		name: "Spiky Shield",
		pp: 10,
		priority: 4,
		flags: {},
		stallingMove: true,
		volatileStatus: 'spikyshield',
		onTryHit(target, source, move) {
			return !!this.willAct() && this.runEvent('StallMove', target);
		},
		onHit(pokemon) {
			pokemon.addVolatile('stall');
		},
		effect: {
			duration: 1,
			onStart(target) {
				this.add('-singleturn', target, 'move: Protect');
			},
			onTryHitPriority: 3,
			onTryHit(target, source, move) {
				if (!move.flags['protect']) {
					if (move.isZ) target.getMoveHitData(move).zBrokeProtect = true;
					return;
				}
				this.add('-activate', target, 'move: Protect');
				let lockedmove = source.getVolatile('lockedmove');
				if (lockedmove) {
					// Outrage counter is reset
					if (source.volatiles['lockedmove'].duration === 2) {
						delete source.volatiles['lockedmove'];
					}
				}
				if (move.flags['contact']) {
					this.damage(source.maxhp / 8, source, target);
				}
				return this.NOT_FAIL;
			},
			onHit(target, source, move) {
				if (move.isZPowered && move.flags['contact']) {
					this.damage(source.maxhp / 8, source, target);
				}
			},
		},
		secondary: null,
		target: "self",
		type: "Grass",
		zMoveBoost: {def: 1},
		contestType: "Tough",
	},
	"spiritshackle": {
		num: 662,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		desc: "Prevents the target from switching out. The target can still switch out if it is holding Shed Shell or uses Baton Pass, Parting Shot, U-turn, or Volt Switch. If the target leaves the field using Baton Pass, the replacement will remain trapped. The effect ends if the user leaves the field.",
		shortDesc: "Prevents the target from switching out.",
		id: "spiritshackle",
		isViable: true,
		name: "Spirit Shackle",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			onHit(target, source, move) {
				if (source.isActive) target.addVolatile('trapped', source, move, 'trapper');
			},
		},
		target: "normal",
		type: "Ghost",
		zMovePower: 160,
		contestType: "Tough",
	},
	"soak": {
		num: 487,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "Causes the target to become a Water type. Fails if the target is an Arceus or a Silvally, or if the target is already purely Water type.",
		shortDesc: "Changes the target's type to Water.",
		id: "soak",
		name: "Soak",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, mystery: 1},
		onHit(target) {
			if (target.getTypes().join() === 'Water' || !target.setType('Water')) {
				// Soak should animate even when it fails.
				// Returning false would suppress the animation.
				this.add('-fail', target);
				return null;
			}
			this.add('-start', target, 'typechange', 'Water');
		},
		secondary: null,
		target: "normal",
		type: "Water",
		zMoveBoost: {spa: 1},
		contestType: "Cute",
	},
	"softboiled": {
		num: 135,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user restores 1/2 of its maximum HP, rounded half up.",
		shortDesc: "Heals the user by 50% of its max HP.",
		id: "softboiled",
		isViable: true,
		name: "Soft-Boiled",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		heal: [1, 2],
		secondary: null,
		target: "self",
		type: "Normal",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Cute",
	},
	"solarbeam": {
		num: 76,
		accuracy: 100,
		basePower: 120,
		category: "Special",
		desc: "This attack charges on the first turn and executes on the second. Power is halved if the weather is Hail, Primordial Sea, Rain Dance, or Sandstorm. If the user is holding a Power Herb or the weather is Desolate Land or Sunny Day, the move completes in one turn.",
		shortDesc: "Charges turn 1. Hits turn 2. No charge in sunlight.",
		id: "solarbeam",
		name: "Solar Beam",
		pp: 10,
		priority: 0,
		flags: {charge: 1, protect: 1, mirror: 1},
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name, defender);
			if (this.field.isWeather(['sunnyday', 'desolateland'])) {
				this.attrLastMove('[still]');
				this.addMove('-anim', attacker, move.name, defender);
				return;
			}
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		onBasePower(basePower, pokemon, target) {
			if (this.field.isWeather(['raindance', 'primordialsea', 'sandstorm', 'hail'])) {
				this.debug('weakened by weather');
				return this.chainModify(0.5);
			}
		},
		secondary: null,
		target: "normal",
		type: "Grass",
		zMovePower: 190,
		contestType: "Cool",
	},
	"solarblade": {
		num: 669,
		accuracy: 100,
		basePower: 125,
		category: "Physical",
		desc: "This attack charges on the first turn and executes on the second. Power is halved if the weather is Hail, Primordial Sea, Rain Dance, or Sandstorm. If the user is holding a Power Herb or the weather is Desolate Land or Sunny Day, the move completes in one turn.",
		shortDesc: "Charges turn 1. Hits turn 2. No charge in sunlight.",
		id: "solarblade",
		name: "Solar Blade",
		pp: 10,
		priority: 0,
		flags: {contact: 1, charge: 1, protect: 1, mirror: 1},
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name, defender);
			if (this.field.isWeather(['sunnyday', 'desolateland'])) {
				this.attrLastMove('[still]');
				this.addMove('-anim', attacker, move.name, defender);
				return;
			}
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		onBasePower(basePower, pokemon, target) {
			if (this.field.isWeather(['raindance', 'primordialsea', 'sandstorm', 'hail'])) {
				this.debug('weakened by weather');
				return this.chainModify(0.5);
			}
		},
		secondary: null,
		target: "normal",
		type: "Grass",
		zMovePower: 190,
		contestType: "Cool",
	},
	"sonicboom": {
		num: 49,
		accuracy: 90,
		basePower: 0,
		damage: 20,
		category: "Special",
		desc: "Deals 20 HP of damage to the target.",
		shortDesc: "Always does 20 HP of damage.",
		id: "sonicboom",
		name: "Sonic Boom",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 100,
		contestType: "Cool",
	},
	"soulstealing7starstrike": {
		num: 699,
		accuracy: true,
		basePower: 195,
		category: "Physical",
		shortDesc: "No additional effect.",
		id: "soulstealing7starstrike",
		name: "Soul-Stealing 7-Star Strike",
		pp: 1,
		priority: 0,
		flags: {contact: 1},
		isZ: "marshadiumz",
		secondary: null,
		target: "normal",
		type: "Ghost",
		contestType: "Cool",
	},
	"spacialrend": {
		num: 460,
		accuracy: 95,
		basePower: 100,
		category: "Special",
		desc: "Has a higher chance for a critical hit.",
		shortDesc: "High critical hit ratio.",
		id: "spacialrend",
		isViable: true,
		name: "Spacial Rend",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		critRatio: 2,
		secondary: null,
		target: "normal",
		type: "Dragon",
		zMovePower: 180,
		contestType: "Beautiful",
	},
	"spark": {
		num: 209,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		desc: "Has a 30% chance to paralyze the target.",
		shortDesc: "30% chance to paralyze the target.",
		id: "spark",
		name: "Spark",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			status: 'par',
		},
		target: "normal",
		type: "Electric",
		zMovePower: 120,
		contestType: "Cool",
	},
	"sparklingaria": {
		num: 664,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		desc: "If the user has not fainted, the target is cured of its burn.",
		shortDesc: "The target is cured of its burn.",
		id: "sparklingaria",
		name: "Sparkling Aria",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1, authentic: 1},
		secondary: {
			dustproof: true,
			chance: 100,
			onHit(target) {
				if (target.status === 'brn') target.cureStatus();
			},
		},
		target: "allAdjacent",
		type: "Water",
		zMovePower: 175,
		contestType: "Tough",
	},
	"sparklyswirl": {
		num: 740,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		desc: "Every Pokemon in the user's party is cured of its major status condition.",
		shortDesc: "Cures the user's party of all status conditions.",
		id: "sparklyswirl",
		isNonstandard: "LGPE",
		isUnreleased: true,
		isViable: true,
		name: "Sparkly Swirl",
		pp: 15,
		priority: 0,
		flags: {protect: 1},
		self: {
			onHit(pokemon, source, move) {
				this.add('-activate', source, 'move: Aromatherapy');
				for (const ally of source.side.pokemon) {
					if (ally !== source && (ally.volatiles['substitute'] && !move.infiltrates)) {
						continue;
					}
					ally.cureStatus();
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Fairy",
		contestType: "Clever",
	},
	"spiderweb": {
		num: 169,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Prevents the target from switching out. The target can still switch out if it is holding Shed Shell or uses Baton Pass, Parting Shot, U-turn, or Volt Switch. If the target leaves the field using Baton Pass, the replacement will remain trapped. The effect ends if the user leaves the field.",
		shortDesc: "Prevents the target from switching out.",
		id: "spiderweb",
		name: "Spider Web",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		onHit(target, source, move) {
			return target.addVolatile('trapped', source, move, 'trapper');
		},
		secondary: null,
		target: "normal",
		type: "Bug",
		zMoveBoost: {def: 1},
		contestType: "Clever",
	},
	"spikecannon": {
		num: 131,
		accuracy: 100,
		basePower: 20,
		category: "Physical",
		desc: "Hits two to five times. Has a 1/3 chance to hit two or three times, and a 1/6 chance to hit four or five times. If one of the hits breaks the target's substitute, it will take damage for the remaining hits. If the user has the Skill Link Ability, this move will always hit five times.",
		shortDesc: "Hits 2-5 times in one turn.",
		id: "spikecannon",
		name: "Spike Cannon",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 100,
		contestType: "Cool",
	},
	"spikes": {
		num: 191,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Sets up a hazard on the opposing side of the field, damaging each opposing Pokemon that switches in, unless it is a Flying-type Pokemon or has the Levitate Ability. Can be used up to three times before failing. Opponents lose 1/8 of their maximum HP with one layer, 1/6 of their maximum HP with two layers, and 1/4 of their maximum HP with three layers, all rounded down. Can be removed from the opposing side if any opposing Pokemon uses Rapid Spin or Defog successfully, or is hit by Defog.",
		shortDesc: "Hurts grounded foes on switch-in. Max 3 layers.",
		id: "spikes",
		isViable: true,
		name: "Spikes",
		pp: 20,
		priority: 0,
		flags: {reflectable: 1, nonsky: 1},
		sideCondition: 'spikes',
		effect: {
			// this is a side condition
			onStart(side) {
				this.add('-sidestart', side, 'Spikes');
				this.effectData.layers = 1;
			},
			onRestart(side) {
				if (this.effectData.layers >= 3) return false;
				this.add('-sidestart', side, 'Spikes');
				this.effectData.layers++;
			},
			onSwitchIn(pokemon) {
				if (!pokemon.isGrounded()) return;
				let damageAmounts = [0, 3, 4, 6]; // 1/8, 1/6, 1/4
				this.damage(damageAmounts[this.effectData.layers] * pokemon.maxhp / 24);
			},
		},
		secondary: null,
		target: "foeSide",
		type: "Ground",
		zMoveBoost: {def: 1},
		contestType: "Clever",
	},
	"spitup": {
		num: 255,
		accuracy: 100,
		basePower: 0,
		basePowerCallback(pokemon) {
			if (!pokemon.volatiles['stockpile'] || !pokemon.volatiles['stockpile'].layers) return false;
			return pokemon.volatiles['stockpile'].layers * 100;
		},
		category: "Special",
		desc: "Power is equal to 100 times the user's Stockpile count. Fails if the user's Stockpile count is 0. Whether or not this move is successful, the user's Defense and Special Defense decrease by as many stages as Stockpile had increased them, and the user's Stockpile count resets to 0.",
		shortDesc: "More power with more uses of Stockpile.",
		id: "spitup",
		name: "Spit Up",
		pp: 10,
		priority: 0,
		flags: {protect: 1},
		onTry(pokemon) {
			if (!pokemon.volatiles['stockpile']) {
				return false;
			}
		},
		onAfterMove(pokemon) {
			pokemon.removeVolatile('stockpile');
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 100,
		contestType: "Tough",
	},
	"spite": {
		num: 180,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "Causes the target's last move used to lose 4 PP. Fails if the target has not made a move, if the move has 0 PP, or if it no longer knows the move.",
		shortDesc: "Lowers the PP of the target's last move by 4.",
		id: "spite",
		name: "Spite",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, authentic: 1},
		onHit(target) {
			if (target.lastMove && !target.lastMove.isZ) {
				let ppDeducted = target.deductPP(target.lastMove.id, 4);
				if (ppDeducted) {
					this.add("-activate", target, 'move: Spite', this.getMove(target.lastMove.id).name, ppDeducted);
					return;
				}
			}
			return false;
		},
		secondary: null,
		target: "normal",
		type: "Ghost",
		zMoveEffect: 'heal',
		contestType: "Tough",
	},
	"splash": {
		num: 150,
		accuracy: true,
		basePower: 0,
		category: "Status",
		shortDesc: "No competitive use.",
		id: "splash",
		name: "Splash",
		pp: 40,
		priority: 0,
		flags: {gravity: 1},
		onTryHit(target, source) {
			this.add('-nothing');
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMoveBoost: {atk: 3},
		contestType: "Cute",
	},
	"splinteredstormshards": {
		num: 727,
		accuracy: true,
		basePower: 190,
		category: "Physical",
		desc: "Ends the effects of Electric Terrain, Grassy Terrain, Misty Terrain, and Psychic Terrain.",
		shortDesc: "Ends the effects of Terrain.",
		id: "splinteredstormshards",
		name: "Splintered Stormshards",
		pp: 1,
		priority: 0,
		flags: {},
		onHit() {
			this.field.clearTerrain();
		},
		isZ: "lycaniumz",
		secondary: null,
		target: "normal",
		type: "Rock",
		contestType: "Cool",
	},
	"splishysplash": {
		num: 730,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		desc: "Has a 30% chance to paralyze the target.",
		shortDesc: "30% chance to paralyze the target.",
		id: "splishysplash",
		isNonstandard: "LGPE",
		isUnreleased: true,
		isViable: true,
		name: "Splishy Splash",
		pp: 15,
		priority: 0,
		flags: {protect: 1},
		secondary: {
			chance: 30,
			status: 'par',
		},
		target: "allAdjacentFoes",
		type: "Water",
		contestType: "Cool",
	},
	"spore": {
		num: 147,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		shortDesc: "Causes the target to fall asleep.",
		id: "spore",
		isViable: true,
		name: "Spore",
		pp: 15,
		priority: 0,
		flags: {powder: 1, protect: 1, reflectable: 1, mirror: 1},
		status: 'slp',
		secondary: null,
		target: "normal",
		type: "Grass",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Beautiful",
	},
	"spotlight": {
		num: 671,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Until the end of the turn, all single-target attacks from opponents of the target are redirected to the target. Such attacks are redirected to the target before they can be reflected by Magic Coat or the Magic Bounce Ability, or drawn in by the Lightning Rod or Storm Drain Abilities. Fails if it is not a Double Battle or Battle Royal.",
		shortDesc: "Target's foes' moves are redirected to it this turn.",
		id: "spotlight",
		name: "Spotlight",
		pp: 15,
		priority: 3,
		flags: {protect: 1, reflectable: 1, mystery: 1},
		volatileStatus: 'spotlight',
		onTryHit(target) {
			if (target.side.active.length < 2) return false;
		},
		effect: {
			duration: 1,
			onStart(pokemon) {
				this.add('-singleturn', pokemon, 'move: Spotlight');
			},
			onFoeRedirectTargetPriority: 2,
			onFoeRedirectTarget(target, source, source2, move) {
				if (this.validTarget(this.effectData.target, source, move.target)) {
					this.debug("Spotlight redirected target of move");
					return this.effectData.target;
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMoveBoost: {spd: 1},
		contestType: "Cute",
	},
	"stealthrock": {
		num: 446,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Sets up a hazard on the opposing side of the field, damaging each opposing Pokemon that switches in. Fails if the effect is already active on the opposing side. Foes lose 1/32, 1/16, 1/8, 1/4, or 1/2 of their maximum HP, rounded down, based on their weakness to the Rock type; 0.25x, 0.5x, neutral, 2x, or 4x, respectively. Can be removed from the opposing side if any opposing Pokemon uses Rapid Spin or Defog successfully, or is hit by Defog.",
		shortDesc: "Hurts foes on switch-in. Factors Rock weakness.",
		id: "stealthrock",
		isViable: true,
		name: "Stealth Rock",
		pp: 20,
		priority: 0,
		flags: {reflectable: 1},
		sideCondition: 'stealthrock',
		effect: {
			// this is a side condition
			onStart(side) {
				this.add('-sidestart', side, 'move: Stealth Rock');
			},
			onSwitchIn(pokemon) {
				let typeMod = this.clampIntRange(pokemon.runEffectiveness(this.getActiveMove('stealthrock')), -6, 6);
				this.damage(pokemon.maxhp * Math.pow(2, typeMod) / 8);
			},
		},
		secondary: null,
		target: "foeSide",
		type: "Rock",
		zMoveBoost: {def: 1},
		contestType: "Cool",
	},
	"steameruption": {
		num: 592,
		accuracy: 95,
		basePower: 110,
		category: "Special",
		desc: "Has a 30% chance to burn the target. The target thaws out if it is frozen.",
		shortDesc: "30% chance to burn the target.",
		id: "steameruption",
		isViable: true,
		name: "Steam Eruption",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		thawsTarget: true,
		secondary: {
			chance: 30,
			status: 'brn',
		},
		target: "normal",
		type: "Water",
		zMovePower: 185,
		contestType: "Beautiful",
	},
	"steelwing": {
		num: 211,
		accuracy: 90,
		basePower: 70,
		category: "Physical",
		desc: "Has a 10% chance to raise the user's Defense by 1 stage.",
		shortDesc: "10% chance to raise the user's Defense by 1.",
		id: "steelwing",
		name: "Steel Wing",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			self: {
				boosts: {
					def: 1,
				},
			},
		},
		target: "normal",
		type: "Steel",
		zMovePower: 140,
		contestType: "Cool",
	},
	"stickyweb": {
		num: 564,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Sets up a hazard on the opposing side of the field, lowering the Speed by 1 stage of each opposing Pokemon that switches in, unless it is a Flying-type Pokemon or has the Levitate Ability. Fails if the effect is already active on the opposing side. Can be removed from the opposing side if any opposing Pokemon uses Rapid Spin or Defog successfully, or is hit by Defog.",
		shortDesc: "Lowers Speed of grounded foes by 1 on switch-in.",
		id: "stickyweb",
		isViable: true,
		name: "Sticky Web",
		pp: 20,
		priority: 0,
		flags: {reflectable: 1},
		sideCondition: 'stickyweb',
		effect: {
			onStart(side) {
				this.add('-sidestart', side, 'move: Sticky Web');
			},
			onSwitchIn(pokemon) {
				if (!pokemon.isGrounded()) return;
				this.add('-activate', pokemon, 'move: Sticky Web');
				this.boost({spe: -1}, pokemon, pokemon.side.foe.active[0], this.getActiveMove('stickyweb'));
			},
		},
		secondary: null,
		target: "foeSide",
		type: "Bug",
		zMoveBoost: {spe: 1},
		contestType: "Tough",
	},
	"stockpile": {
		num: 254,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Raises the user's Defense and Special Defense by 1 stage. The user's Stockpile count increases by 1. Fails if the user's Stockpile count is 3. The user's Stockpile count is reset to 0 when it is no longer active.",
		shortDesc: "Raises user's Defense, Sp. Def by 1. Max 3 uses.",
		id: "stockpile",
		name: "Stockpile",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		onTryHit(pokemon) {
			if (pokemon.volatiles['stockpile'] && pokemon.volatiles['stockpile'].layers >= 3) return false;
		},
		volatileStatus: 'stockpile',
		effect: {
			noCopy: true,
			onStart(target) {
				this.effectData.layers = 1;
				this.effectData.def = 0;
				this.effectData.spd = 0;
				this.add('-start', target, 'stockpile' + this.effectData.layers);
				let [curDef, curSpD] = [target.boosts.def, target.boosts.spd];
				this.boost({def: 1, spd: 1}, target, target);
				if (curDef !== target.boosts.def) this.effectData.def--;
				if (curSpD !== target.boosts.spd) this.effectData.spd--;
			},
			onRestart(target) {
				if (this.effectData.layers >= 3) return false;
				this.effectData.layers++;
				this.add('-start', target, 'stockpile' + this.effectData.layers);
				const curDef = target.boosts.def;
				const curSpD = target.boosts.spd;
				this.boost({def: 1, spd: 1}, target, target);
				if (curDef !== target.boosts.def) this.effectData.def--;
				if (curSpD !== target.boosts.spd) this.effectData.spd--;
			},
			onEnd(target) {
				if (this.effectData.def || this.effectData.spd) {
					/** @type {SparseBoostsTable} */
					let boosts = {};
					if (this.effectData.def) boosts.def = this.effectData.def;
					if (this.effectData.spd) boosts.spd = this.effectData.spd;
					this.boost(boosts, target, target);
				}
				this.add('-end', target, 'Stockpile');
				if (this.effectData.def !== this.effectData.layers * -1 || this.effectData.spd !== this.effectData.layers * -1) {
					this.hint("In Gen 7, Stockpile keeps track of how many times it successfully altered each stat individually.");
				}
			},
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMoveEffect: 'heal',
		contestType: "Tough",
	},
	"stokedsparksurfer": {
		num: 700,
		accuracy: true,
		basePower: 175,
		category: "Special",
		desc: "Has a 100% chance to paralyze the target.",
		shortDesc: "100% chance to paralyze the target.",
		id: "stokedsparksurfer",
		name: "Stoked Sparksurfer",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "aloraichiumz",
		secondary: {
			chance: 100,
			status: 'par',
		},
		target: "normal",
		type: "Electric",
		contestType: "Cool",
	},
	"stomp": {
		num: 23,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		desc: "Has a 30% chance to flinch the target. Damage doubles and no accuracy check is done if the target has used Minimize while active.",
		shortDesc: "30% chance to flinch the target.",
		id: "stomp",
		name: "Stomp",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, nonsky: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Normal",
		zMovePower: 120,
		contestType: "Tough",
	},
	"stompingtantrum": {
		num: 707,
		accuracy: 100,
		basePower: 75,
		basePowerCallback(pokemon, target, move) {
			if (pokemon.moveLastTurnResult === false) return move.basePower * 2;
			return move.basePower;
		},
		category: "Physical",
		desc: "Power doubles if the user's last move on the previous turn, including moves called by other moves or those used through Instruct, Magic Coat, Snatch, or the Dancer or Magic Bounce Abilities, failed to do any of its normal effects, not including damage from an unsuccessful High Jump Kick, Jump Kick, or Mind Blown, or if the user was prevented from moving by any effect other than recharging or Sky Drop. A move that was blocked by Baneful Bunker, Detect, King's Shield, Protect, Spiky Shield, Crafty Shield, Mat Block, Quick Guard, or Wide Guard will not double this move's power, nor will Bounce or Fly ending early due to the effect of Gravity, Smack Down, or Thousand Arrows.",
		shortDesc: "Power doubles if the user's last move failed.",
		id: "stompingtantrum",
		name: "Stomping Tantrum",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ground",
		zMovePower: 140,
		contestType: "Tough",
	},
	"stoneedge": {
		num: 444,
		accuracy: 80,
		basePower: 100,
		category: "Physical",
		desc: "Has a higher chance for a critical hit.",
		shortDesc: "High critical hit ratio.",
		id: "stoneedge",
		isViable: true,
		name: "Stone Edge",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		critRatio: 2,
		secondary: null,
		target: "normal",
		type: "Rock",
		zMovePower: 180,
		contestType: "Tough",
	},
	"storedpower": {
		num: 500,
		accuracy: 100,
		basePower: 20,
		basePowerCallback(pokemon, target, move) {
			return move.basePower + 20 * pokemon.positiveBoosts();
		},
		category: "Special",
		desc: "Power is equal to 20+(X*20), where X is the user's total stat stage changes that are greater than 0.",
		shortDesc: " + 20 power for each of the user's stat boosts.",
		id: "storedpower",
		name: "Stored Power",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMovePower: 160,
		contestType: "Clever",
	},
	"stormthrow": {
		num: 480,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		desc: "This move is always a critical hit unless the target is under the effect of Lucky Chant or has the Battle Armor or Shell Armor Abilities.",
		shortDesc: "Always results in a critical hit.",
		id: "stormthrow",
		isViable: true,
		name: "Storm Throw",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		willCrit: true,
		secondary: null,
		target: "normal",
		type: "Fighting",
		zMovePower: 120,
		contestType: "Cool",
	},
	"steamroller": {
		num: 537,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		desc: "Has a 30% chance to flinch the target. Damage doubles and no accuracy check is done if the target has used Minimize while active.",
		shortDesc: "30% chance to flinch the target.",
		id: "steamroller",
		name: "Steamroller",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Bug",
		zMovePower: 120,
		contestType: "Tough",
	},
	"strength": {
		num: 70,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		shortDesc: "No additional effect.",
		id: "strength",
		name: "Strength",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 160,
		contestType: "Tough",
	},
	"strengthsap": {
		num: 668,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "Lowers the target's Attack by 1 stage. The user restores its HP equal to the target's Attack stat calculated with its stat stage before this move was used. If Big Root is held by the user, the HP recovered is 1.3x normal, rounded half down. Fails if the target's Attack stat stage is -6.",
		shortDesc: "User heals HP=target's Atk stat. Lowers Atk by 1.",
		id: "strengthsap",
		isViable: true,
		name: "Strength Sap",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, heal: 1},
		onHit(target, source) {
			if (target.boosts.atk === -6) return false;
			let atk = target.getStat('atk', false, true);
			let success = this.boost({atk: -1}, target, source, null, false, true);
			return !!(this.heal(atk, source, target) || success);
		},
		secondary: null,
		target: "normal",
		type: "Grass",
		zMoveBoost: {def: 1},
		contestType: "Cute",
	},
	"stringshot": {
		num: 81,
		accuracy: 95,
		basePower: 0,
		category: "Status",
		desc: "Lowers the target's Speed by 2 stages.",
		shortDesc: "Lowers the foe(s) Speed by 2.",
		id: "stringshot",
		name: "String Shot",
		pp: 40,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		boosts: {
			spe: -2,
		},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Bug",
		zMoveBoost: {spe: 1},
		contestType: "Clever",
	},
	"struggle": {
		num: 165,
		accuracy: true,
		basePower: 50,
		category: "Physical",
		desc: "Deals typeless damage to a random opposing Pokemon. If this move was successful, the user loses 1/4 of its maximum HP, rounded half up, and the Rock Head Ability does not prevent this. This move is automatically used if none of the user's known moves can be selected.",
		shortDesc: "User loses 1/4 of its max HP.",
		id: "struggle",
		name: "Struggle",
		pp: 1,
		noPPBoosts: true,
		priority: 0,
		flags: {contact: 1, protect: 1},
		noSketch: true,
		onModifyMove(move, pokemon, target) {
			move.type = '???';
			this.add('-activate', pokemon, 'move: Struggle');
		},
		struggleRecoil: true,
		secondary: null,
		target: "randomNormal",
		type: "Normal",
		zMovePower: 1,
		contestType: "Tough",
	},
	"strugglebug": {
		num: 522,
		accuracy: 100,
		basePower: 50,
		category: "Special",
		desc: "Has a 100% chance to lower the target's Special Attack by 1 stage.",
		shortDesc: "100% chance to lower the foe(s) Sp. Atk by 1.",
		id: "strugglebug",
		name: "Struggle Bug",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				spa: -1,
			},
		},
		target: "allAdjacentFoes",
		type: "Bug",
		zMovePower: 100,
		contestType: "Cute",
	},
	"stunspore": {
		num: 78,
		accuracy: 75,
		basePower: 0,
		category: "Status",
		desc: "Paralyzes the target.",
		shortDesc: "Paralyzes the target.",
		id: "stunspore",
		name: "Stun Spore",
		pp: 30,
		priority: 0,
		flags: {powder: 1, protect: 1, reflectable: 1, mirror: 1},
		status: 'par',
		secondary: null,
		target: "normal",
		type: "Grass",
		zMoveBoost: {spd: 1},
		contestType: "Clever",
	},
	"submission": {
		num: 66,
		accuracy: 80,
		basePower: 80,
		category: "Physical",
		desc: "If the target lost HP, the user takes recoil damage equal to 1/4 the HP lost by the target, rounded half up, but not less than 1 HP.",
		shortDesc: "Has 1/4 recoil.",
		id: "submission",
		name: "Submission",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [1, 4],
		secondary: null,
		target: "normal",
		type: "Fighting",
		zMovePower: 160,
		contestType: "Cool",
	},
	"substitute": {
		num: 164,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user takes 1/4 of its maximum HP, rounded down, and puts it into a substitute to take its place in battle. The substitute is removed once enough damage is inflicted on it, or if the user switches out or faints. Baton Pass can be used to transfer the substitute to an ally, and the substitute will keep its remaining HP. Until the substitute is broken, it receives damage from all attacks made by other Pokemon and shields the user from status effects and stat stage changes caused by other Pokemon. Sound-based moves and Pokemon with the Infiltrator Ability ignore substitutes. The user still takes normal damage from weather and status effects while behind its substitute. If the substitute breaks during a multi-hit attack, the user will take damage from any remaining hits. If a substitute is created while the user is trapped by a binding move, the binding effect ends immediately. Fails if the user does not have enough HP remaining to create a substitute without fainting, or if it already has a substitute.",
		shortDesc: "User takes 1/4 its max HP to put in a substitute.",
		id: "substitute",
		isViable: true,
		name: "Substitute",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, nonsky: 1},
		volatileStatus: 'substitute',
		onTryHit(target) {
			if (target.volatiles['substitute']) {
				this.add('-fail', target, 'move: Substitute');
				return null;
			}
			if (target.hp <= target.maxhp / 4 || target.maxhp === 1) { // Shedinja clause
				this.add('-fail', target, 'move: Substitute', '[weak]');
				return null;
			}
		},
		onHit(target) {
			this.directDamage(target.maxhp / 4);
		},
		effect: {
			onStart(target) {
				this.add('-start', target, 'Substitute');
				this.effectData.hp = Math.floor(target.maxhp / 4);
				delete target.volatiles['partiallytrapped'];
			},
			onTryPrimaryHitPriority: -1,
			onTryPrimaryHit(target, source, move) {
				if (target === source || move.flags['authentic'] || move.infiltrates) {
					return;
				}
				let damage = this.getDamage(source, target, move);
				if (!damage && damage !== 0) {
					this.add('-fail', source);
					this.attrLastMove('[still]');
					return null;
				}
				damage = this.runEvent('SubDamage', target, source, move, damage);
				if (!damage) {
					return damage;
				}
				if (damage > target.volatiles['substitute'].hp) {
					damage = /** @type {number} */ (target.volatiles['substitute'].hp);
				}
				target.volatiles['substitute'].hp -= damage;
				source.lastDamage = damage;
				if (target.volatiles['substitute'].hp <= 0) {
					target.removeVolatile('substitute');
				} else {
					this.add('-activate', target, 'move: Substitute', '[damage]');
				}
				if (move.recoil) {
					this.damage(this.calcRecoilDamage(damage, move), source, target, 'recoil');
				}
				if (move.drain) {
					this.heal(Math.ceil(damage * move.drain[0] / move.drain[1]), source, target, 'drain');
				}
				this.singleEvent('AfterSubDamage', move, null, target, source, move, damage);
				this.runEvent('AfterSubDamage', target, source, move, damage);
				return 0; // hit
			},
			onEnd(target) {
				this.add('-end', target, 'Substitute');
			},
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Cute",
	},
	"subzeroslammer": {
		num: 650,
		accuracy: true,
		basePower: 1,
		category: "Physical",
		shortDesc: "Power is equal to the base move's Z-Power.",
		id: "subzeroslammer",
		isViable: true,
		name: "Subzero Slammer",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "iciumz",
		secondary: null,
		target: "normal",
		type: "Ice",
		contestType: "Cool",
	},
	"suckerpunch": {
		num: 389,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		desc: "Fails if the target did not select a physical attack, special attack, or Me First for use this turn, or if the target moves before the user.",
		shortDesc: "Usually goes first. Fails if target is not attacking.",
		id: "suckerpunch",
		isViable: true,
		name: "Sucker Punch",
		pp: 5,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		onTry(source, target) {
			let action = this.willMove(target);
			if (!action || action.choice !== 'move' || (action.move.category === 'Status' && action.move.id !== 'mefirst') || target.volatiles.mustrecharge) {
				this.add('-fail', source);
				this.attrLastMove('[still]');
				return null;
			}
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		zMovePower: 140,
		contestType: "Clever",
	},
	"sunnyday": {
		num: 241,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "For 5 turns, the weather becomes Sunny Day. The damage of Fire-type attacks is multiplied by 1.5 and the damage of Water-type attacks is multiplied by 0.5 during the effect. Lasts for 8 turns if the user is holding Heat Rock. Fails if the current weather is Sunny Day.",
		shortDesc: "For 5 turns, intense sunlight powers Fire moves.",
		id: "sunnyday",
		name: "Sunny Day",
		pp: 5,
		priority: 0,
		flags: {},
		weather: 'sunnyday',
		secondary: null,
		target: "all",
		type: "Fire",
		zMoveBoost: {spe: 1},
		contestType: "Beautiful",
	},
	"sunsteelstrike": {
		num: 713,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		desc: "This move and its effects ignore the Abilities of other Pokemon.",
		shortDesc: "Ignores the Abilities of other Pokemon.",
		id: "sunsteelstrike",
		isViable: true,
		name: "Sunsteel Strike",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		ignoreAbility: true,
		secondary: null,
		target: "normal",
		type: "Steel",
		zMovePower: 180,
		contestType: "Cool",
	},
	"superfang": {
		num: 162,
		accuracy: 90,
		basePower: 0,
		damageCallback(pokemon, target) {
			return this.clampIntRange(Math.floor(target.hp / 2), 1);
		},
		category: "Physical",
		desc: "Deals damage to the target equal to half of its current HP, rounded down, but not less than 1 HP.",
		shortDesc: "Does damage equal to 1/2 target's current HP.",
		id: "superfang",
		isViable: true,
		name: "Super Fang",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 100,
		contestType: "Tough",
	},
	"superpower": {
		num: 276,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		desc: "Lowers the user's Attack and Defense by 1 stage.",
		shortDesc: "Lowers the user's Attack and Defense by 1.",
		id: "superpower",
		isViable: true,
		name: "Superpower",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		self: {
			boosts: {
				atk: -1,
				def: -1,
			},
		},
		secondary: null,
		target: "normal",
		type: "Fighting",
		zMovePower: 190,
		contestType: "Tough",
	},
	"supersonic": {
		num: 48,
		accuracy: 55,
		basePower: 0,
		category: "Status",
		shortDesc: "Causes the target to become confused.",
		id: "supersonic",
		name: "Supersonic",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, sound: 1, authentic: 1},
		volatileStatus: 'confusion',
		secondary: null,
		target: "normal",
		type: "Normal",
		zMoveBoost: {spe: 1},
		contestType: "Clever",
	},
	"supersonicskystrike": {
		num: 626,
		accuracy: true,
		basePower: 1,
		category: "Physical",
		shortDesc: "Power is equal to the base move's Z-Power.",
		id: "supersonicskystrike",
		isViable: true,
		name: "Supersonic Skystrike",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "flyiniumz",
		secondary: null,
		target: "normal",
		type: "Flying",
		contestType: "Cool",
	},
	"surf": {
		num: 57,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		desc: "Damage doubles if the target is using Dive.",
		shortDesc: "Hits adjacent Pokemon. Double damage on Dive.",
		id: "surf",
		isViable: true,
		name: "Surf",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, nonsky: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Water",
		zMovePower: 175,
		contestType: "Beautiful",
	},
	"swagger": {
		num: 207,
		accuracy: 85,
		basePower: 0,
		category: "Status",
		desc: "Raises the target's Attack by 2 stages and confuses it.",
		shortDesc: "Raises the target's Attack by 2 and confuses it.",
		id: "swagger",
		name: "Swagger",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, mystery: 1},
		volatileStatus: 'confusion',
		boosts: {
			atk: 2,
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Cute",
	},
	"swallow": {
		num: 256,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user restores its HP based on its Stockpile count. Restores 1/4 of its maximum HP if it's 1, 1/2 of its maximum HP if it's 2, both rounded half down, and all of its HP if it's 3. Fails if the user's Stockpile count is 0. The user's Defense and Special Defense decrease by as many stages as Stockpile had increased them, and the user's Stockpile count resets to 0.",
		shortDesc: "Heals the user based on uses of Stockpile.",
		id: "swallow",
		name: "Swallow",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		onTryHit(pokemon) {
			if (!pokemon.volatiles['stockpile'] || !pokemon.volatiles['stockpile'].layers) return false;
		},
		onHit(pokemon) {
			let healAmount = [0.25, 0.5, 1];
			let healedBy = this.heal(this.modify(pokemon.maxhp, healAmount[(pokemon.volatiles['stockpile'].layers - 1)]));
			pokemon.removeVolatile('stockpile');
			return !!healedBy;
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Tough",
	},
	"sweetkiss": {
		num: 186,
		accuracy: 75,
		basePower: 0,
		category: "Status",
		shortDesc: "Causes the target to become confused.",
		id: "sweetkiss",
		name: "Sweet Kiss",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		volatileStatus: 'confusion',
		secondary: null,
		target: "normal",
		type: "Fairy",
		zMoveBoost: {spa: 1},
		contestType: "Cute",
	},
	"sweetscent": {
		num: 230,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "Lowers the target's evasiveness by 2 stages.",
		shortDesc: "Lowers the foe(s) evasiveness by 2.",
		id: "sweetscent",
		name: "Sweet Scent",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		boosts: {
			evasion: -2,
		},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Normal",
		zMoveBoost: {accuracy: 1},
		contestType: "Cute",
	},
	"swift": {
		num: 129,
		accuracy: true,
		basePower: 60,
		category: "Special",
		desc: "This move does not check accuracy.",
		shortDesc: "This move does not check accuracy. Hits foes.",
		id: "swift",
		name: "Swift",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Normal",
		zMovePower: 120,
		contestType: "Cool",
	},
	"switcheroo": {
		num: 415,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "The user swaps its held item with the target's held item. Fails if either the user or the target is holding a Mail or Z-Crystal, if neither is holding an item, if the user is trying to give or take a Mega Stone to or from the species that can Mega Evolve with it, or if the user is trying to give or take a Blue Orb, a Red Orb, a Griseous Orb, a Plate, a Drive, or a Memory to or from a Kyogre, a Groudon, a Giratina, an Arceus, a Genesect, or a Silvally, respectively. The target is immune to this move if it has the Sticky Hold Ability.",
		shortDesc: "User switches its held item with the target's.",
		id: "switcheroo",
		isViable: true,
		name: "Switcheroo",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, mystery: 1},
		onTryHit(target) {
			if (target.hasAbility('stickyhold')) {
				this.add('-immune', target);
				return null;
			}
		},
		onHit(target, source, move) {
			let yourItem = target.takeItem(source);
			let myItem = source.takeItem();
			if (target.item || source.item || (!yourItem && !myItem)) {
				if (yourItem) target.item = yourItem.id;
				if (myItem) source.item = myItem.id;
				return false;
			}
			if ((myItem && !this.singleEvent('TakeItem', myItem, source.itemData, target, source, move, myItem)) || (yourItem && !this.singleEvent('TakeItem', yourItem, target.itemData, source, target, move, yourItem))) {
				if (yourItem) target.item = yourItem.id;
				if (myItem) source.item = myItem.id;
				return false;
			}
			this.add('-activate', source, 'move: Trick', '[of] ' + target);
			if (myItem) {
				target.setItem(myItem);
				this.add('-item', target, myItem, '[from] move: Switcheroo');
			} else {
				this.add('-enditem', target, yourItem, '[silent]', '[from] move: Switcheroo');
			}
			if (yourItem) {
				source.setItem(yourItem);
				this.add('-item', source, yourItem, '[from] move: Switcheroo');
			} else {
				this.add('-enditem', source, myItem, '[silent]', '[from] move: Switcheroo');
			}
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		zMoveBoost: {spe: 2},
		contestType: "Clever",
	},
	"swordsdance": {
		num: 14,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Raises the user's Attack by 2 stages.",
		shortDesc: "Raises the user's Attack by 2.",
		id: "swordsdance",
		isViable: true,
		name: "Swords Dance",
		pp: 20,
		priority: 0,
		flags: {snatch: 1, dance: 1},
		boosts: {
			atk: 2,
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Beautiful",
	},
	"synchronoise": {
		num: 485,
		accuracy: 100,
		basePower: 120,
		category: "Special",
		desc: "The target is immune if it does not share a type with the user.",
		shortDesc: "Hits adjacent Pokemon sharing the user's type.",
		id: "synchronoise",
		name: "Synchronoise",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onTryHit(target, source) {
			if (!target.hasType(source.getTypes())) {
				this.add('-immune', target);
				return null;
			}
		},
		secondary: null,
		target: "allAdjacent",
		type: "Psychic",
		zMovePower: 190,
		contestType: "Clever",
	},
	"synthesis": {
		num: 235,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user restores 1/2 of its maximum HP if Delta Stream or no weather conditions are in effect, 2/3 of its maximum HP if the weather is Desolate Land or Sunny Day, and 1/4 of its maximum HP if the weather is Hail, Primordial Sea, Rain Dance, or Sandstorm, all rounded half down.",
		shortDesc: "Heals the user by a weather-dependent amount.",
		id: "synthesis",
		isViable: true,
		name: "Synthesis",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		onHit(pokemon) {
			let factor = 0.5;
			if (this.field.isWeather(['sunnyday', 'desolateland'])) {
				factor = 0.667;
			} else if (this.field.isWeather(['raindance', 'primordialsea', 'sandstorm', 'hail'])) {
				factor = 0.25;
			}
			return !!this.heal(this.modify(pokemon.maxhp, factor));
		},
		secondary: null,
		target: "self",
		type: "Grass",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Clever",
	},
	"tackle": {
		num: 33,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		shortDesc: "No additional effect.",
		id: "tackle",
		name: "Tackle",
		pp: 35,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 100,
		contestType: "Tough",
	},
	"tailglow": {
		num: 294,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Raises the user's Special Attack by 3 stages.",
		shortDesc: "Raises the user's Sp. Atk by 3.",
		id: "tailglow",
		isViable: true,
		name: "Tail Glow",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			spa: 3,
		},
		secondary: null,
		target: "self",
		type: "Bug",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Beautiful",
	},
	"tailslap": {
		num: 541,
		accuracy: 85,
		basePower: 25,
		category: "Physical",
		desc: "Hits two to five times. Has a 1/3 chance to hit two or three times, and a 1/6 chance to hit four or five times. If one of the hits breaks the target's substitute, it will take damage for the remaining hits. If the user has the Skill Link Ability, this move will always hit five times.",
		shortDesc: "Hits 2-5 times in one turn.",
		id: "tailslap",
		isViable: true,
		name: "Tail Slap",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 140,
		contestType: "Cute",
	},
	"tailwhip": {
		num: 39,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "Lowers the target's Defense by 1 stage.",
		shortDesc: "Lowers the foe(s) Defense by 1.",
		id: "tailwhip",
		name: "Tail Whip",
		pp: 30,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		boosts: {
			def: -1,
		},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Normal",
		zMoveBoost: {atk: 1},
		contestType: "Cute",
	},
	"tailwind": {
		num: 366,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "For 4 turns, the user and its party members have their Speed doubled. Fails if this move is already in effect for the user's side.",
		shortDesc: "For 4 turns, allies' Speed is doubled.",
		id: "tailwind",
		isViable: true,
		name: "Tailwind",
		pp: 15,
		priority: 0,
		flags: {snatch: 1},
		sideCondition: 'tailwind',
		effect: {
			duration: 4,
			durationCallback(target, source, effect) {
				if (source && source.hasAbility('persistent')) {
					this.add('-activate', source, 'ability: Persistent', effect);
					return 6;
				}
				return 4;
			},
			onStart(side) {
				this.add('-sidestart', side, 'move: Tailwind');
			},
			onModifySpe(spe, pokemon) {
				return this.chainModify(2);
			},
			onResidualOrder: 21,
			onResidualSubOrder: 4,
			onEnd(side) {
				this.add('-sideend', side, 'move: Tailwind');
			},
		},
		secondary: null,
		target: "allySide",
		type: "Flying",
		zMoveEffect: 'crit2',
		contestType: "Cool",
	},
	"takedown": {
		num: 36,
		accuracy: 85,
		basePower: 90,
		category: "Physical",
		desc: "If the target lost HP, the user takes recoil damage equal to 1/4 the HP lost by the target, rounded half up, but not less than 1 HP.",
		shortDesc: "Has 1/4 recoil.",
		id: "takedown",
		name: "Take Down",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [1, 4],
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 175,
		contestType: "Tough",
	},
	"taunt": {
		num: 269,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "Prevents the target from using non-damaging moves for its next three turns. Pokemon with the Oblivious Ability or protected by the Aroma Veil Ability are immune.",
		shortDesc: "Target can't use status moves its next 3 turns.",
		id: "taunt",
		isViable: true,
		name: "Taunt",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, authentic: 1},
		volatileStatus: 'taunt',
		effect: {
			duration: 3,
			onStart(target) {
				if (target.activeTurns && !this.willMove(target)) {
					this.effectData.duration++;
				}
				this.add('-start', target, 'move: Taunt');
			},
			onResidualOrder: 12,
			onEnd(target) {
				this.add('-end', target, 'move: Taunt');
			},
			onDisableMove(pokemon) {
				for (const moveSlot of pokemon.moveSlots) {
					if (this.getMove(moveSlot.id).category === 'Status') {
						pokemon.disableMove(moveSlot.id);
					}
				}
			},
			onBeforeMovePriority: 5,
			onBeforeMove(attacker, defender, move) {
				if (!move.isZ && move.category === 'Status') {
					this.add('cant', attacker, 'move: Taunt', move);
					return false;
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		zMoveBoost: {atk: 1},
		contestType: "Clever",
	},
	"tearfullook": {
		num: 715,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Lowers the target's Attack and Special Attack by 1 stage.",
		shortDesc: "Lowers the target's Attack and Sp. Atk by 1.",
		id: "tearfullook",
		name: "Tearful Look",
		pp: 20,
		priority: 0,
		flags: {reflectable: 1, mirror: 1},
		boosts: {
			atk: -1,
			spa: -1,
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMoveBoost: {def: 1},
		contestType: "Cute",
	},
	"technoblast": {
		num: 546,
		accuracy: 100,
		basePower: 120,
		category: "Special",
		desc: "This move's type depends on the user's held Drive.",
		shortDesc: "Type varies based on the held Drive.",
		id: "technoblast",
		isViable: true,
		name: "Techno Blast",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onModifyMove(move, pokemon) {
			if (pokemon.ignoringItem()) return;
			move.type = this.runEvent('Drive', pokemon, null, move, 'Normal');
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 190,
		contestType: "Cool",
	},
	"tectonicrage": {
		num: 630,
		accuracy: true,
		basePower: 1,
		category: "Physical",
		shortDesc: "Power is equal to the base move's Z-Power.",
		id: "tectonicrage",
		isViable: true,
		name: "Tectonic Rage",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "groundiumz",
		secondary: null,
		target: "normal",
		type: "Ground",
		contestType: "Cool",
	},
	"teeterdance": {
		num: 298,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "Causes the target to become confused.",
		shortDesc: "Confuses adjacent Pokemon.",
		id: "teeterdance",
		name: "Teeter Dance",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1, dance: 1},
		volatileStatus: 'confusion',
		secondary: null,
		target: "allAdjacent",
		type: "Normal",
		zMoveBoost: {spa: 1},
		contestType: "Cute",
	},
	"telekinesis": {
		num: 477,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "For 3 turns, the target cannot avoid any attacks made against it, other than OHKO moves, as long as it remains active. During the effect, the target is immune to Ground-type attacks and the effects of Spikes, Toxic Spikes, Sticky Web, and the Arena Trap Ability as long as it remains active. If the target uses Baton Pass, the replacement will gain the effect. Ingrain, Smack Down, Thousand Arrows, and Iron Ball override this move if the target is under any of their effects. Fails if the target is already under this effect or the effects of Ingrain, Smack Down, or Thousand Arrows. The target is immune to this move on use if its species is Diglett, Dugtrio, Alolan Diglett, Alolan Dugtrio, Sandygast, Palossand, or Gengar while Mega-Evolved. Mega Gengar cannot be under this effect by any means.",
		shortDesc: "For 3 turns, target floats but moves can't miss it.",
		id: "telekinesis",
		name: "Telekinesis",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, gravity: 1, mystery: 1},
		volatileStatus: 'telekinesis',
		effect: {
			duration: 3,
			onStart(target) {
				if (['Diglett', 'Dugtrio', 'Palossand', 'Sandygast'].includes(target.baseTemplate.baseSpecies) ||
						target.baseTemplate.species === 'Gengar-Mega') {
					this.add('-immune', target);
					return null;
				}
				if (target.volatiles['smackdown'] || target.volatiles['ingrain']) return false;
				this.add('-start', target, 'Telekinesis');
			},
			onAccuracyPriority: -1,
			onAccuracy(accuracy, target, source, move) {
				if (move && !move.ohko) return true;
			},
			onImmunity(type) {
				if (type === 'Ground') return false;
			},
			onUpdate(pokemon) {
				if (pokemon.baseTemplate.species === 'Gengar-Mega') {
					delete pokemon.volatiles['telekinesis'];
					this.add('-end', pokemon, 'Telekinesis', '[silent]');
				}
			},
			onResidualOrder: 16,
			onEnd(target) {
				this.add('-end', target, 'Telekinesis');
			},
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMoveBoost: {spa: 1},
		contestType: "Clever",
	},
	"teleport": {
		num: 100,
		accuracy: true,
		basePower: 0,
		category: "Status",
		shortDesc: "Fails when used.",
		id: "teleport",
		name: "Teleport",
		pp: 20,
		priority: 0,
		flags: {},
		onTryHit: false,
		secondary: null,
		target: "self",
		type: "Psychic",
		zMoveEffect: 'heal',
		contestType: "Cool",
	},
	"thief": {
		num: 168,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		desc: "If this attack was successful and the user has not fainted, it steals the target's held item if the user is not holding one. The target's item is not stolen if it is a Mail or Z-Crystal, or if the target is a Kyogre holding a Blue Orb, a Groudon holding a Red Orb, a Giratina holding a Griseous Orb, an Arceus holding a Plate, a Genesect holding a Drive, a Silvally holding a Memory, or a Pokemon that can Mega Evolve holding the Mega Stone for its species. Items lost to this move cannot be regained with Recycle or the Harvest Ability.",
		shortDesc: "If the user has no item, it steals the target's.",
		id: "thief",
		name: "Thief",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onAfterHit(target, source, move) {
			if (source.item || source.volatiles['gem']) {
				return;
			}
			let yourItem = target.takeItem(source);
			if (!yourItem) {
				return;
			}
			if (!this.singleEvent('TakeItem', yourItem, target.itemData, source, target, move, yourItem) || !source.setItem(yourItem)) {
				target.item = yourItem.id; // bypass setItem so we don't break choicelock or anything
				return;
			}
			this.add('-item', source, yourItem, '[from] move: Thief', '[of] ' + target);
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		zMovePower: 120,
		contestType: "Tough",
	},
	"thousandarrows": {
		num: 614,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		desc: "This move can hit airborne Pokemon, which includes Flying-type Pokemon, Pokemon with the Levitate Ability, Pokemon holding an Air Balloon, and Pokemon under the effect of Magnet Rise or Telekinesis. If the target is a Flying type and is not already grounded, this move deals neutral damage regardless of its other type(s). This move can hit a target using Bounce, Fly, or Sky Drop. If this move hits a target under the effect of Bounce, Fly, Magnet Rise, or Telekinesis, the effect ends. If the target is a Flying type that has not used Roost this turn or a Pokemon with the Levitate Ability, it loses its immunity to Ground-type attacks and the Arena Trap Ability as long as it remains active. During the effect, Magnet Rise fails for the target and Telekinesis fails against the target.",
		shortDesc: "Grounds adjacent foes. First hit neutral on Flying.",
		id: "thousandarrows",
		isViable: true,
		name: "Thousand Arrows",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, nonsky: 1},
		onEffectiveness(typeMod, target, type, move) {
			if (move.type !== 'Ground') return;
			if (!target) return; // avoid crashing when called from a chat plugin
			// ignore effectiveness if the target is Flying type and immune to Ground
			if (!target.runImmunity('Ground')) {
				if (target.hasType('Flying')) return 0;
			}
		},
		volatileStatus: 'smackdown',
		ignoreImmunity: {'Ground': true},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Ground",
		zMovePower: 180,
		contestType: "Beautiful",
	},
	"thousandwaves": {
		num: 615,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		desc: "Prevents the target from switching out. The target can still switch out if it is holding Shed Shell or uses Baton Pass, Parting Shot, U-turn, or Volt Switch. If the target leaves the field using Baton Pass, the replacement will remain trapped. The effect ends if the user leaves the field.",
		shortDesc: "Hits adjacent foes. Prevents them from switching.",
		id: "thousandwaves",
		name: "Thousand Waves",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, nonsky: 1},
		onHit(target, source, move) {
			if (source.isActive) target.addVolatile('trapped', source, move, 'trapper');
		},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Ground",
		zMovePower: 175,
		contestType: "Tough",
	},
	"thrash": {
		num: 37,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		desc: "The user spends two or three turns locked into this move and becomes confused immediately after its move on the last turn of the effect if it is not already. This move targets an opposing Pokemon at random on each turn. If the user is prevented from moving, is asleep at the beginning of a turn, or the attack is not successful against the target on the first turn of the effect or the second turn of a three-turn effect, the effect ends without causing confusion. If this move is called by Sleep Talk and the user is asleep, the move is used for one turn and does not confuse the user.",
		shortDesc: "Lasts 2-3 turns. Confuses the user afterwards.",
		id: "thrash",
		name: "Thrash",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		self: {
			volatileStatus: 'lockedmove',
		},
		onAfterMove(pokemon) {
			if (pokemon.volatiles['lockedmove'] && pokemon.volatiles['lockedmove'].duration === 1) {
				pokemon.removeVolatile('lockedmove');
			}
		},
		secondary: null,
		target: "randomNormal",
		type: "Normal",
		zMovePower: 190,
		contestType: "Tough",
	},
	"throatchop": {
		num: 675,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		desc: "For 2 turns, the target cannot use sound-based moves.",
		shortDesc: "For 2 turns, the target cannot use sound moves.",
		id: "throatchop",
		name: "Throat Chop",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		effect: {
			duration: 2,
			onStart(target) {
				this.add('-start', target, 'Throat Chop', '[silent]');
			},
			onDisableMove(pokemon) {
				for (const moveSlot of pokemon.moveSlots) {
					if (this.getMove(moveSlot.id).flags['sound']) {
						pokemon.disableMove(moveSlot.id);
					}
				}
			},
			onBeforeMovePriority: 6,
			onBeforeMove(pokemon, target, move) {
				if (!move.isZ && move.flags['sound']) {
					this.add('cant', pokemon, 'move: Throat Chop');
					return false;
				}
			},
			onResidualOrder: 22,
			onEnd(target) {
				this.add('-end', target, 'Throat Chop', '[silent]');
			},
		},
		secondary: {
			chance: 100,
			onHit(target) {
				target.addVolatile('throatchop');
			},
		},
		target: "normal",
		type: "Dark",
		zMovePower: 160,
		contestType: "Clever",
	},
	"thunder": {
		num: 87,
		accuracy: 70,
		basePower: 110,
		category: "Special",
		desc: "Has a 30% chance to paralyze the target. This move can hit a target using Bounce, Fly, or Sky Drop, or is under the effect of Sky Drop. If the weather is Primordial Sea or Rain Dance, this move does not check accuracy. If the weather is Desolate Land or Sunny Day, this move's accuracy is 50%.",
		shortDesc: "30% chance to paralyze. Can't miss in rain.",
		id: "thunder",
		isViable: true,
		name: "Thunder",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onModifyMove(move) {
			if (this.field.isWeather(['raindance', 'primordialsea'])) {
				move.accuracy = true;
			} else if (this.field.isWeather(['sunnyday', 'desolateland'])) {
				move.accuracy = 50;
			}
		},
		secondary: {
			chance: 30,
			status: 'par',
		},
		target: "normal",
		type: "Electric",
		zMovePower: 185,
		contestType: "Cool",
	},
	"thunderfang": {
		num: 422,
		accuracy: 95,
		basePower: 65,
		category: "Physical",
		desc: "Has a 10% chance to paralyze the target and a 10% chance to flinch it.",
		shortDesc: "10% chance to paralyze. 10% chance to flinch.",
		id: "thunderfang",
		name: "Thunder Fang",
		pp: 15,
		priority: 0,
		flags: {bite: 1, contact: 1, protect: 1, mirror: 1},
		secondaries: [
			{
				chance: 10,
				status: 'par',
			}, {
				chance: 10,
				volatileStatus: 'flinch',
			},
		],
		target: "normal",
		type: "Electric",
		zMovePower: 120,
		contestType: "Cool",
	},
	"thunderpunch": {
		num: 9,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		desc: "Has a 10% chance to paralyze the target.",
		shortDesc: "10% chance to paralyze the target.",
		id: "thunderpunch",
		isViable: true,
		name: "Thunder Punch",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: {
			chance: 10,
			status: 'par',
		},
		target: "normal",
		type: "Electric",
		zMovePower: 140,
		contestType: "Cool",
	},
	"thundershock": {
		num: 84,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		desc: "Has a 10% chance to paralyze the target.",
		shortDesc: "10% chance to paralyze the target.",
		id: "thundershock",
		name: "Thunder Shock",
		pp: 30,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			status: 'par',
		},
		target: "normal",
		type: "Electric",
		zMovePower: 100,
		contestType: "Cool",
	},
	"thunderwave": {
		num: 86,
		accuracy: 90,
		basePower: 0,
		category: "Status",
		desc: "Paralyzes the target. This move does not ignore type immunity.",
		shortDesc: "Paralyzes the target.",
		id: "thunderwave",
		isViable: true,
		name: "Thunder Wave",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		status: 'par',
		ignoreImmunity: false,
		secondary: null,
		target: "normal",
		type: "Electric",
		zMoveBoost: {spd: 1},
		contestType: "Cool",
	},
	"thunderbolt": {
		num: 85,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		desc: "Has a 10% chance to paralyze the target.",
		shortDesc: "10% chance to paralyze the target.",
		id: "thunderbolt",
		isViable: true,
		name: "Thunderbolt",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			status: 'par',
		},
		target: "normal",
		type: "Electric",
		zMovePower: 175,
		contestType: "Cool",
	},
	"tickle": {
		num: 321,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "Lowers the target's Attack and Defense by 1 stage.",
		shortDesc: "Lowers the target's Attack and Defense by 1.",
		id: "tickle",
		name: "Tickle",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, mystery: 1},
		boosts: {
			atk: -1,
			def: -1,
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMoveBoost: {def: 1},
		contestType: "Cute",
	},
	"topsyturvy": {
		num: 576,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The target's positive stat stages become negative and vice versa. Fails if all of the target's stat stages are 0.",
		shortDesc: "Inverts the target's stat stages.",
		id: "topsyturvy",
		name: "Topsy-Turvy",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, mystery: 1},
		onHit(target) {
			let success = false;
			for (let i in target.boosts) {
				// @ts-ignore
				if (target.boosts[i] === 0) continue;
				// @ts-ignore
				target.boosts[i] = -target.boosts[i];
				success = true;
			}
			if (!success) return false;
			this.add('-invertboost', target, '[from] move: Topsy-Turvy');
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		zMoveBoost: {atk: 1},
		contestType: "Clever",
	},
	"torment": {
		num: 259,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "Prevents the target from selecting the same move for use two turns in a row. This effect ends when the target is no longer active.",
		shortDesc: "Target can't select the same move twice in a row.",
		id: "torment",
		name: "Torment",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, authentic: 1},
		volatileStatus: 'torment',
		effect: {
			noCopy: true,
			onStart(pokemon) {
				this.add('-start', pokemon, 'Torment');
			},
			onEnd(pokemon) {
				this.add('-end', pokemon, 'Torment');
			},
			onDisableMove(pokemon) {
				if (pokemon.lastMove && pokemon.lastMove.id !== 'struggle') pokemon.disableMove(pokemon.lastMove.id);
			},
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		zMoveBoost: {def: 1},
		contestType: "Tough",
	},
	"toxic": {
		num: 92,
		accuracy: 90,
		basePower: 0,
		category: "Status",
		desc: "Badly poisons the target. If a Poison-type Pokemon uses this move, the target cannot avoid the attack, even if the target is in the middle of a two-turn move.",
		shortDesc: "Badly poisons the target. Poison types can't miss.",
		id: "toxic",
		isViable: true,
		name: "Toxic",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		// No Guard-like effect for Poison-type users implemented in BattleScripts#tryMoveHit
		status: 'tox',
		secondary: null,
		target: "normal",
		type: "Poison",
		zMoveBoost: {def: 1},
		contestType: "Clever",
	},
	"toxicspikes": {
		num: 390,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Sets up a hazard on the opposing side of the field, poisoning each opposing Pokemon that switches in, unless it is a Flying-type Pokemon or has the Levitate Ability. Can be used up to two times before failing. Opposing Pokemon become poisoned with one layer and badly poisoned with two layers. Can be removed from the opposing side if any opposing Pokemon uses Rapid Spin or Defog successfully, is hit by Defog, or a grounded Poison-type Pokemon switches in. Safeguard prevents the opposing party from being poisoned on switch-in, but a substitute does not.",
		shortDesc: "Poisons grounded foes on switch-in. Max 2 layers.",
		id: "toxicspikes",
		isViable: true,
		name: "Toxic Spikes",
		pp: 20,
		priority: 0,
		flags: {reflectable: 1, nonsky: 1},
		sideCondition: 'toxicspikes',
		effect: {
			// this is a side condition
			onStart(side) {
				this.add('-sidestart', side, 'move: Toxic Spikes');
				this.effectData.layers = 1;
			},
			onRestart(side) {
				if (this.effectData.layers >= 2) return false;
				this.add('-sidestart', side, 'move: Toxic Spikes');
				this.effectData.layers++;
			},
			onSwitchIn(pokemon) {
				if (!pokemon.isGrounded()) return;
				if (pokemon.hasType('Poison')) {
					this.add('-sideend', pokemon.side, 'move: Toxic Spikes', '[of] ' + pokemon);
					pokemon.side.removeSideCondition('toxicspikes');
				} else if (pokemon.hasType('Steel')) {
					return;
				} else if (this.effectData.layers >= 2) {
					pokemon.trySetStatus('tox', pokemon.side.foe.active[0]);
				} else {
					pokemon.trySetStatus('psn', pokemon.side.foe.active[0]);
				}
			},
		},
		secondary: null,
		target: "foeSide",
		type: "Poison",
		zMoveBoost: {def: 1},
		contestType: "Clever",
	},
	"toxicthread": {
		num: 672,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "Lowers the target's Speed by 1 stage and poisons it.",
		shortDesc: "Lowers the target's Speed by 1 and poisons it.",
		id: "toxicthread",
		isViable: true,
		name: "Toxic Thread",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		status: 'psn',
		boosts: {
			spe: -1,
		},
		secondary: null,
		target: "normal",
		type: "Poison",
		zMoveBoost: {spe: 1},
		contestType: "Tough",
	},
	"transform": {
		num: 144,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user transforms into the target. The target's current stats, stat stages, types, moves, Ability, weight, gender, and sprite are copied. The user's level and HP remain the same and each copied move receives only 5 PP, with a maximum of 5 PP each. The user can no longer change formes if it would have the ability to do so. This move fails if it hits a substitute, if either the user or the target is already transformed, or if either is behind an Illusion.",
		shortDesc: "Copies target's stats, moves, types, and Ability.",
		id: "transform",
		name: "Transform",
		pp: 10,
		priority: 0,
		flags: {mystery: 1},
		onHit(target, pokemon) {
			if (!pokemon.transformInto(target)) {
				return false;
			}
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMoveEffect: 'heal',
		contestType: "Clever",
	},
	"triattack": {
		num: 161,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		desc: "Has a 20% chance to either burn, freeze, or paralyze the target.",
		shortDesc: "20% chance to paralyze or burn or freeze target.",
		id: "triattack",
		isViable: true,
		name: "Tri Attack",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			onHit(target, source) {
				let result = this.random(3);
				if (result === 0) {
					target.trySetStatus('brn', source);
				} else if (result === 1) {
					target.trySetStatus('par', source);
				} else {
					target.trySetStatus('frz', source);
				}
			},
		},
		target: "normal",
		type: "Normal",
		zMovePower: 160,
		contestType: "Beautiful",
	},
	"trick": {
		num: 271,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "The user swaps its held item with the target's held item. Fails if either the user or the target is holding a Mail or Z-Crystal, if neither is holding an item, if the user is trying to give or take a Mega Stone to or from the species that can Mega Evolve with it, or if the user is trying to give or take a Blue Orb, a Red Orb, a Griseous Orb, a Plate, a Drive, or a Memory to or from a Kyogre, a Groudon, a Giratina, an Arceus, a Genesect, or a Silvally, respectively. The target is immune to this move if it has the Sticky Hold Ability.",
		shortDesc: "User switches its held item with the target's.",
		id: "trick",
		isViable: true,
		name: "Trick",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, mystery: 1},
		onTryHit(target) {
			if (target.hasAbility('stickyhold')) {
				this.add('-immune', target);
				return null;
			}
		},
		onHit(target, source, move) {
			let yourItem = target.takeItem(source);
			let myItem = source.takeItem();
			if (target.item || source.item || (!yourItem && !myItem)) {
				if (yourItem) target.item = yourItem.id;
				if (myItem) source.item = myItem.id;
				return false;
			}
			if ((myItem && !this.singleEvent('TakeItem', myItem, source.itemData, target, source, move, myItem)) || (yourItem && !this.singleEvent('TakeItem', yourItem, target.itemData, source, target, move, yourItem))) {
				if (yourItem) target.item = yourItem.id;
				if (myItem) source.item = myItem.id;
				return false;
			}
			this.add('-activate', source, 'move: Trick', '[of] ' + target);
			if (myItem) {
				target.setItem(myItem);
				this.add('-item', target, myItem, '[from] move: Trick');
			} else {
				this.add('-enditem', target, yourItem, '[silent]', '[from] move: Trick');
			}
			if (yourItem) {
				source.setItem(yourItem);
				this.add('-item', source, yourItem, '[from] move: Trick');
			} else {
				this.add('-enditem', source, myItem, '[silent]', '[from] move: Trick');
			}
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMoveBoost: {spe: 2},
		contestType: "Clever",
	},
	"trickortreat": {
		num: 567,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "Causes the Ghost type to be added to the target, effectively making it have two or three types. Fails if the target is already a Ghost type. If Forest's Curse adds a type to the target, it replaces the type added by this move and vice versa.",
		shortDesc: "Adds Ghost to the target's type(s).",
		id: "trickortreat",
		name: "Trick-or-Treat",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, mystery: 1},
		onHit(target) {
			if (target.hasType('Ghost')) return false;
			if (!target.addType('Ghost')) return false;
			this.add('-start', target, 'typeadd', 'Ghost', '[from] move: Trick-or-Treat');

			if (target.side.active.length === 2 && target.position === 1) {
				// Curse Glitch
				const action = this.willMove(target);
				if (action && action.move.id === 'curse') {
					action.targetLoc = -1;
				}
			}
		},
		secondary: null,
		target: "normal",
		type: "Ghost",
		zMoveBoost: {atk: 1, def: 1, spa: 1, spd: 1, spe: 1},
		contestType: "Cute",
	},
	"trickroom": {
		num: 433,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "For 5 turns, the Speed of every Pokemon is recalculated for the purposes of determining turn order. During the effect, each Pokemon's Speed is considered to be (10000 - its normal Speed), and if this value is greater than 8191, 8192 is subtracted from it. If this move is used during the effect, the effect ends.",
		shortDesc: "Goes last. For 5 turns, turn order is reversed.",
		id: "trickroom",
		name: "Trick Room",
		pp: 5,
		priority: -7,
		flags: {mirror: 1},
		pseudoWeather: 'trickroom',
		effect: {
			duration: 5,
			durationCallback(source, effect) {
				if (source && source.hasAbility('persistent')) {
					this.add('-activate', source, 'ability: Persistent', effect);
					return 7;
				}
				return 5;
			},
			onStart(target, source) {
				this.add('-fieldstart', 'move: Trick Room', '[of] ' + source);
			},
			onRestart(target, source) {
				this.field.removePseudoWeather('trickroom');
			},
			// Speed modification is changed in Pokemon.getActionSpeed() in sim/pokemon.js
			onResidualOrder: 23,
			onEnd() {
				this.add('-fieldend', 'move: Trick Room');
			},
		},
		secondary: null,
		target: "all",
		type: "Psychic",
		zMoveBoost: {accuracy: 1},
		contestType: "Clever",
	},
	"triplekick": {
		num: 167,
		accuracy: 90,
		basePower: 10,
		basePowerCallback(pokemon, target, move) {
			return 10 * move.hit;
		},
		category: "Physical",
		desc: "Hits three times. Power increases to 20 for the second hit and 30 for the third. This move checks accuracy for each hit, and the attack ends if the target avoids a hit. If one of the hits breaks the target's substitute, it will take damage for the remaining hits. If the user has the Skill Link Ability, this move will always hit three times.",
		shortDesc: "Hits 3 times. Each hit can miss, but power rises.",
		id: "triplekick",
		name: "Triple Kick",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		multihit: 3,
		multiaccuracy: true,
		secondary: null,
		target: "normal",
		type: "Fighting",
		zMovePower: 120,
		contestType: "Cool",
	},
	"tropkick": {
		num: 688,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		desc: "Has a 100% chance to lower the target's Attack by 1 stage.",
		shortDesc: "100% chance to lower the target's Attack by 1.",
		id: "tropkick",
		name: "Trop Kick",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				atk: -1,
			},
		},
		target: "normal",
		type: "Grass",
		zMovePower: 140,
		contestType: "Cute",
	},
	"trumpcard": {
		num: 376,
		accuracy: true,
		basePower: 0,
		basePowerCallback(source, target, move) {
			const callerMoveId = move.sourceEffect || move.id;
			const moveSlot = callerMoveId === 'instruct' ? source.getMoveData(move.id) : source.getMoveData(callerMoveId);
			if (!moveSlot) return 40;
			switch (moveSlot.pp) {
			case 0:
				return 200;
			case 1:
				return 80;
			case 2:
				return 60;
			case 3:
				return 50;
			default:
				return 40;
			}
		},
		category: "Special",
		desc: "The power of this move is based on the amount of PP remaining after normal PP reduction and the Pressure Ability resolve. 200 power for 0 PP, 80 power for 1 PP, 60 power for 2 PP, 50 power for 3 PP, and 40 power for 4 or more PP.",
		shortDesc: "More power the fewer PP this move has left.",
		id: "trumpcard",
		name: "Trump Card",
		pp: 5,
		noPPBoosts: true,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 160,
		contestType: "Cool",
	},
	"twineedle": {
		num: 41,
		accuracy: 100,
		basePower: 25,
		category: "Physical",
		desc: "Hits twice, with each hit having a 20% chance to poison the target. If the first hit breaks the target's substitute, it will take damage for the second hit.",
		shortDesc: "Hits 2 times. Each hit has 20% chance to poison.",
		id: "twineedle",
		name: "Twineedle",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		multihit: 2,
		secondary: {
			chance: 20,
			status: 'psn',
		},
		target: "normal",
		type: "Bug",
		zMovePower: 100,
		contestType: "Cool",
	},
	"twinkletackle": {
		num: 656,
		accuracy: true,
		basePower: 1,
		category: "Physical",
		shortDesc: "Power is equal to the base move's Z-Power.",
		id: "twinkletackle",
		isViable: true,
		name: "Twinkle Tackle",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "fairiumz",
		secondary: null,
		target: "normal",
		type: "Fairy",
		contestType: "Cool",
	},
	"twister": {
		num: 239,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		desc: "Has a 20% chance to flinch the target. Power doubles if the target is using Bounce, Fly, or Sky Drop, or is under the effect of Sky Drop.",
		shortDesc: "20% chance to flinch the foe(s).",
		id: "twister",
		name: "Twister",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			volatileStatus: 'flinch',
		},
		target: "allAdjacentFoes",
		type: "Dragon",
		zMovePower: 100,
		contestType: "Cool",
	},
	"uturn": {
		num: 369,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		desc: "If this move is successful and the user has not fainted, the user switches out even if it is trapped and is replaced immediately by a selected party member. The user does not switch out if there are no unfainted party members, or if the target switched out using an Eject Button or through the effect of the Emergency Exit or Wimp Out Abilities.",
		shortDesc: "User switches out after damaging the target.",
		id: "uturn",
		isViable: true,
		name: "U-turn",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		selfSwitch: true,
		secondary: null,
		target: "normal",
		type: "Bug",
		zMovePower: 140,
		contestType: "Cute",
	},
	"uproar": {
		num: 253,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		desc: "The user spends three turns locked into this move. This move targets an opponent at random on each turn. On the first of the three turns, all sleeping active Pokemon wake up. During the three turns, no active Pokemon can fall asleep by any means, and Pokemon switched in during the effect do not wake up. If the user is prevented from moving or the attack is not successful against the target during one of the turns, the effect ends.",
		shortDesc: "Lasts 3 turns. Active Pokemon cannot fall asleep.",
		id: "uproar",
		name: "Uproar",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1, authentic: 1},
		self: {
			volatileStatus: 'uproar',
		},
		onTryHit(target) {
			for (const [i, allyActive] of target.side.active.entries()) {
				if (allyActive && allyActive.status === 'slp') allyActive.cureStatus();
				let foeActive = target.side.foe.active[i];
				if (foeActive && foeActive.status === 'slp') foeActive.cureStatus();
			}
		},
		effect: {
			duration: 3,
			onStart(target) {
				this.add('-start', target, 'Uproar');
			},
			onResidual(target) {
				if (target.lastMove && target.lastMove.id === 'struggle') {
					// don't lock
					delete target.volatiles['uproar'];
				}
				this.add('-start', target, 'Uproar', '[upkeep]');
			},
			onEnd(target) {
				this.add('-end', target, 'Uproar');
			},
			onLockMove: 'uproar',
			onAnySetStatus(status, pokemon) {
				if (status.id === 'slp') {
					if (pokemon === this.effectData.target) {
						this.add('-fail', pokemon, 'slp', '[from] Uproar', '[msg]');
					} else {
						this.add('-fail', pokemon, 'slp', '[from] Uproar');
					}
					return null;
				}
			},
		},
		secondary: null,
		target: "randomNormal",
		type: "Normal",
		zMovePower: 175,
		contestType: "Cute",
	},
	"vcreate": {
		num: 557,
		accuracy: 95,
		basePower: 180,
		category: "Physical",
		desc: "Lowers the user's Speed, Defense, and Special Defense by 1 stage.",
		shortDesc: "Lowers the user's Defense, Sp. Def, Speed by 1.",
		id: "vcreate",
		isViable: true,
		name: "V-create",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		self: {
			boosts: {
				spe: -1,
				def: -1,
				spd: -1,
			},
		},
		secondary: null,
		target: "normal",
		type: "Fire",
		zMovePower: 220,
		contestType: "Cool",
	},
	"vacuumwave": {
		num: 410,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		desc: "No additional effect.",
		shortDesc: "Usually goes first.",
		id: "vacuumwave",
		name: "Vacuum Wave",
		pp: 30,
		priority: 1,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		zMovePower: 100,
		contestType: "Cool",
	},
	"veeveevolley": {
		num: 741,
		accuracy: true,
		basePower: 0,
		basePowerCallback(pokemon) {
			return Math.floor((pokemon.happiness * 10) / 25) || 1;
		},
		category: "Physical",
		desc: "Power is equal to the greater of (user's Happiness * 2/5), rounded down, or 1.",
		shortDesc: "Max happiness: 102 power. Can't miss.",
		id: "veeveevolley",
		isNonstandard: "LGPE",
		isUnreleased: true,
		isViable: true,
		name: "Veevee Volley",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Cute",
	},
	"venomdrench": {
		num: 599,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "Lowers the target's Attack, Special Attack, and Speed by 1 stage if the target is poisoned. Fails if the target is not poisoned.",
		shortDesc: "Lowers Atk/Sp. Atk/Speed of poisoned foes by 1.",
		id: "venomdrench",
		name: "Venom Drench",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		onHit(target, source, move) {
			if (target.status === 'psn' || target.status === 'tox') {
				return !!this.boost({atk: -1, spa: -1, spe: -1}, target, source, move);
			}
			return false;
		},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Poison",
		zMoveBoost: {def: 1},
		contestType: "Clever",
	},
	"venoshock": {
		num: 474,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		desc: "Power doubles if the target is poisoned.",
		shortDesc: "Power doubles if the target is poisoned.",
		id: "venoshock",
		name: "Venoshock",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onBasePower(basePower, pokemon, target) {
			if (target.status === 'psn' || target.status === 'tox') {
				return this.chainModify(2);
			}
		},
		secondary: null,
		target: "normal",
		type: "Poison",
		zMovePower: 120,
		contestType: "Beautiful",
	},
	"vicegrip": {
		num: 11,
		accuracy: 100,
		basePower: 55,
		category: "Physical",
		shortDesc: "No additional effect.",
		id: "vicegrip",
		name: "Vice Grip",
		pp: 30,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 100,
		contestType: "Tough",
	},
	"vinewhip": {
		num: 22,
		accuracy: 100,
		basePower: 45,
		category: "Physical",
		shortDesc: "No additional effect.",
		id: "vinewhip",
		name: "Vine Whip",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		zMovePower: 100,
		contestType: "Cool",
	},
	"vitalthrow": {
		num: 233,
		accuracy: true,
		basePower: 70,
		category: "Physical",
		desc: "This move does not check accuracy.",
		shortDesc: "This move does not check accuracy. Goes last.",
		id: "vitalthrow",
		name: "Vital Throw",
		pp: 10,
		priority: -1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		zMovePower: 140,
		contestType: "Cool",
	},
	"voltswitch": {
		num: 521,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		desc: "If this move is successful and the user has not fainted, the user switches out even if it is trapped and is replaced immediately by a selected party member. The user does not switch out if there are no unfainted party members, or if the target switched out using an Eject Button or through the effect of the Emergency Exit or Wimp Out Abilities.",
		shortDesc: "User switches out after damaging the target.",
		id: "voltswitch",
		isViable: true,
		name: "Volt Switch",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		selfSwitch: true,
		secondary: null,
		target: "normal",
		type: "Electric",
		zMovePower: 140,
		contestType: "Cool",
	},
	"volttackle": {
		num: 344,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		desc: "Has a 10% chance to paralyze the target. If the target lost HP, the user takes recoil damage equal to 33% the HP lost by the target, rounded half up, but not less than 1 HP.",
		shortDesc: "Has 33% recoil. 10% chance to paralyze target.",
		id: "volttackle",
		isViable: true,
		name: "Volt Tackle",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [33, 100],
		secondary: {
			chance: 10,
			status: 'par',
		},
		target: "normal",
		type: "Electric",
		zMovePower: 190,
		contestType: "Cool",
	},
	"wakeupslap": {
		num: 358,
		accuracy: 100,
		basePower: 70,
		basePowerCallback(pokemon, target, move) {
			if (target.status === 'slp' || target.hasAbility('comatose')) return move.basePower * 2;
			return move.basePower;
		},
		category: "Physical",
		desc: "Power doubles if the target is asleep. If the user has not fainted, the target wakes up.",
		shortDesc: "Power doubles if target is asleep, and wakes it.",
		id: "wakeupslap",
		name: "Wake-Up Slap",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onHit(target) {
			if (target.status === 'slp') target.cureStatus();
		},
		secondary: null,
		target: "normal",
		type: "Fighting",
		zMovePower: 140,
		contestType: "Tough",
	},
	"watergun": {
		num: 55,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		shortDesc: "No additional effect.",
		id: "watergun",
		name: "Water Gun",
		pp: 25,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		zMovePower: 100,
		contestType: "Cute",
	},
	"waterpledge": {
		num: 518,
		accuracy: 100,
		basePower: 80,
		basePowerCallback(target, source, move) {
			if (['firepledge', 'grasspledge'].includes(move.sourceEffect)) {
				this.add('-combine');
				return 150;
			}
			return 80;
		},
		category: "Special",
		desc: "If one of the user's allies chose to use Fire Pledge or Grass Pledge this turn and has not moved yet, it takes its turn immediately after the user and the user's move does nothing. If combined with Fire Pledge, the ally uses Water Pledge with 150 power and a rainbow appears on the user's side for 4 turns, which doubles secondary effect chances but does not stack with the Serene Grace Ability. If combined with Grass Pledge, the ally uses Grass Pledge with 150 power and a swamp appears on the target's side for 4 turns, which quarters the Speed of each Pokemon on that side. When used as a combined move, this move gains STAB no matter what the user's type is. This move does not consume the user's Water Gem, and cannot be redirected by the Storm Drain Ability.",
		shortDesc: "Use with Grass or Fire Pledge for added effect.",
		id: "waterpledge",
		name: "Water Pledge",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, nonsky: 1},
		onPrepareHit(target, source, move) {
			for (const action of this.queue) {
				// @ts-ignore
				if (!action.move || !action.pokemon || !action.pokemon.isActive || action.pokemon.fainted) continue;
				// @ts-ignore
				if (action.pokemon.side === source.side && ['firepledge', 'grasspledge'].includes(action.move.id)) {
					// @ts-ignore
					this.prioritizeAction(action);
					this.add('-waiting', source, action.pokemon);
					return null;
				}
			}
		},
		onModifyMove(move) {
			if (move.sourceEffect === 'grasspledge') {
				move.type = 'Grass';
				move.forceSTAB = true;
			}
			if (move.sourceEffect === 'firepledge') {
				move.type = 'Water';
				move.forceSTAB = true;
			}
		},
		onHit(target, source, move) {
			if (move.sourceEffect === 'firepledge') {
				source.side.addSideCondition('waterpledge');
			}
			if (move.sourceEffect === 'grasspledge') {
				target.side.addSideCondition('grasspledge');
			}
		},
		effect: {
			duration: 4,
			onStart(targetSide) {
				this.add('-sidestart', targetSide, 'Water Pledge');
			},
			onEnd(targetSide) {
				this.add('-sideend', targetSide, 'Water Pledge');
			},
			onModifyMove(move) {
				if (move.secondaries && move.id !== 'secretpower') {
					this.debug('doubling secondary chance');
					for (const secondary of move.secondaries) {
						if (secondary.chance) secondary.chance *= 2;
					}
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Water",
		zMovePower: 160,
		contestType: "Beautiful",
	},
	"waterpulse": {
		num: 352,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		desc: "Has a 20% chance to confuse the target.",
		shortDesc: "20% chance to confuse the target.",
		id: "waterpulse",
		name: "Water Pulse",
		pp: 20,
		priority: 0,
		flags: {protect: 1, pulse: 1, mirror: 1, distance: 1},
		secondary: {
			chance: 20,
			volatileStatus: 'confusion',
		},
		target: "any",
		type: "Water",
		zMovePower: 120,
		contestType: "Beautiful",
	},
	"watersport": {
		num: 346,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "For 5 turns, all Fire-type attacks used by any active Pokemon have their power multiplied by 0.33. Fails if this effect is already active.",
		shortDesc: "For 5 turns, Fire-type attacks have 1/3 power.",
		id: "watersport",
		name: "Water Sport",
		pp: 15,
		priority: 0,
		flags: {nonsky: 1},
		pseudoWeather: 'watersport',
		effect: {
			duration: 5,
			onStart(side, source) {
				this.add('-fieldstart', 'move: Water Sport', '[of] ' + source);
			},
			onBasePowerPriority: 1,
			onBasePower(basePower, attacker, defender, move) {
				if (move.type === 'Fire') {
					this.debug('water sport weaken');
					return this.chainModify([0x548, 0x1000]);
				}
			},
			onResidualOrder: 21,
			onEnd() {
				this.add('-fieldend', 'move: Water Sport');
			},
		},
		secondary: null,
		target: "all",
		type: "Water",
		zMoveBoost: {spd: 1},
		contestType: "Cute",
	},
	"waterspout": {
		num: 323,
		accuracy: 100,
		basePower: 150,
		basePowerCallback(pokemon, target, move) {
			return move.basePower * pokemon.hp / pokemon.maxhp;
		},
		category: "Special",
		desc: "Power is equal to (user's current HP * 150 / user's maximum HP), rounded down, but not less than 1.",
		shortDesc: "Less power as user's HP decreases. Hits foe(s).",
		id: "waterspout",
		isViable: true,
		name: "Water Spout",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Water",
		zMovePower: 200,
		contestType: "Beautiful",
	},
	"waterfall": {
		num: 127,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		desc: "Has a 20% chance to flinch the target.",
		shortDesc: "20% chance to flinch the target.",
		id: "waterfall",
		isViable: true,
		name: "Waterfall",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Water",
		zMovePower: 160,
		contestType: "Tough",
	},
	"watershuriken": {
		num: 594,
		accuracy: 100,
		basePower: 15,
		basePowerCallback(pokemon, target, move) {
			if (pokemon.template.species === 'Greninja-Ash' && pokemon.hasAbility('battlebond')) {
				return move.basePower + 5;
			}
			return move.basePower;
		},
		category: "Special",
		desc: "Hits two to five times. Has a 1/3 chance to hit two or three times, and a 1/6 chance to hit four or five times. If one of the hits breaks the target's substitute, it will take damage for the remaining hits. If the user has the Skill Link Ability, this move will always hit five times. If the user is an Ash-Greninja with the Battle Bond Ability, this move has a power of 20 and always hits three times.",
		shortDesc: "Usually goes first. Hits 2-5 times in one turn.",
		id: "watershuriken",
		isViable: true,
		name: "Water Shuriken",
		pp: 20,
		priority: 1,
		flags: {protect: 1, mirror: 1},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Water",
		zMovePower: 100,
		contestType: "Cool",
	},
	"weatherball": {
		num: 311,
		accuracy: 100,
		basePower: 50,
		category: "Special",
		desc: "Power doubles if a weather condition other than Delta Stream is active, and this move's type changes to match. Ice type during Hail, Water type during Primordial Sea or Rain Dance, Rock type during Sandstorm, and Fire type during Desolate Land or Sunny Day.",
		shortDesc: "Power doubles and type varies in each weather.",
		id: "weatherball",
		name: "Weather Ball",
		pp: 10,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		onModifyMove(move) {
			switch (this.field.effectiveWeather()) {
			case 'sunnyday':
			case 'desolateland':
				move.type = 'Fire';
				move.basePower *= 2;
				break;
			case 'raindance':
			case 'primordialsea':
				move.type = 'Water';
				move.basePower *= 2;
				break;
			case 'sandstorm':
				move.type = 'Rock';
				move.basePower *= 2;
				break;
			case 'hail':
				move.type = 'Ice';
				move.basePower *= 2;
				break;
			}
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 160,
		contestType: "Beautiful",
	},
	"whirlpool": {
		num: 250,
		accuracy: 85,
		basePower: 35,
		category: "Special",
		desc: "Prevents the target from switching for four or five turns (seven turns if the user is holding Grip Claw). Causes damage to the target equal to 1/8 of its maximum HP (1/6 if the user is holding Binding Band), rounded down, at the end of each turn during effect. The target can still switch out if it is holding Shed Shell or uses Baton Pass, Parting Shot, U-turn, or Volt Switch. The effect ends if either the user or the target leaves the field, or if the target uses Rapid Spin or Substitute successfully. This effect is not stackable or reset by using this or another binding move.",
		shortDesc: "Traps and damages the target for 4-5 turns.",
		id: "whirlpool",
		name: "Whirlpool",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Water",
		zMovePower: 100,
		contestType: "Beautiful",
	},
	"whirlwind": {
		num: 18,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The target is forced to switch out and be replaced with a random unfainted ally. Fails if the target is the last unfainted Pokemon in its party, or if the target used Ingrain previously or has the Suction Cups Ability.",
		shortDesc: "Forces the target to switch to a random ally.",
		id: "whirlwind",
		isViable: true,
		name: "Whirlwind",
		pp: 20,
		priority: -6,
		flags: {reflectable: 1, mirror: 1, authentic: 1, mystery: 1},
		forceSwitch: true,
		secondary: null,
		target: "normal",
		type: "Normal",
		zMoveBoost: {spd: 1},
		contestType: "Clever",
	},
	"wideguard": {
		num: 469,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user and its party members are protected from moves made by other Pokemon, including allies, during this turn that target all adjacent foes or all adjacent Pokemon. This move modifies the same 1/X chance of being successful used by other protection moves, where X starts at 1 and triples each time this move is successfully used, but does not use the chance to check for failure. X resets to 1 if this move fails, if the user's last move used is not Baneful Bunker, Detect, Endure, King's Shield, Protect, Quick Guard, Spiky Shield, or Wide Guard, or if it was one of those moves and the user's protection was broken. Fails if the user moves last this turn or if this move is already in effect for the user's side.",
		shortDesc: "Protects allies from multi-target moves this turn.",
		id: "wideguard",
		name: "Wide Guard",
		pp: 10,
		priority: 3,
		flags: {snatch: 1},
		sideCondition: 'wideguard',
		onTryHitSide(side, source) {
			return !!this.willAct();
		},
		onHitSide(side, source) {
			source.addVolatile('stall');
		},
		effect: {
			duration: 1,
			onStart(target, source) {
				this.add('-singleturn', source, 'Wide Guard');
			},
			onTryHitPriority: 4,
			onTryHit(target, source, move) {
				// Wide Guard blocks all spread moves
				if (move && move.target !== 'allAdjacent' && move.target !== 'allAdjacentFoes') {
					return;
				}
				if (move.isZ) {
					target.getMoveHitData(move).zBrokeProtect = true;
					return;
				}
				this.add('-activate', target, 'move: Wide Guard');
				let lockedmove = source.getVolatile('lockedmove');
				if (lockedmove) {
					// Outrage counter is reset
					if (source.volatiles['lockedmove'].duration === 2) {
						delete source.volatiles['lockedmove'];
					}
				}
				return this.NOT_FAIL;
			},
		},
		secondary: null,
		target: "allySide",
		type: "Rock",
		zMoveBoost: {def: 1},
		contestType: "Tough",
	},
	"wildcharge": {
		num: 528,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		desc: "If the target lost HP, the user takes recoil damage equal to 1/4 the HP lost by the target, rounded half up, but not less than 1 HP.",
		shortDesc: "Has 1/4 recoil.",
		id: "wildcharge",
		isViable: true,
		name: "Wild Charge",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [1, 4],
		secondary: null,
		target: "normal",
		type: "Electric",
		zMovePower: 175,
		contestType: "Tough",
	},
	"willowisp": {
		num: 261,
		accuracy: 85,
		basePower: 0,
		category: "Status",
		desc: "Burns the target.",
		shortDesc: "Burns the target.",
		id: "willowisp",
		isViable: true,
		name: "Will-O-Wisp",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		status: 'brn',
		secondary: null,
		target: "normal",
		type: "Fire",
		zMoveBoost: {atk: 1},
		contestType: "Beautiful",
	},
	"wingattack": {
		num: 17,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		shortDesc: "No additional effect.",
		id: "wingattack",
		name: "Wing Attack",
		pp: 35,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, distance: 1},
		secondary: null,
		target: "any",
		type: "Flying",
		zMovePower: 120,
		contestType: "Cool",
	},
	"wish": {
		num: 273,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "At the end of the next turn, the Pokemon at the user's position has 1/2 of the user's maximum HP restored to it, rounded half up. Fails if this move is already in effect for the user's position.",
		shortDesc: "Next turn, 50% of the user's max HP is restored.",
		id: "wish",
		isViable: true,
		name: "Wish",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		slotCondition: 'Wish',
		effect: {
			duration: 2,
			onStart(pokemon, source) {
				this.effectData.hp = source.maxhp / 2;
			},
			onResidualOrder: 4,
			onEnd(target) {
				if (target && !target.fainted) {
					let damage = this.heal(this.effectData.hp, target, target);
					if (damage) this.add('-heal', target, target.getHealth, '[from] move: Wish', '[wisher] ' + this.effectData.source.name);
				}
			},
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMoveBoost: {spd: 1},
		contestType: "Cute",
	},
	"withdraw": {
		num: 110,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Raises the user's Defense by 1 stage.",
		shortDesc: "Raises the user's Defense by 1.",
		id: "withdraw",
		name: "Withdraw",
		pp: 40,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			def: 1,
		},
		secondary: null,
		target: "self",
		type: "Water",
		zMoveBoost: {def: 1},
		contestType: "Cute",
	},
	"wonderroom": {
		num: 472,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "For 5 turns, all active Pokemon have their Defense and Special Defense stats swapped. Stat stage changes are unaffected. If this move is used during the effect, the effect ends.",
		shortDesc: "For 5 turns, all Defense and Sp. Def stats switch.",
		id: "wonderroom",
		name: "Wonder Room",
		pp: 10,
		priority: 0,
		flags: {mirror: 1},
		pseudoWeather: 'wonderroom',
		effect: {
			duration: 5,
			durationCallback(source, effect) {
				if (source && source.hasAbility('persistent')) {
					this.add('-activate', source, 'ability: Persistent', effect);
					return 7;
				}
				return 5;
			},
			onStart(side, source) {
				this.add('-fieldstart', 'move: Wonder Room', '[of] ' + source);
			},
			onRestart(target, source) {
				this.field.removePseudoWeather('wonderroom');
			},
			// Swapping defenses implemented in sim/pokemon.js:Pokemon#calculateStat and Pokemon#getStat
			onResidualOrder: 24,
			onEnd() {
				this.add('-fieldend', 'move: Wonder Room');
			},
		},
		secondary: null,
		target: "all",
		type: "Psychic",
		zMoveBoost: {spd: 1},
		contestType: "Clever",
	},
	"woodhammer": {
		num: 452,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		desc: "If the target lost HP, the user takes recoil damage equal to 33% the HP lost by the target, rounded half up, but not less than 1 HP.",
		shortDesc: "Has 33% recoil.",
		id: "woodhammer",
		isViable: true,
		name: "Wood Hammer",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [33, 100],
		secondary: null,
		target: "normal",
		type: "Grass",
		zMovePower: 190,
		contestType: "Tough",
	},
	"workup": {
		num: 526,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Raises the user's Attack and Special Attack by 1 stage.",
		shortDesc: "Raises the user's Attack and Sp. Atk by 1.",
		id: "workup",
		name: "Work Up",
		pp: 30,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			atk: 1,
			spa: 1,
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMoveBoost: {atk: 1},
		contestType: "Tough",
	},
	"worryseed": {
		num: 388,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		desc: "Causes the target's Ability to become Insomnia. Fails if the target's Ability is Battle Bond, Comatose, Disguise, Insomnia, Multitype, Power Construct, RKS System, Schooling, Shields Down, Stance Change, Truant, or Zen Mode.",
		shortDesc: "The target's Ability becomes Insomnia.",
		id: "worryseed",
		name: "Worry Seed",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, mystery: 1},
		onTryHit(pokemon) {
			let bannedAbilities = ['battlebond', 'comatose', 'disguise', 'insomnia', 'multitype', 'powerconstruct', 'rkssystem', 'schooling', 'shieldsdown', 'stancechange', 'truant', 'zenmode'];
			if (bannedAbilities.includes(pokemon.ability)) {
				return false;
			}
		},
		onHit(pokemon) {
			let oldAbility = pokemon.setAbility('insomnia');
			if (oldAbility) {
				this.add('-ability', pokemon, 'Insomnia', '[from] move: Worry Seed');
				if (pokemon.status === 'slp') {
					pokemon.cureStatus();
				}
				return;
			}
			return false;
		},
		secondary: null,
		target: "normal",
		type: "Grass",
		zMoveBoost: {spe: 1},
		contestType: "Clever",
	},
	"wrap": {
		num: 35,
		accuracy: 90,
		basePower: 15,
		category: "Physical",
		desc: "Prevents the target from switching for four or five turns (seven turns if the user is holding Grip Claw). Causes damage to the target equal to 1/8 of its maximum HP (1/6 if the user is holding Binding Band), rounded down, at the end of each turn during effect. The target can still switch out if it is holding Shed Shell or uses Baton Pass, Parting Shot, U-turn, or Volt Switch. The effect ends if either the user or the target leaves the field, or if the target uses Rapid Spin or Substitute successfully. This effect is not stackable or reset by using this or another binding move.",
		shortDesc: "Traps and damages the target for 4-5 turns.",
		id: "wrap",
		name: "Wrap",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 100,
		contestType: "Tough",
	},
	"wringout": {
		num: 378,
		accuracy: 100,
		basePower: 0,
		basePowerCallback(pokemon, target) {
			return Math.floor(Math.floor((120 * (100 * Math.floor(target.hp * 4096 / target.maxhp)) + 2048 - 1) / 4096) / 100) || 1;
		},
		category: "Special",
		desc: "Power is equal to 120 * (target's current HP / target's maximum HP), rounded half down, but not less than 1.",
		shortDesc: "More power the more HP the target has left.",
		id: "wringout",
		name: "Wring Out",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 190,
		contestType: "Tough",
	},
	"xscissor": {
		num: 404,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		shortDesc: "No additional effect.",
		id: "xscissor",
		isViable: true,
		name: "X-Scissor",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
		zMovePower: 160,
		contestType: "Cool",
	},
	"yawn": {
		num: 281,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Causes the target to fall asleep at the end of the next turn. Fails when used if the target cannot fall asleep or if it already has a major status condition. At the end of the next turn, if the target is still active, does not have a major status condition, and can fall asleep, it falls asleep. If the target becomes affected, this effect cannot be prevented by Safeguard or a substitute, or by falling asleep and waking up during the effect.",
		shortDesc: "Puts the target to sleep after 1 turn.",
		id: "yawn",
		name: "Yawn",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		volatileStatus: 'yawn',
		onTryHit(target) {
			if (target.status || !target.runStatusImmunity('slp')) {
				return false;
			}
		},
		effect: {
			noCopy: true, // doesn't get copied by Baton Pass
			duration: 2,
			onStart(target, source) {
				this.add('-start', target, 'move: Yawn', '[of] ' + source);
			},
			onResidualOrder: 19,
			onEnd(target) {
				this.add('-end', target, 'move: Yawn', '[silent]');
				target.trySetStatus('slp', this.effectData.source);
			},
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMoveBoost: {spe: 1},
		contestType: "Cute",
	},
	"zapcannon": {
		num: 192,
		accuracy: 50,
		basePower: 120,
		category: "Special",
		desc: "Has a 100% chance to paralyze the target.",
		shortDesc: "100% chance to paralyze the target.",
		id: "zapcannon",
		name: "Zap Cannon",
		pp: 5,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			status: 'par',
		},
		target: "normal",
		type: "Electric",
		zMovePower: 190,
		contestType: "Cool",
	},
	"zenheadbutt": {
		num: 428,
		accuracy: 90,
		basePower: 80,
		category: "Physical",
		desc: "Has a 20% chance to flinch the target.",
		shortDesc: "20% chance to flinch the target.",
		id: "zenheadbutt",
		isViable: true,
		name: "Zen Headbutt",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Psychic",
		zMovePower: 160,
		contestType: "Clever",
	},
	"zingzap": {
		num: 716,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		desc: "Has a 30% chance to flinch the target.",
		shortDesc: "30% chance to flinch the target.",
		id: "zingzap",
		isViable: true,
		name: "Zing Zap",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Electric",
		zMovePower: 160,
		contestType: "Cool",
	},
	"zippyzap": {
		num: 729,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		desc: "Will always result in a critical hit.",
		shortDesc: "Nearly always goes first. Always crits.",
		id: "zippyzap",
		isNonstandard: "LGPE",
		isUnreleased: true,
		isViable: true,
		name: "Zippy Zap",
		pp: 15,
		priority: 2,
		flags: {contact: 1, protect: 1},
		willCrit: true,
		secondary: null,
		target: "normal",
		type: "Electric",
		contestType: "Cool",
	},
	"paleowave": {
		num: 0,
		accuracy: 100,
		basePower: 85,
		category: "Special",
		desc: "Has a 20% chance to lower the target's Attack by 1 stage.",
		shortDesc: "20% chance to lower the target's Attack by 1.",
		id: "paleowave",
		isNonstandard: "CAP",
		isViable: true,
		name: "Paleo Wave",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			boosts: {
				atk: -1,
			},
		},
		target: "normal",
		type: "Rock",
		zMovePower: 160,
		contestType: "Beautiful",
	},
	"shadowstrike": {
		num: 0,
		accuracy: 95,
		basePower: 80,
		category: "Physical",
		desc: "Has a 50% chance to lower the target's Defense by 1 stage.",
		shortDesc: "50% chance to lower the target's Defense by 1.",
		id: "shadowstrike",
		isNonstandard: "CAP",
		isViable: true,
		name: "Shadow Strike",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 50,
			boosts: {
				def: -1,
			},
		},
		target: "normal",
		type: "Ghost",
		zMovePower: 160,
		contestType: "Clever",
	},
	"magikarpsrevenge": {
		num: 0,
		accuracy: true,
		basePower: 120,
		category: "Physical",
		desc: "Has a 100% chance to confuse the target and lower its Defense and Special Attack by 1 stage. The user recovers 1/2 the HP lost by the target, rounded half up. If Big Root is held by the user, the HP recovered is 1.3x normal, rounded half down. The user steals the foe's boosts. If this move is successful, the weather changes to rain unless it is already in effect, and the user gains the effects of Aqua Ring and Magic Coat.",
		shortDesc: "Does many things turn 1. Can't move turn 2.",
		id: "magikarpsrevenge",
		isNonstandard: "Custom",
		name: "Magikarp's Revenge",
		pp: 10,
		priority: 0,
		flags: {contact: 1, recharge: 1, protect: 1, mirror: 1, heal: 1},
		noSketch: true,
		drain: [1, 2],
		onTry(pokemon) {
			if (pokemon.template.name !== 'Magikarp') {
				this.add('-fail', pokemon, 'move: Magikarp\'s Revenge');
				return null;
			}
		},
		self: {
			onHit(source) {
				this.field.setWeather('raindance');
				source.addVolatile('magiccoat');
				source.addVolatile('aquaring');
			},
			volatileStatus: 'mustrecharge',
		},
		secondary: {
			chance: 100,
			volatileStatus: 'confusion',
			boosts: {
				def: -1,
				spa: -1,
			},
		},
		stealsBoosts: true,
		target: "normal",
		type: "Water",
		zMovePower: 190,
		contestType: "Cute",
	},
};

exports.BattleMovedex = BattleMovedex;
'use strict';

/**@type {{[k: string]: TemplateData}} */
let BattlePokedex = {
	bulbasaur: {
		num: 1,
		species: "Bulbasaur",
		types: ["Grass", "Poison"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 45, atk: 49, def: 49, spa: 65, spd: 65, spe: 45},
		abilities: {0: "Overgrow", H: "Chlorophyll"},
		heightm: 0.7,
		weightkg: 6.9,
		color: "Green",
		evos: ["ivysaur"],
		eggGroups: ["Monster", "Grass"],
	},
	ivysaur: {
		num: 2,
		species: "Ivysaur",
		types: ["Grass", "Poison"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 60, atk: 62, def: 63, spa: 80, spd: 80, spe: 60},
		abilities: {0: "Overgrow", H: "Chlorophyll"},
		heightm: 1,
		weightkg: 13,
		color: "Green",
		prevo: "bulbasaur",
		evoLevel: 16,
		evos: ["venusaur"],
		eggGroups: ["Monster", "Grass"],
	},
	venusaur: {
		num: 3,
		species: "Venusaur",
		types: ["Grass", "Poison"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 80, atk: 82, def: 83, spa: 100, spd: 100, spe: 80},
		abilities: {0: "Overgrow", H: "Chlorophyll"},
		heightm: 2,
		weightkg: 100,
		color: "Green",
		prevo: "ivysaur",
		evoLevel: 32,
		eggGroups: ["Monster", "Grass"],
		otherFormes: ["venusaurmega"],
	},
	venusaurmega: {
		num: 3,
		species: "Venusaur-Mega",
		baseSpecies: "Venusaur",
		forme: "Mega",
		formeLetter: "M",
		types: ["Grass", "Poison"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 80, atk: 100, def: 123, spa: 122, spd: 120, spe: 80},
		abilities: {0: "Thick Fat"},
		heightm: 2.4,
		weightkg: 155.5,
		color: "Green",
		eggGroups: ["Monster", "Grass"],
	},
	charmander: {
		num: 4,
		species: "Charmander",
		types: ["Fire"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 39, atk: 52, def: 43, spa: 60, spd: 50, spe: 65},
		abilities: {0: "Blaze", H: "Solar Power"},
		heightm: 0.6,
		weightkg: 8.5,
		color: "Red",
		evos: ["charmeleon"],
		eggGroups: ["Monster", "Dragon"],
	},
	charmeleon: {
		num: 5,
		species: "Charmeleon",
		types: ["Fire"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 58, atk: 64, def: 58, spa: 80, spd: 65, spe: 80},
		abilities: {0: "Blaze", H: "Solar Power"},
		heightm: 1.1,
		weightkg: 19,
		color: "Red",
		prevo: "charmander",
		evoLevel: 16,
		evos: ["charizard"],
		eggGroups: ["Monster", "Dragon"],
	},
	charizard: {
		num: 6,
		species: "Charizard",
		types: ["Fire", "Flying"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 78, atk: 84, def: 78, spa: 109, spd: 85, spe: 100},
		abilities: {0: "Blaze", H: "Solar Power"},
		heightm: 1.7,
		weightkg: 90.5,
		color: "Red",
		prevo: "charmeleon",
		evoLevel: 36,
		eggGroups: ["Monster", "Dragon"],
		otherFormes: ["charizardmegax", "charizardmegay"],
	},
	charizardmegax: {
		num: 6,
		species: "Charizard-Mega-X",
		baseSpecies: "Charizard",
		forme: "Mega-X",
		formeLetter: "M",
		types: ["Fire", "Dragon"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 78, atk: 130, def: 111, spa: 130, spd: 85, spe: 100},
		abilities: {0: "Tough Claws"},
		heightm: 1.7,
		weightkg: 110.5,
		color: "Black",
		eggGroups: ["Monster", "Dragon"],
	},
	charizardmegay: {
		num: 6,
		species: "Charizard-Mega-Y",
		baseSpecies: "Charizard",
		forme: "Mega-Y",
		formeLetter: "M",
		types: ["Fire", "Flying"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 78, atk: 104, def: 78, spa: 159, spd: 115, spe: 100},
		abilities: {0: "Drought"},
		heightm: 1.7,
		weightkg: 100.5,
		color: "Red",
		eggGroups: ["Monster", "Dragon"],
	},
	squirtle: {
		num: 7,
		species: "Squirtle",
		types: ["Water"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 44, atk: 48, def: 65, spa: 50, spd: 64, spe: 43},
		abilities: {0: "Torrent", H: "Rain Dish"},
		heightm: 0.5,
		weightkg: 9,
		color: "Blue",
		evos: ["wartortle"],
		eggGroups: ["Monster", "Water 1"],
	},
	wartortle: {
		num: 8,
		species: "Wartortle",
		types: ["Water"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 59, atk: 63, def: 80, spa: 65, spd: 80, spe: 58},
		abilities: {0: "Torrent", H: "Rain Dish"},
		heightm: 1,
		weightkg: 22.5,
		color: "Blue",
		prevo: "squirtle",
		evoLevel: 16,
		evos: ["blastoise"],
		eggGroups: ["Monster", "Water 1"],
	},
	blastoise: {
		num: 9,
		species: "Blastoise",
		types: ["Water"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 79, atk: 83, def: 100, spa: 85, spd: 105, spe: 78},
		abilities: {0: "Torrent", H: "Rain Dish"},
		heightm: 1.6,
		weightkg: 85.5,
		color: "Blue",
		prevo: "wartortle",
		evoLevel: 36,
		eggGroups: ["Monster", "Water 1"],
		otherFormes: ["blastoisemega"],
	},
	blastoisemega: {
		num: 9,
		species: "Blastoise-Mega",
		baseSpecies: "Blastoise",
		forme: "Mega",
		formeLetter: "M",
		types: ["Water"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 79, atk: 103, def: 120, spa: 135, spd: 115, spe: 78},
		abilities: {0: "Mega Launcher"},
		heightm: 1.6,
		weightkg: 101.1,
		color: "Blue",
		eggGroups: ["Monster", "Water 1"],
	},
	caterpie: {
		num: 10,
		species: "Caterpie",
		types: ["Bug"],
		baseStats: {hp: 45, atk: 30, def: 35, spa: 20, spd: 20, spe: 45},
		abilities: {0: "Shield Dust", H: "Run Away"},
		heightm: 0.3,
		weightkg: 2.9,
		color: "Green",
		evos: ["metapod"],
		eggGroups: ["Bug"],
	},
	metapod: {
		num: 11,
		species: "Metapod",
		types: ["Bug"],
		baseStats: {hp: 50, atk: 20, def: 55, spa: 25, spd: 25, spe: 30},
		abilities: {0: "Shed Skin"},
		heightm: 0.7,
		weightkg: 9.9,
		color: "Green",
		prevo: "caterpie",
		evoLevel: 7,
		evos: ["butterfree"],
		eggGroups: ["Bug"],
	},
	butterfree: {
		num: 12,
		species: "Butterfree",
		types: ["Bug", "Flying"],
		baseStats: {hp: 60, atk: 45, def: 50, spa: 90, spd: 80, spe: 70},
		abilities: {0: "Compound Eyes", H: "Tinted Lens"},
		heightm: 1.1,
		weightkg: 32,
		color: "White",
		prevo: "metapod",
		evoLevel: 10,
		eggGroups: ["Bug"],
	},
	weedle: {
		num: 13,
		species: "Weedle",
		types: ["Bug", "Poison"],
		baseStats: {hp: 40, atk: 35, def: 30, spa: 20, spd: 20, spe: 50},
		abilities: {0: "Shield Dust", H: "Run Away"},
		heightm: 0.3,
		weightkg: 3.2,
		color: "Brown",
		evos: ["kakuna"],
		eggGroups: ["Bug"],
	},
	kakuna: {
		num: 14,
		species: "Kakuna",
		types: ["Bug", "Poison"],
		baseStats: {hp: 45, atk: 25, def: 50, spa: 25, spd: 25, spe: 35},
		abilities: {0: "Shed Skin"},
		heightm: 0.6,
		weightkg: 10,
		color: "Yellow",
		prevo: "weedle",
		evoLevel: 7,
		evos: ["beedrill"],
		eggGroups: ["Bug"],
	},
	beedrill: {
		num: 15,
		species: "Beedrill",
		types: ["Bug", "Poison"],
		baseStats: {hp: 65, atk: 90, def: 40, spa: 45, spd: 80, spe: 75},
		abilities: {0: "Swarm", H: "Sniper"},
		heightm: 1,
		weightkg: 29.5,
		color: "Yellow",
		prevo: "kakuna",
		evoLevel: 10,
		eggGroups: ["Bug"],
		otherFormes: ["beedrillmega"],
	},
	beedrillmega: {
		num: 15,
		species: "Beedrill-Mega",
		baseSpecies: "Beedrill",
		forme: "Mega",
		formeLetter: "M",
		types: ["Bug", "Poison"],
		baseStats: {hp: 65, atk: 150, def: 40, spa: 15, spd: 80, spe: 145},
		abilities: {0: "Adaptability"},
		heightm: 1.4,
		weightkg: 40.5,
		color: "Yellow",
		eggGroups: ["Bug"],
	},
	pidgey: {
		num: 16,
		species: "Pidgey",
		types: ["Normal", "Flying"],
		baseStats: {hp: 40, atk: 45, def: 40, spa: 35, spd: 35, spe: 56},
		abilities: {0: "Keen Eye", 1: "Tangled Feet", H: "Big Pecks"},
		heightm: 0.3,
		weightkg: 1.8,
		color: "Brown",
		evos: ["pidgeotto"],
		eggGroups: ["Flying"],
	},
	pidgeotto: {
		num: 17,
		species: "Pidgeotto",
		types: ["Normal", "Flying"],
		baseStats: {hp: 63, atk: 60, def: 55, spa: 50, spd: 50, spe: 71},
		abilities: {0: "Keen Eye", 1: "Tangled Feet", H: "Big Pecks"},
		heightm: 1.1,
		weightkg: 30,
		color: "Brown",
		prevo: "pidgey",
		evoLevel: 18,
		evos: ["pidgeot"],
		eggGroups: ["Flying"],
	},
	pidgeot: {
		num: 18,
		species: "Pidgeot",
		types: ["Normal", "Flying"],
		baseStats: {hp: 83, atk: 80, def: 75, spa: 70, spd: 70, spe: 101},
		abilities: {0: "Keen Eye", 1: "Tangled Feet", H: "Big Pecks"},
		heightm: 1.5,
		weightkg: 39.5,
		color: "Brown",
		prevo: "pidgeotto",
		evoLevel: 36,
		eggGroups: ["Flying"],
		otherFormes: ["pidgeotmega"],
	},
	pidgeotmega: {
		num: 18,
		species: "Pidgeot-Mega",
		baseSpecies: "Pidgeot",
		forme: "Mega",
		formeLetter: "M",
		types: ["Normal", "Flying"],
		baseStats: {hp: 83, atk: 80, def: 80, spa: 135, spd: 80, spe: 121},
		abilities: {0: "No Guard"},
		heightm: 2.2,
		weightkg: 50.5,
		color: "Brown",
		eggGroups: ["Flying"],
	},
	rattata: {
		num: 19,
		species: "Rattata",
		types: ["Normal"],
		baseStats: {hp: 30, atk: 56, def: 35, spa: 25, spd: 35, spe: 72},
		abilities: {0: "Run Away", 1: "Guts", H: "Hustle"},
		heightm: 0.3,
		weightkg: 3.5,
		color: "Purple",
		evos: ["raticate"],
		eggGroups: ["Field"],
		otherFormes: ["rattataalola"],
	},
	rattataalola: {
		num: 19,
		species: "Rattata-Alola",
		baseSpecies: "Rattata",
		forme: "Alola",
		formeLetter: "A",
		types: ["Dark", "Normal"],
		baseStats: {hp: 30, atk: 56, def: 35, spa: 25, spd: 35, spe: 72},
		abilities: {0: "Gluttony", 1: "Hustle", H: "Thick Fat"},
		heightm: 0.3,
		weightkg: 3.8,
		color: "Black",
		evos: ["raticatealola"],
		eggGroups: ["Field"],
	},
	raticate: {
		num: 20,
		species: "Raticate",
		types: ["Normal"],
		baseStats: {hp: 55, atk: 81, def: 60, spa: 50, spd: 70, spe: 97},
		abilities: {0: "Run Away", 1: "Guts", H: "Hustle"},
		heightm: 0.7,
		weightkg: 18.5,
		color: "Brown",
		prevo: "rattata",
		evoLevel: 20,
		eggGroups: ["Field"],
		otherFormes: ["raticatealola", "raticatealolatotem"],
	},
	raticatealola: {
		num: 20,
		species: "Raticate-Alola",
		baseSpecies: "Raticate",
		forme: "Alola",
		formeLetter: "A",
		types: ["Dark", "Normal"],
		baseStats: {hp: 75, atk: 71, def: 70, spa: 40, spd: 80, spe: 77},
		abilities: {0: "Gluttony", 1: "Hustle", H: "Thick Fat"},
		heightm: 0.7,
		weightkg: 25.5,
		color: "Black",
		prevo: "rattataalola",
		evoLevel: 20,
		eggGroups: ["Field"],
	},
	raticatealolatotem: {
		num: 20,
		species: "Raticate-Alola-Totem",
		baseSpecies: "Raticate",
		forme: "Alola-Totem",
		formeLetter: "T",
		types: ["Dark", "Normal"],
		baseStats: {hp: 75, atk: 71, def: 70, spa: 40, spd: 80, spe: 77},
		abilities: {0: "Thick Fat"},
		heightm: 1.4,
		weightkg: 105,
		color: "Black",
		eggGroups: ["Field"],
	},
	spearow: {
		num: 21,
		species: "Spearow",
		types: ["Normal", "Flying"],
		baseStats: {hp: 40, atk: 60, def: 30, spa: 31, spd: 31, spe: 70},
		abilities: {0: "Keen Eye", H: "Sniper"},
		heightm: 0.3,
		weightkg: 2,
		color: "Brown",
		evos: ["fearow"],
		eggGroups: ["Flying"],
	},
	fearow: {
		num: 22,
		species: "Fearow",
		types: ["Normal", "Flying"],
		baseStats: {hp: 65, atk: 90, def: 65, spa: 61, spd: 61, spe: 100},
		abilities: {0: "Keen Eye", H: "Sniper"},
		heightm: 1.2,
		weightkg: 38,
		color: "Brown",
		prevo: "spearow",
		evoLevel: 20,
		eggGroups: ["Flying"],
	},
	ekans: {
		num: 23,
		species: "Ekans",
		types: ["Poison"],
		baseStats: {hp: 35, atk: 60, def: 44, spa: 40, spd: 54, spe: 55},
		abilities: {0: "Intimidate", 1: "Shed Skin", H: "Unnerve"},
		heightm: 2,
		weightkg: 6.9,
		color: "Purple",
		evos: ["arbok"],
		eggGroups: ["Field", "Dragon"],
	},
	arbok: {
		num: 24,
		species: "Arbok",
		types: ["Poison"],
		baseStats: {hp: 60, atk: 95, def: 69, spa: 65, spd: 79, spe: 80},
		abilities: {0: "Intimidate", 1: "Shed Skin", H: "Unnerve"},
		heightm: 3.5,
		weightkg: 65,
		color: "Purple",
		prevo: "ekans",
		evoLevel: 22,
		eggGroups: ["Field", "Dragon"],
	},
	pikachu: {
		num: 25,
		species: "Pikachu",
		types: ["Electric"],
		baseStats: {hp: 35, atk: 55, def: 40, spa: 50, spd: 50, spe: 90},
		abilities: {0: "Static", H: "Lightning Rod"},
		heightm: 0.4,
		weightkg: 6,
		color: "Yellow",
		prevo: "pichu",
		evoType: "levelFriendship",
		evos: ["raichu", "raichualola"],
		eggGroups: ["Field", "Fairy"],
		otherFormes: ["pikachucosplay", "pikachurockstar", "pikachubelle", "pikachupopstar", "pikachuphd", "pikachulibre", "pikachuoriginal", "pikachuhoenn", "pikachusinnoh", "pikachuunova", "pikachukalos", "pikachualola", "pikachupartner", "pikachustarter"],
	},
	pikachucosplay: {
		num: 25,
		species: "Pikachu-Cosplay",
		baseSpecies: "Pikachu",
		forme: "Cosplay",
		formeLetter: "C",
		types: ["Electric"],
		gender: "F",
		baseStats: {hp: 35, atk: 55, def: 40, spa: 50, spd: 50, spe: 90},
		abilities: {0: "Lightning Rod"},
		heightm: 0.4,
		weightkg: 6,
		color: "Yellow",
		eggGroups: ["Undiscovered"],
	},
	pikachurockstar: {
		num: 25,
		species: "Pikachu-Rock-Star",
		baseSpecies: "Pikachu",
		forme: "Rock-Star",
		formeLetter: "R",
		types: ["Electric"],
		gender: "F",
		baseStats: {hp: 35, atk: 55, def: 40, spa: 50, spd: 50, spe: 90},
		abilities: {0: "Lightning Rod"},
		heightm: 0.4,
		weightkg: 6,
		color: "Yellow",
		eggGroups: ["Undiscovered"],
	},
	pikachubelle: {
		num: 25,
		species: "Pikachu-Belle",
		baseSpecies: "Pikachu",
		forme: "Belle",
		formeLetter: "B",
		types: ["Electric"],
		gender: "F",
		baseStats: {hp: 35, atk: 55, def: 40, spa: 50, spd: 50, spe: 90},
		abilities: {0: "Lightning Rod"},
		heightm: 0.4,
		weightkg: 6,
		color: "Yellow",
		eggGroups: ["Undiscovered"],
	},
	pikachupopstar: {
		num: 25,
		species: "Pikachu-Pop-Star",
		baseSpecies: "Pikachu",
		forme: "Pop-Star",
		formeLetter: "P",
		types: ["Electric"],
		gender: "F",
		baseStats: {hp: 35, atk: 55, def: 40, spa: 50, spd: 50, spe: 90},
		abilities: {0: "Lightning Rod"},
		heightm: 0.4,
		weightkg: 6,
		color: "Yellow",
		eggGroups: ["Undiscovered"],
	},
	pikachuphd: {
		num: 25,
		species: "Pikachu-PhD",
		baseSpecies: "Pikachu",
		forme: "PhD",
		formeLetter: "D",
		types: ["Electric"],
		gender: "F",
		baseStats: {hp: 35, atk: 55, def: 40, spa: 50, spd: 50, spe: 90},
		abilities: {0: "Lightning Rod"},
		heightm: 0.4,
		weightkg: 6,
		color: "Yellow",
		eggGroups: ["Undiscovered"],
	},
	pikachulibre: {
		num: 25,
		species: "Pikachu-Libre",
		baseSpecies: "Pikachu",
		forme: "Libre",
		formeLetter: "L",
		types: ["Electric"],
		gender: "F",
		baseStats: {hp: 35, atk: 55, def: 40, spa: 50, spd: 50, spe: 90},
		abilities: {0: "Lightning Rod"},
		heightm: 0.4,
		weightkg: 6,
		color: "Yellow",
		eggGroups: ["Undiscovered"],
	},
	pikachuoriginal: {
		num: 25,
		species: "Pikachu-Original",
		baseSpecies: "Pikachu",
		forme: "Original",
		formeLetter: "O",
		types: ["Electric"],
		gender: "M",
		baseStats: {hp: 35, atk: 55, def: 40, spa: 50, spd: 50, spe: 90},
		abilities: {0: "Static"},
		heightm: 0.4,
		weightkg: 6,
		color: "Yellow",
		eggGroups: ["Undiscovered"],
	},
	pikachuhoenn: {
		num: 25,
		species: "Pikachu-Hoenn",
		baseSpecies: "Pikachu",
		forme: "Hoenn",
		formeLetter: "H",
		types: ["Electric"],
		gender: "M",
		baseStats: {hp: 35, atk: 55, def: 40, spa: 50, spd: 50, spe: 90},
		abilities: {0: "Static"},
		heightm: 0.4,
		weightkg: 6,
		color: "Yellow",
		eggGroups: ["Undiscovered"],
	},
	pikachusinnoh: {
		num: 25,
		species: "Pikachu-Sinnoh",
		baseSpecies: "Pikachu",
		forme: "Sinnoh",
		formeLetter: "S",
		types: ["Electric"],
		gender: "M",
		baseStats: {hp: 35, atk: 55, def: 40, spa: 50, spd: 50, spe: 90},
		abilities: {0: "Static"},
		heightm: 0.4,
		weightkg: 6,
		color: "Yellow",
		eggGroups: ["Undiscovered"],
	},
	pikachuunova: {
		num: 25,
		species: "Pikachu-Unova",
		baseSpecies: "Pikachu",
		forme: "Unova",
		formeLetter: "U",
		types: ["Electric"],
		gender: "M",
		baseStats: {hp: 35, atk: 55, def: 40, spa: 50, spd: 50, spe: 90},
		abilities: {0: "Static"},
		heightm: 0.4,
		weightkg: 6,
		color: "Yellow",
		eggGroups: ["Undiscovered"],
	},
	pikachukalos: {
		num: 25,
		species: "Pikachu-Kalos",
		baseSpecies: "Pikachu",
		forme: "Kalos",
		formeLetter: "K",
		types: ["Electric"],
		gender: "M",
		baseStats: {hp: 35, atk: 55, def: 40, spa: 50, spd: 50, spe: 90},
		abilities: {0: "Static"},
		heightm: 0.4,
		weightkg: 6,
		color: "Yellow",
		eggGroups: ["Undiscovered"],
	},
	pikachualola: {
		num: 25,
		species: "Pikachu-Alola",
		baseSpecies: "Pikachu",
		forme: "Alola",
		formeLetter: "A",
		types: ["Electric"],
		gender: "M",
		baseStats: {hp: 35, atk: 55, def: 40, spa: 50, spd: 50, spe: 90},
		abilities: {0: "Static"},
		heightm: 0.4,
		weightkg: 6,
		color: "Yellow",
		eggGroups: ["Undiscovered"],
	},
	pikachupartner: {
		num: 25,
		species: "Pikachu-Partner",
		baseSpecies: "Pikachu",
		forme: "Partner",
		formeLetter: "P",
		types: ["Electric"],
		gender: "M",
		baseStats: {hp: 35, atk: 55, def: 40, spa: 50, spd: 50, spe: 90},
		abilities: {0: "Static"},
		heightm: 0.4,
		weightkg: 6,
		color: "Yellow",
		eggGroups: ["Undiscovered"],
	},
	pikachustarter: {
		num: 25,
		species: "Pikachu-Starter",
		baseSpecies: "Pikachu",
		forme: "Starter",
		formeLetter: "S",
		types: ["Electric"],
		baseStats: {hp: 45, atk: 80, def: 50, spa: 75, spd: 60, spe: 120},
		abilities: {0: "Static", H: "Lightning Rod"},
		heightm: 0.4,
		weightkg: 6,
		color: "Yellow",
		eggGroups: ["Undiscovered"],
	},
	raichu: {
		num: 26,
		species: "Raichu",
		types: ["Electric"],
		baseStats: {hp: 60, atk: 90, def: 55, spa: 90, spd: 80, spe: 110},
		abilities: {0: "Static", H: "Lightning Rod"},
		heightm: 0.8,
		weightkg: 30,
		color: "Yellow",
		prevo: "pikachu",
		evoItem: "Thunder Stone",
		evoType: "stone",
		eggGroups: ["Field", "Fairy"],
		otherFormes: ["raichualola"],
	},
	raichualola: {
		num: 26,
		species: "Raichu-Alola",
		baseSpecies: "Raichu",
		forme: "Alola",
		formeLetter: "A",
		types: ["Electric", "Psychic"],
		baseStats: {hp: 60, atk: 85, def: 50, spa: 95, spd: 85, spe: 110},
		abilities: {0: "Surge Surfer"},
		heightm: 0.7,
		weightkg: 21,
		color: "Brown",
		prevo: "pikachu",
		evoType: "stone",
		evoItem: "Thunder Stone",
		eggGroups: ["Field", "Fairy"],
	},
	sandshrew: {
		num: 27,
		species: "Sandshrew",
		types: ["Ground"],
		baseStats: {hp: 50, atk: 75, def: 85, spa: 20, spd: 30, spe: 40},
		abilities: {0: "Sand Veil", H: "Sand Rush"},
		heightm: 0.6,
		weightkg: 12,
		color: "Yellow",
		evos: ["sandslash"],
		eggGroups: ["Field"],
		otherFormes: ["sandshrewalola"],
	},
	sandshrewalola: {
		num: 27,
		species: "Sandshrew-Alola",
		baseSpecies: "Sandshrew",
		forme: "Alola",
		formeLetter: "A",
		types: ["Ice", "Steel"],
		baseStats: {hp: 50, atk: 75, def: 90, spa: 10, spd: 35, spe: 40},
		abilities: {0: "Snow Cloak", H: "Slush Rush"},
		heightm: 0.7,
		weightkg: 40,
		color: "White",
		evos: ["sandslashalola"],
		eggGroups: ["Field"],
	},
	sandslash: {
		num: 28,
		species: "Sandslash",
		types: ["Ground"],
		baseStats: {hp: 75, atk: 100, def: 110, spa: 45, spd: 55, spe: 65},
		abilities: {0: "Sand Veil", H: "Sand Rush"},
		heightm: 1,
		weightkg: 29.5,
		color: "Yellow",
		prevo: "sandshrew",
		evoLevel: 22,
		eggGroups: ["Field"],
		otherFormes: ["sandslashalola"],
	},
	sandslashalola: {
		num: 28,
		species: "Sandslash-Alola",
		baseSpecies: "Sandslash",
		forme: "Alola",
		formeLetter: "A",
		types: ["Ice", "Steel"],
		baseStats: {hp: 75, atk: 100, def: 120, spa: 25, spd: 65, spe: 65},
		abilities: {0: "Snow Cloak", H: "Slush Rush"},
		heightm: 1.2,
		weightkg: 55,
		color: "Blue",
		prevo: "sandshrewalola",
		evoType: "stone",
		evoItem: "Ice Stone",
		eggGroups: ["Field"],
	},
	nidoranf: {
		num: 29,
		species: "Nidoran-F",
		types: ["Poison"],
		gender: "F",
		baseStats: {hp: 55, atk: 47, def: 52, spa: 40, spd: 40, spe: 41},
		abilities: {0: "Poison Point", 1: "Rivalry", H: "Hustle"},
		heightm: 0.4,
		weightkg: 7,
		color: "Blue",
		evos: ["nidorina"],
		eggGroups: ["Monster", "Field"],
	},
	nidorina: {
		num: 30,
		species: "Nidorina",
		types: ["Poison"],
		gender: "F",
		baseStats: {hp: 70, atk: 62, def: 67, spa: 55, spd: 55, spe: 56},
		abilities: {0: "Poison Point", 1: "Rivalry", H: "Hustle"},
		heightm: 0.8,
		weightkg: 20,
		color: "Blue",
		prevo: "nidoranf",
		evoLevel: 16,
		evos: ["nidoqueen"],
		eggGroups: ["Undiscovered"],
	},
	nidoqueen: {
		num: 31,
		species: "Nidoqueen",
		types: ["Poison", "Ground"],
		gender: "F",
		baseStats: {hp: 90, atk: 92, def: 87, spa: 75, spd: 85, spe: 76},
		abilities: {0: "Poison Point", 1: "Rivalry", H: "Sheer Force"},
		heightm: 1.3,
		weightkg: 60,
		color: "Blue",
		prevo: "nidorina",
		evoType: "stone",
		evoItem: "Moon Stone",
		eggGroups: ["Undiscovered"],
	},
	nidoranm: {
		num: 32,
		species: "Nidoran-M",
		types: ["Poison"],
		gender: "M",
		baseStats: {hp: 46, atk: 57, def: 40, spa: 40, spd: 40, spe: 50},
		abilities: {0: "Poison Point", 1: "Rivalry", H: "Hustle"},
		heightm: 0.5,
		weightkg: 9,
		color: "Purple",
		evos: ["nidorino"],
		eggGroups: ["Monster", "Field"],
	},
	nidorino: {
		num: 33,
		species: "Nidorino",
		types: ["Poison"],
		gender: "M",
		baseStats: {hp: 61, atk: 72, def: 57, spa: 55, spd: 55, spe: 65},
		abilities: {0: "Poison Point", 1: "Rivalry", H: "Hustle"},
		heightm: 0.9,
		weightkg: 19.5,
		color: "Purple",
		prevo: "nidoranm",
		evoLevel: 16,
		evos: ["nidoking"],
		eggGroups: ["Monster", "Field"],
	},
	nidoking: {
		num: 34,
		species: "Nidoking",
		types: ["Poison", "Ground"],
		gender: "M",
		baseStats: {hp: 81, atk: 102, def: 77, spa: 85, spd: 75, spe: 85},
		abilities: {0: "Poison Point", 1: "Rivalry", H: "Sheer Force"},
		heightm: 1.4,
		weightkg: 62,
		color: "Purple",
		prevo: "nidorino",
		evoType: "stone",
		evoItem: "Moon Stone",
		eggGroups: ["Monster", "Field"],
	},
	clefairy: {
		num: 35,
		species: "Clefairy",
		types: ["Fairy"],
		genderRatio: {M: 0.25, F: 0.75},
		baseStats: {hp: 70, atk: 45, def: 48, spa: 60, spd: 65, spe: 35},
		abilities: {0: "Cute Charm", 1: "Magic Guard", H: "Friend Guard"},
		heightm: 0.6,
		weightkg: 7.5,
		color: "Pink",
		prevo: "cleffa",
		evoType: "levelFriendship",
		evos: ["clefable"],
		eggGroups: ["Fairy"],
	},
	clefable: {
		num: 36,
		species: "Clefable",
		types: ["Fairy"],
		genderRatio: {M: 0.25, F: 0.75},
		baseStats: {hp: 95, atk: 70, def: 73, spa: 95, spd: 90, spe: 60},
		abilities: {0: "Cute Charm", 1: "Magic Guard", H: "Unaware"},
		heightm: 1.3,
		weightkg: 40,
		color: "Pink",
		prevo: "clefairy",
		evoType: "stone",
		evoItem: "Moon Stone",
		eggGroups: ["Fairy"],
	},
	vulpix: {
		num: 37,
		species: "Vulpix",
		types: ["Fire"],
		genderRatio: {M: 0.25, F: 0.75},
		baseStats: {hp: 38, atk: 41, def: 40, spa: 50, spd: 65, spe: 65},
		abilities: {0: "Flash Fire", H: "Drought"},
		heightm: 0.6,
		weightkg: 9.9,
		color: "Brown",
		evos: ["ninetales"],
		eggGroups: ["Field"],
		otherFormes: ["vulpixalola"],
	},
	vulpixalola: {
		num: 37,
		species: "Vulpix-Alola",
		baseSpecies: "Vulpix",
		forme: "Alola",
		formeLetter: "A",
		types: ["Ice"],
		genderRatio: {M: 0.25, F: 0.75},
		baseStats: {hp: 38, atk: 41, def: 40, spa: 50, spd: 65, spe: 65},
		abilities: {0: "Snow Cloak", H: "Snow Warning"},
		heightm: 0.6,
		weightkg: 9.9,
		color: "White",
		evos: ["ninetalesalola"],
		eggGroups: ["Field"],
	},
	ninetales: {
		num: 38,
		species: "Ninetales",
		types: ["Fire"],
		genderRatio: {M: 0.25, F: 0.75},
		baseStats: {hp: 73, atk: 76, def: 75, spa: 81, spd: 100, spe: 100},
		abilities: {0: "Flash Fire", H: "Drought"},
		heightm: 1.1,
		weightkg: 19.9,
		color: "Yellow",
		prevo: "vulpix",
		evoType: "stone",
		evoItem: "Fire Stone",
		eggGroups: ["Field"],
		otherFormes: ["ninetalesalola"],
	},
	ninetalesalola: {
		num: 38,
		species: "Ninetales-Alola",
		baseSpecies: "Ninetales",
		forme: "Alola",
		formeLetter: "A",
		types: ["Ice", "Fairy"],
		genderRatio: {M: 0.25, F: 0.75},
		baseStats: {hp: 73, atk: 67, def: 75, spa: 81, spd: 100, spe: 109},
		abilities: {0: "Snow Cloak", H: "Snow Warning"},
		heightm: 1.1,
		weightkg: 19.9,
		color: "Blue",
		prevo: "vulpixalola",
		evoType: "stone",
		evoItem: "Ice Stone",
		eggGroups: ["Field"],
	},
	jigglypuff: {
		num: 39,
		species: "Jigglypuff",
		types: ["Normal", "Fairy"],
		genderRatio: {M: 0.25, F: 0.75},
		baseStats: {hp: 115, atk: 45, def: 20, spa: 45, spd: 25, spe: 20},
		abilities: {0: "Cute Charm", 1: "Competitive", H: "Friend Guard"},
		heightm: 0.5,
		weightkg: 5.5,
		color: "Pink",
		prevo: "igglybuff",
		evoType: "levelFriendship",
		evos: ["wigglytuff"],
		eggGroups: ["Fairy"],
	},
	wigglytuff: {
		num: 40,
		species: "Wigglytuff",
		types: ["Normal", "Fairy"],
		genderRatio: {M: 0.25, F: 0.75},
		baseStats: {hp: 140, atk: 70, def: 45, spa: 85, spd: 50, spe: 45},
		abilities: {0: "Cute Charm", 1: "Competitive", H: "Frisk"},
		heightm: 1,
		weightkg: 12,
		color: "Pink",
		prevo: "jigglypuff",
		evoType: "stone",
		evoItem: "Moon Stone",
		eggGroups: ["Fairy"],
	},
	zubat: {
		num: 41,
		species: "Zubat",
		types: ["Poison", "Flying"],
		baseStats: {hp: 40, atk: 45, def: 35, spa: 30, spd: 40, spe: 55},
		abilities: {0: "Inner Focus", H: "Infiltrator"},
		heightm: 0.8,
		weightkg: 7.5,
		color: "Purple",
		evos: ["golbat"],
		eggGroups: ["Flying"],
	},
	golbat: {
		num: 42,
		species: "Golbat",
		types: ["Poison", "Flying"],
		baseStats: {hp: 75, atk: 80, def: 70, spa: 65, spd: 75, spe: 90},
		abilities: {0: "Inner Focus", H: "Infiltrator"},
		heightm: 1.6,
		weightkg: 55,
		color: "Purple",
		prevo: "zubat",
		evoLevel: 22,
		evos: ["crobat"],
		eggGroups: ["Flying"],
	},
	oddish: {
		num: 43,
		species: "Oddish",
		types: ["Grass", "Poison"],
		baseStats: {hp: 45, atk: 50, def: 55, spa: 75, spd: 65, spe: 30},
		abilities: {0: "Chlorophyll", H: "Run Away"},
		heightm: 0.5,
		weightkg: 5.4,
		color: "Blue",
		evos: ["gloom"],
		eggGroups: ["Grass"],
	},
	gloom: {
		num: 44,
		species: "Gloom",
		types: ["Grass", "Poison"],
		baseStats: {hp: 60, atk: 65, def: 70, spa: 85, spd: 75, spe: 40},
		abilities: {0: "Chlorophyll", H: "Stench"},
		heightm: 0.8,
		weightkg: 8.6,
		color: "Blue",
		prevo: "oddish",
		evoLevel: 21,
		evos: ["vileplume", "bellossom"],
		eggGroups: ["Grass"],
	},
	vileplume: {
		num: 45,
		species: "Vileplume",
		types: ["Grass", "Poison"],
		baseStats: {hp: 75, atk: 80, def: 85, spa: 110, spd: 90, spe: 50},
		abilities: {0: "Chlorophyll", H: "Effect Spore"},
		heightm: 1.2,
		weightkg: 18.6,
		color: "Red",
		prevo: "gloom",
		evoType: "stone",
		evoItem: "Leaf Stone",
		eggGroups: ["Grass"],
	},
	paras: {
		num: 46,
		species: "Paras",
		types: ["Bug", "Grass"],
		baseStats: {hp: 35, atk: 70, def: 55, spa: 45, spd: 55, spe: 25},
		abilities: {0: "Effect Spore", 1: "Dry Skin", H: "Damp"},
		heightm: 0.3,
		weightkg: 5.4,
		color: "Red",
		evos: ["parasect"],
		eggGroups: ["Bug", "Grass"],
	},
	parasect: {
		num: 47,
		species: "Parasect",
		types: ["Bug", "Grass"],
		baseStats: {hp: 60, atk: 95, def: 80, spa: 60, spd: 80, spe: 30},
		abilities: {0: "Effect Spore", 1: "Dry Skin", H: "Damp"},
		heightm: 1,
		weightkg: 29.5,
		color: "Red",
		prevo: "paras",
		evoLevel: 24,
		eggGroups: ["Bug", "Grass"],
	},
	venonat: {
		num: 48,
		species: "Venonat",
		types: ["Bug", "Poison"],
		baseStats: {hp: 60, atk: 55, def: 50, spa: 40, spd: 55, spe: 45},
		abilities: {0: "Compound Eyes", 1: "Tinted Lens", H: "Run Away"},
		heightm: 1,
		weightkg: 30,
		color: "Purple",
		evos: ["venomoth"],
		eggGroups: ["Bug"],
	},
	venomoth: {
		num: 49,
		species: "Venomoth",
		types: ["Bug", "Poison"],
		baseStats: {hp: 70, atk: 65, def: 60, spa: 90, spd: 75, spe: 90},
		abilities: {0: "Shield Dust", 1: "Tinted Lens", H: "Wonder Skin"},
		heightm: 1.5,
		weightkg: 12.5,
		color: "Purple",
		prevo: "venonat",
		evoLevel: 31,
		eggGroups: ["Bug"],
	},
	diglett: {
		num: 50,
		species: "Diglett",
		types: ["Ground"],
		baseStats: {hp: 10, atk: 55, def: 25, spa: 35, spd: 45, spe: 95},
		abilities: {0: "Sand Veil", 1: "Arena Trap", H: "Sand Force"},
		heightm: 0.2,
		weightkg: 0.8,
		color: "Brown",
		evos: ["dugtrio"],
		eggGroups: ["Field"],
		otherFormes: ["diglettalola"],
	},
	diglettalola: {
		num: 50,
		species: "Diglett-Alola",
		baseSpecies: "Diglett",
		forme: "Alola",
		formeLetter: "A",
		types: ["Ground", "Steel"],
		baseStats: {hp: 10, atk: 55, def: 30, spa: 35, spd: 45, spe: 90},
		abilities: {0: "Sand Veil", 1: "Tangling Hair", H: "Sand Force"},
		heightm: 0.2,
		weightkg: 1,
		color: "Brown",
		evos: ["dugtrioalola"],
		eggGroups: ["Field"],
	},
	dugtrio: {
		num: 51,
		species: "Dugtrio",
		types: ["Ground"],
		baseStats: {hp: 35, atk: 100, def: 50, spa: 50, spd: 70, spe: 120},
		abilities: {0: "Sand Veil", 1: "Arena Trap", H: "Sand Force"},
		heightm: 0.7,
		weightkg: 33.3,
		color: "Brown",
		prevo: "diglett",
		evoLevel: 26,
		eggGroups: ["Field"],
		otherFormes: ["dugtrioalola"],
	},
	dugtrioalola: {
		num: 51,
		species: "Dugtrio-Alola",
		baseSpecies: "Dugtrio",
		forme: "Alola",
		formeLetter: "A",
		types: ["Ground", "Steel"],
		baseStats: {hp: 35, atk: 100, def: 60, spa: 50, spd: 70, spe: 110},
		abilities: {0: "Sand Veil", 1: "Tangling Hair", H: "Sand Force"},
		heightm: 0.7,
		weightkg: 66.6,
		color: "Brown",
		prevo: "diglettalola",
		evoLevel: 26,
		eggGroups: ["Field"],
	},
	meowth: {
		num: 52,
		species: "Meowth",
		types: ["Normal"],
		baseStats: {hp: 40, atk: 45, def: 35, spa: 40, spd: 40, spe: 90},
		abilities: {0: "Pickup", 1: "Technician", H: "Unnerve"},
		heightm: 0.4,
		weightkg: 4.2,
		color: "Yellow",
		evos: ["persian"],
		eggGroups: ["Field"],
		otherFormes: ["meowthalola"],
	},
	meowthalola: {
		num: 52,
		species: "Meowth-Alola",
		baseSpecies: "Meowth",
		forme: "Alola",
		formeLetter: "A",
		types: ["Dark"],
		baseStats: {hp: 40, atk: 35, def: 35, spa: 50, spd: 40, spe: 90},
		abilities: {0: "Pickup", 1: "Technician", H: "Rattled"},
		heightm: 0.4,
		weightkg: 4.2,
		color: "Blue",
		evos: ["persianalola"],
		eggGroups: ["Field"],
	},
	persian: {
		num: 53,
		species: "Persian",
		types: ["Normal"],
		baseStats: {hp: 65, atk: 70, def: 60, spa: 65, spd: 65, spe: 115},
		abilities: {0: "Limber", 1: "Technician", H: "Unnerve"},
		heightm: 1,
		weightkg: 32,
		color: "Yellow",
		prevo: "meowth",
		evoLevel: 28,
		eggGroups: ["Field"],
		otherFormes: ["persianalola"],
	},
	persianalola: {
		num: 53,
		species: "Persian-Alola",
		baseSpecies: "Persian",
		forme: "Alola",
		formeLetter: "A",
		types: ["Dark"],
		baseStats: {hp: 65, atk: 60, def: 60, spa: 75, spd: 65, spe: 115},
		abilities: {0: "Fur Coat", 1: "Technician", H: "Rattled"},
		heightm: 1.1,
		weightkg: 33,
		color: "Blue",
		prevo: "meowthalola",
		evoType: "levelFriendship",
		eggGroups: ["Field"],
	},
	psyduck: {
		num: 54,
		species: "Psyduck",
		types: ["Water"],
		baseStats: {hp: 50, atk: 52, def: 48, spa: 65, spd: 50, spe: 55},
		abilities: {0: "Damp", 1: "Cloud Nine", H: "Swift Swim"},
		heightm: 0.8,
		weightkg: 19.6,
		color: "Yellow",
		evos: ["golduck"],
		eggGroups: ["Water 1", "Field"],
	},
	golduck: {
		num: 55,
		species: "Golduck",
		types: ["Water"],
		baseStats: {hp: 80, atk: 82, def: 78, spa: 95, spd: 80, spe: 85},
		abilities: {0: "Damp", 1: "Cloud Nine", H: "Swift Swim"},
		heightm: 1.7,
		weightkg: 76.6,
		color: "Blue",
		prevo: "psyduck",
		evoLevel: 33,
		eggGroups: ["Water 1", "Field"],
	},
	mankey: {
		num: 56,
		species: "Mankey",
		types: ["Fighting"],
		baseStats: {hp: 40, atk: 80, def: 35, spa: 35, spd: 45, spe: 70},
		abilities: {0: "Vital Spirit", 1: "Anger Point", H: "Defiant"},
		heightm: 0.5,
		weightkg: 28,
		color: "Brown",
		evos: ["primeape"],
		eggGroups: ["Field"],
	},
	primeape: {
		num: 57,
		species: "Primeape",
		types: ["Fighting"],
		baseStats: {hp: 65, atk: 105, def: 60, spa: 60, spd: 70, spe: 95},
		abilities: {0: "Vital Spirit", 1: "Anger Point", H: "Defiant"},
		heightm: 1,
		weightkg: 32,
		color: "Brown",
		prevo: "mankey",
		evoLevel: 28,
		eggGroups: ["Field"],
	},
	growlithe: {
		num: 58,
		species: "Growlithe",
		types: ["Fire"],
		genderRatio: {M: 0.75, F: 0.25},
		baseStats: {hp: 55, atk: 70, def: 45, spa: 70, spd: 50, spe: 60},
		abilities: {0: "Intimidate", 1: "Flash Fire", H: "Justified"},
		heightm: 0.7,
		weightkg: 19,
		color: "Brown",
		evos: ["arcanine"],
		eggGroups: ["Field"],
	},
	arcanine: {
		num: 59,
		species: "Arcanine",
		types: ["Fire"],
		genderRatio: {M: 0.75, F: 0.25},
		baseStats: {hp: 90, atk: 110, def: 80, spa: 100, spd: 80, spe: 95},
		abilities: {0: "Intimidate", 1: "Flash Fire", H: "Justified"},
		heightm: 1.9,
		weightkg: 155,
		color: "Brown",
		prevo: "growlithe",
		evoType: "stone",
		evoItem: "Fire Stone",
		eggGroups: ["Field"],
	},
	poliwag: {
		num: 60,
		species: "Poliwag",
		types: ["Water"],
		baseStats: {hp: 40, atk: 50, def: 40, spa: 40, spd: 40, spe: 90},
		abilities: {0: "Water Absorb", 1: "Damp", H: "Swift Swim"},
		heightm: 0.6,
		weightkg: 12.4,
		color: "Blue",
		evos: ["poliwhirl"],
		eggGroups: ["Water 1"],
	},
	poliwhirl: {
		num: 61,
		species: "Poliwhirl",
		types: ["Water"],
		baseStats: {hp: 65, atk: 65, def: 65, spa: 50, spd: 50, spe: 90},
		abilities: {0: "Water Absorb", 1: "Damp", H: "Swift Swim"},
		heightm: 1,
		weightkg: 20,
		color: "Blue",
		prevo: "poliwag",
		evoLevel: 25,
		evos: ["poliwrath", "politoed"],
		eggGroups: ["Water 1"],
	},
	poliwrath: {
		num: 62,
		species: "Poliwrath",
		types: ["Water", "Fighting"],
		baseStats: {hp: 90, atk: 95, def: 95, spa: 70, spd: 90, spe: 70},
		abilities: {0: "Water Absorb", 1: "Damp", H: "Swift Swim"},
		heightm: 1.3,
		weightkg: 54,
		color: "Blue",
		prevo: "poliwhirl",
		evoType: "stone",
		evoItem: "Water Stone",
		eggGroups: ["Water 1"],
	},
	abra: {
		num: 63,
		species: "Abra",
		types: ["Psychic"],
		genderRatio: {M: 0.75, F: 0.25},
		baseStats: {hp: 25, atk: 20, def: 15, spa: 105, spd: 55, spe: 90},
		abilities: {0: "Synchronize", 1: "Inner Focus", H: "Magic Guard"},
		heightm: 0.9,
		weightkg: 19.5,
		color: "Brown",
		evos: ["kadabra"],
		eggGroups: ["Human-Like"],
	},
	kadabra: {
		num: 64,
		species: "Kadabra",
		types: ["Psychic"],
		genderRatio: {M: 0.75, F: 0.25},
		baseStats: {hp: 40, atk: 35, def: 30, spa: 120, spd: 70, spe: 105},
		abilities: {0: "Synchronize", 1: "Inner Focus", H: "Magic Guard"},
		heightm: 1.3,
		weightkg: 56.5,
		color: "Brown",
		prevo: "abra",
		evoLevel: 16,
		evos: ["alakazam"],
		eggGroups: ["Human-Like"],
	},
	alakazam: {
		num: 65,
		species: "Alakazam",
		types: ["Psychic"],
		genderRatio: {M: 0.75, F: 0.25},
		baseStats: {hp: 55, atk: 50, def: 45, spa: 135, spd: 95, spe: 120},
		abilities: {0: "Synchronize", 1: "Inner Focus", H: "Magic Guard"},
		heightm: 1.5,
		weightkg: 48,
		color: "Brown",
		prevo: "kadabra",
		evoType: "trade",
		eggGroups: ["Human-Like"],
		otherFormes: ["alakazammega"],
	},
	alakazammega: {
		num: 65,
		species: "Alakazam-Mega",
		baseSpecies: "Alakazam",
		forme: "Mega",
		formeLetter: "M",
		types: ["Psychic"],
		genderRatio: {M: 0.75, F: 0.25},
		baseStats: {hp: 55, atk: 50, def: 65, spa: 175, spd: 105, spe: 150},
		abilities: {0: "Trace"},
		heightm: 1.2,
		weightkg: 48,
		color: "Brown",
		eggGroups: ["Human-Like"],
	},
	machop: {
		num: 66,
		species: "Machop",
		types: ["Fighting"],
		genderRatio: {M: 0.75, F: 0.25},
		baseStats: {hp: 70, atk: 80, def: 50, spa: 35, spd: 35, spe: 35},
		abilities: {0: "Guts", 1: "No Guard", H: "Steadfast"},
		heightm: 0.8,
		weightkg: 19.5,
		color: "Gray",
		evos: ["machoke"],
		eggGroups: ["Human-Like"],
	},
	machoke: {
		num: 67,
		species: "Machoke",
		types: ["Fighting"],
		genderRatio: {M: 0.75, F: 0.25},
		baseStats: {hp: 80, atk: 100, def: 70, spa: 50, spd: 60, spe: 45},
		abilities: {0: "Guts", 1: "No Guard", H: "Steadfast"},
		heightm: 1.5,
		weightkg: 70.5,
		color: "Gray",
		prevo: "machop",
		evoLevel: 28,
		evos: ["machamp"],
		eggGroups: ["Human-Like"],
	},
	machamp: {
		num: 68,
		species: "Machamp",
		types: ["Fighting"],
		genderRatio: {M: 0.75, F: 0.25},
		baseStats: {hp: 90, atk: 130, def: 80, spa: 65, spd: 85, spe: 55},
		abilities: {0: "Guts", 1: "No Guard", H: "Steadfast"},
		heightm: 1.6,
		weightkg: 130,
		color: "Gray",
		prevo: "machoke",
		evoType: "trade",
		eggGroups: ["Human-Like"],
	},
	bellsprout: {
		num: 69,
		species: "Bellsprout",
		types: ["Grass", "Poison"],
		baseStats: {hp: 50, atk: 75, def: 35, spa: 70, spd: 30, spe: 40},
		abilities: {0: "Chlorophyll", H: "Gluttony"},
		heightm: 0.7,
		weightkg: 4,
		color: "Green",
		evos: ["weepinbell"],
		eggGroups: ["Grass"],
	},
	weepinbell: {
		num: 70,
		species: "Weepinbell",
		types: ["Grass", "Poison"],
		baseStats: {hp: 65, atk: 90, def: 50, spa: 85, spd: 45, spe: 55},
		abilities: {0: "Chlorophyll", H: "Gluttony"},
		heightm: 1,
		weightkg: 6.4,
		color: "Green",
		prevo: "bellsprout",
		evoLevel: 21,
		evos: ["victreebel"],
		eggGroups: ["Grass"],
	},
	victreebel: {
		num: 71,
		species: "Victreebel",
		types: ["Grass", "Poison"],
		baseStats: {hp: 80, atk: 105, def: 65, spa: 100, spd: 70, spe: 70},
		abilities: {0: "Chlorophyll", H: "Gluttony"},
		heightm: 1.7,
		weightkg: 15.5,
		color: "Green",
		prevo: "weepinbell",
		evoType: "stone",
		evoItem: "Leaf Stone",
		eggGroups: ["Grass"],
	},
	tentacool: {
		num: 72,
		species: "Tentacool",
		types: ["Water", "Poison"],
		baseStats: {hp: 40, atk: 40, def: 35, spa: 50, spd: 100, spe: 70},
		abilities: {0: "Clear Body", 1: "Liquid Ooze", H: "Rain Dish"},
		heightm: 0.9,
		weightkg: 45.5,
		color: "Blue",
		evos: ["tentacruel"],
		eggGroups: ["Water 3"],
	},
	tentacruel: {
		num: 73,
		species: "Tentacruel",
		types: ["Water", "Poison"],
		baseStats: {hp: 80, atk: 70, def: 65, spa: 80, spd: 120, spe: 100},
		abilities: {0: "Clear Body", 1: "Liquid Ooze", H: "Rain Dish"},
		heightm: 1.6,
		weightkg: 55,
		color: "Blue",
		prevo: "tentacool",
		evoLevel: 30,
		eggGroups: ["Water 3"],
	},
	geodude: {
		num: 74,
		species: "Geodude",
		types: ["Rock", "Ground"],
		baseStats: {hp: 40, atk: 80, def: 100, spa: 30, spd: 30, spe: 20},
		abilities: {0: "Rock Head", 1: "Sturdy", H: "Sand Veil"},
		heightm: 0.4,
		weightkg: 20,
		color: "Brown",
		evos: ["graveler"],
		eggGroups: ["Mineral"],
		otherFormes: ["geodudealola"],
	},
	geodudealola: {
		num: 74,
		species: "Geodude-Alola",
		baseSpecies: "Geodude",
		forme: "Alola",
		formeLetter: "A",
		types: ["Rock", "Electric"],
		baseStats: {hp: 40, atk: 80, def: 100, spa: 30, spd: 30, spe: 20},
		abilities: {0: "Magnet Pull", 1: "Sturdy", H: "Galvanize"},
		heightm: 0.4,
		weightkg: 20.3,
		color: "Gray",
		evos: ["graveleralola"],
		eggGroups: ["Mineral"],
	},
	graveler: {
		num: 75,
		species: "Graveler",
		types: ["Rock", "Ground"],
		baseStats: {hp: 55, atk: 95, def: 115, spa: 45, spd: 45, spe: 35},
		abilities: {0: "Rock Head", 1: "Sturdy", H: "Sand Veil"},
		heightm: 1,
		weightkg: 105,
		color: "Brown",
		prevo: "geodude",
		evoLevel: 25,
		evos: ["golem"],
		eggGroups: ["Mineral"],
		otherFormes: ["graveleralola"],
	},
	graveleralola: {
		num: 75,
		species: "Graveler-Alola",
		baseSpecies: "Graveler",
		forme: "Alola",
		formeLetter: "A",
		types: ["Rock", "Electric"],
		baseStats: {hp: 55, atk: 95, def: 115, spa: 45, spd: 45, spe: 35},
		abilities: {0: "Magnet Pull", 1: "Sturdy", H: "Galvanize"},
		heightm: 1,
		weightkg: 110,
		color: "Gray",
		prevo: "geodudealola",
		evoLevel: 25,
		evos: ["golemalola"],
		eggGroups: ["Mineral"],
	},
	golem: {
		num: 76,
		species: "Golem",
		types: ["Rock", "Ground"],
		baseStats: {hp: 80, atk: 120, def: 130, spa: 55, spd: 65, spe: 45},
		abilities: {0: "Rock Head", 1: "Sturdy", H: "Sand Veil"},
		heightm: 1.4,
		weightkg: 300,
		color: "Brown",
		prevo: "graveler",
		evoType: "trade",
		eggGroups: ["Mineral"],
		otherFormes: ["golemalola"],
	},
	golemalola: {
		num: 76,
		species: "Golem-Alola",
		baseSpecies: "Golem",
		forme: "Alola",
		formeLetter: "A",
		types: ["Rock", "Electric"],
		baseStats: {hp: 80, atk: 120, def: 130, spa: 55, spd: 65, spe: 45},
		abilities: {0: "Magnet Pull", 1: "Sturdy", H: "Galvanize"},
		heightm: 1.7,
		weightkg: 316,
		color: "Gray",
		prevo: "graveleralola",
		evoType: "trade",
		eggGroups: ["Mineral"],
	},
	ponyta: {
		num: 77,
		species: "Ponyta",
		types: ["Fire"],
		baseStats: {hp: 50, atk: 85, def: 55, spa: 65, spd: 65, spe: 90},
		abilities: {0: "Run Away", 1: "Flash Fire", H: "Flame Body"},
		heightm: 1,
		weightkg: 30,
		color: "Yellow",
		evos: ["rapidash"],
		eggGroups: ["Field"],
	},
	rapidash: {
		num: 78,
		species: "Rapidash",
		types: ["Fire"],
		baseStats: {hp: 65, atk: 100, def: 70, spa: 80, spd: 80, spe: 105},
		abilities: {0: "Run Away", 1: "Flash Fire", H: "Flame Body"},
		heightm: 1.7,
		weightkg: 95,
		color: "Yellow",
		prevo: "ponyta",
		evoLevel: 40,
		eggGroups: ["Field"],
	},
	slowpoke: {
		num: 79,
		species: "Slowpoke",
		types: ["Water", "Psychic"],
		baseStats: {hp: 90, atk: 65, def: 65, spa: 40, spd: 40, spe: 15},
		abilities: {0: "Oblivious", 1: "Own Tempo", H: "Regenerator"},
		heightm: 1.2,
		weightkg: 36,
		color: "Pink",
		evos: ["slowbro", "slowking"],
		eggGroups: ["Monster", "Water 1"],
	},
	slowbro: {
		num: 80,
		species: "Slowbro",
		types: ["Water", "Psychic"],
		baseStats: {hp: 95, atk: 75, def: 110, spa: 100, spd: 80, spe: 30},
		abilities: {0: "Oblivious", 1: "Own Tempo", H: "Regenerator"},
		heightm: 1.6,
		weightkg: 78.5,
		color: "Pink",
		prevo: "slowpoke",
		evoLevel: 37,
		eggGroups: ["Monster", "Water 1"],
		otherFormes: ["slowbromega"],
	},
	slowbromega: {
		num: 80,
		species: "Slowbro-Mega",
		baseSpecies: "Slowbro",
		forme: "Mega",
		formeLetter: "M",
		types: ["Water", "Psychic"],
		baseStats: {hp: 95, atk: 75, def: 180, spa: 130, spd: 80, spe: 30},
		abilities: {0: "Shell Armor"},
		heightm: 2,
		weightkg: 120,
		color: "Pink",
		eggGroups: ["Monster", "Water 1"],
	},
	magnemite: {
		num: 81,
		species: "Magnemite",
		types: ["Electric", "Steel"],
		gender: "N",
		baseStats: {hp: 25, atk: 35, def: 70, spa: 95, spd: 55, spe: 45},
		abilities: {0: "Magnet Pull", 1: "Sturdy", H: "Analytic"},
		heightm: 0.3,
		weightkg: 6,
		color: "Gray",
		evos: ["magneton"],
		eggGroups: ["Mineral"],
	},
	magneton: {
		num: 82,
		species: "Magneton",
		types: ["Electric", "Steel"],
		gender: "N",
		baseStats: {hp: 50, atk: 60, def: 95, spa: 120, spd: 70, spe: 70},
		abilities: {0: "Magnet Pull", 1: "Sturdy", H: "Analytic"},
		heightm: 1,
		weightkg: 60,
		color: "Gray",
		prevo: "magnemite",
		evoLevel: 30,
		evos: ["magnezone"],
		eggGroups: ["Mineral"],
	},
	farfetchd: {
		num: 83,
		species: "Farfetch'd",
		types: ["Normal", "Flying"],
		baseStats: {hp: 52, atk: 90, def: 55, spa: 58, spd: 62, spe: 60},
		abilities: {0: "Keen Eye", 1: "Inner Focus", H: "Defiant"},
		heightm: 0.8,
		weightkg: 15,
		color: "Brown",
		eggGroups: ["Flying", "Field"],
	},
	doduo: {
		num: 84,
		species: "Doduo",
		types: ["Normal", "Flying"],
		baseStats: {hp: 35, atk: 85, def: 45, spa: 35, spd: 35, spe: 75},
		abilities: {0: "Run Away", 1: "Early Bird", H: "Tangled Feet"},
		heightm: 1.4,
		weightkg: 39.2,
		color: "Brown",
		evos: ["dodrio"],
		eggGroups: ["Flying"],
	},
	dodrio: {
		num: 85,
		species: "Dodrio",
		types: ["Normal", "Flying"],
		baseStats: {hp: 60, atk: 110, def: 70, spa: 60, spd: 60, spe: 110},
		abilities: {0: "Run Away", 1: "Early Bird", H: "Tangled Feet"},
		heightm: 1.8,
		weightkg: 85.2,
		color: "Brown",
		prevo: "doduo",
		evoLevel: 31,
		eggGroups: ["Flying"],
	},
	seel: {
		num: 86,
		species: "Seel",
		types: ["Water"],
		baseStats: {hp: 65, atk: 45, def: 55, spa: 45, spd: 70, spe: 45},
		abilities: {0: "Thick Fat", 1: "Hydration", H: "Ice Body"},
		heightm: 1.1,
		weightkg: 90,
		color: "White",
		evos: ["dewgong"],
		eggGroups: ["Water 1", "Field"],
	},
	dewgong: {
		num: 87,
		species: "Dewgong",
		types: ["Water", "Ice"],
		baseStats: {hp: 90, atk: 70, def: 80, spa: 70, spd: 95, spe: 70},
		abilities: {0: "Thick Fat", 1: "Hydration", H: "Ice Body"},
		heightm: 1.7,
		weightkg: 120,
		color: "White",
		prevo: "seel",
		evoLevel: 34,
		eggGroups: ["Water 1", "Field"],
	},
	grimer: {
		num: 88,
		species: "Grimer",
		types: ["Poison"],
		baseStats: {hp: 80, atk: 80, def: 50, spa: 40, spd: 50, spe: 25},
		abilities: {0: "Stench", 1: "Sticky Hold", H: "Poison Touch"},
		heightm: 0.9,
		weightkg: 30,
		color: "Purple",
		evos: ["muk"],
		eggGroups: ["Amorphous"],
		otherFormes: ["grimeralola"],
	},
	grimeralola: {
		num: 88,
		species: "Grimer-Alola",
		baseSpecies: "Grimer",
		forme: "Alola",
		formeLetter: "A",
		types: ["Poison", "Dark"],
		baseStats: {hp: 80, atk: 80, def: 50, spa: 40, spd: 50, spe: 25},
		abilities: {0: "Poison Touch", 1: "Gluttony", H: "Power of Alchemy"},
		heightm: 0.7,
		weightkg: 42,
		color: "Green",
		evos: ["mukalola"],
		eggGroups: ["Amorphous"],
	},
	muk: {
		num: 89,
		species: "Muk",
		types: ["Poison"],
		baseStats: {hp: 105, atk: 105, def: 75, spa: 65, spd: 100, spe: 50},
		abilities: {0: "Stench", 1: "Sticky Hold", H: "Poison Touch"},
		heightm: 1.2,
		weightkg: 30,
		color: "Purple",
		prevo: "grimer",
		evoLevel: 38,
		eggGroups: ["Amorphous"],
		otherFormes: ["mukalola"],
	},
	mukalola: {
		num: 89,
		species: "Muk-Alola",
		baseSpecies: "Muk",
		forme: "Alola",
		formeLetter: "A",
		types: ["Poison", "Dark"],
		baseStats: {hp: 105, atk: 105, def: 75, spa: 65, spd: 100, spe: 50},
		abilities: {0: "Poison Touch", 1: "Gluttony", H: "Power of Alchemy"},
		heightm: 1,
		weightkg: 52,
		color: "Green",
		prevo: "grimeralola",
		evoLevel: 38,
		eggGroups: ["Amorphous"],
	},
	shellder: {
		num: 90,
		species: "Shellder",
		types: ["Water"],
		baseStats: {hp: 30, atk: 65, def: 100, spa: 45, spd: 25, spe: 40},
		abilities: {0: "Shell Armor", 1: "Skill Link", H: "Overcoat"},
		heightm: 0.3,
		weightkg: 4,
		color: "Purple",
		evos: ["cloyster"],
		eggGroups: ["Water 3"],
	},
	cloyster: {
		num: 91,
		species: "Cloyster",
		types: ["Water", "Ice"],
		baseStats: {hp: 50, atk: 95, def: 180, spa: 85, spd: 45, spe: 70},
		abilities: {0: "Shell Armor", 1: "Skill Link", H: "Overcoat"},
		heightm: 1.5,
		weightkg: 132.5,
		color: "Purple",
		prevo: "shellder",
		evoType: "stone",
		evoItem: "Water Stone",
		eggGroups: ["Water 3"],
	},
	gastly: {
		num: 92,
		species: "Gastly",
		types: ["Ghost", "Poison"],
		baseStats: {hp: 30, atk: 35, def: 30, spa: 100, spd: 35, spe: 80},
		abilities: {0: "Levitate"},
		heightm: 1.3,
		weightkg: 0.1,
		color: "Purple",
		evos: ["haunter"],
		eggGroups: ["Amorphous"],
	},
	haunter: {
		num: 93,
		species: "Haunter",
		types: ["Ghost", "Poison"],
		baseStats: {hp: 45, atk: 50, def: 45, spa: 115, spd: 55, spe: 95},
		abilities: {0: "Levitate"},
		heightm: 1.6,
		weightkg: 0.1,
		color: "Purple",
		prevo: "gastly",
		evoLevel: 25,
		evos: ["gengar"],
		eggGroups: ["Amorphous"],
	},
	gengar: {
		num: 94,
		species: "Gengar",
		types: ["Ghost", "Poison"],
		baseStats: {hp: 60, atk: 65, def: 60, spa: 130, spd: 75, spe: 110},
		abilities: {0: "Cursed Body"},
		heightm: 1.5,
		weightkg: 40.5,
		color: "Purple",
		prevo: "haunter",
		evoType: "trade",
		eggGroups: ["Amorphous"],
		otherFormes: ["gengarmega"],
	},
	gengarmega: {
		num: 94,
		species: "Gengar-Mega",
		baseSpecies: "Gengar",
		forme: "Mega",
		formeLetter: "M",
		types: ["Ghost", "Poison"],
		baseStats: {hp: 60, atk: 65, def: 80, spa: 170, spd: 95, spe: 130},
		abilities: {0: "Shadow Tag"},
		heightm: 1.4,
		weightkg: 40.5,
		color: "Purple",
		eggGroups: ["Amorphous"],
	},
	onix: {
		num: 95,
		species: "Onix",
		types: ["Rock", "Ground"],
		baseStats: {hp: 35, atk: 45, def: 160, spa: 30, spd: 45, spe: 70},
		abilities: {0: "Rock Head", 1: "Sturdy", H: "Weak Armor"},
		heightm: 8.8,
		weightkg: 210,
		color: "Gray",
		evos: ["steelix"],
		eggGroups: ["Mineral"],
	},
	drowzee: {
		num: 96,
		species: "Drowzee",
		types: ["Psychic"],
		baseStats: {hp: 60, atk: 48, def: 45, spa: 43, spd: 90, spe: 42},
		abilities: {0: "Insomnia", 1: "Forewarn", H: "Inner Focus"},
		heightm: 1,
		weightkg: 32.4,
		color: "Yellow",
		evos: ["hypno"],
		eggGroups: ["Human-Like"],
	},
	hypno: {
		num: 97,
		species: "Hypno",
		types: ["Psychic"],
		baseStats: {hp: 85, atk: 73, def: 70, spa: 73, spd: 115, spe: 67},
		abilities: {0: "Insomnia", 1: "Forewarn", H: "Inner Focus"},
		heightm: 1.6,
		weightkg: 75.6,
		color: "Yellow",
		prevo: "drowzee",
		evoLevel: 26,
		eggGroups: ["Human-Like"],
	},
	krabby: {
		num: 98,
		species: "Krabby",
		types: ["Water"],
		baseStats: {hp: 30, atk: 105, def: 90, spa: 25, spd: 25, spe: 50},
		abilities: {0: "Hyper Cutter", 1: "Shell Armor", H: "Sheer Force"},
		heightm: 0.4,
		weightkg: 6.5,
		color: "Red",
		evos: ["kingler"],
		eggGroups: ["Water 3"],
	},
	kingler: {
		num: 99,
		species: "Kingler",
		types: ["Water"],
		baseStats: {hp: 55, atk: 130, def: 115, spa: 50, spd: 50, spe: 75},
		abilities: {0: "Hyper Cutter", 1: "Shell Armor", H: "Sheer Force"},
		heightm: 1.3,
		weightkg: 60,
		color: "Red",
		prevo: "krabby",
		evoLevel: 28,
		eggGroups: ["Water 3"],
	},
	voltorb: {
		num: 100,
		species: "Voltorb",
		types: ["Electric"],
		gender: "N",
		baseStats: {hp: 40, atk: 30, def: 50, spa: 55, spd: 55, spe: 100},
		abilities: {0: "Soundproof", 1: "Static", H: "Aftermath"},
		heightm: 0.5,
		weightkg: 10.4,
		color: "Red",
		evos: ["electrode"],
		eggGroups: ["Mineral"],
	},
	electrode: {
		num: 101,
		species: "Electrode",
		types: ["Electric"],
		gender: "N",
		baseStats: {hp: 60, atk: 50, def: 70, spa: 80, spd: 80, spe: 150},
		abilities: {0: "Soundproof", 1: "Static", H: "Aftermath"},
		heightm: 1.2,
		weightkg: 66.6,
		color: "Red",
		prevo: "voltorb",
		evoLevel: 30,
		eggGroups: ["Mineral"],
	},
	exeggcute: {
		num: 102,
		species: "Exeggcute",
		types: ["Grass", "Psychic"],
		baseStats: {hp: 60, atk: 40, def: 80, spa: 60, spd: 45, spe: 40},
		abilities: {0: "Chlorophyll", H: "Harvest"},
		heightm: 0.4,
		weightkg: 2.5,
		color: "Pink",
		evos: ["exeggutor", "exeggutoralola"],
		eggGroups: ["Grass"],
	},
	exeggutor: {
		num: 103,
		species: "Exeggutor",
		types: ["Grass", "Psychic"],
		baseStats: {hp: 95, atk: 95, def: 85, spa: 125, spd: 75, spe: 55},
		abilities: {0: "Chlorophyll", H: "Harvest"},
		heightm: 2,
		weightkg: 120,
		color: "Yellow",
		prevo: "exeggcute",
		evoType: "stone",
		evoItem: "Leaf Stone",
		eggGroups: ["Grass"],
		otherFormes: ["exeggutoralola"],
	},
	exeggutoralola: {
		num: 103,
		species: "Exeggutor-Alola",
		baseSpecies: "Exeggutor",
		forme: "Alola",
		formeLetter: "A",
		types: ["Grass", "Dragon"],
		baseStats: {hp: 95, atk: 105, def: 85, spa: 125, spd: 75, spe: 45},
		abilities: {0: "Frisk", H: "Harvest"},
		heightm: 10.9,
		weightkg: 415.6,
		color: "Yellow",
		prevo: "exeggcute",
		evoType: "stone",
		evoItem: "Leaf Stone",
		eggGroups: ["Grass"],
	},
	cubone: {
		num: 104,
		species: "Cubone",
		types: ["Ground"],
		baseStats: {hp: 50, atk: 50, def: 95, spa: 40, spd: 50, spe: 35},
		abilities: {0: "Rock Head", 1: "Lightning Rod", H: "Battle Armor"},
		heightm: 0.4,
		weightkg: 6.5,
		color: "Brown",
		evos: ["marowak", "marowakalola"],
		eggGroups: ["Monster"],
	},
	marowak: {
		num: 105,
		species: "Marowak",
		types: ["Ground"],
		baseStats: {hp: 60, atk: 80, def: 110, spa: 50, spd: 80, spe: 45},
		abilities: {0: "Rock Head", 1: "Lightning Rod", H: "Battle Armor"},
		heightm: 1,
		weightkg: 45,
		color: "Brown",
		prevo: "cubone",
		evoLevel: 28,
		eggGroups: ["Monster"],
		otherFormes: ["marowakalola", "marowakalolatotem"],
	},
	marowakalola: {
		num: 105,
		species: "Marowak-Alola",
		baseSpecies: "Marowak",
		forme: "Alola",
		formeLetter: "A",
		types: ["Fire", "Ghost"],
		baseStats: {hp: 60, atk: 80, def: 110, spa: 50, spd: 80, spe: 45},
		abilities: {0: "Cursed Body", 1: "Lightning Rod", H: "Rock Head"},
		heightm: 1,
		weightkg: 34,
		color: "Purple",
		prevo: "cubone",
		evoLevel: 28,
		eggGroups: ["Monster"],
	},
	marowakalolatotem: {
		num: 105,
		species: "Marowak-Alola-Totem",
		baseSpecies: "Marowak",
		forme: "Alola-Totem",
		formeLetter: "T",
		types: ["Fire", "Ghost"],
		baseStats: {hp: 60, atk: 80, def: 110, spa: 50, spd: 80, spe: 45},
		abilities: {0: "Rock Head"},
		heightm: 1.7,
		weightkg: 98,
		color: "Purple",
		eggGroups: ["Monster"],
	},
	hitmonlee: {
		num: 106,
		species: "Hitmonlee",
		types: ["Fighting"],
		gender: "M",
		baseStats: {hp: 50, atk: 120, def: 53, spa: 35, spd: 110, spe: 87},
		abilities: {0: "Limber", 1: "Reckless", H: "Unburden"},
		heightm: 1.5,
		weightkg: 49.8,
		color: "Brown",
		prevo: "tyrogue",
		evoLevel: 20,
		eggGroups: ["Human-Like"],
	},
	hitmonchan: {
		num: 107,
		species: "Hitmonchan",
		types: ["Fighting"],
		gender: "M",
		baseStats: {hp: 50, atk: 105, def: 79, spa: 35, spd: 110, spe: 76},
		abilities: {0: "Keen Eye", 1: "Iron Fist", H: "Inner Focus"},
		heightm: 1.4,
		weightkg: 50.2,
		color: "Brown",
		prevo: "tyrogue",
		evoLevel: 20,
		eggGroups: ["Human-Like"],
	},
	lickitung: {
		num: 108,
		species: "Lickitung",
		types: ["Normal"],
		baseStats: {hp: 90, atk: 55, def: 75, spa: 60, spd: 75, spe: 30},
		abilities: {0: "Own Tempo", 1: "Oblivious", H: "Cloud Nine"},
		heightm: 1.2,
		weightkg: 65.5,
		color: "Pink",
		evos: ["lickilicky"],
		eggGroups: ["Monster"],
	},
	koffing: {
		num: 109,
		species: "Koffing",
		types: ["Poison"],
		baseStats: {hp: 40, atk: 65, def: 95, spa: 60, spd: 45, spe: 35},
		abilities: {0: "Levitate"},
		heightm: 0.6,
		weightkg: 1,
		color: "Purple",
		evos: ["weezing"],
		eggGroups: ["Amorphous"],
	},
	weezing: {
		num: 110,
		species: "Weezing",
		types: ["Poison"],
		baseStats: {hp: 65, atk: 90, def: 120, spa: 85, spd: 70, spe: 60},
		abilities: {0: "Levitate"},
		heightm: 1.2,
		weightkg: 9.5,
		color: "Purple",
		prevo: "koffing",
		evoLevel: 35,
		eggGroups: ["Amorphous"],
	},
	rhyhorn: {
		num: 111,
		species: "Rhyhorn",
		types: ["Ground", "Rock"],
		baseStats: {hp: 80, atk: 85, def: 95, spa: 30, spd: 30, spe: 25},
		abilities: {0: "Lightning Rod", 1: "Rock Head", H: "Reckless"},
		heightm: 1,
		weightkg: 115,
		color: "Gray",
		evos: ["rhydon"],
		eggGroups: ["Monster", "Field"],
	},
	rhydon: {
		num: 112,
		species: "Rhydon",
		types: ["Ground", "Rock"],
		baseStats: {hp: 105, atk: 130, def: 120, spa: 45, spd: 45, spe: 40},
		abilities: {0: "Lightning Rod", 1: "Rock Head", H: "Reckless"},
		heightm: 1.9,
		weightkg: 120,
		color: "Gray",
		prevo: "rhyhorn",
		evoLevel: 42,
		evos: ["rhyperior"],
		eggGroups: ["Monster", "Field"],
	},
	chansey: {
		num: 113,
		species: "Chansey",
		types: ["Normal"],
		gender: "F",
		baseStats: {hp: 250, atk: 5, def: 5, spa: 35, spd: 105, spe: 50},
		abilities: {0: "Natural Cure", 1: "Serene Grace", H: "Healer"},
		heightm: 1.1,
		weightkg: 34.6,
		color: "Pink",
		prevo: "happiny",
		evoType: "levelFriendship",
		evos: ["blissey"],
		eggGroups: ["Fairy"],
		canHatch: true,
	},
	tangela: {
		num: 114,
		species: "Tangela",
		types: ["Grass"],
		baseStats: {hp: 65, atk: 55, def: 115, spa: 100, spd: 40, spe: 60},
		abilities: {0: "Chlorophyll", 1: "Leaf Guard", H: "Regenerator"},
		heightm: 1,
		weightkg: 35,
		color: "Blue",
		evos: ["tangrowth"],
		eggGroups: ["Grass"],
	},
	kangaskhan: {
		num: 115,
		species: "Kangaskhan",
		types: ["Normal"],
		gender: "F",
		baseStats: {hp: 105, atk: 95, def: 80, spa: 40, spd: 80, spe: 90},
		abilities: {0: "Early Bird", 1: "Scrappy", H: "Inner Focus"},
		heightm: 2.2,
		weightkg: 80,
		color: "Brown",
		eggGroups: ["Monster"],
		otherFormes: ["kangaskhanmega"],
	},
	kangaskhanmega: {
		num: 115,
		species: "Kangaskhan-Mega",
		baseSpecies: "Kangaskhan",
		forme: "Mega",
		formeLetter: "M",
		types: ["Normal"],
		gender: "F",
		baseStats: {hp: 105, atk: 125, def: 100, spa: 60, spd: 100, spe: 100},
		abilities: {0: "Parental Bond"},
		heightm: 2.2,
		weightkg: 100,
		color: "Brown",
		eggGroups: ["Monster"],
	},
	horsea: {
		num: 116,
		species: "Horsea",
		types: ["Water"],
		baseStats: {hp: 30, atk: 40, def: 70, spa: 70, spd: 25, spe: 60},
		abilities: {0: "Swift Swim", 1: "Sniper", H: "Damp"},
		heightm: 0.4,
		weightkg: 8,
		color: "Blue",
		evos: ["seadra"],
		eggGroups: ["Water 1", "Dragon"],
	},
	seadra: {
		num: 117,
		species: "Seadra",
		types: ["Water"],
		baseStats: {hp: 55, atk: 65, def: 95, spa: 95, spd: 45, spe: 85},
		abilities: {0: "Poison Point", 1: "Sniper", H: "Damp"},
		heightm: 1.2,
		weightkg: 25,
		color: "Blue",
		prevo: "horsea",
		evoLevel: 32,
		evos: ["kingdra"],
		eggGroups: ["Water 1", "Dragon"],
	},
	goldeen: {
		num: 118,
		species: "Goldeen",
		types: ["Water"],
		baseStats: {hp: 45, atk: 67, def: 60, spa: 35, spd: 50, spe: 63},
		abilities: {0: "Swift Swim", 1: "Water Veil", H: "Lightning Rod"},
		heightm: 0.6,
		weightkg: 15,
		color: "Red",
		evos: ["seaking"],
		eggGroups: ["Water 2"],
	},
	seaking: {
		num: 119,
		species: "Seaking",
		types: ["Water"],
		baseStats: {hp: 80, atk: 92, def: 65, spa: 65, spd: 80, spe: 68},
		abilities: {0: "Swift Swim", 1: "Water Veil", H: "Lightning Rod"},
		heightm: 1.3,
		weightkg: 39,
		color: "Red",
		prevo: "goldeen",
		evoLevel: 33,
		eggGroups: ["Water 2"],
	},
	staryu: {
		num: 120,
		species: "Staryu",
		types: ["Water"],
		gender: "N",
		baseStats: {hp: 30, atk: 45, def: 55, spa: 70, spd: 55, spe: 85},
		abilities: {0: "Illuminate", 1: "Natural Cure", H: "Analytic"},
		heightm: 0.8,
		weightkg: 34.5,
		color: "Brown",
		evos: ["starmie"],
		eggGroups: ["Water 3"],
	},
	starmie: {
		num: 121,
		species: "Starmie",
		types: ["Water", "Psychic"],
		gender: "N",
		baseStats: {hp: 60, atk: 75, def: 85, spa: 100, spd: 85, spe: 115},
		abilities: {0: "Illuminate", 1: "Natural Cure", H: "Analytic"},
		heightm: 1.1,
		weightkg: 80,
		color: "Purple",
		prevo: "staryu",
		evoType: "stone",
		evoItem: "Water Stone",
		eggGroups: ["Water 3"],
	},
	mrmime: {
		num: 122,
		species: "Mr. Mime",
		types: ["Psychic", "Fairy"],
		baseStats: {hp: 40, atk: 45, def: 65, spa: 100, spd: 120, spe: 90},
		abilities: {0: "Soundproof", 1: "Filter", H: "Technician"},
		heightm: 1.3,
		weightkg: 54.5,
		color: "Pink",
		prevo: "mimejr",
		evoType: "levelMove",
		evoMove: "Mimic",
		eggGroups: ["Human-Like"],
		canHatch: true,
	},
	scyther: {
		num: 123,
		species: "Scyther",
		types: ["Bug", "Flying"],
		baseStats: {hp: 70, atk: 110, def: 80, spa: 55, spd: 80, spe: 105},
		abilities: {0: "Swarm", 1: "Technician", H: "Steadfast"},
		heightm: 1.5,
		weightkg: 56,
		color: "Green",
		evos: ["scizor"],
		eggGroups: ["Bug"],
	},
	jynx: {
		num: 124,
		species: "Jynx",
		types: ["Ice", "Psychic"],
		gender: "F",
		baseStats: {hp: 65, atk: 50, def: 35, spa: 115, spd: 95, spe: 95},
		abilities: {0: "Oblivious", 1: "Forewarn", H: "Dry Skin"},
		heightm: 1.4,
		weightkg: 40.6,
		color: "Red",
		prevo: "smoochum",
		evoLevel: 30,
		eggGroups: ["Human-Like"],
	},
	electabuzz: {
		num: 125,
		species: "Electabuzz",
		types: ["Electric"],
		genderRatio: {M: 0.75, F: 0.25},
		baseStats: {hp: 65, atk: 83, def: 57, spa: 95, spd: 85, spe: 105},
		abilities: {0: "Static", H: "Vital Spirit"},
		heightm: 1.1,
		weightkg: 30,
		color: "Yellow",
		prevo: "elekid",
		evoLevel: 30,
		evos: ["electivire"],
		eggGroups: ["Human-Like"],
	},
	magmar: {
		num: 126,
		species: "Magmar",
		types: ["Fire"],
		genderRatio: {M: 0.75, F: 0.25},
		baseStats: {hp: 65, atk: 95, def: 57, spa: 100, spd: 85, spe: 93},
		abilities: {0: "Flame Body", H: "Vital Spirit"},
		heightm: 1.3,
		weightkg: 44.5,
		color: "Red",
		prevo: "magby",
		evoLevel: 30,
		evos: ["magmortar"],
		eggGroups: ["Human-Like"],
	},
	pinsir: {
		num: 127,
		species: "Pinsir",
		types: ["Bug"],
		baseStats: {hp: 65, atk: 125, def: 100, spa: 55, spd: 70, spe: 85},
		abilities: {0: "Hyper Cutter", 1: "Mold Breaker", H: "Moxie"},
		heightm: 1.5,
		weightkg: 55,
		color: "Brown",
		eggGroups: ["Bug"],
		otherFormes: ["pinsirmega"],
	},
	pinsirmega: {
		num: 127,
		species: "Pinsir-Mega",
		baseSpecies: "Pinsir",
		forme: "Mega",
		formeLetter: "M",
		types: ["Bug", "Flying"],
		baseStats: {hp: 65, atk: 155, def: 120, spa: 65, spd: 90, spe: 105},
		abilities: {0: "Aerilate"},
		heightm: 1.7,
		weightkg: 59,
		color: "Brown",
		eggGroups: ["Bug"],
	},
	tauros: {
		num: 128,
		species: "Tauros",
		types: ["Normal"],
		gender: "M",
		baseStats: {hp: 75, atk: 100, def: 95, spa: 40, spd: 70, spe: 110},
		abilities: {0: "Intimidate", 1: "Anger Point", H: "Sheer Force"},
		heightm: 1.4,
		weightkg: 88.4,
		color: "Brown",
		eggGroups: ["Field"],
	},
	magikarp: {
		num: 129,
		species: "Magikarp",
		types: ["Water"],
		baseStats: {hp: 20, atk: 10, def: 55, spa: 15, spd: 20, spe: 80},
		abilities: {0: "Swift Swim", H: "Rattled"},
		heightm: 0.9,
		weightkg: 10,
		color: "Red",
		evos: ["gyarados"],
		eggGroups: ["Water 2", "Dragon"],
	},
	gyarados: {
		num: 130,
		species: "Gyarados",
		types: ["Water", "Flying"],
		baseStats: {hp: 95, atk: 125, def: 79, spa: 60, spd: 100, spe: 81},
		abilities: {0: "Intimidate", H: "Moxie"},
		heightm: 6.5,
		weightkg: 235,
		color: "Blue",
		prevo: "magikarp",
		evoLevel: 20,
		eggGroups: ["Water 2", "Dragon"],
		otherFormes: ["gyaradosmega"],
	},
	gyaradosmega: {
		num: 130,
		species: "Gyarados-Mega",
		baseSpecies: "Gyarados",
		forme: "Mega",
		formeLetter: "M",
		types: ["Water", "Dark"],
		baseStats: {hp: 95, atk: 155, def: 109, spa: 70, spd: 130, spe: 81},
		abilities: {0: "Mold Breaker"},
		heightm: 6.5,
		weightkg: 305,
		color: "Blue",
		eggGroups: ["Water 2", "Dragon"],
	},
	lapras: {
		num: 131,
		species: "Lapras",
		types: ["Water", "Ice"],
		baseStats: {hp: 130, atk: 85, def: 80, spa: 85, spd: 95, spe: 60},
		abilities: {0: "Water Absorb", 1: "Shell Armor", H: "Hydration"},
		heightm: 2.5,
		weightkg: 220,
		color: "Blue",
		eggGroups: ["Monster", "Water 1"],
	},
	ditto: {
		num: 132,
		species: "Ditto",
		types: ["Normal"],
		gender: "N",
		baseStats: {hp: 48, atk: 48, def: 48, spa: 48, spd: 48, spe: 48},
		abilities: {0: "Limber", H: "Imposter"},
		heightm: 0.3,
		weightkg: 4,
		color: "Purple",
		eggGroups: ["Ditto"],
	},
	eevee: {
		num: 133,
		species: "Eevee",
		types: ["Normal"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 55, atk: 55, def: 50, spa: 45, spd: 65, spe: 55},
		abilities: {0: "Run Away", 1: "Adaptability", H: "Anticipation"},
		heightm: 0.3,
		weightkg: 6.5,
		color: "Brown",
		evos: ["vaporeon", "jolteon", "flareon", "espeon", "umbreon", "leafeon", "glaceon", "sylveon"],
		eggGroups: ["Field"],
		otherFormes: ["eeveestarter"],
	},
	eeveestarter: {
		num: 133,
		species: "Eevee-Starter",
		baseSpecies: "Eevee",
		forme: "Starter",
		formeLetter: "S",
		types: ["Normal"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 65, atk: 75, def: 70, spa: 65, spd: 85, spe: 75},
		abilities: {0: "Run Away", 1: "Adaptability", H: "Anticipation"},
		heightm: 0.3,
		weightkg: 6.5,
		color: "Brown",
		eggGroups: ["Undiscovered"],
	},
	vaporeon: {
		num: 134,
		species: "Vaporeon",
		types: ["Water"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 130, atk: 65, def: 60, spa: 110, spd: 95, spe: 65},
		abilities: {0: "Water Absorb", H: "Hydration"},
		heightm: 1,
		weightkg: 29,
		color: "Blue",
		prevo: "eevee",
		evoType: "stone",
		evoItem: "Water Stone",
		eggGroups: ["Field"],
	},
	jolteon: {
		num: 135,
		species: "Jolteon",
		types: ["Electric"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 65, atk: 65, def: 60, spa: 110, spd: 95, spe: 130},
		abilities: {0: "Volt Absorb", H: "Quick Feet"},
		heightm: 0.8,
		weightkg: 24.5,
		color: "Yellow",
		prevo: "eevee",
		evoType: "stone",
		evoItem: "Thunder Stone",
		eggGroups: ["Field"],
	},
	flareon: {
		num: 136,
		species: "Flareon",
		types: ["Fire"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 65, atk: 130, def: 60, spa: 95, spd: 110, spe: 65},
		abilities: {0: "Flash Fire", H: "Guts"},
		heightm: 0.9,
		weightkg: 25,
		color: "Red",
		prevo: "eevee",
		evoType: "stone",
		evoItem: "Fire Stone",
		eggGroups: ["Field"],
	},
	porygon: {
		num: 137,
		species: "Porygon",
		types: ["Normal"],
		gender: "N",
		baseStats: {hp: 65, atk: 60, def: 70, spa: 85, spd: 75, spe: 40},
		abilities: {0: "Trace", 1: "Download", H: "Analytic"},
		heightm: 0.8,
		weightkg: 36.5,
		color: "Pink",
		evos: ["porygon2"],
		eggGroups: ["Mineral"],
	},
	omanyte: {
		num: 138,
		species: "Omanyte",
		types: ["Rock", "Water"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 35, atk: 40, def: 100, spa: 90, spd: 55, spe: 35},
		abilities: {0: "Swift Swim", 1: "Shell Armor", H: "Weak Armor"},
		heightm: 0.4,
		weightkg: 7.5,
		color: "Blue",
		evos: ["omastar"],
		eggGroups: ["Water 1", "Water 3"],
	},
	omastar: {
		num: 139,
		species: "Omastar",
		types: ["Rock", "Water"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 70, atk: 60, def: 125, spa: 115, spd: 70, spe: 55},
		abilities: {0: "Swift Swim", 1: "Shell Armor", H: "Weak Armor"},
		heightm: 1,
		weightkg: 35,
		color: "Blue",
		prevo: "omanyte",
		evoLevel: 40,
		eggGroups: ["Water 1", "Water 3"],
	},
	kabuto: {
		num: 140,
		species: "Kabuto",
		types: ["Rock", "Water"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 30, atk: 80, def: 90, spa: 55, spd: 45, spe: 55},
		abilities: {0: "Swift Swim", 1: "Battle Armor", H: "Weak Armor"},
		heightm: 0.5,
		weightkg: 11.5,
		color: "Brown",
		evos: ["kabutops"],
		eggGroups: ["Water 1", "Water 3"],
	},
	kabutops: {
		num: 141,
		species: "Kabutops",
		types: ["Rock", "Water"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 60, atk: 115, def: 105, spa: 65, spd: 70, spe: 80},
		abilities: {0: "Swift Swim", 1: "Battle Armor", H: "Weak Armor"},
		heightm: 1.3,
		weightkg: 40.5,
		color: "Brown",
		prevo: "kabuto",
		evoLevel: 40,
		eggGroups: ["Water 1", "Water 3"],
	},
	aerodactyl: {
		num: 142,
		species: "Aerodactyl",
		types: ["Rock", "Flying"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 80, atk: 105, def: 65, spa: 60, spd: 75, spe: 130},
		abilities: {0: "Rock Head", 1: "Pressure", H: "Unnerve"},
		heightm: 1.8,
		weightkg: 59,
		color: "Purple",
		eggGroups: ["Flying"],
		otherFormes: ["aerodactylmega"],
	},
	aerodactylmega: {
		num: 142,
		species: "Aerodactyl-Mega",
		baseSpecies: "Aerodactyl",
		forme: "Mega",
		formeLetter: "M",
		types: ["Rock", "Flying"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 80, atk: 135, def: 85, spa: 70, spd: 95, spe: 150},
		abilities: {0: "Tough Claws"},
		heightm: 2.1,
		weightkg: 79,
		color: "Purple",
		eggGroups: ["Flying"],
	},
	snorlax: {
		num: 143,
		species: "Snorlax",
		types: ["Normal"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 160, atk: 110, def: 65, spa: 65, spd: 110, spe: 30},
		abilities: {0: "Immunity", 1: "Thick Fat", H: "Gluttony"},
		heightm: 2.1,
		weightkg: 460,
		color: "Black",
		prevo: "munchlax",
		evoType: "levelFriendship",
		eggGroups: ["Monster"],
		canHatch: true,
	},
	articuno: {
		num: 144,
		species: "Articuno",
		types: ["Ice", "Flying"],
		gender: "N",
		baseStats: {hp: 90, atk: 85, def: 100, spa: 95, spd: 125, spe: 85},
		abilities: {0: "Pressure", H: "Snow Cloak"},
		heightm: 1.7,
		weightkg: 55.4,
		color: "Blue",
		eggGroups: ["Undiscovered"],
	},
	zapdos: {
		num: 145,
		species: "Zapdos",
		types: ["Electric", "Flying"],
		gender: "N",
		baseStats: {hp: 90, atk: 90, def: 85, spa: 125, spd: 90, spe: 100},
		abilities: {0: "Pressure", H: "Static"},
		heightm: 1.6,
		weightkg: 52.6,
		color: "Yellow",
		eggGroups: ["Undiscovered"],
	},
	moltres: {
		num: 146,
		species: "Moltres",
		types: ["Fire", "Flying"],
		gender: "N",
		baseStats: {hp: 90, atk: 100, def: 90, spa: 125, spd: 85, spe: 90},
		abilities: {0: "Pressure", H: "Flame Body"},
		heightm: 2,
		weightkg: 60,
		color: "Yellow",
		eggGroups: ["Undiscovered"],
	},
	dratini: {
		num: 147,
		species: "Dratini",
		types: ["Dragon"],
		baseStats: {hp: 41, atk: 64, def: 45, spa: 50, spd: 50, spe: 50},
		abilities: {0: "Shed Skin", H: "Marvel Scale"},
		heightm: 1.8,
		weightkg: 3.3,
		color: "Blue",
		evos: ["dragonair"],
		eggGroups: ["Water 1", "Dragon"],
	},
	dragonair: {
		num: 148,
		species: "Dragonair",
		types: ["Dragon"],
		baseStats: {hp: 61, atk: 84, def: 65, spa: 70, spd: 70, spe: 70},
		abilities: {0: "Shed Skin", H: "Marvel Scale"},
		heightm: 4,
		weightkg: 16.5,
		color: "Blue",
		prevo: "dratini",
		evoLevel: 30,
		evos: ["dragonite"],
		eggGroups: ["Water 1", "Dragon"],
	},
	dragonite: {
		num: 149,
		species: "Dragonite",
		types: ["Dragon", "Flying"],
		baseStats: {hp: 91, atk: 134, def: 95, spa: 100, spd: 100, spe: 80},
		abilities: {0: "Inner Focus", H: "Multiscale"},
		heightm: 2.2,
		weightkg: 210,
		color: "Brown",
		prevo: "dragonair",
		evoLevel: 55,
		eggGroups: ["Water 1", "Dragon"],
	},
	mewtwo: {
		num: 150,
		species: "Mewtwo",
		types: ["Psychic"],
		gender: "N",
		baseStats: {hp: 106, atk: 110, def: 90, spa: 154, spd: 90, spe: 130},
		abilities: {0: "Pressure", H: "Unnerve"},
		heightm: 2,
		weightkg: 122,
		color: "Purple",
		eggGroups: ["Undiscovered"],
		otherFormes: ["mewtwomegax", "mewtwomegay"],
	},
	mewtwomegax: {
		num: 150,
		species: "Mewtwo-Mega-X",
		baseSpecies: "Mewtwo",
		forme: "Mega-X",
		formeLetter: "M",
		types: ["Psychic", "Fighting"],
		gender: "N",
		baseStats: {hp: 106, atk: 190, def: 100, spa: 154, spd: 100, spe: 130},
		abilities: {0: "Steadfast"},
		heightm: 2.3,
		weightkg: 127,
		color: "Purple",
		eggGroups: ["Undiscovered"],
	},
	mewtwomegay: {
		num: 150,
		species: "Mewtwo-Mega-Y",
		baseSpecies: "Mewtwo",
		forme: "Mega-Y",
		formeLetter: "M",
		types: ["Psychic"],
		gender: "N",
		baseStats: {hp: 106, atk: 150, def: 70, spa: 194, spd: 120, spe: 140},
		abilities: {0: "Insomnia"},
		heightm: 1.5,
		weightkg: 33,
		color: "Purple",
		eggGroups: ["Undiscovered"],
	},
	mew: {
		num: 151,
		species: "Mew",
		types: ["Psychic"],
		gender: "N",
		baseStats: {hp: 100, atk: 100, def: 100, spa: 100, spd: 100, spe: 100},
		abilities: {0: "Synchronize"},
		heightm: 0.4,
		weightkg: 4,
		color: "Pink",
		eggGroups: ["Undiscovered"],
	},
	chikorita: {
		num: 152,
		species: "Chikorita",
		types: ["Grass"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 45, atk: 49, def: 65, spa: 49, spd: 65, spe: 45},
		abilities: {0: "Overgrow", H: "Leaf Guard"},
		heightm: 0.9,
		weightkg: 6.4,
		color: "Green",
		evos: ["bayleef"],
		eggGroups: ["Monster", "Grass"],
	},
	bayleef: {
		num: 153,
		species: "Bayleef",
		types: ["Grass"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 60, atk: 62, def: 80, spa: 63, spd: 80, spe: 60},
		abilities: {0: "Overgrow", H: "Leaf Guard"},
		heightm: 1.2,
		weightkg: 15.8,
		color: "Green",
		prevo: "chikorita",
		evoLevel: 16,
		evos: ["meganium"],
		eggGroups: ["Monster", "Grass"],
	},
	meganium: {
		num: 154,
		species: "Meganium",
		types: ["Grass"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 80, atk: 82, def: 100, spa: 83, spd: 100, spe: 80},
		abilities: {0: "Overgrow", H: "Leaf Guard"},
		heightm: 1.8,
		weightkg: 100.5,
		color: "Green",
		prevo: "bayleef",
		evoLevel: 32,
		eggGroups: ["Monster", "Grass"],
	},
	cyndaquil: {
		num: 155,
		species: "Cyndaquil",
		types: ["Fire"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 39, atk: 52, def: 43, spa: 60, spd: 50, spe: 65},
		abilities: {0: "Blaze", H: "Flash Fire"},
		heightm: 0.5,
		weightkg: 7.9,
		color: "Yellow",
		evos: ["quilava"],
		eggGroups: ["Field"],
	},
	quilava: {
		num: 156,
		species: "Quilava",
		types: ["Fire"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 58, atk: 64, def: 58, spa: 80, spd: 65, spe: 80},
		abilities: {0: "Blaze", H: "Flash Fire"},
		heightm: 0.9,
		weightkg: 19,
		color: "Yellow",
		prevo: "cyndaquil",
		evoLevel: 14,
		evos: ["typhlosion"],
		eggGroups: ["Field"],
	},
	typhlosion: {
		num: 157,
		species: "Typhlosion",
		types: ["Fire"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 78, atk: 84, def: 78, spa: 109, spd: 85, spe: 100},
		abilities: {0: "Blaze", H: "Flash Fire"},
		heightm: 1.7,
		weightkg: 79.5,
		color: "Yellow",
		prevo: "quilava",
		evoLevel: 36,
		eggGroups: ["Field"],
	},
	totodile: {
		num: 158,
		species: "Totodile",
		types: ["Water"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 50, atk: 65, def: 64, spa: 44, spd: 48, spe: 43},
		abilities: {0: "Torrent", H: "Sheer Force"},
		heightm: 0.6,
		weightkg: 9.5,
		color: "Blue",
		evos: ["croconaw"],
		eggGroups: ["Monster", "Water 1"],
	},
	croconaw: {
		num: 159,
		species: "Croconaw",
		types: ["Water"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 65, atk: 80, def: 80, spa: 59, spd: 63, spe: 58},
		abilities: {0: "Torrent", H: "Sheer Force"},
		heightm: 1.1,
		weightkg: 25,
		color: "Blue",
		prevo: "totodile",
		evoLevel: 18,
		evos: ["feraligatr"],
		eggGroups: ["Monster", "Water 1"],
	},
	feraligatr: {
		num: 160,
		species: "Feraligatr",
		types: ["Water"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 85, atk: 105, def: 100, spa: 79, spd: 83, spe: 78},
		abilities: {0: "Torrent", H: "Sheer Force"},
		heightm: 2.3,
		weightkg: 88.8,
		color: "Blue",
		prevo: "croconaw",
		evoLevel: 30,
		eggGroups: ["Monster", "Water 1"],
	},
	sentret: {
		num: 161,
		species: "Sentret",
		types: ["Normal"],
		baseStats: {hp: 35, atk: 46, def: 34, spa: 35, spd: 45, spe: 20},
		abilities: {0: "Run Away", 1: "Keen Eye", H: "Frisk"},
		heightm: 0.8,
		weightkg: 6,
		color: "Brown",
		evos: ["furret"],
		eggGroups: ["Field"],
	},
	furret: {
		num: 162,
		species: "Furret",
		types: ["Normal"],
		baseStats: {hp: 85, atk: 76, def: 64, spa: 45, spd: 55, spe: 90},
		abilities: {0: "Run Away", 1: "Keen Eye", H: "Frisk"},
		heightm: 1.8,
		weightkg: 32.5,
		color: "Brown",
		prevo: "sentret",
		evoLevel: 15,
		eggGroups: ["Field"],
	},
	hoothoot: {
		num: 163,
		species: "Hoothoot",
		types: ["Normal", "Flying"],
		baseStats: {hp: 60, atk: 30, def: 30, spa: 36, spd: 56, spe: 50},
		abilities: {0: "Insomnia", 1: "Keen Eye", H: "Tinted Lens"},
		heightm: 0.7,
		weightkg: 21.2,
		color: "Brown",
		evos: ["noctowl"],
		eggGroups: ["Flying"],
	},
	noctowl: {
		num: 164,
		species: "Noctowl",
		types: ["Normal", "Flying"],
		baseStats: {hp: 100, atk: 50, def: 50, spa: 86, spd: 96, spe: 70},
		abilities: {0: "Insomnia", 1: "Keen Eye", H: "Tinted Lens"},
		heightm: 1.6,
		weightkg: 40.8,
		color: "Brown",
		prevo: "hoothoot",
		evoLevel: 20,
		eggGroups: ["Flying"],
	},
	ledyba: {
		num: 165,
		species: "Ledyba",
		types: ["Bug", "Flying"],
		baseStats: {hp: 40, atk: 20, def: 30, spa: 40, spd: 80, spe: 55},
		abilities: {0: "Swarm", 1: "Early Bird", H: "Rattled"},
		heightm: 1,
		weightkg: 10.8,
		color: "Red",
		evos: ["ledian"],
		eggGroups: ["Bug"],
	},
	ledian: {
		num: 166,
		species: "Ledian",
		types: ["Bug", "Flying"],
		baseStats: {hp: 55, atk: 35, def: 50, spa: 55, spd: 110, spe: 85},
		abilities: {0: "Swarm", 1: "Early Bird", H: "Iron Fist"},
		heightm: 1.4,
		weightkg: 35.6,
		color: "Red",
		prevo: "ledyba",
		evoLevel: 18,
		eggGroups: ["Bug"],
	},
	spinarak: {
		num: 167,
		species: "Spinarak",
		types: ["Bug", "Poison"],
		baseStats: {hp: 40, atk: 60, def: 40, spa: 40, spd: 40, spe: 30},
		abilities: {0: "Swarm", 1: "Insomnia", H: "Sniper"},
		heightm: 0.5,
		weightkg: 8.5,
		color: "Green",
		evos: ["ariados"],
		eggGroups: ["Bug"],
	},
	ariados: {
		num: 168,
		species: "Ariados",
		types: ["Bug", "Poison"],
		baseStats: {hp: 70, atk: 90, def: 70, spa: 60, spd: 70, spe: 40},
		abilities: {0: "Swarm", 1: "Insomnia", H: "Sniper"},
		heightm: 1.1,
		weightkg: 33.5,
		color: "Red",
		prevo: "spinarak",
		evoLevel: 22,
		eggGroups: ["Bug"],
	},
	crobat: {
		num: 169,
		species: "Crobat",
		types: ["Poison", "Flying"],
		baseStats: {hp: 85, atk: 90, def: 80, spa: 70, spd: 80, spe: 130},
		abilities: {0: "Inner Focus", H: "Infiltrator"},
		heightm: 1.8,
		weightkg: 75,
		color: "Purple",
		prevo: "golbat",
		evoType: "levelFriendship",
		eggGroups: ["Flying"],
	},
	chinchou: {
		num: 170,
		species: "Chinchou",
		types: ["Water", "Electric"],
		baseStats: {hp: 75, atk: 38, def: 38, spa: 56, spd: 56, spe: 67},
		abilities: {0: "Volt Absorb", 1: "Illuminate", H: "Water Absorb"},
		heightm: 0.5,
		weightkg: 12,
		color: "Blue",
		evos: ["lanturn"],
		eggGroups: ["Water 2"],
	},
	lanturn: {
		num: 171,
		species: "Lanturn",
		types: ["Water", "Electric"],
		baseStats: {hp: 125, atk: 58, def: 58, spa: 76, spd: 76, spe: 67},
		abilities: {0: "Volt Absorb", 1: "Illuminate", H: "Water Absorb"},
		heightm: 1.2,
		weightkg: 22.5,
		color: "Blue",
		prevo: "chinchou",
		evoLevel: 27,
		eggGroups: ["Water 2"],
	},
	pichu: {
		num: 172,
		species: "Pichu",
		types: ["Electric"],
		baseStats: {hp: 20, atk: 40, def: 15, spa: 35, spd: 35, spe: 60},
		abilities: {0: "Static", H: "Lightning Rod"},
		heightm: 0.3,
		weightkg: 2,
		color: "Yellow",
		evos: ["pikachu"],
		eggGroups: ["Undiscovered"],
		canHatch: true,
		otherFormes: ["pichuspikyeared"],
	},
	pichuspikyeared: {
		num: 172,
		species: "Pichu-Spiky-eared",
		baseSpecies: "Pichu",
		forme: "Spiky-eared",
		formeLetter: "S",
		types: ["Electric"],
		baseStats: {hp: 20, atk: 40, def: 15, spa: 35, spd: 35, spe: 60},
		abilities: {0: "Static"},
		heightm: 0.3,
		weightkg: 2,
		color: "Yellow",
		eggGroups: ["Undiscovered"],
	},
	cleffa: {
		num: 173,
		species: "Cleffa",
		types: ["Fairy"],
		genderRatio: {M: 0.25, F: 0.75},
		baseStats: {hp: 50, atk: 25, def: 28, spa: 45, spd: 55, spe: 15},
		abilities: {0: "Cute Charm", 1: "Magic Guard", H: "Friend Guard"},
		heightm: 0.3,
		weightkg: 3,
		color: "Pink",
		evos: ["clefairy"],
		eggGroups: ["Undiscovered"],
		canHatch: true,
	},
	igglybuff: {
		num: 174,
		species: "Igglybuff",
		types: ["Normal", "Fairy"],
		genderRatio: {M: 0.25, F: 0.75},
		baseStats: {hp: 90, atk: 30, def: 15, spa: 40, spd: 20, spe: 15},
		abilities: {0: "Cute Charm", 1: "Competitive", H: "Friend Guard"},
		heightm: 0.3,
		weightkg: 1,
		color: "Pink",
		evos: ["jigglypuff"],
		eggGroups: ["Undiscovered"],
		canHatch: true,
	},
	togepi: {
		num: 175,
		species: "Togepi",
		types: ["Fairy"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 35, atk: 20, def: 65, spa: 40, spd: 65, spe: 20},
		abilities: {0: "Hustle", 1: "Serene Grace", H: "Super Luck"},
		heightm: 0.3,
		weightkg: 1.5,
		color: "White",
		evos: ["togetic"],
		eggGroups: ["Undiscovered"],
		canHatch: true,
	},
	togetic: {
		num: 176,
		species: "Togetic",
		types: ["Fairy", "Flying"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 55, atk: 40, def: 85, spa: 80, spd: 105, spe: 40},
		abilities: {0: "Hustle", 1: "Serene Grace", H: "Super Luck"},
		heightm: 0.6,
		weightkg: 3.2,
		color: "White",
		prevo: "togepi",
		evos: ["togekiss"],
		evoType: "levelFriendship",
		eggGroups: ["Flying", "Fairy"],
	},
	natu: {
		num: 177,
		species: "Natu",
		types: ["Psychic", "Flying"],
		baseStats: {hp: 40, atk: 50, def: 45, spa: 70, spd: 45, spe: 70},
		abilities: {0: "Synchronize", 1: "Early Bird", H: "Magic Bounce"},
		heightm: 0.2,
		weightkg: 2,
		color: "Green",
		evos: ["xatu"],
		eggGroups: ["Flying"],
	},
	xatu: {
		num: 178,
		species: "Xatu",
		types: ["Psychic", "Flying"],
		baseStats: {hp: 65, atk: 75, def: 70, spa: 95, spd: 70, spe: 95},
		abilities: {0: "Synchronize", 1: "Early Bird", H: "Magic Bounce"},
		heightm: 1.5,
		weightkg: 15,
		color: "Green",
		prevo: "natu",
		evoLevel: 25,
		eggGroups: ["Flying"],
	},
	mareep: {
		num: 179,
		species: "Mareep",
		types: ["Electric"],
		baseStats: {hp: 55, atk: 40, def: 40, spa: 65, spd: 45, spe: 35},
		abilities: {0: "Static", H: "Plus"},
		heightm: 0.6,
		weightkg: 7.8,
		color: "White",
		evos: ["flaaffy"],
		eggGroups: ["Monster", "Field"],
	},
	flaaffy: {
		num: 180,
		species: "Flaaffy",
		types: ["Electric"],
		baseStats: {hp: 70, atk: 55, def: 55, spa: 80, spd: 60, spe: 45},
		abilities: {0: "Static", H: "Plus"},
		heightm: 0.8,
		weightkg: 13.3,
		color: "Pink",
		prevo: "mareep",
		evoLevel: 15,
		evos: ["ampharos"],
		eggGroups: ["Monster", "Field"],
	},
	ampharos: {
		num: 181,
		species: "Ampharos",
		types: ["Electric"],
		baseStats: {hp: 90, atk: 75, def: 85, spa: 115, spd: 90, spe: 55},
		abilities: {0: "Static", H: "Plus"},
		heightm: 1.4,
		weightkg: 61.5,
		color: "Yellow",
		prevo: "flaaffy",
		evoLevel: 30,
		eggGroups: ["Monster", "Field"],
		otherFormes: ["ampharosmega"],
	},
	ampharosmega: {
		num: 181,
		species: "Ampharos-Mega",
		baseSpecies: "Ampharos",
		forme: "Mega",
		formeLetter: "M",
		types: ["Electric", "Dragon"],
		baseStats: {hp: 90, atk: 95, def: 105, spa: 165, spd: 110, spe: 45},
		abilities: {0: "Mold Breaker"},
		heightm: 1.4,
		weightkg: 61.5,
		color: "Yellow",
		eggGroups: ["Monster", "Field"],
	},
	bellossom: {
		num: 182,
		species: "Bellossom",
		types: ["Grass"],
		baseStats: {hp: 75, atk: 80, def: 95, spa: 90, spd: 100, spe: 50},
		abilities: {0: "Chlorophyll", H: "Healer"},
		heightm: 0.4,
		weightkg: 5.8,
		color: "Green",
		prevo: "gloom",
		evoType: "stone",
		evoItem: "Sun Stone",
		eggGroups: ["Grass"],
	},
	marill: {
		num: 183,
		species: "Marill",
		types: ["Water", "Fairy"],
		baseStats: {hp: 70, atk: 20, def: 50, spa: 20, spd: 50, spe: 40},
		abilities: {0: "Thick Fat", 1: "Huge Power", H: "Sap Sipper"},
		heightm: 0.4,
		weightkg: 8.5,
		color: "Blue",
		prevo: "azurill",
		evos: ["azumarill"],
		evoType: "levelFriendship",
		eggGroups: ["Water 1", "Fairy"],
		canHatch: true,
	},
	azumarill: {
		num: 184,
		species: "Azumarill",
		types: ["Water", "Fairy"],
		baseStats: {hp: 100, atk: 50, def: 80, spa: 60, spd: 80, spe: 50},
		abilities: {0: "Thick Fat", 1: "Huge Power", H: "Sap Sipper"},
		heightm: 0.8,
		weightkg: 28.5,
		color: "Blue",
		prevo: "marill",
		evoLevel: 18,
		eggGroups: ["Water 1", "Fairy"],
	},
	sudowoodo: {
		num: 185,
		species: "Sudowoodo",
		types: ["Rock"],
		baseStats: {hp: 70, atk: 100, def: 115, spa: 30, spd: 65, spe: 30},
		abilities: {0: "Sturdy", 1: "Rock Head", H: "Rattled"},
		heightm: 1.2,
		weightkg: 38,
		color: "Brown",
		prevo: "bonsly",
		evoType: "levelMove",
		evoMove: "Mimic",
		eggGroups: ["Mineral"],
		canHatch: true,
	},
	politoed: {
		num: 186,
		species: "Politoed",
		types: ["Water"],
		baseStats: {hp: 90, atk: 75, def: 75, spa: 90, spd: 100, spe: 70},
		abilities: {0: "Water Absorb", 1: "Damp", H: "Drizzle"},
		heightm: 1.1,
		weightkg: 33.9,
		color: "Green",
		prevo: "poliwhirl",
		evoType: "trade",
		eggGroups: ["Water 1"],
	},
	hoppip: {
		num: 187,
		species: "Hoppip",
		types: ["Grass", "Flying"],
		baseStats: {hp: 35, atk: 35, def: 40, spa: 35, spd: 55, spe: 50},
		abilities: {0: "Chlorophyll", 1: "Leaf Guard", H: "Infiltrator"},
		heightm: 0.4,
		weightkg: 0.5,
		color: "Pink",
		evos: ["skiploom"],
		eggGroups: ["Fairy", "Grass"],
	},
	skiploom: {
		num: 188,
		species: "Skiploom",
		types: ["Grass", "Flying"],
		baseStats: {hp: 55, atk: 45, def: 50, spa: 45, spd: 65, spe: 80},
		abilities: {0: "Chlorophyll", 1: "Leaf Guard", H: "Infiltrator"},
		heightm: 0.6,
		weightkg: 1,
		color: "Green",
		prevo: "hoppip",
		evoLevel: 18,
		evos: ["jumpluff"],
		eggGroups: ["Fairy", "Grass"],
	},
	jumpluff: {
		num: 189,
		species: "Jumpluff",
		types: ["Grass", "Flying"],
		baseStats: {hp: 75, atk: 55, def: 70, spa: 55, spd: 95, spe: 110},
		abilities: {0: "Chlorophyll", 1: "Leaf Guard", H: "Infiltrator"},
		heightm: 0.8,
		weightkg: 3,
		color: "Blue",
		prevo: "skiploom",
		evoLevel: 27,
		eggGroups: ["Fairy", "Grass"],
	},
	aipom: {
		num: 190,
		species: "Aipom",
		types: ["Normal"],
		baseStats: {hp: 55, atk: 70, def: 55, spa: 40, spd: 55, spe: 85},
		abilities: {0: "Run Away", 1: "Pickup", H: "Skill Link"},
		heightm: 0.8,
		weightkg: 11.5,
		color: "Purple",
		evos: ["ambipom"],
		eggGroups: ["Field"],
	},
	sunkern: {
		num: 191,
		species: "Sunkern",
		types: ["Grass"],
		baseStats: {hp: 30, atk: 30, def: 30, spa: 30, spd: 30, spe: 30},
		abilities: {0: "Chlorophyll", 1: "Solar Power", H: "Early Bird"},
		heightm: 0.3,
		weightkg: 1.8,
		color: "Yellow",
		evos: ["sunflora"],
		eggGroups: ["Grass"],
	},
	sunflora: {
		num: 192,
		species: "Sunflora",
		types: ["Grass"],
		baseStats: {hp: 75, atk: 75, def: 55, spa: 105, spd: 85, spe: 30},
		abilities: {0: "Chlorophyll", 1: "Solar Power", H: "Early Bird"},
		heightm: 0.8,
		weightkg: 8.5,
		color: "Yellow",
		prevo: "sunkern",
		evoType: "stone",
		evoItem: "Sun Stone",
		eggGroups: ["Grass"],
	},
	yanma: {
		num: 193,
		species: "Yanma",
		types: ["Bug", "Flying"],
		baseStats: {hp: 65, atk: 65, def: 45, spa: 75, spd: 45, spe: 95},
		abilities: {0: "Speed Boost", 1: "Compound Eyes", H: "Frisk"},
		heightm: 1.2,
		weightkg: 38,
		color: "Red",
		evos: ["yanmega"],
		eggGroups: ["Bug"],
	},
	wooper: {
		num: 194,
		species: "Wooper",
		types: ["Water", "Ground"],
		baseStats: {hp: 55, atk: 45, def: 45, spa: 25, spd: 25, spe: 15},
		abilities: {0: "Damp", 1: "Water Absorb", H: "Unaware"},
		heightm: 0.4,
		weightkg: 8.5,
		color: "Blue",
		evos: ["quagsire"],
		eggGroups: ["Water 1", "Field"],
	},
	quagsire: {
		num: 195,
		species: "Quagsire",
		types: ["Water", "Ground"],
		baseStats: {hp: 95, atk: 85, def: 85, spa: 65, spd: 65, spe: 35},
		abilities: {0: "Damp", 1: "Water Absorb", H: "Unaware"},
		heightm: 1.4,
		weightkg: 75,
		color: "Blue",
		prevo: "wooper",
		evoLevel: 20,
		eggGroups: ["Water 1", "Field"],
	},
	espeon: {
		num: 196,
		species: "Espeon",
		types: ["Psychic"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 65, atk: 65, def: 60, spa: 130, spd: 95, spe: 110},
		abilities: {0: "Synchronize", H: "Magic Bounce"},
		heightm: 0.9,
		weightkg: 26.5,
		color: "Purple",
		prevo: "eevee",
		evoType: "levelFriendship",
		evoCondition: "during the day",
		eggGroups: ["Field"],
	},
	umbreon: {
		num: 197,
		species: "Umbreon",
		types: ["Dark"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 95, atk: 65, def: 110, spa: 60, spd: 130, spe: 65},
		abilities: {0: "Synchronize", H: "Inner Focus"},
		heightm: 1,
		weightkg: 27,
		color: "Black",
		prevo: "eevee",
		evoType: "levelFriendship",
		evoCondition: "at night",
		eggGroups: ["Field"],
	},
	murkrow: {
		num: 198,
		species: "Murkrow",
		types: ["Dark", "Flying"],
		baseStats: {hp: 60, atk: 85, def: 42, spa: 85, spd: 42, spe: 91},
		abilities: {0: "Insomnia", 1: "Super Luck", H: "Prankster"},
		heightm: 0.5,
		weightkg: 2.1,
		color: "Black",
		evos: ["honchkrow"],
		eggGroups: ["Flying"],
	},
	slowking: {
		num: 199,
		species: "Slowking",
		types: ["Water", "Psychic"],
		baseStats: {hp: 95, atk: 75, def: 80, spa: 100, spd: 110, spe: 30},
		abilities: {0: "Oblivious", 1: "Own Tempo", H: "Regenerator"},
		heightm: 2,
		weightkg: 79.5,
		color: "Pink",
		prevo: "slowpoke",
		evoType: "trade",
		eggGroups: ["Monster", "Water 1"],
	},
	misdreavus: {
		num: 200,
		species: "Misdreavus",
		types: ["Ghost"],
		baseStats: {hp: 60, atk: 60, def: 60, spa: 85, spd: 85, spe: 85},
		abilities: {0: "Levitate"},
		heightm: 0.7,
		weightkg: 1,
		color: "Gray",
		evos: ["mismagius"],
		eggGroups: ["Amorphous"],
	},
	unown: {
		num: 201,
		species: "Unown",
		baseForme: "A",
		types: ["Psychic"],
		gender: "N",
		baseStats: {hp: 48, atk: 72, def: 48, spa: 72, spd: 48, spe: 48},
		abilities: {0: "Levitate"},
		heightm: 0.5,
		weightkg: 5,
		color: "Black",
		eggGroups: ["Undiscovered"],
		otherForms: ["unownb", "unownc", "unownd", "unowne", "unownf", "unowng", "unownh", "unowni", "unownj", "unownk", "unownl", "unownm", "unownn", "unowno", "unownp", "unownq", "unownr", "unowns", "unownt", "unownu", "unownv", "unownw", "unownx", "unowny", "unownz", "unownexclamation", "unownquestion"],
	},
	wobbuffet: {
		num: 202,
		species: "Wobbuffet",
		types: ["Psychic"],
		baseStats: {hp: 190, atk: 33, def: 58, spa: 33, spd: 58, spe: 33},
		abilities: {0: "Shadow Tag", H: "Telepathy"},
		heightm: 1.3,
		weightkg: 28.5,
		color: "Blue",
		prevo: "wynaut",
		evoLevel: 15,
		eggGroups: ["Amorphous"],
	},
	girafarig: {
		num: 203,
		species: "Girafarig",
		types: ["Normal", "Psychic"],
		baseStats: {hp: 70, atk: 80, def: 65, spa: 90, spd: 65, spe: 85},
		abilities: {0: "Inner Focus", 1: "Early Bird", H: "Sap Sipper"},
		heightm: 1.5,
		weightkg: 41.5,
		color: "Yellow",
		eggGroups: ["Field"],
	},
	pineco: {
		num: 204,
		species: "Pineco",
		types: ["Bug"],
		baseStats: {hp: 50, atk: 65, def: 90, spa: 35, spd: 35, spe: 15},
		abilities: {0: "Sturdy", H: "Overcoat"},
		heightm: 0.6,
		weightkg: 7.2,
		color: "Gray",
		evos: ["forretress"],
		eggGroups: ["Bug"],
	},
	forretress: {
		num: 205,
		species: "Forretress",
		types: ["Bug", "Steel"],
		baseStats: {hp: 75, atk: 90, def: 140, spa: 60, spd: 60, spe: 40},
		abilities: {0: "Sturdy", H: "Overcoat"},
		heightm: 1.2,
		weightkg: 125.8,
		color: "Purple",
		prevo: "pineco",
		evoLevel: 31,
		eggGroups: ["Bug"],
	},
	dunsparce: {
		num: 206,
		species: "Dunsparce",
		types: ["Normal"],
		baseStats: {hp: 100, atk: 70, def: 70, spa: 65, spd: 65, spe: 45},
		abilities: {0: "Serene Grace", 1: "Run Away", H: "Rattled"},
		heightm: 1.5,
		weightkg: 14,
		color: "Yellow",
		eggGroups: ["Field"],
	},
	gligar: {
		num: 207,
		species: "Gligar",
		types: ["Ground", "Flying"],
		baseStats: {hp: 65, atk: 75, def: 105, spa: 35, spd: 65, spe: 85},
		abilities: {0: "Hyper Cutter", 1: "Sand Veil", H: "Immunity"},
		heightm: 1.1,
		weightkg: 64.8,
		color: "Purple",
		evos: ["gliscor"],
		eggGroups: ["Bug"],
	},
	steelix: {
		num: 208,
		species: "Steelix",
		types: ["Steel", "Ground"],
		baseStats: {hp: 75, atk: 85, def: 200, spa: 55, spd: 65, spe: 30},
		abilities: {0: "Rock Head", 1: "Sturdy", H: "Sheer Force"},
		heightm: 9.2,
		weightkg: 400,
		color: "Gray",
		prevo: "onix",
		evoType: "trade",
		eggGroups: ["Mineral"],
		otherFormes: ["steelixmega"],
	},
	steelixmega: {
		num: 208,
		species: "Steelix-Mega",
		baseSpecies: "Steelix",
		forme: "Mega",
		formeLetter: "M",
		types: ["Steel", "Ground"],
		baseStats: {hp: 75, atk: 125, def: 230, spa: 55, spd: 95, spe: 30},
		abilities: {0: "Sand Force"},
		heightm: 10.5,
		weightkg: 740,
		color: "Gray",
		eggGroups: ["Mineral"],
	},
	snubbull: {
		num: 209,
		species: "Snubbull",
		types: ["Fairy"],
		genderRatio: {M: 0.25, F: 0.75},
		baseStats: {hp: 60, atk: 80, def: 50, spa: 40, spd: 40, spe: 30},
		abilities: {0: "Intimidate", 1: "Run Away", H: "Rattled"},
		heightm: 0.6,
		weightkg: 7.8,
		color: "Pink",
		evos: ["granbull"],
		eggGroups: ["Field", "Fairy"],
	},
	granbull: {
		num: 210,
		species: "Granbull",
		types: ["Fairy"],
		genderRatio: {M: 0.25, F: 0.75},
		baseStats: {hp: 90, atk: 120, def: 75, spa: 60, spd: 60, spe: 45},
		abilities: {0: "Intimidate", 1: "Quick Feet", H: "Rattled"},
		heightm: 1.4,
		weightkg: 48.7,
		color: "Purple",
		prevo: "snubbull",
		evoLevel: 23,
		eggGroups: ["Field", "Fairy"],
	},
	qwilfish: {
		num: 211,
		species: "Qwilfish",
		types: ["Water", "Poison"],
		baseStats: {hp: 65, atk: 95, def: 85, spa: 55, spd: 55, spe: 85},
		abilities: {0: "Poison Point", 1: "Swift Swim", H: "Intimidate"},
		heightm: 0.5,
		weightkg: 3.9,
		color: "Gray",
		eggGroups: ["Water 2"],
	},
	scizor: {
		num: 212,
		species: "Scizor",
		types: ["Bug", "Steel"],
		baseStats: {hp: 70, atk: 130, def: 100, spa: 55, spd: 80, spe: 65},
		abilities: {0: "Swarm", 1: "Technician", H: "Light Metal"},
		heightm: 1.8,
		weightkg: 118,
		color: "Red",
		prevo: "scyther",
		evoType: "trade",
		eggGroups: ["Bug"],
		otherFormes: ["scizormega"],
	},
	scizormega: {
		num: 212,
		species: "Scizor-Mega",
		baseSpecies: "Scizor",
		forme: "Mega",
		formeLetter: "M",
		types: ["Bug", "Steel"],
		baseStats: {hp: 70, atk: 150, def: 140, spa: 65, spd: 100, spe: 75},
		abilities: {0: "Technician"},
		heightm: 2,
		weightkg: 125,
		color: "Red",
		eggGroups: ["Bug"],
	},
	shuckle: {
		num: 213,
		species: "Shuckle",
		types: ["Bug", "Rock"],
		baseStats: {hp: 20, atk: 10, def: 230, spa: 10, spd: 230, spe: 5},
		abilities: {0: "Sturdy", 1: "Gluttony", H: "Contrary"},
		heightm: 0.6,
		weightkg: 20.5,
		color: "Yellow",
		eggGroups: ["Bug"],
	},
	heracross: {
		num: 214,
		species: "Heracross",
		types: ["Bug", "Fighting"],
		baseStats: {hp: 80, atk: 125, def: 75, spa: 40, spd: 95, spe: 85},
		abilities: {0: "Swarm", 1: "Guts", H: "Moxie"},
		heightm: 1.5,
		weightkg: 54,
		color: "Blue",
		eggGroups: ["Bug"],
		otherFormes: ["heracrossmega"],
	},
	heracrossmega: {
		num: 214,
		species: "Heracross-Mega",
		baseSpecies: "Heracross",
		forme: "Mega",
		formeLetter: "M",
		types: ["Bug", "Fighting"],
		baseStats: {hp: 80, atk: 185, def: 115, spa: 40, spd: 105, spe: 75},
		abilities: {0: "Skill Link"},
		heightm: 1.7,
		weightkg: 62.5,
		color: "Blue",
		eggGroups: ["Bug"],
	},
	sneasel: {
		num: 215,
		species: "Sneasel",
		types: ["Dark", "Ice"],
		baseStats: {hp: 55, atk: 95, def: 55, spa: 35, spd: 75, spe: 115},
		abilities: {0: "Inner Focus", 1: "Keen Eye", H: "Pickpocket"},
		heightm: 0.9,
		weightkg: 28,
		color: "Black",
		evos: ["weavile"],
		eggGroups: ["Field"],
	},
	teddiursa: {
		num: 216,
		species: "Teddiursa",
		types: ["Normal"],
		baseStats: {hp: 60, atk: 80, def: 50, spa: 50, spd: 50, spe: 40},
		abilities: {0: "Pickup", 1: "Quick Feet", H: "Honey Gather"},
		heightm: 0.6,
		weightkg: 8.8,
		color: "Brown",
		evos: ["ursaring"],
		eggGroups: ["Field"],
	},
	ursaring: {
		num: 217,
		species: "Ursaring",
		types: ["Normal"],
		baseStats: {hp: 90, atk: 130, def: 75, spa: 75, spd: 75, spe: 55},
		abilities: {0: "Guts", 1: "Quick Feet", H: "Unnerve"},
		heightm: 1.8,
		weightkg: 125.8,
		color: "Brown",
		prevo: "teddiursa",
		evoLevel: 30,
		eggGroups: ["Field"],
	},
	slugma: {
		num: 218,
		species: "Slugma",
		types: ["Fire"],
		baseStats: {hp: 40, atk: 40, def: 40, spa: 70, spd: 40, spe: 20},
		abilities: {0: "Magma Armor", 1: "Flame Body", H: "Weak Armor"},
		heightm: 0.7,
		weightkg: 35,
		color: "Red",
		evos: ["magcargo"],
		eggGroups: ["Amorphous"],
	},
	magcargo: {
		num: 219,
		species: "Magcargo",
		types: ["Fire", "Rock"],
		baseStats: {hp: 60, atk: 50, def: 120, spa: 90, spd: 80, spe: 30},
		abilities: {0: "Magma Armor", 1: "Flame Body", H: "Weak Armor"},
		heightm: 0.8,
		weightkg: 55,
		color: "Red",
		prevo: "slugma",
		evoLevel: 38,
		eggGroups: ["Amorphous"],
	},
	swinub: {
		num: 220,
		species: "Swinub",
		types: ["Ice", "Ground"],
		baseStats: {hp: 50, atk: 50, def: 40, spa: 30, spd: 30, spe: 50},
		abilities: {0: "Oblivious", 1: "Snow Cloak", H: "Thick Fat"},
		heightm: 0.4,
		weightkg: 6.5,
		color: "Brown",
		evos: ["piloswine"],
		eggGroups: ["Field"],
	},
	piloswine: {
		num: 221,
		species: "Piloswine",
		types: ["Ice", "Ground"],
		baseStats: {hp: 100, atk: 100, def: 80, spa: 60, spd: 60, spe: 50},
		abilities: {0: "Oblivious", 1: "Snow Cloak", H: "Thick Fat"},
		heightm: 1.1,
		weightkg: 55.8,
		color: "Brown",
		prevo: "swinub",
		evoLevel: 33,
		evos: ["mamoswine"],
		eggGroups: ["Field"],
	},
	corsola: {
		num: 222,
		species: "Corsola",
		types: ["Water", "Rock"],
		genderRatio: {M: 0.25, F: 0.75},
		baseStats: {hp: 65, atk: 55, def: 95, spa: 65, spd: 95, spe: 35},
		abilities: {0: "Hustle", 1: "Natural Cure", H: "Regenerator"},
		heightm: 0.6,
		weightkg: 5,
		color: "Pink",
		eggGroups: ["Water 1", "Water 3"],
	},
	remoraid: {
		num: 223,
		species: "Remoraid",
		types: ["Water"],
		baseStats: {hp: 35, atk: 65, def: 35, spa: 65, spd: 35, spe: 65},
		abilities: {0: "Hustle", 1: "Sniper", H: "Moody"},
		heightm: 0.6,
		weightkg: 12,
		color: "Gray",
		evos: ["octillery"],
		eggGroups: ["Water 1", "Water 2"],
	},
	octillery: {
		num: 224,
		species: "Octillery",
		types: ["Water"],
		baseStats: {hp: 75, atk: 105, def: 75, spa: 105, spd: 75, spe: 45},
		abilities: {0: "Suction Cups", 1: "Sniper", H: "Moody"},
		heightm: 0.9,
		weightkg: 28.5,
		color: "Red",
		prevo: "remoraid",
		evoLevel: 25,
		eggGroups: ["Water 1", "Water 2"],
	},
	delibird: {
		num: 225,
		species: "Delibird",
		types: ["Ice", "Flying"],
		baseStats: {hp: 45, atk: 55, def: 45, spa: 65, spd: 45, spe: 75},
		abilities: {0: "Vital Spirit", 1: "Hustle", H: "Insomnia"},
		heightm: 0.9,
		weightkg: 16,
		color: "Red",
		eggGroups: ["Water 1", "Field"],
	},
	mantine: {
		num: 226,
		species: "Mantine",
		types: ["Water", "Flying"],
		baseStats: {hp: 85, atk: 40, def: 70, spa: 80, spd: 140, spe: 70},
		abilities: {0: "Swift Swim", 1: "Water Absorb", H: "Water Veil"},
		heightm: 2.1,
		weightkg: 220,
		color: "Purple",
		prevo: "mantyke",
		evoType: "levelExtra",
		evoCondition: "with a Remoraid in party",
		eggGroups: ["Water 1"],
		canHatch: true,
	},
	skarmory: {
		num: 227,
		species: "Skarmory",
		types: ["Steel", "Flying"],
		baseStats: {hp: 65, atk: 80, def: 140, spa: 40, spd: 70, spe: 70},
		abilities: {0: "Keen Eye", 1: "Sturdy", H: "Weak Armor"},
		heightm: 1.7,
		weightkg: 50.5,
		color: "Gray",
		eggGroups: ["Flying"],
	},
	houndour: {
		num: 228,
		species: "Houndour",
		types: ["Dark", "Fire"],
		baseStats: {hp: 45, atk: 60, def: 30, spa: 80, spd: 50, spe: 65},
		abilities: {0: "Early Bird", 1: "Flash Fire", H: "Unnerve"},
		heightm: 0.6,
		weightkg: 10.8,
		color: "Black",
		evos: ["houndoom"],
		eggGroups: ["Field"],
	},
	houndoom: {
		num: 229,
		species: "Houndoom",
		types: ["Dark", "Fire"],
		baseStats: {hp: 75, atk: 90, def: 50, spa: 110, spd: 80, spe: 95},
		abilities: {0: "Early Bird", 1: "Flash Fire", H: "Unnerve"},
		heightm: 1.4,
		weightkg: 35,
		color: "Black",
		prevo: "houndour",
		evoLevel: 24,
		eggGroups: ["Field"],
		otherFormes: ["houndoommega"],
	},
	houndoommega: {
		num: 229,
		species: "Houndoom-Mega",
		baseSpecies: "Houndoom",
		forme: "Mega",
		formeLetter: "M",
		types: ["Dark", "Fire"],
		baseStats: {hp: 75, atk: 90, def: 90, spa: 140, spd: 90, spe: 115},
		abilities: {0: "Solar Power"},
		heightm: 1.9,
		weightkg: 49.5,
		color: "Black",
		eggGroups: ["Field"],
	},
	kingdra: {
		num: 230,
		species: "Kingdra",
		types: ["Water", "Dragon"],
		baseStats: {hp: 75, atk: 95, def: 95, spa: 95, spd: 95, spe: 85},
		abilities: {0: "Swift Swim", 1: "Sniper", H: "Damp"},
		heightm: 1.8,
		weightkg: 152,
		color: "Blue",
		prevo: "seadra",
		evoType: "trade",
		eggGroups: ["Water 1", "Dragon"],
	},
	phanpy: {
		num: 231,
		species: "Phanpy",
		types: ["Ground"],
		baseStats: {hp: 90, atk: 60, def: 60, spa: 40, spd: 40, spe: 40},
		abilities: {0: "Pickup", H: "Sand Veil"},
		heightm: 0.5,
		weightkg: 33.5,
		color: "Blue",
		evos: ["donphan"],
		eggGroups: ["Field"],
	},
	donphan: {
		num: 232,
		species: "Donphan",
		types: ["Ground"],
		baseStats: {hp: 90, atk: 120, def: 120, spa: 60, spd: 60, spe: 50},
		abilities: {0: "Sturdy", H: "Sand Veil"},
		heightm: 1.1,
		weightkg: 120,
		color: "Gray",
		prevo: "phanpy",
		evoLevel: 25,
		eggGroups: ["Field"],
	},
	porygon2: {
		num: 233,
		species: "Porygon2",
		types: ["Normal"],
		gender: "N",
		baseStats: {hp: 85, atk: 80, def: 90, spa: 105, spd: 95, spe: 60},
		abilities: {0: "Trace", 1: "Download", H: "Analytic"},
		heightm: 0.6,
		weightkg: 32.5,
		color: "Red",
		prevo: "porygon",
		evoType: "trade",
		evos: ["porygonz"],
		eggGroups: ["Mineral"],
	},
	stantler: {
		num: 234,
		species: "Stantler",
		types: ["Normal"],
		baseStats: {hp: 73, atk: 95, def: 62, spa: 85, spd: 65, spe: 85},
		abilities: {0: "Intimidate", 1: "Frisk", H: "Sap Sipper"},
		heightm: 1.4,
		weightkg: 71.2,
		color: "Brown",
		eggGroups: ["Field"],
	},
	smeargle: {
		num: 235,
		species: "Smeargle",
		types: ["Normal"],
		baseStats: {hp: 55, atk: 20, def: 35, spa: 20, spd: 45, spe: 75},
		abilities: {0: "Own Tempo", 1: "Technician", H: "Moody"},
		heightm: 1.2,
		weightkg: 58,
		color: "White",
		eggGroups: ["Field"],
	},
	tyrogue: {
		num: 236,
		species: "Tyrogue",
		types: ["Fighting"],
		gender: "M",
		baseStats: {hp: 35, atk: 35, def: 35, spa: 35, spd: 35, spe: 35},
		abilities: {0: "Guts", 1: "Steadfast", H: "Vital Spirit"},
		heightm: 0.7,
		weightkg: 21,
		color: "Purple",
		evos: ["hitmonlee", "hitmonchan", "hitmontop"],
		eggGroups: ["Undiscovered"],
		canHatch: true,
	},
	hitmontop: {
		num: 237,
		species: "Hitmontop",
		types: ["Fighting"],
		gender: "M",
		baseStats: {hp: 50, atk: 95, def: 95, spa: 35, spd: 110, spe: 70},
		abilities: {0: "Intimidate", 1: "Technician", H: "Steadfast"},
		heightm: 1.4,
		weightkg: 48,
		color: "Brown",
		prevo: "tyrogue",
		evoLevel: 20,
		eggGroups: ["Human-Like"],
	},
	smoochum: {
		num: 238,
		species: "Smoochum",
		types: ["Ice", "Psychic"],
		gender: "F",
		baseStats: {hp: 45, atk: 30, def: 15, spa: 85, spd: 65, spe: 65},
		abilities: {0: "Oblivious", 1: "Forewarn", H: "Hydration"},
		heightm: 0.4,
		weightkg: 6,
		color: "Pink",
		evos: ["jynx"],
		eggGroups: ["Undiscovered"],
		canHatch: true,
	},
	elekid: {
		num: 239,
		species: "Elekid",
		types: ["Electric"],
		genderRatio: {M: 0.75, F: 0.25},
		baseStats: {hp: 45, atk: 63, def: 37, spa: 65, spd: 55, spe: 95},
		abilities: {0: "Static", H: "Vital Spirit"},
		heightm: 0.6,
		weightkg: 23.5,
		color: "Yellow",
		evos: ["electabuzz"],
		eggGroups: ["Undiscovered"],
		canHatch: true,
	},
	magby: {
		num: 240,
		species: "Magby",
		types: ["Fire"],
		genderRatio: {M: 0.75, F: 0.25},
		baseStats: {hp: 45, atk: 75, def: 37, spa: 70, spd: 55, spe: 83},
		abilities: {0: "Flame Body", H: "Vital Spirit"},
		heightm: 0.7,
		weightkg: 21.4,
		color: "Red",
		evos: ["magmar"],
		eggGroups: ["Undiscovered"],
		canHatch: true,
	},
	miltank: {
		num: 241,
		species: "Miltank",
		types: ["Normal"],
		gender: "F",
		baseStats: {hp: 95, atk: 80, def: 105, spa: 40, spd: 70, spe: 100},
		abilities: {0: "Thick Fat", 1: "Scrappy", H: "Sap Sipper"},
		heightm: 1.2,
		weightkg: 75.5,
		color: "Pink",
		eggGroups: ["Field"],
	},
	blissey: {
		num: 242,
		species: "Blissey",
		types: ["Normal"],
		gender: "F",
		baseStats: {hp: 255, atk: 10, def: 10, spa: 75, spd: 135, spe: 55},
		abilities: {0: "Natural Cure", 1: "Serene Grace", H: "Healer"},
		heightm: 1.5,
		weightkg: 46.8,
		color: "Pink",
		prevo: "chansey",
		evoType: "levelFriendship",
		eggGroups: ["Fairy"],
	},
	raikou: {
		num: 243,
		species: "Raikou",
		types: ["Electric"],
		gender: "N",
		baseStats: {hp: 90, atk: 85, def: 75, spa: 115, spd: 100, spe: 115},
		abilities: {0: "Pressure", H: "Inner Focus"},
		heightm: 1.9,
		weightkg: 178,
		color: "Yellow",
		eggGroups: ["Undiscovered"],
	},
	entei: {
		num: 244,
		species: "Entei",
		types: ["Fire"],
		gender: "N",
		baseStats: {hp: 115, atk: 115, def: 85, spa: 90, spd: 75, spe: 100},
		abilities: {0: "Pressure", H: "Inner Focus"},
		heightm: 2.1,
		weightkg: 198,
		color: "Brown",
		eggGroups: ["Undiscovered"],
	},
	suicune: {
		num: 245,
		species: "Suicune",
		types: ["Water"],
		gender: "N",
		baseStats: {hp: 100, atk: 75, def: 115, spa: 90, spd: 115, spe: 85},
		abilities: {0: "Pressure", H: "Inner Focus"},
		heightm: 2,
		weightkg: 187,
		color: "Blue",
		eggGroups: ["Undiscovered"],
	},
	larvitar: {
		num: 246,
		species: "Larvitar",
		types: ["Rock", "Ground"],
		baseStats: {hp: 50, atk: 64, def: 50, spa: 45, spd: 50, spe: 41},
		abilities: {0: "Guts", H: "Sand Veil"},
		heightm: 0.6,
		weightkg: 72,
		color: "Green",
		evos: ["pupitar"],
		eggGroups: ["Monster"],
	},
	pupitar: {
		num: 247,
		species: "Pupitar",
		types: ["Rock", "Ground"],
		baseStats: {hp: 70, atk: 84, def: 70, spa: 65, spd: 70, spe: 51},
		abilities: {0: "Shed Skin"},
		heightm: 1.2,
		weightkg: 152,
		color: "Gray",
		prevo: "larvitar",
		evoLevel: 30,
		evos: ["tyranitar"],
		eggGroups: ["Monster"],
	},
	tyranitar: {
		num: 248,
		species: "Tyranitar",
		types: ["Rock", "Dark"],
		baseStats: {hp: 100, atk: 134, def: 110, spa: 95, spd: 100, spe: 61},
		abilities: {0: "Sand Stream", H: "Unnerve"},
		heightm: 2,
		weightkg: 202,
		color: "Green",
		prevo: "pupitar",
		evoLevel: 55,
		eggGroups: ["Monster"],
		otherFormes: ["tyranitarmega"],
	},
	tyranitarmega: {
		num: 248,
		species: "Tyranitar-Mega",
		baseSpecies: "Tyranitar",
		forme: "Mega",
		formeLetter: "M",
		types: ["Rock", "Dark"],
		baseStats: {hp: 100, atk: 164, def: 150, spa: 95, spd: 120, spe: 71},
		abilities: {0: "Sand Stream"},
		heightm: 2.5,
		weightkg: 255,
		color: "Green",
		eggGroups: ["Monster"],
	},
	lugia: {
		num: 249,
		species: "Lugia",
		types: ["Psychic", "Flying"],
		gender: "N",
		baseStats: {hp: 106, atk: 90, def: 130, spa: 90, spd: 154, spe: 110},
		abilities: {0: "Pressure", H: "Multiscale"},
		heightm: 5.2,
		weightkg: 216,
		color: "White",
		eggGroups: ["Undiscovered"],
	},
	hooh: {
		num: 250,
		species: "Ho-Oh",
		types: ["Fire", "Flying"],
		gender: "N",
		baseStats: {hp: 106, atk: 130, def: 90, spa: 110, spd: 154, spe: 90},
		abilities: {0: "Pressure", H: "Regenerator"},
		heightm: 3.8,
		weightkg: 199,
		color: "Red",
		eggGroups: ["Undiscovered"],
	},
	celebi: {
		num: 251,
		species: "Celebi",
		types: ["Psychic", "Grass"],
		gender: "N",
		baseStats: {hp: 100, atk: 100, def: 100, spa: 100, spd: 100, spe: 100},
		abilities: {0: "Natural Cure"},
		heightm: 0.6,
		weightkg: 5,
		color: "Green",
		eggGroups: ["Undiscovered"],
	},
	treecko: {
		num: 252,
		species: "Treecko",
		types: ["Grass"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 40, atk: 45, def: 35, spa: 65, spd: 55, spe: 70},
		abilities: {0: "Overgrow", H: "Unburden"},
		heightm: 0.5,
		weightkg: 5,
		color: "Green",
		evos: ["grovyle"],
		eggGroups: ["Monster", "Dragon"],
	},
	grovyle: {
		num: 253,
		species: "Grovyle",
		types: ["Grass"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 50, atk: 65, def: 45, spa: 85, spd: 65, spe: 95},
		abilities: {0: "Overgrow", H: "Unburden"},
		heightm: 0.9,
		weightkg: 21.6,
		color: "Green",
		prevo: "treecko",
		evoLevel: 16,
		evos: ["sceptile"],
		eggGroups: ["Monster", "Dragon"],
	},
	sceptile: {
		num: 254,
		species: "Sceptile",
		types: ["Grass"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 70, atk: 85, def: 65, spa: 105, spd: 85, spe: 120},
		abilities: {0: "Overgrow", H: "Unburden"},
		heightm: 1.7,
		weightkg: 52.2,
		color: "Green",
		prevo: "grovyle",
		evoLevel: 36,
		eggGroups: ["Monster", "Dragon"],
		otherFormes: ["sceptilemega"],
	},
	sceptilemega: {
		num: 254,
		species: "Sceptile-Mega",
		baseSpecies: "Sceptile",
		forme: "Mega",
		formeLetter: "M",
		types: ["Grass", "Dragon"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 70, atk: 110, def: 75, spa: 145, spd: 85, spe: 145},
		abilities: {0: "Lightning Rod"},
		heightm: 1.9,
		weightkg: 55.2,
		color: "Green",
		eggGroups: ["Monster", "Dragon"],
	},
	torchic: {
		num: 255,
		species: "Torchic",
		types: ["Fire"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 45, atk: 60, def: 40, spa: 70, spd: 50, spe: 45},
		abilities: {0: "Blaze", H: "Speed Boost"},
		heightm: 0.4,
		weightkg: 2.5,
		color: "Red",
		evos: ["combusken"],
		eggGroups: ["Field"],
	},
	combusken: {
		num: 256,
		species: "Combusken",
		types: ["Fire", "Fighting"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 60, atk: 85, def: 60, spa: 85, spd: 60, spe: 55},
		abilities: {0: "Blaze", H: "Speed Boost"},
		heightm: 0.9,
		weightkg: 19.5,
		color: "Red",
		prevo: "torchic",
		evoLevel: 16,
		evos: ["blaziken"],
		eggGroups: ["Field"],
	},
	blaziken: {
		num: 257,
		species: "Blaziken",
		types: ["Fire", "Fighting"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 80, atk: 120, def: 70, spa: 110, spd: 70, spe: 80},
		abilities: {0: "Blaze", H: "Speed Boost"},
		heightm: 1.9,
		weightkg: 52,
		color: "Red",
		prevo: "combusken",
		evoLevel: 36,
		eggGroups: ["Field"],
		otherFormes: ["blazikenmega"],
	},
	blazikenmega: {
		num: 257,
		species: "Blaziken-Mega",
		baseSpecies: "Blaziken",
		forme: "Mega",
		formeLetter: "M",
		types: ["Fire", "Fighting"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 80, atk: 160, def: 80, spa: 130, spd: 80, spe: 100},
		abilities: {0: "Speed Boost"},
		heightm: 1.9,
		weightkg: 52,
		color: "Red",
		eggGroups: ["Field"],
	},
	mudkip: {
		num: 258,
		species: "Mudkip",
		types: ["Water"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 50, atk: 70, def: 50, spa: 50, spd: 50, spe: 40},
		abilities: {0: "Torrent", H: "Damp"},
		heightm: 0.4,
		weightkg: 7.6,
		color: "Blue",
		evos: ["marshtomp"],
		eggGroups: ["Monster", "Water 1"],
	},
	marshtomp: {
		num: 259,
		species: "Marshtomp",
		types: ["Water", "Ground"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 70, atk: 85, def: 70, spa: 60, spd: 70, spe: 50},
		abilities: {0: "Torrent", H: "Damp"},
		heightm: 0.7,
		weightkg: 28,
		color: "Blue",
		prevo: "mudkip",
		evoLevel: 16,
		evos: ["swampert"],
		eggGroups: ["Monster", "Water 1"],
	},
	swampert: {
		num: 260,
		species: "Swampert",
		types: ["Water", "Ground"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 100, atk: 110, def: 90, spa: 85, spd: 90, spe: 60},
		abilities: {0: "Torrent", H: "Damp"},
		heightm: 1.5,
		weightkg: 81.9,
		color: "Blue",
		prevo: "marshtomp",
		evoLevel: 36,
		eggGroups: ["Monster", "Water 1"],
		otherFormes: ["swampertmega"],
	},
	swampertmega: {
		num: 260,
		species: "Swampert-Mega",
		baseSpecies: "Swampert",
		forme: "Mega",
		formeLetter: "M",
		types: ["Water", "Ground"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 100, atk: 150, def: 110, spa: 95, spd: 110, spe: 70},
		abilities: {0: "Swift Swim"},
		heightm: 1.9,
		weightkg: 102,
		color: "Blue",
		eggGroups: ["Monster", "Water 1"],
	},
	poochyena: {
		num: 261,
		species: "Poochyena",
		types: ["Dark"],
		baseStats: {hp: 35, atk: 55, def: 35, spa: 30, spd: 30, spe: 35},
		abilities: {0: "Run Away", 1: "Quick Feet", H: "Rattled"},
		heightm: 0.5,
		weightkg: 13.6,
		color: "Gray",
		evos: ["mightyena"],
		eggGroups: ["Field"],
	},
	mightyena: {
		num: 262,
		species: "Mightyena",
		types: ["Dark"],
		baseStats: {hp: 70, atk: 90, def: 70, spa: 60, spd: 60, spe: 70},
		abilities: {0: "Intimidate", 1: "Quick Feet", H: "Moxie"},
		heightm: 1,
		weightkg: 37,
		color: "Gray",
		prevo: "poochyena",
		evoLevel: 18,
		eggGroups: ["Field"],
	},
	zigzagoon: {
		num: 263,
		species: "Zigzagoon",
		types: ["Normal"],
		baseStats: {hp: 38, atk: 30, def: 41, spa: 30, spd: 41, spe: 60},
		abilities: {0: "Pickup", 1: "Gluttony", H: "Quick Feet"},
		heightm: 0.4,
		weightkg: 17.5,
		color: "Brown",
		evos: ["linoone"],
		eggGroups: ["Field"],
	},
	linoone: {
		num: 264,
		species: "Linoone",
		types: ["Normal"],
		baseStats: {hp: 78, atk: 70, def: 61, spa: 50, spd: 61, spe: 100},
		abilities: {0: "Pickup", 1: "Gluttony", H: "Quick Feet"},
		heightm: 0.5,
		weightkg: 32.5,
		color: "White",
		prevo: "zigzagoon",
		evoLevel: 20,
		eggGroups: ["Field"],
	},
	wurmple: {
		num: 265,
		species: "Wurmple",
		types: ["Bug"],
		baseStats: {hp: 45, atk: 45, def: 35, spa: 20, spd: 30, spe: 20},
		abilities: {0: "Shield Dust", H: "Run Away"},
		heightm: 0.3,
		weightkg: 3.6,
		color: "Red",
		evos: ["silcoon", "cascoon"],
		eggGroups: ["Bug"],
	},
	silcoon: {
		num: 266,
		species: "Silcoon",
		types: ["Bug"],
		baseStats: {hp: 50, atk: 35, def: 55, spa: 25, spd: 25, spe: 15},
		abilities: {0: "Shed Skin"},
		heightm: 0.6,
		weightkg: 10,
		color: "White",
		prevo: "wurmple",
		evoLevel: 7,
		evos: ["beautifly"],
		eggGroups: ["Bug"],
	},
	beautifly: {
		num: 267,
		species: "Beautifly",
		types: ["Bug", "Flying"],
		baseStats: {hp: 60, atk: 70, def: 50, spa: 100, spd: 50, spe: 65},
		abilities: {0: "Swarm", H: "Rivalry"},
		heightm: 1,
		weightkg: 28.4,
		color: "Yellow",
		prevo: "silcoon",
		evoLevel: 10,
		eggGroups: ["Bug"],
	},
	cascoon: {
		num: 268,
		species: "Cascoon",
		types: ["Bug"],
		baseStats: {hp: 50, atk: 35, def: 55, spa: 25, spd: 25, spe: 15},
		abilities: {0: "Shed Skin"},
		heightm: 0.7,
		weightkg: 11.5,
		color: "Purple",
		prevo: "wurmple",
		evoLevel: 7,
		evos: ["dustox"],
		eggGroups: ["Bug"],
	},
	dustox: {
		num: 269,
		species: "Dustox",
		types: ["Bug", "Poison"],
		baseStats: {hp: 60, atk: 50, def: 70, spa: 50, spd: 90, spe: 65},
		abilities: {0: "Shield Dust", H: "Compound Eyes"},
		heightm: 1.2,
		weightkg: 31.6,
		color: "Green",
		prevo: "cascoon",
		evoLevel: 10,
		eggGroups: ["Bug"],
	},
	lotad: {
		num: 270,
		species: "Lotad",
		types: ["Water", "Grass"],
		baseStats: {hp: 40, atk: 30, def: 30, spa: 40, spd: 50, spe: 30},
		abilities: {0: "Swift Swim", 1: "Rain Dish", H: "Own Tempo"},
		heightm: 0.5,
		weightkg: 2.6,
		color: "Green",
		evos: ["lombre"],
		eggGroups: ["Water 1", "Grass"],
	},
	lombre: {
		num: 271,
		species: "Lombre",
		types: ["Water", "Grass"],
		baseStats: {hp: 60, atk: 50, def: 50, spa: 60, spd: 70, spe: 50},
		abilities: {0: "Swift Swim", 1: "Rain Dish", H: "Own Tempo"},
		heightm: 1.2,
		weightkg: 32.5,
		color: "Green",
		prevo: "lotad",
		evoLevel: 14,
		evos: ["ludicolo"],
		eggGroups: ["Water 1", "Grass"],
	},
	ludicolo: {
		num: 272,
		species: "Ludicolo",
		types: ["Water", "Grass"],
		baseStats: {hp: 80, atk: 70, def: 70, spa: 90, spd: 100, spe: 70},
		abilities: {0: "Swift Swim", 1: "Rain Dish", H: "Own Tempo"},
		heightm: 1.5,
		weightkg: 55,
		color: "Green",
		prevo: "lombre",
		evoType: "stone",
		evoItem: "Water Stone",
		eggGroups: ["Water 1", "Grass"],
	},
	seedot: {
		num: 273,
		species: "Seedot",
		types: ["Grass"],
		baseStats: {hp: 40, atk: 40, def: 50, spa: 30, spd: 30, spe: 30},
		abilities: {0: "Chlorophyll", 1: "Early Bird", H: "Pickpocket"},
		heightm: 0.5,
		weightkg: 4,
		color: "Brown",
		evos: ["nuzleaf"],
		eggGroups: ["Field", "Grass"],
	},
	nuzleaf: {
		num: 274,
		species: "Nuzleaf",
		types: ["Grass", "Dark"],
		baseStats: {hp: 70, atk: 70, def: 40, spa: 60, spd: 40, spe: 60},
		abilities: {0: "Chlorophyll", 1: "Early Bird", H: "Pickpocket"},
		heightm: 1,
		weightkg: 28,
		color: "Brown",
		prevo: "seedot",
		evoLevel: 14,
		evos: ["shiftry"],
		eggGroups: ["Field", "Grass"],
	},
	shiftry: {
		num: 275,
		species: "Shiftry",
		types: ["Grass", "Dark"],
		baseStats: {hp: 90, atk: 100, def: 60, spa: 90, spd: 60, spe: 80},
		abilities: {0: "Chlorophyll", 1: "Early Bird", H: "Pickpocket"},
		heightm: 1.3,
		weightkg: 59.6,
		color: "Brown",
		prevo: "nuzleaf",
		evoType: "stone",
		evoItem: "Leaf Stone",
		eggGroups: ["Field", "Grass"],
	},
	taillow: {
		num: 276,
		species: "Taillow",
		types: ["Normal", "Flying"],
		baseStats: {hp: 40, atk: 55, def: 30, spa: 30, spd: 30, spe: 85},
		abilities: {0: "Guts", H: "Scrappy"},
		heightm: 0.3,
		weightkg: 2.3,
		color: "Blue",
		evos: ["swellow"],
		eggGroups: ["Flying"],
	},
	swellow: {
		num: 277,
		species: "Swellow",
		types: ["Normal", "Flying"],
		baseStats: {hp: 60, atk: 85, def: 60, spa: 75, spd: 50, spe: 125},
		abilities: {0: "Guts", H: "Scrappy"},
		heightm: 0.7,
		weightkg: 19.8,
		color: "Blue",
		prevo: "taillow",
		evoLevel: 22,
		eggGroups: ["Flying"],
	},
	wingull: {
		num: 278,
		species: "Wingull",
		types: ["Water", "Flying"],
		baseStats: {hp: 40, atk: 30, def: 30, spa: 55, spd: 30, spe: 85},
		abilities: {0: "Keen Eye", 1: "Hydration", H: "Rain Dish"},
		heightm: 0.6,
		weightkg: 9.5,
		color: "White",
		evos: ["pelipper"],
		eggGroups: ["Water 1", "Flying"],
	},
	pelipper: {
		num: 279,
		species: "Pelipper",
		types: ["Water", "Flying"],
		baseStats: {hp: 60, atk: 50, def: 100, spa: 95, spd: 70, spe: 65},
		abilities: {0: "Keen Eye", 1: "Drizzle", H: "Rain Dish"},
		heightm: 1.2,
		weightkg: 28,
		color: "Yellow",
		prevo: "wingull",
		evoLevel: 25,
		eggGroups: ["Water 1", "Flying"],
	},
	ralts: {
		num: 280,
		species: "Ralts",
		types: ["Psychic", "Fairy"],
		baseStats: {hp: 28, atk: 25, def: 25, spa: 45, spd: 35, spe: 40},
		abilities: {0: "Synchronize", 1: "Trace", H: "Telepathy"},
		heightm: 0.4,
		weightkg: 6.6,
		color: "White",
		evos: ["kirlia"],
		eggGroups: ["Amorphous"],
	},
	kirlia: {
		num: 281,
		species: "Kirlia",
		types: ["Psychic", "Fairy"],
		baseStats: {hp: 38, atk: 35, def: 35, spa: 65, spd: 55, spe: 50},
		abilities: {0: "Synchronize", 1: "Trace", H: "Telepathy"},
		heightm: 0.8,
		weightkg: 20.2,
		color: "White",
		prevo: "ralts",
		evoLevel: 20,
		evos: ["gardevoir", "gallade"],
		eggGroups: ["Amorphous"],
	},
	gardevoir: {
		num: 282,
		species: "Gardevoir",
		types: ["Psychic", "Fairy"],
		baseStats: {hp: 68, atk: 65, def: 65, spa: 125, spd: 115, spe: 80},
		abilities: {0: "Synchronize", 1: "Trace", H: "Telepathy"},
		heightm: 1.6,
		weightkg: 48.4,
		color: "White",
		prevo: "kirlia",
		evoLevel: 30,
		eggGroups: ["Amorphous"],
		otherFormes: ["gardevoirmega"],
	},
	gardevoirmega: {
		num: 282,
		species: "Gardevoir-Mega",
		baseSpecies: "Gardevoir",
		forme: "Mega",
		formeLetter: "M",
		types: ["Psychic", "Fairy"],
		baseStats: {hp: 68, atk: 85, def: 65, spa: 165, spd: 135, spe: 100},
		abilities: {0: "Pixilate"},
		heightm: 1.6,
		weightkg: 48.4,
		color: "White",
		eggGroups: ["Amorphous"],
	},
	surskit: {
		num: 283,
		species: "Surskit",
		types: ["Bug", "Water"],
		baseStats: {hp: 40, atk: 30, def: 32, spa: 50, spd: 52, spe: 65},
		abilities: {0: "Swift Swim", H: "Rain Dish"},
		heightm: 0.5,
		weightkg: 1.7,
		color: "Blue",
		evos: ["masquerain"],
		eggGroups: ["Water 1", "Bug"],
	},
	masquerain: {
		num: 284,
		species: "Masquerain",
		types: ["Bug", "Flying"],
		baseStats: {hp: 70, atk: 60, def: 62, spa: 100, spd: 82, spe: 80},
		abilities: {0: "Intimidate", H: "Unnerve"},
		heightm: 0.8,
		weightkg: 3.6,
		color: "Blue",
		prevo: "surskit",
		evoLevel: 22,
		eggGroups: ["Water 1", "Bug"],
	},
	shroomish: {
		num: 285,
		species: "Shroomish",
		types: ["Grass"],
		baseStats: {hp: 60, atk: 40, def: 60, spa: 40, spd: 60, spe: 35},
		abilities: {0: "Effect Spore", 1: "Poison Heal", H: "Quick Feet"},
		heightm: 0.4,
		weightkg: 4.5,
		color: "Brown",
		evos: ["breloom"],
		eggGroups: ["Fairy", "Grass"],
	},
	breloom: {
		num: 286,
		species: "Breloom",
		types: ["Grass", "Fighting"],
		baseStats: {hp: 60, atk: 130, def: 80, spa: 60, spd: 60, spe: 70},
		abilities: {0: "Effect Spore", 1: "Poison Heal", H: "Technician"},
		heightm: 1.2,
		weightkg: 39.2,
		color: "Green",
		prevo: "shroomish",
		evoLevel: 23,
		eggGroups: ["Fairy", "Grass"],
	},
	slakoth: {
		num: 287,
		species: "Slakoth",
		types: ["Normal"],
		baseStats: {hp: 60, atk: 60, def: 60, spa: 35, spd: 35, spe: 30},
		abilities: {0: "Truant"},
		heightm: 0.8,
		weightkg: 24,
		color: "Brown",
		evos: ["vigoroth"],
		eggGroups: ["Field"],
	},
	vigoroth: {
		num: 288,
		species: "Vigoroth",
		types: ["Normal"],
		baseStats: {hp: 80, atk: 80, def: 80, spa: 55, spd: 55, spe: 90},
		abilities: {0: "Vital Spirit"},
		heightm: 1.4,
		weightkg: 46.5,
		color: "White",
		prevo: "slakoth",
		evoLevel: 18,
		evos: ["slaking"],
		eggGroups: ["Field"],
	},
	slaking: {
		num: 289,
		species: "Slaking",
		types: ["Normal"],
		baseStats: {hp: 150, atk: 160, def: 100, spa: 95, spd: 65, spe: 100},
		abilities: {0: "Truant"},
		heightm: 2,
		weightkg: 130.5,
		color: "Brown",
		prevo: "vigoroth",
		evoLevel: 36,
		eggGroups: ["Field"],
	},
	nincada: {
		num: 290,
		species: "Nincada",
		types: ["Bug", "Ground"],
		baseStats: {hp: 31, atk: 45, def: 90, spa: 30, spd: 30, spe: 40},
		abilities: {0: "Compound Eyes", H: "Run Away"},
		heightm: 0.5,
		weightkg: 5.5,
		color: "Gray",
		evos: ["ninjask", "shedinja"],
		eggGroups: ["Bug"],
	},
	ninjask: {
		num: 291,
		species: "Ninjask",
		types: ["Bug", "Flying"],
		baseStats: {hp: 61, atk: 90, def: 45, spa: 50, spd: 50, spe: 160},
		abilities: {0: "Speed Boost", H: "Infiltrator"},
		heightm: 0.8,
		weightkg: 12,
		color: "Yellow",
		prevo: "nincada",
		evoLevel: 20,
		eggGroups: ["Bug"],
	},
	shedinja: {
		num: 292,
		species: "Shedinja",
		types: ["Bug", "Ghost"],
		gender: "N",
		baseStats: {hp: 1, atk: 90, def: 45, spa: 30, spd: 30, spe: 40},
		maxHP: 1,
		abilities: {0: "Wonder Guard"},
		heightm: 0.8,
		weightkg: 1.2,
		color: "Brown",
		prevo: "nincada",
		evoLevel: 20,
		eggGroups: ["Mineral"],
	},
	whismur: {
		num: 293,
		species: "Whismur",
		types: ["Normal"],
		baseStats: {hp: 64, atk: 51, def: 23, spa: 51, spd: 23, spe: 28},
		abilities: {0: "Soundproof", H: "Rattled"},
		heightm: 0.6,
		weightkg: 16.3,
		color: "Pink",
		evos: ["loudred"],
		eggGroups: ["Monster", "Field"],
	},
	loudred: {
		num: 294,
		species: "Loudred",
		types: ["Normal"],
		baseStats: {hp: 84, atk: 71, def: 43, spa: 71, spd: 43, spe: 48},
		abilities: {0: "Soundproof", H: "Scrappy"},
		heightm: 1,
		weightkg: 40.5,
		color: "Blue",
		prevo: "whismur",
		evoLevel: 20,
		evos: ["exploud"],
		eggGroups: ["Monster", "Field"],
	},
	exploud: {
		num: 295,
		species: "Exploud",
		types: ["Normal"],
		baseStats: {hp: 104, atk: 91, def: 63, spa: 91, spd: 73, spe: 68},
		abilities: {0: "Soundproof", H: "Scrappy"},
		heightm: 1.5,
		weightkg: 84,
		color: "Blue",
		prevo: "loudred",
		evoLevel: 40,
		eggGroups: ["Monster", "Field"],
	},
	makuhita: {
		num: 296,
		species: "Makuhita",
		types: ["Fighting"],
		genderRatio: {M: 0.75, F: 0.25},
		baseStats: {hp: 72, atk: 60, def: 30, spa: 20, spd: 30, spe: 25},
		abilities: {0: "Thick Fat", 1: "Guts", H: "Sheer Force"},
		heightm: 1,
		weightkg: 86.4,
		color: "Yellow",
		evos: ["hariyama"],
		eggGroups: ["Human-Like"],
	},
	hariyama: {
		num: 297,
		species: "Hariyama",
		types: ["Fighting"],
		genderRatio: {M: 0.75, F: 0.25},
		baseStats: {hp: 144, atk: 120, def: 60, spa: 40, spd: 60, spe: 50},
		abilities: {0: "Thick Fat", 1: "Guts", H: "Sheer Force"},
		heightm: 2.3,
		weightkg: 253.8,
		color: "Brown",
		prevo: "makuhita",
		evoLevel: 24,
		eggGroups: ["Human-Like"],
	},
	azurill: {
		num: 298,
		species: "Azurill",
		types: ["Normal", "Fairy"],
		genderRatio: {M: 0.25, F: 0.75},
		baseStats: {hp: 50, atk: 20, def: 40, spa: 20, spd: 40, spe: 20},
		abilities: {0: "Thick Fat", 1: "Huge Power", H: "Sap Sipper"},
		heightm: 0.2,
		weightkg: 2,
		color: "Blue",
		evos: ["marill"],
		eggGroups: ["Undiscovered"],
		canHatch: true,
	},
	nosepass: {
		num: 299,
		species: "Nosepass",
		types: ["Rock"],
		baseStats: {hp: 30, atk: 45, def: 135, spa: 45, spd: 90, spe: 30},
		abilities: {0: "Sturdy", 1: "Magnet Pull", H: "Sand Force"},
		heightm: 1,
		weightkg: 97,
		color: "Gray",
		evos: ["probopass"],
		eggGroups: ["Mineral"],
	},
	skitty: {
		num: 300,
		species: "Skitty",
		types: ["Normal"],
		genderRatio: {M: 0.25, F: 0.75},
		baseStats: {hp: 50, atk: 45, def: 45, spa: 35, spd: 35, spe: 50},
		abilities: {0: "Cute Charm", 1: "Normalize", H: "Wonder Skin"},
		heightm: 0.6,
		weightkg: 11,
		color: "Pink",
		evos: ["delcatty"],
		eggGroups: ["Field", "Fairy"],
	},
	delcatty: {
		num: 301,
		species: "Delcatty",
		types: ["Normal"],
		genderRatio: {M: 0.25, F: 0.75},
		baseStats: {hp: 70, atk: 65, def: 65, spa: 55, spd: 55, spe: 90},
		abilities: {0: "Cute Charm", 1: "Normalize", H: "Wonder Skin"},
		heightm: 1.1,
		weightkg: 32.6,
		color: "Purple",
		prevo: "skitty",
		evoType: "stone",
		evoItem: "Moon Stone",
		eggGroups: ["Field", "Fairy"],
	},
	sableye: {
		num: 302,
		species: "Sableye",
		types: ["Dark", "Ghost"],
		baseStats: {hp: 50, atk: 75, def: 75, spa: 65, spd: 65, spe: 50},
		abilities: {0: "Keen Eye", 1: "Stall", H: "Prankster"},
		heightm: 0.5,
		weightkg: 11,
		color: "Purple",
		eggGroups: ["Human-Like"],
		otherFormes: ["sableyemega"],
	},
	sableyemega: {
		num: 302,
		species: "Sableye-Mega",
		baseSpecies: "Sableye",
		forme: "Mega",
		formeLetter: "M",
		types: ["Dark", "Ghost"],
		baseStats: {hp: 50, atk: 85, def: 125, spa: 85, spd: 115, spe: 20},
		abilities: {0: "Magic Bounce"},
		heightm: 0.5,
		weightkg: 161,
		color: "Purple",
		eggGroups: ["Human-Like"],
	},
	mawile: {
		num: 303,
		species: "Mawile",
		types: ["Steel", "Fairy"],
		baseStats: {hp: 50, atk: 85, def: 85, spa: 55, spd: 55, spe: 50},
		abilities: {0: "Hyper Cutter", 1: "Intimidate", H: "Sheer Force"},
		heightm: 0.6,
		weightkg: 11.5,
		color: "Black",
		eggGroups: ["Field", "Fairy"],
		otherFormes: ["mawilemega"],
	},
	mawilemega: {
		num: 303,
		species: "Mawile-Mega",
		baseSpecies: "Mawile",
		forme: "Mega",
		formeLetter: "M",
		types: ["Steel", "Fairy"],
		baseStats: {hp: 50, atk: 105, def: 125, spa: 55, spd: 95, spe: 50},
		abilities: {0: "Huge Power"},
		heightm: 1,
		weightkg: 23.5,
		color: "Black",
		eggGroups: ["Field", "Fairy"],
	},
	aron: {
		num: 304,
		species: "Aron",
		types: ["Steel", "Rock"],
		baseStats: {hp: 50, atk: 70, def: 100, spa: 40, spd: 40, spe: 30},
		abilities: {0: "Sturdy", 1: "Rock Head", H: "Heavy Metal"},
		heightm: 0.4,
		weightkg: 60,
		color: "Gray",
		evos: ["lairon"],
		eggGroups: ["Monster"],
	},
	lairon: {
		num: 305,
		species: "Lairon",
		types: ["Steel", "Rock"],
		baseStats: {hp: 60, atk: 90, def: 140, spa: 50, spd: 50, spe: 40},
		abilities: {0: "Sturdy", 1: "Rock Head", H: "Heavy Metal"},
		heightm: 0.9,
		weightkg: 120,
		color: "Gray",
		prevo: "aron",
		evoLevel: 32,
		evos: ["aggron"],
		eggGroups: ["Monster"],
	},
	aggron: {
		num: 306,
		species: "Aggron",
		types: ["Steel", "Rock"],
		baseStats: {hp: 70, atk: 110, def: 180, spa: 60, spd: 60, spe: 50},
		abilities: {0: "Sturdy", 1: "Rock Head", H: "Heavy Metal"},
		heightm: 2.1,
		weightkg: 360,
		color: "Gray",
		prevo: "lairon",
		evoLevel: 42,
		eggGroups: ["Monster"],
		otherFormes: ["aggronmega"],
	},
	aggronmega: {
		num: 306,
		species: "Aggron-Mega",
		baseSpecies: "Aggron",
		forme: "Mega",
		formeLetter: "M",
		types: ["Steel"],
		baseStats: {hp: 70, atk: 140, def: 230, spa: 60, spd: 80, spe: 50},
		abilities: {0: "Filter"},
		heightm: 2.2,
		weightkg: 395,
		color: "Gray",
		eggGroups: ["Monster"],
	},
	meditite: {
		num: 307,
		species: "Meditite",
		types: ["Fighting", "Psychic"],
		baseStats: {hp: 30, atk: 40, def: 55, spa: 40, spd: 55, spe: 60},
		abilities: {0: "Pure Power", H: "Telepathy"},
		heightm: 0.6,
		weightkg: 11.2,
		color: "Blue",
		evos: ["medicham"],
		eggGroups: ["Human-Like"],
	},
	medicham: {
		num: 308,
		species: "Medicham",
		types: ["Fighting", "Psychic"],
		baseStats: {hp: 60, atk: 60, def: 75, spa: 60, spd: 75, spe: 80},
		abilities: {0: "Pure Power", H: "Telepathy"},
		heightm: 1.3,
		weightkg: 31.5,
		color: "Red",
		prevo: "meditite",
		evoLevel: 37,
		eggGroups: ["Human-Like"],
		otherFormes: ["medichammega"],
	},
	medichammega: {
		num: 308,
		species: "Medicham-Mega",
		baseSpecies: "Medicham",
		forme: "Mega",
		formeLetter: "M",
		types: ["Fighting", "Psychic"],
		baseStats: {hp: 60, atk: 100, def: 85, spa: 80, spd: 85, spe: 100},
		abilities: {0: "Pure Power"},
		heightm: 1.3,
		weightkg: 31.5,
		color: "Red",
		eggGroups: ["Human-Like"],
	},
	electrike: {
		num: 309,
		species: "Electrike",
		types: ["Electric"],
		baseStats: {hp: 40, atk: 45, def: 40, spa: 65, spd: 40, spe: 65},
		abilities: {0: "Static", 1: "Lightning Rod", H: "Minus"},
		heightm: 0.6,
		weightkg: 15.2,
		color: "Green",
		evos: ["manectric"],
		eggGroups: ["Field"],
	},
	manectric: {
		num: 310,
		species: "Manectric",
		types: ["Electric"],
		baseStats: {hp: 70, atk: 75, def: 60, spa: 105, spd: 60, spe: 105},
		abilities: {0: "Static", 1: "Lightning Rod", H: "Minus"},
		heightm: 1.5,
		weightkg: 40.2,
		color: "Yellow",
		prevo: "electrike",
		evoLevel: 26,
		eggGroups: ["Field"],
		otherFormes: ["manectricmega"],
	},
	manectricmega: {
		num: 310,
		species: "Manectric-Mega",
		baseSpecies: "Manectric",
		forme: "Mega",
		formeLetter: "M",
		types: ["Electric"],
		baseStats: {hp: 70, atk: 75, def: 80, spa: 135, spd: 80, spe: 135},
		abilities: {0: "Intimidate"},
		heightm: 1.8,
		weightkg: 44,
		color: "Yellow",
		eggGroups: ["Field"],
	},
	plusle: {
		num: 311,
		species: "Plusle",
		types: ["Electric"],
		baseStats: {hp: 60, atk: 50, def: 40, spa: 85, spd: 75, spe: 95},
		abilities: {0: "Plus", H: "Lightning Rod"},
		heightm: 0.4,
		weightkg: 4.2,
		color: "Yellow",
		eggGroups: ["Fairy"],
	},
	minun: {
		num: 312,
		species: "Minun",
		types: ["Electric"],
		baseStats: {hp: 60, atk: 40, def: 50, spa: 75, spd: 85, spe: 95},
		abilities: {0: "Minus", H: "Volt Absorb"},
		heightm: 0.4,
		weightkg: 4.2,
		color: "Yellow",
		eggGroups: ["Fairy"],
	},
	volbeat: {
		num: 313,
		species: "Volbeat",
		types: ["Bug"],
		gender: "M",
		baseStats: {hp: 65, atk: 73, def: 75, spa: 47, spd: 85, spe: 85},
		abilities: {0: "Illuminate", 1: "Swarm", H: "Prankster"},
		heightm: 0.7,
		weightkg: 17.7,
		color: "Gray",
		eggGroups: ["Bug", "Human-Like"],
	},
	illumise: {
		num: 314,
		species: "Illumise",
		types: ["Bug"],
		gender: "F",
		baseStats: {hp: 65, atk: 47, def: 75, spa: 73, spd: 85, spe: 85},
		abilities: {0: "Oblivious", 1: "Tinted Lens", H: "Prankster"},
		heightm: 0.6,
		weightkg: 17.7,
		color: "Purple",
		eggGroups: ["Bug", "Human-Like"],
	},
	roselia: {
		num: 315,
		species: "Roselia",
		types: ["Grass", "Poison"],
		baseStats: {hp: 50, atk: 60, def: 45, spa: 100, spd: 80, spe: 65},
		abilities: {0: "Natural Cure", 1: "Poison Point", H: "Leaf Guard"},
		heightm: 0.3,
		weightkg: 2,
		color: "Green",
		prevo: "budew",
		evoType: "levelFriendship",
		evoCondition: "during the day",
		evos: ["roserade"],
		eggGroups: ["Fairy", "Grass"],
		canHatch: true,
	},
	gulpin: {
		num: 316,
		species: "Gulpin",
		types: ["Poison"],
		baseStats: {hp: 70, atk: 43, def: 53, spa: 43, spd: 53, spe: 40},
		abilities: {0: "Liquid Ooze", 1: "Sticky Hold", H: "Gluttony"},
		heightm: 0.4,
		weightkg: 10.3,
		color: "Green",
		evos: ["swalot"],
		eggGroups: ["Amorphous"],
	},
	swalot: {
		num: 317,
		species: "Swalot",
		types: ["Poison"],
		baseStats: {hp: 100, atk: 73, def: 83, spa: 73, spd: 83, spe: 55},
		abilities: {0: "Liquid Ooze", 1: "Sticky Hold", H: "Gluttony"},
		heightm: 1.7,
		weightkg: 80,
		color: "Purple",
		prevo: "gulpin",
		evoLevel: 26,
		eggGroups: ["Amorphous"],
	},
	carvanha: {
		num: 318,
		species: "Carvanha",
		types: ["Water", "Dark"],
		baseStats: {hp: 45, atk: 90, def: 20, spa: 65, spd: 20, spe: 65},
		abilities: {0: "Rough Skin", H: "Speed Boost"},
		heightm: 0.8,
		weightkg: 20.8,
		color: "Red",
		evos: ["sharpedo"],
		eggGroups: ["Water 2"],
	},
	sharpedo: {
		num: 319,
		species: "Sharpedo",
		types: ["Water", "Dark"],
		baseStats: {hp: 70, atk: 120, def: 40, spa: 95, spd: 40, spe: 95},
		abilities: {0: "Rough Skin", H: "Speed Boost"},
		heightm: 1.8,
		weightkg: 88.8,
		color: "Blue",
		prevo: "carvanha",
		evoLevel: 30,
		eggGroups: ["Water 2"],
		otherFormes: ["sharpedomega"],
	},
	sharpedomega: {
		num: 319,
		species: "Sharpedo-Mega",
		baseSpecies: "Sharpedo",
		forme: "Mega",
		formeLetter: "M",
		types: ["Water", "Dark"],
		baseStats: {hp: 70, atk: 140, def: 70, spa: 110, spd: 65, spe: 105},
		abilities: {0: "Strong Jaw"},
		heightm: 2.5,
		weightkg: 130.3,
		color: "Blue",
		eggGroups: ["Water 2"],
	},
	wailmer: {
		num: 320,
		species: "Wailmer",
		types: ["Water"],
		baseStats: {hp: 130, atk: 70, def: 35, spa: 70, spd: 35, spe: 60},
		abilities: {0: "Water Veil", 1: "Oblivious", H: "Pressure"},
		heightm: 2,
		weightkg: 130,
		color: "Blue",
		evos: ["wailord"],
		eggGroups: ["Field", "Water 2"],
	},
	wailord: {
		num: 321,
		species: "Wailord",
		types: ["Water"],
		baseStats: {hp: 170, atk: 90, def: 45, spa: 90, spd: 45, spe: 60},
		abilities: {0: "Water Veil", 1: "Oblivious", H: "Pressure"},
		heightm: 14.5,
		weightkg: 398,
		color: "Blue",
		prevo: "wailmer",
		evoLevel: 40,
		eggGroups: ["Field", "Water 2"],
	},
	numel: {
		num: 322,
		species: "Numel",
		types: ["Fire", "Ground"],
		baseStats: {hp: 60, atk: 60, def: 40, spa: 65, spd: 45, spe: 35},
		abilities: {0: "Oblivious", 1: "Simple", H: "Own Tempo"},
		heightm: 0.7,
		weightkg: 24,
		color: "Yellow",
		evos: ["camerupt"],
		eggGroups: ["Field"],
	},
	camerupt: {
		num: 323,
		species: "Camerupt",
		types: ["Fire", "Ground"],
		baseStats: {hp: 70, atk: 100, def: 70, spa: 105, spd: 75, spe: 40},
		abilities: {0: "Magma Armor", 1: "Solid Rock", H: "Anger Point"},
		heightm: 1.9,
		weightkg: 220,
		color: "Red",
		prevo: "numel",
		evoLevel: 33,
		eggGroups: ["Field"],
		otherFormes: ["cameruptmega"],
	},
	cameruptmega: {
		num: 323,
		species: "Camerupt-Mega",
		baseSpecies: "Camerupt",
		forme: "Mega",
		formeLetter: "M",
		types: ["Fire", "Ground"],
		baseStats: {hp: 70, atk: 120, def: 100, spa: 145, spd: 105, spe: 20},
		abilities: {0: "Sheer Force"},
		heightm: 2.5,
		weightkg: 320.5,
		color: "Red",
		eggGroups: ["Field"],
	},
	torkoal: {
		num: 324,
		species: "Torkoal",
		types: ["Fire"],
		baseStats: {hp: 70, atk: 85, def: 140, spa: 85, spd: 70, spe: 20},
		abilities: {0: "White Smoke", 1: "Drought", H: "Shell Armor"},
		heightm: 0.5,
		weightkg: 80.4,
		color: "Brown",
		eggGroups: ["Field"],
	},
	spoink: {
		num: 325,
		species: "Spoink",
		types: ["Psychic"],
		baseStats: {hp: 60, atk: 25, def: 35, spa: 70, spd: 80, spe: 60},
		abilities: {0: "Thick Fat", 1: "Own Tempo", H: "Gluttony"},
		heightm: 0.7,
		weightkg: 30.6,
		color: "Black",
		evos: ["grumpig"],
		eggGroups: ["Field"],
	},
	grumpig: {
		num: 326,
		species: "Grumpig",
		types: ["Psychic"],
		baseStats: {hp: 80, atk: 45, def: 65, spa: 90, spd: 110, spe: 80},
		abilities: {0: "Thick Fat", 1: "Own Tempo", H: "Gluttony"},
		heightm: 0.9,
		weightkg: 71.5,
		color: "Purple",
		prevo: "spoink",
		evoLevel: 32,
		eggGroups: ["Field"],
	},
	spinda: {
		num: 327,
		species: "Spinda",
		types: ["Normal"],
		baseStats: {hp: 60, atk: 60, def: 60, spa: 60, spd: 60, spe: 60},
		abilities: {0: "Own Tempo", 1: "Tangled Feet", H: "Contrary"},
		heightm: 1.1,
		weightkg: 5,
		color: "Brown",
		eggGroups: ["Field", "Human-Like"],
	},
	trapinch: {
		num: 328,
		species: "Trapinch",
		types: ["Ground"],
		baseStats: {hp: 45, atk: 100, def: 45, spa: 45, spd: 45, spe: 10},
		abilities: {0: "Hyper Cutter", 1: "Arena Trap", H: "Sheer Force"},
		heightm: 0.7,
		weightkg: 15,
		color: "Brown",
		evos: ["vibrava"],
		eggGroups: ["Bug"],
	},
	vibrava: {
		num: 329,
		species: "Vibrava",
		types: ["Ground", "Dragon"],
		baseStats: {hp: 50, atk: 70, def: 50, spa: 50, spd: 50, spe: 70},
		abilities: {0: "Levitate"},
		heightm: 1.1,
		weightkg: 15.3,
		color: "Green",
		prevo: "trapinch",
		evos: ["flygon"],
		evoLevel: 35,
		eggGroups: ["Bug"],
	},
	flygon: {
		num: 330,
		species: "Flygon",
		types: ["Ground", "Dragon"],
		baseStats: {hp: 80, atk: 100, def: 80, spa: 80, spd: 80, spe: 100},
		abilities: {0: "Levitate"},
		heightm: 2,
		weightkg: 82,
		color: "Green",
		prevo: "vibrava",
		evoLevel: 45,
		eggGroups: ["Bug"],
	},
	cacnea: {
		num: 331,
		species: "Cacnea",
		types: ["Grass"],
		baseStats: {hp: 50, atk: 85, def: 40, spa: 85, spd: 40, spe: 35},
		abilities: {0: "Sand Veil", H: "Water Absorb"},
		heightm: 0.4,
		weightkg: 51.3,
		color: "Green",
		evos: ["cacturne"],
		eggGroups: ["Grass", "Human-Like"],
	},
	cacturne: {
		num: 332,
		species: "Cacturne",
		types: ["Grass", "Dark"],
		baseStats: {hp: 70, atk: 115, def: 60, spa: 115, spd: 60, spe: 55},
		abilities: {0: "Sand Veil", H: "Water Absorb"},
		heightm: 1.3,
		weightkg: 77.4,
		color: "Green",
		prevo: "cacnea",
		evoLevel: 32,
		eggGroups: ["Grass", "Human-Like"],
	},
	swablu: {
		num: 333,
		species: "Swablu",
		types: ["Normal", "Flying"],
		baseStats: {hp: 45, atk: 40, def: 60, spa: 40, spd: 75, spe: 50},
		abilities: {0: "Natural Cure", H: "Cloud Nine"},
		heightm: 0.4,
		weightkg: 1.2,
		color: "Blue",
		evos: ["altaria"],
		eggGroups: ["Flying", "Dragon"],
	},
	altaria: {
		num: 334,
		species: "Altaria",
		types: ["Dragon", "Flying"],
		baseStats: {hp: 75, atk: 70, def: 90, spa: 70, spd: 105, spe: 80},
		abilities: {0: "Natural Cure", H: "Cloud Nine"},
		heightm: 1.1,
		weightkg: 20.6,
		color: "Blue",
		prevo: "swablu",
		evoLevel: 35,
		eggGroups: ["Flying", "Dragon"],
		otherFormes: ["altariamega"],
	},
	altariamega: {
		num: 334,
		species: "Altaria-Mega",
		baseSpecies: "Altaria",
		forme: "Mega",
		formeLetter: "M",
		types: ["Dragon", "Fairy"],
		baseStats: {hp: 75, atk: 110, def: 110, spa: 110, spd: 105, spe: 80},
		abilities: {0: "Pixilate"},
		heightm: 1.5,
		weightkg: 20.6,
		color: "Blue",
		eggGroups: ["Flying", "Dragon"],
	},
	zangoose: {
		num: 335,
		species: "Zangoose",
		types: ["Normal"],
		baseStats: {hp: 73, atk: 115, def: 60, spa: 60, spd: 60, spe: 90},
		abilities: {0: "Immunity", H: "Toxic Boost"},
		heightm: 1.3,
		weightkg: 40.3,
		color: "White",
		eggGroups: ["Field"],
	},
	seviper: {
		num: 336,
		species: "Seviper",
		types: ["Poison"],
		baseStats: {hp: 73, atk: 100, def: 60, spa: 100, spd: 60, spe: 65},
		abilities: {0: "Shed Skin", H: "Infiltrator"},
		heightm: 2.7,
		weightkg: 52.5,
		color: "Black",
		eggGroups: ["Field", "Dragon"],
	},
	lunatone: {
		num: 337,
		species: "Lunatone",
		types: ["Rock", "Psychic"],
		gender: "N",
		baseStats: {hp: 90, atk: 55, def: 65, spa: 95, spd: 85, spe: 70},
		abilities: {0: "Levitate"},
		heightm: 1,
		weightkg: 168,
		color: "Yellow",
		eggGroups: ["Mineral"],
	},
	solrock: {
		num: 338,
		species: "Solrock",
		types: ["Rock", "Psychic"],
		gender: "N",
		baseStats: {hp: 90, atk: 95, def: 85, spa: 55, spd: 65, spe: 70},
		abilities: {0: "Levitate"},
		heightm: 1.2,
		weightkg: 154,
		color: "Red",
		eggGroups: ["Mineral"],
	},
	barboach: {
		num: 339,
		species: "Barboach",
		types: ["Water", "Ground"],
		baseStats: {hp: 50, atk: 48, def: 43, spa: 46, spd: 41, spe: 60},
		abilities: {0: "Oblivious", 1: "Anticipation", H: "Hydration"},
		heightm: 0.4,
		weightkg: 1.9,
		color: "Gray",
		evos: ["whiscash"],
		eggGroups: ["Water 2"],
	},
	whiscash: {
		num: 340,
		species: "Whiscash",
		types: ["Water", "Ground"],
		baseStats: {hp: 110, atk: 78, def: 73, spa: 76, spd: 71, spe: 60},
		abilities: {0: "Oblivious", 1: "Anticipation", H: "Hydration"},
		heightm: 0.9,
		weightkg: 23.6,
		color: "Blue",
		prevo: "barboach",
		evoLevel: 30,
		eggGroups: ["Water 2"],
	},
	corphish: {
		num: 341,
		species: "Corphish",
		types: ["Water"],
		baseStats: {hp: 43, atk: 80, def: 65, spa: 50, spd: 35, spe: 35},
		abilities: {0: "Hyper Cutter", 1: "Shell Armor", H: "Adaptability"},
		heightm: 0.6,
		weightkg: 11.5,
		color: "Red",
		evos: ["crawdaunt"],
		eggGroups: ["Water 1", "Water 3"],
	},
	crawdaunt: {
		num: 342,
		species: "Crawdaunt",
		types: ["Water", "Dark"],
		baseStats: {hp: 63, atk: 120, def: 85, spa: 90, spd: 55, spe: 55},
		abilities: {0: "Hyper Cutter", 1: "Shell Armor", H: "Adaptability"},
		heightm: 1.1,
		weightkg: 32.8,
		color: "Red",
		prevo: "corphish",
		evoLevel: 30,
		eggGroups: ["Water 1", "Water 3"],
	},
	baltoy: {
		num: 343,
		species: "Baltoy",
		types: ["Ground", "Psychic"],
		gender: "N",
		baseStats: {hp: 40, atk: 40, def: 55, spa: 40, spd: 70, spe: 55},
		abilities: {0: "Levitate"},
		heightm: 0.5,
		weightkg: 21.5,
		color: "Brown",
		evos: ["claydol"],
		eggGroups: ["Mineral"],
	},
	claydol: {
		num: 344,
		species: "Claydol",
		types: ["Ground", "Psychic"],
		gender: "N",
		baseStats: {hp: 60, atk: 70, def: 105, spa: 70, spd: 120, spe: 75},
		abilities: {0: "Levitate"},
		heightm: 1.5,
		weightkg: 108,
		color: "Black",
		prevo: "baltoy",
		evoLevel: 36,
		eggGroups: ["Mineral"],
	},
	lileep: {
		num: 345,
		species: "Lileep",
		types: ["Rock", "Grass"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 66, atk: 41, def: 77, spa: 61, spd: 87, spe: 23},
		abilities: {0: "Suction Cups", H: "Storm Drain"},
		heightm: 1,
		weightkg: 23.8,
		color: "Purple",
		evos: ["cradily"],
		eggGroups: ["Water 3"],
	},
	cradily: {
		num: 346,
		species: "Cradily",
		types: ["Rock", "Grass"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 86, atk: 81, def: 97, spa: 81, spd: 107, spe: 43},
		abilities: {0: "Suction Cups", H: "Storm Drain"},
		heightm: 1.5,
		weightkg: 60.4,
		color: "Green",
		prevo: "lileep",
		evoLevel: 40,
		eggGroups: ["Water 3"],
	},
	anorith: {
		num: 347,
		species: "Anorith",
		types: ["Rock", "Bug"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 45, atk: 95, def: 50, spa: 40, spd: 50, spe: 75},
		abilities: {0: "Battle Armor", H: "Swift Swim"},
		heightm: 0.7,
		weightkg: 12.5,
		color: "Gray",
		evos: ["armaldo"],
		eggGroups: ["Water 3"],
	},
	armaldo: {
		num: 348,
		species: "Armaldo",
		types: ["Rock", "Bug"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 75, atk: 125, def: 100, spa: 70, spd: 80, spe: 45},
		abilities: {0: "Battle Armor", H: "Swift Swim"},
		heightm: 1.5,
		weightkg: 68.2,
		color: "Gray",
		prevo: "anorith",
		evoLevel: 40,
		eggGroups: ["Water 3"],
	},
	feebas: {
		num: 349,
		species: "Feebas",
		types: ["Water"],
		baseStats: {hp: 20, atk: 15, def: 20, spa: 10, spd: 55, spe: 80},
		abilities: {0: "Swift Swim", 1: "Oblivious", H: "Adaptability"},
		heightm: 0.6,
		weightkg: 7.4,
		color: "Brown",
		evos: ["milotic"],
		eggGroups: ["Water 1", "Dragon"],
	},
	milotic: {
		num: 350,
		species: "Milotic",
		types: ["Water"],
		baseStats: {hp: 95, atk: 60, def: 79, spa: 100, spd: 125, spe: 81},
		abilities: {0: "Marvel Scale", 1: "Competitive", H: "Cute Charm"},
		heightm: 6.2,
		weightkg: 162,
		color: "Pink",
		prevo: "feebas",
		evoType: "trade",
		eggGroups: ["Water 1", "Dragon"],
	},
	castform: {
		num: 351,
		species: "Castform",
		types: ["Normal"],
		baseStats: {hp: 70, atk: 70, def: 70, spa: 70, spd: 70, spe: 70},
		abilities: {0: "Forecast"},
		heightm: 0.3,
		weightkg: 0.8,
		color: "Gray",
		eggGroups: ["Fairy", "Amorphous"],
		otherFormes: ["castformsunny", "castformrainy", "castformsnowy"],
	},
	castformsunny: {
		num: 351,
		species: "Castform-Sunny",
		baseSpecies: "Castform",
		forme: "Sunny",
		formeLetter: "S",
		types: ["Fire"],
		baseStats: {hp: 70, atk: 70, def: 70, spa: 70, spd: 70, spe: 70},
		abilities: {0: "Forecast"},
		heightm: 0.3,
		weightkg: 0.8,
		color: "Red",
		eggGroups: ["Fairy", "Amorphous"],
	},
	castformrainy: {
		num: 351,
		species: "Castform-Rainy",
		baseSpecies: "Castform",
		forme: "Rainy",
		formeLetter: "R",
		types: ["Water"],
		baseStats: {hp: 70, atk: 70, def: 70, spa: 70, spd: 70, spe: 70},
		abilities: {0: "Forecast"},
		heightm: 0.3,
		weightkg: 0.8,
		color: "Blue",
		eggGroups: ["Fairy", "Amorphous"],
	},
	castformsnowy: {
		num: 351,
		species: "Castform-Snowy",
		baseSpecies: "Castform",
		forme: "Snowy",
		formeLetter: "S",
		types: ["Ice"],
		baseStats: {hp: 70, atk: 70, def: 70, spa: 70, spd: 70, spe: 70},
		abilities: {0: "Forecast"},
		heightm: 0.3,
		weightkg: 0.8,
		color: "White",
		eggGroups: ["Fairy", "Amorphous"],
	},
	kecleon: {
		num: 352,
		species: "Kecleon",
		types: ["Normal"],
		baseStats: {hp: 60, atk: 90, def: 70, spa: 60, spd: 120, spe: 40},
		abilities: {0: "Color Change", H: "Protean"},
		heightm: 1,
		weightkg: 22,
		color: "Green",
		eggGroups: ["Field"],
	},
	shuppet: {
		num: 353,
		species: "Shuppet",
		types: ["Ghost"],
		baseStats: {hp: 44, atk: 75, def: 35, spa: 63, spd: 33, spe: 45},
		abilities: {0: "Insomnia", 1: "Frisk", H: "Cursed Body"},
		heightm: 0.6,
		weightkg: 2.3,
		color: "Black",
		evos: ["banette"],
		eggGroups: ["Amorphous"],
	},
	banette: {
		num: 354,
		species: "Banette",
		types: ["Ghost"],
		baseStats: {hp: 64, atk: 115, def: 65, spa: 83, spd: 63, spe: 65},
		abilities: {0: "Insomnia", 1: "Frisk", H: "Cursed Body"},
		heightm: 1.1,
		weightkg: 12.5,
		color: "Black",
		prevo: "shuppet",
		evoLevel: 37,
		eggGroups: ["Amorphous"],
		otherFormes: ["banettemega"],
	},
	banettemega: {
		num: 354,
		species: "Banette-Mega",
		baseSpecies: "Banette",
		forme: "Mega",
		formeLetter: "M",
		types: ["Ghost"],
		baseStats: {hp: 64, atk: 165, def: 75, spa: 93, spd: 83, spe: 75},
		abilities: {0: "Prankster"},
		heightm: 1.2,
		weightkg: 13,
		color: "Black",
		eggGroups: ["Amorphous"],
	},
	duskull: {
		num: 355,
		species: "Duskull",
		types: ["Ghost"],
		baseStats: {hp: 20, atk: 40, def: 90, spa: 30, spd: 90, spe: 25},
		abilities: {0: "Levitate", H: "Frisk"},
		heightm: 0.8,
		weightkg: 15,
		color: "Black",
		evos: ["dusclops"],
		eggGroups: ["Amorphous"],
	},
	dusclops: {
		num: 356,
		species: "Dusclops",
		types: ["Ghost"],
		baseStats: {hp: 40, atk: 70, def: 130, spa: 60, spd: 130, spe: 25},
		abilities: {0: "Pressure", H: "Frisk"},
		heightm: 1.6,
		weightkg: 30.6,
		color: "Black",
		prevo: "duskull",
		evoLevel: 37,
		evos: ["dusknoir"],
		eggGroups: ["Amorphous"],
	},
	tropius: {
		num: 357,
		species: "Tropius",
		types: ["Grass", "Flying"],
		baseStats: {hp: 99, atk: 68, def: 83, spa: 72, spd: 87, spe: 51},
		abilities: {0: "Chlorophyll", 1: "Solar Power", H: "Harvest"},
		heightm: 2,
		weightkg: 100,
		color: "Green",
		eggGroups: ["Monster", "Grass"],
	},
	chimecho: {
		num: 358,
		species: "Chimecho",
		types: ["Psychic"],
		baseStats: {hp: 75, atk: 50, def: 80, spa: 95, spd: 90, spe: 65},
		abilities: {0: "Levitate"},
		heightm: 0.6,
		weightkg: 1,
		color: "Blue",
		prevo: "chingling",
		evoType: "levelFriendship",
		evoCondition: "at night",
		eggGroups: ["Amorphous"],
		canHatch: true,
	},
	absol: {
		num: 359,
		species: "Absol",
		types: ["Dark"],
		baseStats: {hp: 65, atk: 130, def: 60, spa: 75, spd: 60, spe: 75},
		abilities: {0: "Pressure", 1: "Super Luck", H: "Justified"},
		heightm: 1.2,
		weightkg: 47,
		color: "White",
		eggGroups: ["Field"],
		otherFormes: ["absolmega"],
	},
	absolmega: {
		num: 359,
		species: "Absol-Mega",
		baseSpecies: "Absol",
		forme: "Mega",
		formeLetter: "M",
		types: ["Dark"],
		baseStats: {hp: 65, atk: 150, def: 60, spa: 115, spd: 60, spe: 115},
		abilities: {0: "Magic Bounce"},
		heightm: 1.2,
		weightkg: 49,
		color: "White",
		eggGroups: ["Field"],
	},
	wynaut: {
		num: 360,
		species: "Wynaut",
		types: ["Psychic"],
		baseStats: {hp: 95, atk: 23, def: 48, spa: 23, spd: 48, spe: 23},
		abilities: {0: "Shadow Tag", H: "Telepathy"},
		heightm: 0.6,
		weightkg: 14,
		color: "Blue",
		evos: ["wobbuffet"],
		eggGroups: ["Undiscovered"],
		canHatch: true,
	},
	snorunt: {
		num: 361,
		species: "Snorunt",
		types: ["Ice"],
		baseStats: {hp: 50, atk: 50, def: 50, spa: 50, spd: 50, spe: 50},
		abilities: {0: "Inner Focus", 1: "Ice Body", H: "Moody"},
		heightm: 0.7,
		weightkg: 16.8,
		color: "Gray",
		evos: ["glalie", "froslass"],
		eggGroups: ["Fairy", "Mineral"],
	},
	glalie: {
		num: 362,
		species: "Glalie",
		types: ["Ice"],
		baseStats: {hp: 80, atk: 80, def: 80, spa: 80, spd: 80, spe: 80},
		abilities: {0: "Inner Focus", 1: "Ice Body", H: "Moody"},
		heightm: 1.5,
		weightkg: 256.5,
		color: "Gray",
		prevo: "snorunt",
		evoLevel: 42,
		eggGroups: ["Fairy", "Mineral"],
		otherFormes: ["glaliemega"],
	},
	glaliemega: {
		num: 362,
		species: "Glalie-Mega",
		baseSpecies: "Glalie",
		forme: "Mega",
		formeLetter: "M",
		types: ["Ice"],
		baseStats: {hp: 80, atk: 120, def: 80, spa: 120, spd: 80, spe: 100},
		abilities: {0: "Refrigerate"},
		heightm: 2.1,
		weightkg: 350.2,
		color: "Gray",
		eggGroups: ["Fairy", "Mineral"],
	},
	spheal: {
		num: 363,
		species: "Spheal",
		types: ["Ice", "Water"],
		baseStats: {hp: 70, atk: 40, def: 50, spa: 55, spd: 50, spe: 25},
		abilities: {0: "Thick Fat", 1: "Ice Body", H: "Oblivious"},
		heightm: 0.8,
		weightkg: 39.5,
		color: "Blue",
		evos: ["sealeo"],
		eggGroups: ["Water 1", "Field"],
	},
	sealeo: {
		num: 364,
		species: "Sealeo",
		types: ["Ice", "Water"],
		baseStats: {hp: 90, atk: 60, def: 70, spa: 75, spd: 70, spe: 45},
		abilities: {0: "Thick Fat", 1: "Ice Body", H: "Oblivious"},
		heightm: 1.1,
		weightkg: 87.6,
		color: "Blue",
		prevo: "spheal",
		evoLevel: 32,
		evos: ["walrein"],
		eggGroups: ["Water 1", "Field"],
	},
	walrein: {
		num: 365,
		species: "Walrein",
		types: ["Ice", "Water"],
		baseStats: {hp: 110, atk: 80, def: 90, spa: 95, spd: 90, spe: 65},
		abilities: {0: "Thick Fat", 1: "Ice Body", H: "Oblivious"},
		heightm: 1.4,
		weightkg: 150.6,
		color: "Blue",
		prevo: "sealeo",
		evoLevel: 44,
		eggGroups: ["Water 1", "Field"],
	},
	clamperl: {
		num: 366,
		species: "Clamperl",
		types: ["Water"],
		baseStats: {hp: 35, atk: 64, def: 85, spa: 74, spd: 55, spe: 32},
		abilities: {0: "Shell Armor", H: "Rattled"},
		heightm: 0.4,
		weightkg: 52.5,
		color: "Blue",
		evos: ["huntail", "gorebyss"],
		eggGroups: ["Water 1"],
	},
	huntail: {
		num: 367,
		species: "Huntail",
		types: ["Water"],
		baseStats: {hp: 55, atk: 104, def: 105, spa: 94, spd: 75, spe: 52},
		abilities: {0: "Swift Swim", H: "Water Veil"},
		heightm: 1.7,
		weightkg: 27,
		color: "Blue",
		prevo: "clamperl",
		evoType: "trade",
		eggGroups: ["Water 1"],
	},
	gorebyss: {
		num: 368,
		species: "Gorebyss",
		types: ["Water"],
		baseStats: {hp: 55, atk: 84, def: 105, spa: 114, spd: 75, spe: 52},
		abilities: {0: "Swift Swim", H: "Hydration"},
		heightm: 1.8,
		weightkg: 22.6,
		color: "Pink",
		prevo: "clamperl",
		evoType: "trade",
		eggGroups: ["Water 1"],
	},
	relicanth: {
		num: 369,
		species: "Relicanth",
		types: ["Water", "Rock"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 100, atk: 90, def: 130, spa: 45, spd: 65, spe: 55},
		abilities: {0: "Swift Swim", 1: "Rock Head", H: "Sturdy"},
		heightm: 1,
		weightkg: 23.4,
		color: "Gray",
		eggGroups: ["Water 1", "Water 2"],
	},
	luvdisc: {
		num: 370,
		species: "Luvdisc",
		types: ["Water"],
		genderRatio: {M: 0.25, F: 0.75},
		baseStats: {hp: 43, atk: 30, def: 55, spa: 40, spd: 65, spe: 97},
		abilities: {0: "Swift Swim", H: "Hydration"},
		heightm: 0.6,
		weightkg: 8.7,
		color: "Pink",
		eggGroups: ["Water 2"],
	},
	bagon: {
		num: 371,
		species: "Bagon",
		types: ["Dragon"],
		baseStats: {hp: 45, atk: 75, def: 60, spa: 40, spd: 30, spe: 50},
		abilities: {0: "Rock Head", H: "Sheer Force"},
		heightm: 0.6,
		weightkg: 42.1,
		color: "Blue",
		evos: ["shelgon"],
		eggGroups: ["Dragon"],
	},
	shelgon: {
		num: 372,
		species: "Shelgon",
		types: ["Dragon"],
		baseStats: {hp: 65, atk: 95, def: 100, spa: 60, spd: 50, spe: 50},
		abilities: {0: "Rock Head", H: "Overcoat"},
		heightm: 1.1,
		weightkg: 110.5,
		color: "White",
		prevo: "bagon",
		evoLevel: 30,
		evos: ["salamence"],
		eggGroups: ["Dragon"],
	},
	salamence: {
		num: 373,
		species: "Salamence",
		types: ["Dragon", "Flying"],
		baseStats: {hp: 95, atk: 135, def: 80, spa: 110, spd: 80, spe: 100},
		abilities: {0: "Intimidate", H: "Moxie"},
		heightm: 1.5,
		weightkg: 102.6,
		color: "Blue",
		prevo: "shelgon",
		evoLevel: 50,
		eggGroups: ["Dragon"],
		otherFormes: ["salamencemega"],
	},
	salamencemega: {
		num: 373,
		species: "Salamence-Mega",
		baseSpecies: "Salamence",
		forme: "Mega",
		formeLetter: "M",
		types: ["Dragon", "Flying"],
		baseStats: {hp: 95, atk: 145, def: 130, spa: 120, spd: 90, spe: 120},
		abilities: {0: "Aerilate"},
		heightm: 1.8,
		weightkg: 112.6,
		color: "Blue",
		eggGroups: ["Dragon"],
	},
	beldum: {
		num: 374,
		species: "Beldum",
		types: ["Steel", "Psychic"],
		gender: "N",
		baseStats: {hp: 40, atk: 55, def: 80, spa: 35, spd: 60, spe: 30},
		abilities: {0: "Clear Body", H: "Light Metal"},
		heightm: 0.6,
		weightkg: 95.2,
		color: "Blue",
		evos: ["metang"],
		eggGroups: ["Mineral"],
	},
	metang: {
		num: 375,
		species: "Metang",
		types: ["Steel", "Psychic"],
		gender: "N",
		baseStats: {hp: 60, atk: 75, def: 100, spa: 55, spd: 80, spe: 50},
		abilities: {0: "Clear Body", H: "Light Metal"},
		heightm: 1.2,
		weightkg: 202.5,
		color: "Blue",
		prevo: "beldum",
		evos: ["metagross"],
		evoLevel: 20,
		eggGroups: ["Mineral"],
	},
	metagross: {
		num: 376,
		species: "Metagross",
		types: ["Steel", "Psychic"],
		gender: "N",
		baseStats: {hp: 80, atk: 135, def: 130, spa: 95, spd: 90, spe: 70},
		abilities: {0: "Clear Body", H: "Light Metal"},
		heightm: 1.6,
		weightkg: 550,
		color: "Blue",
		prevo: "metang",
		evoLevel: 45,
		eggGroups: ["Mineral"],
		otherFormes: ["metagrossmega"],
	},
	metagrossmega: {
		num: 376,
		species: "Metagross-Mega",
		baseSpecies: "Metagross",
		forme: "Mega",
		formeLetter: "M",
		types: ["Steel", "Psychic"],
		gender: "N",
		baseStats: {hp: 80, atk: 145, def: 150, spa: 105, spd: 110, spe: 110},
		abilities: {0: "Tough Claws"},
		heightm: 2.5,
		weightkg: 942.9,
		color: "Blue",
		eggGroups: ["Mineral"],
	},
	regirock: {
		num: 377,
		species: "Regirock",
		types: ["Rock"],
		gender: "N",
		baseStats: {hp: 80, atk: 100, def: 200, spa: 50, spd: 100, spe: 50},
		abilities: {0: "Clear Body", H: "Sturdy"},
		heightm: 1.7,
		weightkg: 230,
		color: "Brown",
		eggGroups: ["Undiscovered"],
	},
	regice: {
		num: 378,
		species: "Regice",
		types: ["Ice"],
		gender: "N",
		baseStats: {hp: 80, atk: 50, def: 100, spa: 100, spd: 200, spe: 50},
		abilities: {0: "Clear Body", H: "Ice Body"},
		heightm: 1.8,
		weightkg: 175,
		color: "Blue",
		eggGroups: ["Undiscovered"],
	},
	registeel: {
		num: 379,
		species: "Registeel",
		types: ["Steel"],
		gender: "N",
		baseStats: {hp: 80, atk: 75, def: 150, spa: 75, spd: 150, spe: 50},
		abilities: {0: "Clear Body", H: "Light Metal"},
		heightm: 1.9,
		weightkg: 205,
		color: "Gray",
		eggGroups: ["Undiscovered"],
	},
	latias: {
		num: 380,
		species: "Latias",
		types: ["Dragon", "Psychic"],
		gender: "F",
		baseStats: {hp: 80, atk: 80, def: 90, spa: 110, spd: 130, spe: 110},
		abilities: {0: "Levitate"},
		heightm: 1.4,
		weightkg: 40,
		color: "Red",
		eggGroups: ["Undiscovered"],
		otherFormes: ["latiasmega"],
	},
	latiasmega: {
		num: 380,
		species: "Latias-Mega",
		baseSpecies: "Latias",
		forme: "Mega",
		formeLetter: "M",
		types: ["Dragon", "Psychic"],
		gender: "F",
		baseStats: {hp: 80, atk: 100, def: 120, spa: 140, spd: 150, spe: 110},
		abilities: {0: "Levitate"},
		heightm: 1.8,
		weightkg: 52,
		color: "Purple",
		eggGroups: ["Undiscovered"],
	},
	latios: {
		num: 381,
		species: "Latios",
		types: ["Dragon", "Psychic"],
		gender: "M",
		baseStats: {hp: 80, atk: 90, def: 80, spa: 130, spd: 110, spe: 110},
		abilities: {0: "Levitate"},
		heightm: 2,
		weightkg: 60,
		color: "Blue",
		eggGroups: ["Undiscovered"],
		otherFormes: ["latiosmega"],
	},
	latiosmega: {
		num: 381,
		species: "Latios-Mega",
		baseSpecies: "Latios",
		forme: "Mega",
		formeLetter: "M",
		types: ["Dragon", "Psychic"],
		gender: "M",
		baseStats: {hp: 80, atk: 130, def: 100, spa: 160, spd: 120, spe: 110},
		abilities: {0: "Levitate"},
		heightm: 2.3,
		weightkg: 70,
		color: "Purple",
		eggGroups: ["Undiscovered"],
	},
	kyogre: {
		num: 382,
		species: "Kyogre",
		types: ["Water"],
		gender: "N",
		baseStats: {hp: 100, atk: 100, def: 90, spa: 150, spd: 140, spe: 90},
		abilities: {0: "Drizzle"},
		heightm: 4.5,
		weightkg: 352,
		color: "Blue",
		eggGroups: ["Undiscovered"],
		otherFormes: ["kyogreprimal"],
	},
	kyogreprimal: {
		num: 382,
		species: "Kyogre-Primal",
		baseSpecies: "Kyogre",
		forme: "Primal",
		formeLetter: "P",
		types: ["Water"],
		gender: "N",
		baseStats: {hp: 100, atk: 150, def: 90, spa: 180, spd: 160, spe: 90},
		abilities: {0: "Primordial Sea"},
		heightm: 9.8,
		weightkg: 430,
		color: "Blue",
		eggGroups: ["Undiscovered"],
	},
	groudon: {
		num: 383,
		species: "Groudon",
		types: ["Ground"],
		gender: "N",
		baseStats: {hp: 100, atk: 150, def: 140, spa: 100, spd: 90, spe: 90},
		abilities: {0: "Drought"},
		heightm: 3.5,
		weightkg: 950,
		color: "Red",
		eggGroups: ["Undiscovered"],
		otherFormes: ["groudonprimal"],
	},
	groudonprimal: {
		num: 383,
		species: "Groudon-Primal",
		baseSpecies: "Groudon",
		forme: "Primal",
		formeLetter: "P",
		types: ["Ground", "Fire"],
		gender: "N",
		baseStats: {hp: 100, atk: 180, def: 160, spa: 150, spd: 90, spe: 90},
		abilities: {0: "Desolate Land"},
		heightm: 5,
		weightkg: 999.7,
		color: "Red",
		eggGroups: ["Undiscovered"],
	},
	rayquaza: {
		num: 384,
		species: "Rayquaza",
		types: ["Dragon", "Flying"],
		gender: "N",
		baseStats: {hp: 105, atk: 150, def: 90, spa: 150, spd: 90, spe: 95},
		abilities: {0: "Air Lock"},
		heightm: 7,
		weightkg: 206.5,
		color: "Green",
		eggGroups: ["Undiscovered"],
		otherFormes: ["rayquazamega"],
	},
	rayquazamega: {
		num: 384,
		species: "Rayquaza-Mega",
		baseSpecies: "Rayquaza",
		forme: "Mega",
		formeLetter: "M",
		types: ["Dragon", "Flying"],
		gender: "N",
		baseStats: {hp: 105, atk: 180, def: 100, spa: 180, spd: 100, spe: 115},
		abilities: {0: "Delta Stream"},
		heightm: 10.8,
		weightkg: 392,
		color: "Green",
		eggGroups: ["Undiscovered"],
	},
	jirachi: {
		num: 385,
		species: "Jirachi",
		types: ["Steel", "Psychic"],
		gender: "N",
		baseStats: {hp: 100, atk: 100, def: 100, spa: 100, spd: 100, spe: 100},
		abilities: {0: "Serene Grace"},
		heightm: 0.3,
		weightkg: 1.1,
		color: "Yellow",
		eggGroups: ["Undiscovered"],
	},
	deoxys: {
		num: 386,
		species: "Deoxys",
		baseForme: "Normal",
		types: ["Psychic"],
		gender: "N",
		baseStats: {hp: 50, atk: 150, def: 50, spa: 150, spd: 50, spe: 150},
		abilities: {0: "Pressure"},
		heightm: 1.7,
		weightkg: 60.8,
		color: "Red",
		eggGroups: ["Undiscovered"],
		otherFormes: ["deoxysattack", "deoxysdefense", "deoxysspeed"],
	},
	deoxysattack: {
		num: 386,
		species: "Deoxys-Attack",
		baseSpecies: "Deoxys",
		forme: "Attack",
		formeLetter: "A",
		types: ["Psychic"],
		gender: "N",
		baseStats: {hp: 50, atk: 180, def: 20, spa: 180, spd: 20, spe: 150},
		abilities: {0: "Pressure"},
		heightm: 1.7,
		weightkg: 60.8,
		color: "Red",
		eggGroups: ["Undiscovered"],
	},
	deoxysdefense: {
		num: 386,
		species: "Deoxys-Defense",
		baseSpecies: "Deoxys",
		forme: "Defense",
		formeLetter: "D",
		types: ["Psychic"],
		gender: "N",
		baseStats: {hp: 50, atk: 70, def: 160, spa: 70, spd: 160, spe: 90},
		abilities: {0: "Pressure"},
		heightm: 1.7,
		weightkg: 60.8,
		color: "Red",
		eggGroups: ["Undiscovered"],
	},
	deoxysspeed: {
		num: 386,
		species: "Deoxys-Speed",
		baseSpecies: "Deoxys",
		forme: "Speed",
		formeLetter: "S",
		types: ["Psychic"],
		gender: "N",
		baseStats: {hp: 50, atk: 95, def: 90, spa: 95, spd: 90, spe: 180},
		abilities: {0: "Pressure"},
		heightm: 1.7,
		weightkg: 60.8,
		color: "Red",
		eggGroups: ["Undiscovered"],
	},
	turtwig: {
		num: 387,
		species: "Turtwig",
		types: ["Grass"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 55, atk: 68, def: 64, spa: 45, spd: 55, spe: 31},
		abilities: {0: "Overgrow", H: "Shell Armor"},
		heightm: 0.4,
		weightkg: 10.2,
		color: "Green",
		evos: ["grotle"],
		eggGroups: ["Monster", "Grass"],
	},
	grotle: {
		num: 388,
		species: "Grotle",
		types: ["Grass"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 75, atk: 89, def: 85, spa: 55, spd: 65, spe: 36},
		abilities: {0: "Overgrow", H: "Shell Armor"},
		heightm: 1.1,
		weightkg: 97,
		color: "Green",
		prevo: "turtwig",
		evoLevel: 18,
		evos: ["torterra"],
		eggGroups: ["Monster", "Grass"],
	},
	torterra: {
		num: 389,
		species: "Torterra",
		types: ["Grass", "Ground"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 95, atk: 109, def: 105, spa: 75, spd: 85, spe: 56},
		abilities: {0: "Overgrow", H: "Shell Armor"},
		heightm: 2.2,
		weightkg: 310,
		color: "Green",
		prevo: "grotle",
		evoLevel: 32,
		eggGroups: ["Monster", "Grass"],
	},
	chimchar: {
		num: 390,
		species: "Chimchar",
		types: ["Fire"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 44, atk: 58, def: 44, spa: 58, spd: 44, spe: 61},
		abilities: {0: "Blaze", H: "Iron Fist"},
		heightm: 0.5,
		weightkg: 6.2,
		color: "Brown",
		evos: ["monferno"],
		eggGroups: ["Field", "Human-Like"],
	},
	monferno: {
		num: 391,
		species: "Monferno",
		types: ["Fire", "Fighting"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 64, atk: 78, def: 52, spa: 78, spd: 52, spe: 81},
		abilities: {0: "Blaze", H: "Iron Fist"},
		heightm: 0.9,
		weightkg: 22,
		color: "Brown",
		prevo: "chimchar",
		evoLevel: 14,
		evos: ["infernape"],
		eggGroups: ["Field", "Human-Like"],
	},
	infernape: {
		num: 392,
		species: "Infernape",
		types: ["Fire", "Fighting"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 76, atk: 104, def: 71, spa: 104, spd: 71, spe: 108},
		abilities: {0: "Blaze", H: "Iron Fist"},
		heightm: 1.2,
		weightkg: 55,
		color: "Brown",
		prevo: "monferno",
		evoLevel: 36,
		eggGroups: ["Field", "Human-Like"],
	},
	piplup: {
		num: 393,
		species: "Piplup",
		types: ["Water"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 53, atk: 51, def: 53, spa: 61, spd: 56, spe: 40},
		abilities: {0: "Torrent", H: "Defiant"},
		heightm: 0.4,
		weightkg: 5.2,
		color: "Blue",
		evos: ["prinplup"],
		eggGroups: ["Water 1", "Field"],
	},
	prinplup: {
		num: 394,
		species: "Prinplup",
		types: ["Water"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 64, atk: 66, def: 68, spa: 81, spd: 76, spe: 50},
		abilities: {0: "Torrent", H: "Defiant"},
		heightm: 0.8,
		weightkg: 23,
		color: "Blue",
		prevo: "piplup",
		evoLevel: 16,
		evos: ["empoleon"],
		eggGroups: ["Water 1", "Field"],
	},
	empoleon: {
		num: 395,
		species: "Empoleon",
		types: ["Water", "Steel"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 84, atk: 86, def: 88, spa: 111, spd: 101, spe: 60},
		abilities: {0: "Torrent", H: "Defiant"},
		heightm: 1.7,
		weightkg: 84.5,
		color: "Blue",
		prevo: "prinplup",
		evoLevel: 36,
		eggGroups: ["Water 1", "Field"],
	},
	starly: {
		num: 396,
		species: "Starly",
		types: ["Normal", "Flying"],
		baseStats: {hp: 40, atk: 55, def: 30, spa: 30, spd: 30, spe: 60},
		abilities: {0: "Keen Eye", H: "Reckless"},
		heightm: 0.3,
		weightkg: 2,
		color: "Brown",
		evos: ["staravia"],
		eggGroups: ["Flying"],
	},
	staravia: {
		num: 397,
		species: "Staravia",
		types: ["Normal", "Flying"],
		baseStats: {hp: 55, atk: 75, def: 50, spa: 40, spd: 40, spe: 80},
		abilities: {0: "Intimidate", H: "Reckless"},
		heightm: 0.6,
		weightkg: 15.5,
		color: "Brown",
		prevo: "starly",
		evoLevel: 14,
		evos: ["staraptor"],
		eggGroups: ["Flying"],
	},
	staraptor: {
		num: 398,
		species: "Staraptor",
		types: ["Normal", "Flying"],
		baseStats: {hp: 85, atk: 120, def: 70, spa: 50, spd: 60, spe: 100},
		abilities: {0: "Intimidate", H: "Reckless"},
		heightm: 1.2,
		weightkg: 24.9,
		color: "Brown",
		prevo: "staravia",
		evoLevel: 34,
		eggGroups: ["Flying"],
	},
	bidoof: {
		num: 399,
		species: "Bidoof",
		types: ["Normal"],
		baseStats: {hp: 59, atk: 45, def: 40, spa: 35, spd: 40, spe: 31},
		abilities: {0: "Simple", 1: "Unaware", H: "Moody"},
		heightm: 0.5,
		weightkg: 20,
		color: "Brown",
		evos: ["bibarel"],
		eggGroups: ["Water 1", "Field"],
	},
	bibarel: {
		num: 400,
		species: "Bibarel",
		types: ["Normal", "Water"],
		baseStats: {hp: 79, atk: 85, def: 60, spa: 55, spd: 60, spe: 71},
		abilities: {0: "Simple", 1: "Unaware", H: "Moody"},
		heightm: 1,
		weightkg: 31.5,
		color: "Brown",
		prevo: "bidoof",
		evoLevel: 15,
		eggGroups: ["Water 1", "Field"],
	},
	kricketot: {
		num: 401,
		species: "Kricketot",
		types: ["Bug"],
		baseStats: {hp: 37, atk: 25, def: 41, spa: 25, spd: 41, spe: 25},
		abilities: {0: "Shed Skin", H: "Run Away"},
		heightm: 0.3,
		weightkg: 2.2,
		color: "Red",
		evos: ["kricketune"],
		eggGroups: ["Bug"],
	},
	kricketune: {
		num: 402,
		species: "Kricketune",
		types: ["Bug"],
		baseStats: {hp: 77, atk: 85, def: 51, spa: 55, spd: 51, spe: 65},
		abilities: {0: "Swarm", H: "Technician"},
		heightm: 1,
		weightkg: 25.5,
		color: "Red",
		prevo: "kricketot",
		evoLevel: 10,
		eggGroups: ["Bug"],
	},
	shinx: {
		num: 403,
		species: "Shinx",
		types: ["Electric"],
		baseStats: {hp: 45, atk: 65, def: 34, spa: 40, spd: 34, spe: 45},
		abilities: {0: "Rivalry", 1: "Intimidate", H: "Guts"},
		heightm: 0.5,
		weightkg: 9.5,
		color: "Blue",
		evos: ["luxio"],
		eggGroups: ["Field"],
	},
	luxio: {
		num: 404,
		species: "Luxio",
		types: ["Electric"],
		baseStats: {hp: 60, atk: 85, def: 49, spa: 60, spd: 49, spe: 60},
		abilities: {0: "Rivalry", 1: "Intimidate", H: "Guts"},
		heightm: 0.9,
		weightkg: 30.5,
		color: "Blue",
		prevo: "shinx",
		evoLevel: 15,
		evos: ["luxray"],
		eggGroups: ["Field"],
	},
	luxray: {
		num: 405,
		species: "Luxray",
		types: ["Electric"],
		baseStats: {hp: 80, atk: 120, def: 79, spa: 95, spd: 79, spe: 70},
		abilities: {0: "Rivalry", 1: "Intimidate", H: "Guts"},
		heightm: 1.4,
		weightkg: 42,
		color: "Blue",
		prevo: "luxio",
		evoLevel: 30,
		eggGroups: ["Field"],
	},
	budew: {
		num: 406,
		species: "Budew",
		types: ["Grass", "Poison"],
		baseStats: {hp: 40, atk: 30, def: 35, spa: 50, spd: 70, spe: 55},
		abilities: {0: "Natural Cure", 1: "Poison Point", H: "Leaf Guard"},
		heightm: 0.2,
		weightkg: 1.2,
		color: "Green",
		evos: ["roselia"],
		eggGroups: ["Undiscovered"],
		canHatch: true,
	},
	roserade: {
		num: 407,
		species: "Roserade",
		types: ["Grass", "Poison"],
		baseStats: {hp: 60, atk: 70, def: 65, spa: 125, spd: 105, spe: 90},
		abilities: {0: "Natural Cure", 1: "Poison Point", H: "Technician"},
		heightm: 0.9,
		weightkg: 14.5,
		color: "Green",
		prevo: "roselia",
		evoType: "stone",
		evoItem: "Shiny Stone",
		eggGroups: ["Fairy", "Grass"],
	},
	cranidos: {
		num: 408,
		species: "Cranidos",
		types: ["Rock"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 67, atk: 125, def: 40, spa: 30, spd: 30, spe: 58},
		abilities: {0: "Mold Breaker", H: "Sheer Force"},
		heightm: 0.9,
		weightkg: 31.5,
		color: "Blue",
		evos: ["rampardos"],
		eggGroups: ["Monster"],
	},
	rampardos: {
		num: 409,
		species: "Rampardos",
		types: ["Rock"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 97, atk: 165, def: 60, spa: 65, spd: 50, spe: 58},
		abilities: {0: "Mold Breaker", H: "Sheer Force"},
		heightm: 1.6,
		weightkg: 102.5,
		color: "Blue",
		prevo: "cranidos",
		evoLevel: 30,
		eggGroups: ["Monster"],
	},
	shieldon: {
		num: 410,
		species: "Shieldon",
		types: ["Rock", "Steel"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 30, atk: 42, def: 118, spa: 42, spd: 88, spe: 30},
		abilities: {0: "Sturdy", H: "Soundproof"},
		heightm: 0.5,
		weightkg: 57,
		color: "Gray",
		evos: ["bastiodon"],
		eggGroups: ["Monster"],
	},
	bastiodon: {
		num: 411,
		species: "Bastiodon",
		types: ["Rock", "Steel"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 60, atk: 52, def: 168, spa: 47, spd: 138, spe: 30},
		abilities: {0: "Sturdy", H: "Soundproof"},
		heightm: 1.3,
		weightkg: 149.5,
		color: "Gray",
		prevo: "shieldon",
		evoLevel: 30,
		eggGroups: ["Monster"],
	},
	burmy: {
		num: 412,
		species: "Burmy",
		baseForme: "Plant",
		types: ["Bug"],
		baseStats: {hp: 40, atk: 29, def: 45, spa: 29, spd: 45, spe: 36},
		abilities: {0: "Shed Skin", H: "Overcoat"},
		heightm: 0.2,
		weightkg: 3.4,
		color: "Green",
		evos: ["wormadam", "wormadamsandy", "wormadamtrash", "mothim"],
		eggGroups: ["Bug"],
		otherForms: ["burmysandy", "burmytrash"],
	},
	wormadam: {
		num: 413,
		species: "Wormadam",
		baseForme: "Plant",
		types: ["Bug", "Grass"],
		gender: "F",
		baseStats: {hp: 60, atk: 59, def: 85, spa: 79, spd: 105, spe: 36},
		abilities: {0: "Anticipation", H: "Overcoat"},
		heightm: 0.5,
		weightkg: 6.5,
		color: "Green",
		prevo: "burmy",
		evoLevel: 20,
		eggGroups: ["Bug"],
		otherFormes: ["wormadamsandy", "wormadamtrash"],
	},
	wormadamsandy: {
		num: 413,
		species: "Wormadam-Sandy",
		baseSpecies: "Wormadam",
		forme: "Sandy",
		formeLetter: "G",
		types: ["Bug", "Ground"],
		gender: "F",
		baseStats: {hp: 60, atk: 79, def: 105, spa: 59, spd: 85, spe: 36},
		abilities: {0: "Anticipation", H: "Overcoat"},
		heightm: 0.5,
		weightkg: 6.5,
		color: "Brown",
		prevo: "burmy",
		evoLevel: 20,
		eggGroups: ["Bug"],
	},
	wormadamtrash: {
		num: 413,
		species: "Wormadam-Trash",
		baseSpecies: "Wormadam",
		forme: "Trash",
		formeLetter: "S",
		types: ["Bug", "Steel"],
		gender: "F",
		baseStats: {hp: 60, atk: 69, def: 95, spa: 69, spd: 95, spe: 36},
		abilities: {0: "Anticipation", H: "Overcoat"},
		heightm: 0.5,
		weightkg: 6.5,
		color: "Red",
		prevo: "burmy",
		evoLevel: 20,
		eggGroups: ["Bug"],
	},
	mothim: {
		num: 414,
		species: "Mothim",
		types: ["Bug", "Flying"],
		gender: "M",
		baseStats: {hp: 70, atk: 94, def: 50, spa: 94, spd: 50, spe: 66},
		abilities: {0: "Swarm", H: "Tinted Lens"},
		heightm: 0.9,
		weightkg: 23.3,
		color: "Yellow",
		prevo: "burmy",
		evoLevel: 20,
		eggGroups: ["Bug"],
	},
	combee: {
		num: 415,
		species: "Combee",
		types: ["Bug", "Flying"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 30, atk: 30, def: 42, spa: 30, spd: 42, spe: 70},
		abilities: {0: "Honey Gather", H: "Hustle"},
		heightm: 0.3,
		weightkg: 5.5,
		color: "Yellow",
		evos: ["vespiquen"],
		eggGroups: ["Bug"],
	},
	vespiquen: {
		num: 416,
		species: "Vespiquen",
		types: ["Bug", "Flying"],
		gender: "F",
		baseStats: {hp: 70, atk: 80, def: 102, spa: 80, spd: 102, spe: 40},
		abilities: {0: "Pressure", H: "Unnerve"},
		heightm: 1.2,
		weightkg: 38.5,
		color: "Yellow",
		prevo: "combee",
		evoLevel: 21,
		eggGroups: ["Bug"],
	},
	pachirisu: {
		num: 417,
		species: "Pachirisu",
		types: ["Electric"],
		baseStats: {hp: 60, atk: 45, def: 70, spa: 45, spd: 90, spe: 95},
		abilities: {0: "Run Away", 1: "Pickup", H: "Volt Absorb"},
		heightm: 0.4,
		weightkg: 3.9,
		color: "White",
		eggGroups: ["Field", "Fairy"],
	},
	buizel: {
		num: 418,
		species: "Buizel",
		types: ["Water"],
		baseStats: {hp: 55, atk: 65, def: 35, spa: 60, spd: 30, spe: 85},
		abilities: {0: "Swift Swim", H: "Water Veil"},
		heightm: 0.7,
		weightkg: 29.5,
		color: "Brown",
		evos: ["floatzel"],
		eggGroups: ["Water 1", "Field"],
	},
	floatzel: {
		num: 419,
		species: "Floatzel",
		types: ["Water"],
		baseStats: {hp: 85, atk: 105, def: 55, spa: 85, spd: 50, spe: 115},
		abilities: {0: "Swift Swim", H: "Water Veil"},
		heightm: 1.1,
		weightkg: 33.5,
		color: "Brown",
		prevo: "buizel",
		evoLevel: 26,
		eggGroups: ["Water 1", "Field"],
	},
	cherubi: {
		num: 420,
		species: "Cherubi",
		types: ["Grass"],
		baseStats: {hp: 45, atk: 35, def: 45, spa: 62, spd: 53, spe: 35},
		abilities: {0: "Chlorophyll"},
		heightm: 0.4,
		weightkg: 3.3,
		color: "Pink",
		evos: ["cherrim"],
		eggGroups: ["Fairy", "Grass"],
	},
	cherrim: {
		num: 421,
		species: "Cherrim",
		baseForme: "Overcast",
		types: ["Grass"],
		baseStats: {hp: 70, atk: 60, def: 70, spa: 87, spd: 78, spe: 85},
		abilities: {0: "Flower Gift"},
		heightm: 0.5,
		weightkg: 9.3,
		color: "Purple",
		prevo: "cherubi",
		evoLevel: 25,
		eggGroups: ["Fairy", "Grass"],
		otherFormes: ["cherrimsunshine"],
	},
	cherrimsunshine: {
		num: 421,
		species: "Cherrim-Sunshine",
		baseSpecies: "Cherrim",
		forme: "Sunshine",
		formeLetter: "S",
		types: ["Grass"],
		baseStats: {hp: 70, atk: 60, def: 70, spa: 87, spd: 78, spe: 85},
		abilities: {0: "Flower Gift"},
		heightm: 0.5,
		weightkg: 9.3,
		color: "Pink",
		prevo: "cherubi",
		evoLevel: 25,
		eggGroups: ["Fairy", "Grass"],
	},
	shellos: {
		num: 422,
		species: "Shellos",
		baseForme: "West",
		types: ["Water"],
		baseStats: {hp: 76, atk: 48, def: 48, spa: 57, spd: 62, spe: 34},
		abilities: {0: "Sticky Hold", 1: "Storm Drain", H: "Sand Force"},
		heightm: 0.3,
		weightkg: 6.3,
		color: "Purple",
		evos: ["gastrodon"],
		eggGroups: ["Water 1", "Amorphous"],
		otherForms: ["shelloseast"],
	},
	gastrodon: {
		num: 423,
		species: "Gastrodon",
		baseForme: "West",
		types: ["Water", "Ground"],
		baseStats: {hp: 111, atk: 83, def: 68, spa: 92, spd: 82, spe: 39},
		abilities: {0: "Sticky Hold", 1: "Storm Drain", H: "Sand Force"},
		heightm: 0.9,
		weightkg: 29.9,
		color: "Purple",
		prevo: "shellos",
		evoLevel: 30,
		eggGroups: ["Water 1", "Amorphous"],
		otherForms: ["gastrodoneast"],
	},
	ambipom: {
		num: 424,
		species: "Ambipom",
		types: ["Normal"],
		baseStats: {hp: 75, atk: 100, def: 66, spa: 60, spd: 66, spe: 115},
		abilities: {0: "Technician", 1: "Pickup", H: "Skill Link"},
		heightm: 1.2,
		weightkg: 20.3,
		color: "Purple",
		prevo: "aipom",
		evoType: "levelMove",
		evoMove: "Double Hit",
		eggGroups: ["Field"],
	},
	drifloon: {
		num: 425,
		species: "Drifloon",
		types: ["Ghost", "Flying"],
		baseStats: {hp: 90, atk: 50, def: 34, spa: 60, spd: 44, spe: 70},
		abilities: {0: "Aftermath", 1: "Unburden", H: "Flare Boost"},
		heightm: 0.4,
		weightkg: 1.2,
		color: "Purple",
		evos: ["drifblim"],
		eggGroups: ["Amorphous"],
	},
	drifblim: {
		num: 426,
		species: "Drifblim",
		types: ["Ghost", "Flying"],
		baseStats: {hp: 150, atk: 80, def: 44, spa: 90, spd: 54, spe: 80},
		abilities: {0: "Aftermath", 1: "Unburden", H: "Flare Boost"},
		heightm: 1.2,
		weightkg: 15,
		color: "Purple",
		prevo: "drifloon",
		evoLevel: 28,
		eggGroups: ["Amorphous"],
	},
	buneary: {
		num: 427,
		species: "Buneary",
		types: ["Normal"],
		baseStats: {hp: 55, atk: 66, def: 44, spa: 44, spd: 56, spe: 85},
		abilities: {0: "Run Away", 1: "Klutz", H: "Limber"},
		heightm: 0.4,
		weightkg: 5.5,
		color: "Brown",
		evos: ["lopunny"],
		eggGroups: ["Field", "Human-Like"],
	},
	lopunny: {
		num: 428,
		species: "Lopunny",
		types: ["Normal"],
		baseStats: {hp: 65, atk: 76, def: 84, spa: 54, spd: 96, spe: 105},
		abilities: {0: "Cute Charm", 1: "Klutz", H: "Limber"},
		heightm: 1.2,
		weightkg: 33.3,
		color: "Brown",
		prevo: "buneary",
		evoType: "levelFriendship",
		eggGroups: ["Field", "Human-Like"],
		otherFormes: ["lopunnymega"],
	},
	lopunnymega: {
		num: 428,
		species: "Lopunny-Mega",
		baseSpecies: "Lopunny",
		forme: "Mega",
		formeLetter: "M",
		types: ["Normal", "Fighting"],
		baseStats: {hp: 65, atk: 136, def: 94, spa: 54, spd: 96, spe: 135},
		abilities: {0: "Scrappy"},
		heightm: 1.3,
		weightkg: 28.3,
		color: "Brown",
		eggGroups: ["Field", "Human-Like"],
	},
	mismagius: {
		num: 429,
		species: "Mismagius",
		types: ["Ghost"],
		baseStats: {hp: 60, atk: 60, def: 60, spa: 105, spd: 105, spe: 105},
		abilities: {0: "Levitate"},
		heightm: 0.9,
		weightkg: 4.4,
		color: "Purple",
		prevo: "misdreavus",
		evoType: "stone",
		evoItem: "Dusk Stone",
		eggGroups: ["Amorphous"],
	},
	honchkrow: {
		num: 430,
		species: "Honchkrow",
		types: ["Dark", "Flying"],
		baseStats: {hp: 100, atk: 125, def: 52, spa: 105, spd: 52, spe: 71},
		abilities: {0: "Insomnia", 1: "Super Luck", H: "Moxie"},
		heightm: 0.9,
		weightkg: 27.3,
		color: "Black",
		prevo: "murkrow",
		evoType: "stone",
		evoItem: "Dusk Stone",
		eggGroups: ["Flying"],
	},
	glameow: {
		num: 431,
		species: "Glameow",
		types: ["Normal"],
		genderRatio: {M: 0.25, F: 0.75},
		baseStats: {hp: 49, atk: 55, def: 42, spa: 42, spd: 37, spe: 85},
		abilities: {0: "Limber", 1: "Own Tempo", H: "Keen Eye"},
		heightm: 0.5,
		weightkg: 3.9,
		color: "Gray",
		evos: ["purugly"],
		eggGroups: ["Field"],
	},
	purugly: {
		num: 432,
		species: "Purugly",
		types: ["Normal"],
		genderRatio: {M: 0.25, F: 0.75},
		baseStats: {hp: 71, atk: 82, def: 64, spa: 64, spd: 59, spe: 112},
		abilities: {0: "Thick Fat", 1: "Own Tempo", H: "Defiant"},
		heightm: 1,
		weightkg: 43.8,
		color: "Gray",
		prevo: "glameow",
		evoLevel: 38,
		eggGroups: ["Field"],
	},
	chingling: {
		num: 433,
		species: "Chingling",
		types: ["Psychic"],
		baseStats: {hp: 45, atk: 30, def: 50, spa: 65, spd: 50, spe: 45},
		abilities: {0: "Levitate"},
		heightm: 0.2,
		weightkg: 0.6,
		color: "Yellow",
		evos: ["chimecho"],
		eggGroups: ["Undiscovered"],
		canHatch: true,
	},
	stunky: {
		num: 434,
		species: "Stunky",
		types: ["Poison", "Dark"],
		baseStats: {hp: 63, atk: 63, def: 47, spa: 41, spd: 41, spe: 74},
		abilities: {0: "Stench", 1: "Aftermath", H: "Keen Eye"},
		heightm: 0.4,
		weightkg: 19.2,
		color: "Purple",
		evos: ["skuntank"],
		eggGroups: ["Field"],
	},
	skuntank: {
		num: 435,
		species: "Skuntank",
		types: ["Poison", "Dark"],
		baseStats: {hp: 103, atk: 93, def: 67, spa: 71, spd: 61, spe: 84},
		abilities: {0: "Stench", 1: "Aftermath", H: "Keen Eye"},
		heightm: 1,
		weightkg: 38,
		color: "Purple",
		prevo: "stunky",
		evoLevel: 34,
		eggGroups: ["Field"],
	},
	bronzor: {
		num: 436,
		species: "Bronzor",
		types: ["Steel", "Psychic"],
		gender: "N",
		baseStats: {hp: 57, atk: 24, def: 86, spa: 24, spd: 86, spe: 23},
		abilities: {0: "Levitate", 1: "Heatproof", H: "Heavy Metal"},
		heightm: 0.5,
		weightkg: 60.5,
		color: "Green",
		evos: ["bronzong"],
		eggGroups: ["Mineral"],
	},
	bronzong: {
		num: 437,
		species: "Bronzong",
		types: ["Steel", "Psychic"],
		gender: "N",
		baseStats: {hp: 67, atk: 89, def: 116, spa: 79, spd: 116, spe: 33},
		abilities: {0: "Levitate", 1: "Heatproof", H: "Heavy Metal"},
		heightm: 1.3,
		weightkg: 187,
		color: "Green",
		prevo: "bronzor",
		evoLevel: 33,
		eggGroups: ["Mineral"],
	},
	bonsly: {
		num: 438,
		species: "Bonsly",
		types: ["Rock"],
		baseStats: {hp: 50, atk: 80, def: 95, spa: 10, spd: 45, spe: 10},
		abilities: {0: "Sturdy", 1: "Rock Head", H: "Rattled"},
		heightm: 0.5,
		weightkg: 15,
		color: "Brown",
		evos: ["sudowoodo"],
		eggGroups: ["Undiscovered"],
		canHatch: true,
	},
	mimejr: {
		num: 439,
		species: "Mime Jr.",
		types: ["Psychic", "Fairy"],
		baseStats: {hp: 20, atk: 25, def: 45, spa: 70, spd: 90, spe: 60},
		abilities: {0: "Soundproof", 1: "Filter", H: "Technician"},
		heightm: 0.6,
		weightkg: 13,
		color: "Pink",
		evos: ["mrmime"],
		eggGroups: ["Undiscovered"],
		canHatch: true,
	},
	happiny: {
		num: 440,
		species: "Happiny",
		types: ["Normal"],
		gender: "F",
		baseStats: {hp: 100, atk: 5, def: 5, spa: 15, spd: 65, spe: 30},
		abilities: {0: "Natural Cure", 1: "Serene Grace", H: "Friend Guard"},
		heightm: 0.6,
		weightkg: 24.4,
		color: "Pink",
		evos: ["chansey"],
		eggGroups: ["Undiscovered"],
		canHatch: true,
	},
	chatot: {
		num: 441,
		species: "Chatot",
		types: ["Normal", "Flying"],
		baseStats: {hp: 76, atk: 65, def: 45, spa: 92, spd: 42, spe: 91},
		abilities: {0: "Keen Eye", 1: "Tangled Feet", H: "Big Pecks"},
		heightm: 0.5,
		weightkg: 1.9,
		color: "Black",
		eggGroups: ["Flying"],
	},
	spiritomb: {
		num: 442,
		species: "Spiritomb",
		types: ["Ghost", "Dark"],
		baseStats: {hp: 50, atk: 92, def: 108, spa: 92, spd: 108, spe: 35},
		abilities: {0: "Pressure", H: "Infiltrator"},
		heightm: 1,
		weightkg: 108,
		color: "Purple",
		eggGroups: ["Amorphous"],
	},
	gible: {
		num: 443,
		species: "Gible",
		types: ["Dragon", "Ground"],
		baseStats: {hp: 58, atk: 70, def: 45, spa: 40, spd: 45, spe: 42},
		abilities: {0: "Sand Veil", H: "Rough Skin"},
		heightm: 0.7,
		weightkg: 20.5,
		color: "Blue",
		evos: ["gabite"],
		eggGroups: ["Monster", "Dragon"],
	},
	gabite: {
		num: 444,
		species: "Gabite",
		types: ["Dragon", "Ground"],
		baseStats: {hp: 68, atk: 90, def: 65, spa: 50, spd: 55, spe: 82},
		abilities: {0: "Sand Veil", H: "Rough Skin"},
		heightm: 1.4,
		weightkg: 56,
		color: "Blue",
		prevo: "gible",
		evoLevel: 24,
		evos: ["garchomp"],
		eggGroups: ["Monster", "Dragon"],
	},
	garchomp: {
		num: 445,
		species: "Garchomp",
		types: ["Dragon", "Ground"],
		baseStats: {hp: 108, atk: 130, def: 95, spa: 80, spd: 85, spe: 102},
		abilities: {0: "Sand Veil", H: "Rough Skin"},
		heightm: 1.9,
		weightkg: 95,
		color: "Blue",
		prevo: "gabite",
		evoLevel: 48,
		eggGroups: ["Monster", "Dragon"],
		otherFormes: ["garchompmega"],
	},
	garchompmega: {
		num: 445,
		species: "Garchomp-Mega",
		baseSpecies: "Garchomp",
		forme: "Mega",
		formeLetter: "M",
		types: ["Dragon", "Ground"],
		baseStats: {hp: 108, atk: 170, def: 115, spa: 120, spd: 95, spe: 92},
		abilities: {0: "Sand Force"},
		heightm: 1.9,
		weightkg: 95,
		color: "Blue",
		eggGroups: ["Monster", "Dragon"],
	},
	munchlax: {
		num: 446,
		species: "Munchlax",
		types: ["Normal"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 135, atk: 85, def: 40, spa: 40, spd: 85, spe: 5},
		abilities: {0: "Pickup", 1: "Thick Fat", H: "Gluttony"},
		heightm: 0.6,
		weightkg: 105,
		color: "Black",
		evos: ["snorlax"],
		eggGroups: ["Undiscovered"],
		canHatch: true,
	},
	riolu: {
		num: 447,
		species: "Riolu",
		types: ["Fighting"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 40, atk: 70, def: 40, spa: 35, spd: 40, spe: 60},
		abilities: {0: "Steadfast", 1: "Inner Focus", H: "Prankster"},
		heightm: 0.7,
		weightkg: 20.2,
		color: "Blue",
		evos: ["lucario"],
		eggGroups: ["Undiscovered"],
		canHatch: true,
	},
	lucario: {
		num: 448,
		species: "Lucario",
		types: ["Fighting", "Steel"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 70, atk: 110, def: 70, spa: 115, spd: 70, spe: 90},
		abilities: {0: "Steadfast", 1: "Inner Focus", H: "Justified"},
		heightm: 1.2,
		weightkg: 54,
		color: "Blue",
		prevo: "riolu",
		evoType: "levelFriendship",
		evoCondition: "during the day",
		eggGroups: ["Field", "Human-Like"],
		otherFormes: ["lucariomega"],
	},
	lucariomega: {
		num: 448,
		species: "Lucario-Mega",
		baseSpecies: "Lucario",
		forme: "Mega",
		formeLetter: "M",
		types: ["Fighting", "Steel"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 70, atk: 145, def: 88, spa: 140, spd: 70, spe: 112},
		abilities: {0: "Adaptability"},
		heightm: 1.3,
		weightkg: 57.5,
		color: "Blue",
		eggGroups: ["Field", "Human-Like"],
	},
	hippopotas: {
		num: 449,
		species: "Hippopotas",
		types: ["Ground"],
		baseStats: {hp: 68, atk: 72, def: 78, spa: 38, spd: 42, spe: 32},
		abilities: {0: "Sand Stream", H: "Sand Force"},
		heightm: 0.8,
		weightkg: 49.5,
		color: "Brown",
		evos: ["hippowdon"],
		eggGroups: ["Field"],
	},
	hippowdon: {
		num: 450,
		species: "Hippowdon",
		types: ["Ground"],
		baseStats: {hp: 108, atk: 112, def: 118, spa: 68, spd: 72, spe: 47},
		abilities: {0: "Sand Stream", H: "Sand Force"},
		heightm: 2,
		weightkg: 300,
		color: "Brown",
		prevo: "hippopotas",
		evoLevel: 34,
		eggGroups: ["Field"],
	},
	skorupi: {
		num: 451,
		species: "Skorupi",
		types: ["Poison", "Bug"],
		baseStats: {hp: 40, atk: 50, def: 90, spa: 30, spd: 55, spe: 65},
		abilities: {0: "Battle Armor", 1: "Sniper", H: "Keen Eye"},
		heightm: 0.8,
		weightkg: 12,
		color: "Purple",
		evos: ["drapion"],
		eggGroups: ["Bug", "Water 3"],
	},
	drapion: {
		num: 452,
		species: "Drapion",
		types: ["Poison", "Dark"],
		baseStats: {hp: 70, atk: 90, def: 110, spa: 60, spd: 75, spe: 95},
		abilities: {0: "Battle Armor", 1: "Sniper", H: "Keen Eye"},
		heightm: 1.3,
		weightkg: 61.5,
		color: "Purple",
		prevo: "skorupi",
		evoLevel: 40,
		eggGroups: ["Bug", "Water 3"],
	},
	croagunk: {
		num: 453,
		species: "Croagunk",
		types: ["Poison", "Fighting"],
		baseStats: {hp: 48, atk: 61, def: 40, spa: 61, spd: 40, spe: 50},
		abilities: {0: "Anticipation", 1: "Dry Skin", H: "Poison Touch"},
		heightm: 0.7,
		weightkg: 23,
		color: "Blue",
		evos: ["toxicroak"],
		eggGroups: ["Human-Like"],
	},
	toxicroak: {
		num: 454,
		species: "Toxicroak",
		types: ["Poison", "Fighting"],
		baseStats: {hp: 83, atk: 106, def: 65, spa: 86, spd: 65, spe: 85},
		abilities: {0: "Anticipation", 1: "Dry Skin", H: "Poison Touch"},
		heightm: 1.3,
		weightkg: 44.4,
		color: "Blue",
		prevo: "croagunk",
		evoLevel: 37,
		eggGroups: ["Human-Like"],
	},
	carnivine: {
		num: 455,
		species: "Carnivine",
		types: ["Grass"],
		baseStats: {hp: 74, atk: 100, def: 72, spa: 90, spd: 72, spe: 46},
		abilities: {0: "Levitate"},
		heightm: 1.4,
		weightkg: 27,
		color: "Green",
		eggGroups: ["Grass"],
	},
	finneon: {
		num: 456,
		species: "Finneon",
		types: ["Water"],
		baseStats: {hp: 49, atk: 49, def: 56, spa: 49, spd: 61, spe: 66},
		abilities: {0: "Swift Swim", 1: "Storm Drain", H: "Water Veil"},
		heightm: 0.4,
		weightkg: 7,
		color: "Blue",
		evos: ["lumineon"],
		eggGroups: ["Water 2"],
	},
	lumineon: {
		num: 457,
		species: "Lumineon",
		types: ["Water"],
		baseStats: {hp: 69, atk: 69, def: 76, spa: 69, spd: 86, spe: 91},
		abilities: {0: "Swift Swim", 1: "Storm Drain", H: "Water Veil"},
		heightm: 1.2,
		weightkg: 24,
		color: "Blue",
		prevo: "finneon",
		evoLevel: 31,
		eggGroups: ["Water 2"],
	},
	mantyke: {
		num: 458,
		species: "Mantyke",
		types: ["Water", "Flying"],
		baseStats: {hp: 45, atk: 20, def: 50, spa: 60, spd: 120, spe: 50},
		abilities: {0: "Swift Swim", 1: "Water Absorb", H: "Water Veil"},
		heightm: 1,
		weightkg: 65,
		color: "Blue",
		evos: ["mantine"],
		eggGroups: ["Undiscovered"],
		canHatch: true,
	},
	snover: {
		num: 459,
		species: "Snover",
		types: ["Grass", "Ice"],
		baseStats: {hp: 60, atk: 62, def: 50, spa: 62, spd: 60, spe: 40},
		abilities: {0: "Snow Warning", H: "Soundproof"},
		heightm: 1,
		weightkg: 50.5,
		color: "White",
		evos: ["abomasnow"],
		eggGroups: ["Monster", "Grass"],
	},
	abomasnow: {
		num: 460,
		species: "Abomasnow",
		types: ["Grass", "Ice"],
		baseStats: {hp: 90, atk: 92, def: 75, spa: 92, spd: 85, spe: 60},
		abilities: {0: "Snow Warning", H: "Soundproof"},
		heightm: 2.2,
		weightkg: 135.5,
		color: "White",
		prevo: "snover",
		evoLevel: 40,
		eggGroups: ["Monster", "Grass"],
		otherFormes: ["abomasnowmega"],
	},
	abomasnowmega: {
		num: 460,
		species: "Abomasnow-Mega",
		baseSpecies: "Abomasnow",
		forme: "Mega",
		formeLetter: "M",
		types: ["Grass", "Ice"],
		baseStats: {hp: 90, atk: 132, def: 105, spa: 132, spd: 105, spe: 30},
		abilities: {0: "Snow Warning"},
		heightm: 2.7,
		weightkg: 185,
		color: "White",
		eggGroups: ["Monster", "Grass"],
	},
	weavile: {
		num: 461,
		species: "Weavile",
		types: ["Dark", "Ice"],
		baseStats: {hp: 70, atk: 120, def: 65, spa: 45, spd: 85, spe: 125},
		abilities: {0: "Pressure", H: "Pickpocket"},
		heightm: 1.1,
		weightkg: 34,
		color: "Black",
		prevo: "sneasel",
		evoType: "levelHold",
		evoItem: "Razor Claw",
		eggGroups: ["Field"],
	},
	magnezone: {
		num: 462,
		species: "Magnezone",
		types: ["Electric", "Steel"],
		gender: "N",
		baseStats: {hp: 70, atk: 70, def: 115, spa: 130, spd: 90, spe: 60},
		abilities: {0: "Magnet Pull", 1: "Sturdy", H: "Analytic"},
		heightm: 1.2,
		weightkg: 180,
		color: "Gray",
		prevo: "magneton",
		evoType: "levelExtra",
		evoCondition: "in a special magnetic field",
		eggGroups: ["Mineral"],
	},
	lickilicky: {
		num: 463,
		species: "Lickilicky",
		types: ["Normal"],
		baseStats: {hp: 110, atk: 85, def: 95, spa: 80, spd: 95, spe: 50},
		abilities: {0: "Own Tempo", 1: "Oblivious", H: "Cloud Nine"},
		heightm: 1.7,
		weightkg: 140,
		color: "Pink",
		prevo: "lickitung",
		evoType: "levelMove",
		evoMove: "Rollout",
		eggGroups: ["Monster"],
	},
	rhyperior: {
		num: 464,
		species: "Rhyperior",
		types: ["Ground", "Rock"],
		baseStats: {hp: 115, atk: 140, def: 130, spa: 55, spd: 55, spe: 40},
		abilities: {0: "Lightning Rod", 1: "Solid Rock", H: "Reckless"},
		heightm: 2.4,
		weightkg: 282.8,
		color: "Gray",
		prevo: "rhydon",
		evoType: "trade",
		eggGroups: ["Monster", "Field"],
	},
	tangrowth: {
		num: 465,
		species: "Tangrowth",
		types: ["Grass"],
		baseStats: {hp: 100, atk: 100, def: 125, spa: 110, spd: 50, spe: 50},
		abilities: {0: "Chlorophyll", 1: "Leaf Guard", H: "Regenerator"},
		heightm: 2,
		weightkg: 128.6,
		color: "Blue",
		prevo: "tangela",
		evoType: "levelMove",
		evoMove: "Ancient Power",
		eggGroups: ["Grass"],
	},
	electivire: {
		num: 466,
		species: "Electivire",
		types: ["Electric"],
		genderRatio: {M: 0.75, F: 0.25},
		baseStats: {hp: 75, atk: 123, def: 67, spa: 95, spd: 85, spe: 95},
		abilities: {0: "Motor Drive", H: "Vital Spirit"},
		heightm: 1.8,
		weightkg: 138.6,
		color: "Yellow",
		prevo: "electabuzz",
		evoType: "trade",
		eggGroups: ["Human-Like"],
	},
	magmortar: {
		num: 467,
		species: "Magmortar",
		types: ["Fire"],
		genderRatio: {M: 0.75, F: 0.25},
		baseStats: {hp: 75, atk: 95, def: 67, spa: 125, spd: 95, spe: 83},
		abilities: {0: "Flame Body", H: "Vital Spirit"},
		heightm: 1.6,
		weightkg: 68,
		color: "Red",
		prevo: "magmar",
		evoType: "trade",
		eggGroups: ["Human-Like"],
	},
	togekiss: {
		num: 468,
		species: "Togekiss",
		types: ["Fairy", "Flying"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 85, atk: 50, def: 95, spa: 120, spd: 115, spe: 80},
		abilities: {0: "Hustle", 1: "Serene Grace", H: "Super Luck"},
		heightm: 1.5,
		weightkg: 38,
		color: "White",
		prevo: "togetic",
		evoType: "stone",
		evoItem: "Shiny Stone",
		eggGroups: ["Flying", "Fairy"],
	},
	yanmega: {
		num: 469,
		species: "Yanmega",
		types: ["Bug", "Flying"],
		baseStats: {hp: 86, atk: 76, def: 86, spa: 116, spd: 56, spe: 95},
		abilities: {0: "Speed Boost", 1: "Tinted Lens", H: "Frisk"},
		heightm: 1.9,
		weightkg: 51.5,
		color: "Green",
		prevo: "yanma",
		evoType: "levelMove",
		evoMove: "Ancient Power",
		eggGroups: ["Bug"],
	},
	leafeon: {
		num: 470,
		species: "Leafeon",
		types: ["Grass"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 65, atk: 110, def: 130, spa: 60, spd: 65, spe: 95},
		abilities: {0: "Leaf Guard", H: "Chlorophyll"},
		heightm: 1,
		weightkg: 25.5,
		color: "Green",
		prevo: "eevee",
		evoType: "levelExtra",
		evoCondition: "near a Moss Rock",
		eggGroups: ["Field"],
	},
	glaceon: {
		num: 471,
		species: "Glaceon",
		types: ["Ice"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 65, atk: 60, def: 110, spa: 130, spd: 95, spe: 65},
		abilities: {0: "Snow Cloak", H: "Ice Body"},
		heightm: 0.8,
		weightkg: 25.9,
		color: "Blue",
		prevo: "eevee",
		evoType: "levelExtra",
		evoCondition: "near an Ice Rock",
		eggGroups: ["Field"],
	},
	gliscor: {
		num: 472,
		species: "Gliscor",
		types: ["Ground", "Flying"],
		baseStats: {hp: 75, atk: 95, def: 125, spa: 45, spd: 75, spe: 95},
		abilities: {0: "Hyper Cutter", 1: "Sand Veil", H: "Poison Heal"},
		heightm: 2,
		weightkg: 42.5,
		color: "Purple",
		prevo: "gligar",
		evoType: "levelHold",
		evoItem: "Razor Fang",
		evoCondition: "at night",
		eggGroups: ["Bug"],
	},
	mamoswine: {
		num: 473,
		species: "Mamoswine",
		types: ["Ice", "Ground"],
		baseStats: {hp: 110, atk: 130, def: 80, spa: 70, spd: 60, spe: 80},
		abilities: {0: "Oblivious", 1: "Snow Cloak", H: "Thick Fat"},
		heightm: 2.5,
		weightkg: 291,
		color: "Brown",
		prevo: "piloswine",
		evoType: "levelMove",
		evoMove: "Ancient Power",
		eggGroups: ["Field"],
	},
	porygonz: {
		num: 474,
		species: "Porygon-Z",
		types: ["Normal"],
		gender: "N",
		baseStats: {hp: 85, atk: 80, def: 70, spa: 135, spd: 75, spe: 90},
		abilities: {0: "Adaptability", 1: "Download", H: "Analytic"},
		heightm: 0.9,
		weightkg: 34,
		color: "Red",
		prevo: "porygon2",
		evoType: "trade",
		eggGroups: ["Mineral"],
	},
	gallade: {
		num: 475,
		species: "Gallade",
		types: ["Psychic", "Fighting"],
		gender: "M",
		baseStats: {hp: 68, atk: 125, def: 65, spa: 65, spd: 115, spe: 80},
		abilities: {0: "Steadfast", H: "Justified"},
		heightm: 1.6,
		weightkg: 52,
		color: "White",
		prevo: "kirlia",
		evoType: "stone",
		evoItem: "Dawn Stone",
		eggGroups: ["Amorphous"],
		otherFormes: ["gallademega"],
	},
	gallademega: {
		num: 475,
		species: "Gallade-Mega",
		baseSpecies: "Gallade",
		forme: "Mega",
		formeLetter: "M",
		types: ["Psychic", "Fighting"],
		gender: "M",
		baseStats: {hp: 68, atk: 165, def: 95, spa: 65, spd: 115, spe: 110},
		abilities: {0: "Inner Focus"},
		heightm: 1.6,
		weightkg: 56.4,
		color: "White",
		eggGroups: ["Amorphous"],
	},
	probopass: {
		num: 476,
		species: "Probopass",
		types: ["Rock", "Steel"],
		baseStats: {hp: 60, atk: 55, def: 145, spa: 75, spd: 150, spe: 40},
		abilities: {0: "Sturdy", 1: "Magnet Pull", H: "Sand Force"},
		heightm: 1.4,
		weightkg: 340,
		color: "Gray",
		prevo: "nosepass",
		evoType: "levelExtra",
		evoCondition: "near a special magnetic field",
		eggGroups: ["Mineral"],
	},
	dusknoir: {
		num: 477,
		species: "Dusknoir",
		types: ["Ghost"],
		baseStats: {hp: 45, atk: 100, def: 135, spa: 65, spd: 135, spe: 45},
		abilities: {0: "Pressure", H: "Frisk"},
		heightm: 2.2,
		weightkg: 106.6,
		color: "Black",
		prevo: "dusclops",
		evoType: "trade",
		eggGroups: ["Amorphous"],
	},
	froslass: {
		num: 478,
		species: "Froslass",
		types: ["Ice", "Ghost"],
		gender: "F",
		baseStats: {hp: 70, atk: 80, def: 70, spa: 80, spd: 70, spe: 110},
		abilities: {0: "Snow Cloak", H: "Cursed Body"},
		heightm: 1.3,
		weightkg: 26.6,
		color: "White",
		prevo: "snorunt",
		evoType: "stone",
		evoItem: "Dawn Stone",
		eggGroups: ["Fairy", "Mineral"],
	},
	rotom: {
		num: 479,
		species: "Rotom",
		types: ["Electric", "Ghost"],
		gender: "N",
		baseStats: {hp: 50, atk: 50, def: 77, spa: 95, spd: 77, spe: 91},
		abilities: {0: "Levitate"},
		heightm: 0.3,
		weightkg: 0.3,
		color: "Red",
		eggGroups: ["Amorphous"],
		otherFormes: ["rotomheat", "rotomwash", "rotomfrost", "rotomfan", "rotommow"],
	},
	rotomheat: {
		num: 479,
		species: "Rotom-Heat",
		baseSpecies: "Rotom",
		forme: "Heat",
		formeLetter: "H",
		types: ["Electric", "Fire"],
		gender: "N",
		baseStats: {hp: 50, atk: 65, def: 107, spa: 105, spd: 107, spe: 86},
		abilities: {0: "Levitate"},
		heightm: 0.3,
		weightkg: 0.3,
		color: "Red",
		eggGroups: ["Amorphous"],
	},
	rotomwash: {
		num: 479,
		species: "Rotom-Wash",
		baseSpecies: "Rotom",
		forme: "Wash",
		formeLetter: "W",
		types: ["Electric", "Water"],
		gender: "N",
		baseStats: {hp: 50, atk: 65, def: 107, spa: 105, spd: 107, spe: 86},
		abilities: {0: "Levitate"},
		heightm: 0.3,
		weightkg: 0.3,
		color: "Red",
		eggGroups: ["Amorphous"],
	},
	rotomfrost: {
		num: 479,
		species: "Rotom-Frost",
		baseSpecies: "Rotom",
		forme: "Frost",
		formeLetter: "F",
		types: ["Electric", "Ice"],
		gender: "N",
		baseStats: {hp: 50, atk: 65, def: 107, spa: 105, spd: 107, spe: 86},
		abilities: {0: "Levitate"},
		heightm: 0.3,
		weightkg: 0.3,
		color: "Red",
		eggGroups: ["Amorphous"],
	},
	rotomfan: {
		num: 479,
		species: "Rotom-Fan",
		baseSpecies: "Rotom",
		forme: "Fan",
		formeLetter: "S",
		types: ["Electric", "Flying"],
		gender: "N",
		baseStats: {hp: 50, atk: 65, def: 107, spa: 105, spd: 107, spe: 86},
		abilities: {0: "Levitate"},
		heightm: 0.3,
		weightkg: 0.3,
		color: "Red",
		eggGroups: ["Amorphous"],
	},
	rotommow: {
		num: 479,
		species: "Rotom-Mow",
		baseSpecies: "Rotom",
		forme: "Mow",
		formeLetter: "C",
		types: ["Electric", "Grass"],
		gender: "N",
		baseStats: {hp: 50, atk: 65, def: 107, spa: 105, spd: 107, spe: 86},
		abilities: {0: "Levitate"},
		heightm: 0.3,
		weightkg: 0.3,
		color: "Red",
		eggGroups: ["Amorphous"],
	},
	uxie: {
		num: 480,
		species: "Uxie",
		types: ["Psychic"],
		gender: "N",
		baseStats: {hp: 75, atk: 75, def: 130, spa: 75, spd: 130, spe: 95},
		abilities: {0: "Levitate"},
		heightm: 0.3,
		weightkg: 0.3,
		color: "Yellow",
		eggGroups: ["Undiscovered"],
	},
	mesprit: {
		num: 481,
		species: "Mesprit",
		types: ["Psychic"],
		gender: "N",
		baseStats: {hp: 80, atk: 105, def: 105, spa: 105, spd: 105, spe: 80},
		abilities: {0: "Levitate"},
		heightm: 0.3,
		weightkg: 0.3,
		color: "Pink",
		eggGroups: ["Undiscovered"],
	},
	azelf: {
		num: 482,
		species: "Azelf",
		types: ["Psychic"],
		gender: "N",
		baseStats: {hp: 75, atk: 125, def: 70, spa: 125, spd: 70, spe: 115},
		abilities: {0: "Levitate"},
		heightm: 0.3,
		weightkg: 0.3,
		color: "Blue",
		eggGroups: ["Undiscovered"],
	},
	dialga: {
		num: 483,
		species: "Dialga",
		types: ["Steel", "Dragon"],
		gender: "N",
		baseStats: {hp: 100, atk: 120, def: 120, spa: 150, spd: 100, spe: 90},
		abilities: {0: "Pressure", H: "Telepathy"},
		heightm: 5.4,
		weightkg: 683,
		color: "White",
		eggGroups: ["Undiscovered"],
	},
	palkia: {
		num: 484,
		species: "Palkia",
		types: ["Water", "Dragon"],
		gender: "N",
		baseStats: {hp: 90, atk: 120, def: 100, spa: 150, spd: 120, spe: 100},
		abilities: {0: "Pressure", H: "Telepathy"},
		heightm: 4.2,
		weightkg: 336,
		color: "Purple",
		eggGroups: ["Undiscovered"],
	},
	heatran: {
		num: 485,
		species: "Heatran",
		types: ["Fire", "Steel"],
		baseStats: {hp: 91, atk: 90, def: 106, spa: 130, spd: 106, spe: 77},
		abilities: {0: "Flash Fire", H: "Flame Body"},
		heightm: 1.7,
		weightkg: 430,
		color: "Brown",
		eggGroups: ["Undiscovered"],
	},
	regigigas: {
		num: 486,
		species: "Regigigas",
		types: ["Normal"],
		gender: "N",
		baseStats: {hp: 110, atk: 160, def: 110, spa: 80, spd: 110, spe: 100},
		abilities: {0: "Slow Start"},
		heightm: 3.7,
		weightkg: 420,
		color: "White",
		eggGroups: ["Undiscovered"],
	},
	giratina: {
		num: 487,
		species: "Giratina",
		baseForme: "Altered",
		types: ["Ghost", "Dragon"],
		gender: "N",
		baseStats: {hp: 150, atk: 100, def: 120, spa: 100, spd: 120, spe: 90},
		abilities: {0: "Pressure", H: "Telepathy"},
		heightm: 4.5,
		weightkg: 750,
		color: "Black",
		eggGroups: ["Undiscovered"],
		otherFormes: ["giratinaorigin"],
	},
	giratinaorigin: {
		num: 487,
		species: "Giratina-Origin",
		baseSpecies: "Giratina",
		forme: "Origin",
		formeLetter: "O",
		types: ["Ghost", "Dragon"],
		gender: "N",
		baseStats: {hp: 150, atk: 120, def: 100, spa: 120, spd: 100, spe: 90},
		abilities: {0: "Levitate"},
		heightm: 6.9,
		weightkg: 650,
		color: "Black",
		eggGroups: ["Undiscovered"],
	},
	cresselia: {
		num: 488,
		species: "Cresselia",
		types: ["Psychic"],
		gender: "F",
		baseStats: {hp: 120, atk: 70, def: 120, spa: 75, spd: 130, spe: 85},
		abilities: {0: "Levitate"},
		heightm: 1.5,
		weightkg: 85.6,
		color: "Yellow",
		eggGroups: ["Undiscovered"],
	},
	phione: {
		num: 489,
		species: "Phione",
		types: ["Water"],
		gender: "N",
		baseStats: {hp: 80, atk: 80, def: 80, spa: 80, spd: 80, spe: 80},
		abilities: {0: "Hydration"},
		heightm: 0.4,
		weightkg: 3.1,
		color: "Blue",
		eggGroups: ["Water 1", "Fairy"],
	},
	manaphy: {
		num: 490,
		species: "Manaphy",
		types: ["Water"],
		gender: "N",
		baseStats: {hp: 100, atk: 100, def: 100, spa: 100, spd: 100, spe: 100},
		abilities: {0: "Hydration"},
		heightm: 0.3,
		weightkg: 1.4,
		color: "Blue",
		eggGroups: ["Water 1", "Fairy"],
		canHatch: false,
	},
	darkrai: {
		num: 491,
		species: "Darkrai",
		types: ["Dark"],
		gender: "N",
		baseStats: {hp: 70, atk: 90, def: 90, spa: 135, spd: 90, spe: 125},
		abilities: {0: "Bad Dreams"},
		heightm: 1.5,
		weightkg: 50.5,
		color: "Black",
		eggGroups: ["Undiscovered"],
	},
	shaymin: {
		num: 492,
		species: "Shaymin",
		baseForme: "Land",
		types: ["Grass"],
		gender: "N",
		baseStats: {hp: 100, atk: 100, def: 100, spa: 100, spd: 100, spe: 100},
		abilities: {0: "Natural Cure"},
		heightm: 0.2,
		weightkg: 2.1,
		color: "Green",
		eggGroups: ["Undiscovered"],
		otherFormes: ["shayminsky"],
	},
	shayminsky: {
		num: 492,
		species: "Shaymin-Sky",
		baseSpecies: "Shaymin",
		forme: "Sky",
		formeLetter: "S",
		types: ["Grass", "Flying"],
		gender: "N",
		baseStats: {hp: 100, atk: 103, def: 75, spa: 120, spd: 75, spe: 127},
		abilities: {0: "Serene Grace"},
		heightm: 0.4,
		weightkg: 5.2,
		color: "Green",
		eggGroups: ["Undiscovered"],
	},
	arceus: {
		num: 493,
		species: "Arceus",
		baseForme: "Normal",
		types: ["Normal"],
		gender: "N",
		baseStats: {hp: 120, atk: 120, def: 120, spa: 120, spd: 120, spe: 120},
		abilities: {0: "Multitype"},
		heightm: 3.2,
		weightkg: 320,
		color: "White",
		eggGroups: ["Undiscovered"],
		otherFormes: ["arceusbug", "arceusdark", "arceusdragon", "arceuselectric", "arceusfairy", "arceusfighting", "arceusfire", "arceusflying", "arceusghost", "arceusgrass", "arceusground", "arceusice", "arceuspoison", "arceuspsychic", "arceusrock", "arceussteel", "arceuswater"],
	},
	arceusbug: {
		num: 493,
		species: "Arceus-Bug",
		baseSpecies: "Arceus",
		forme: "Bug",
		formeLetter: "B",
		types: ["Bug"],
		gender: "N",
		baseStats: {hp: 120, atk: 120, def: 120, spa: 120, spd: 120, spe: 120},
		abilities: {0: "Multitype"},
		heightm: 3.2,
		weightkg: 320,
		color: "Gray",
		eggGroups: ["Undiscovered"],
	},
	arceusdark: {
		num: 493,
		species: "Arceus-Dark",
		baseSpecies: "Arceus",
		forme: "Dark",
		formeLetter: "D",
		types: ["Dark"],
		gender: "N",
		baseStats: {hp: 120, atk: 120, def: 120, spa: 120, spd: 120, spe: 120},
		abilities: {0: "Multitype"},
		heightm: 3.2,
		weightkg: 320,
		color: "Gray",
		eggGroups: ["Undiscovered"],
	},
	arceusdragon: {
		num: 493,
		species: "Arceus-Dragon",
		baseSpecies: "Arceus",
		forme: "Dragon",
		formeLetter: "D",
		types: ["Dragon"],
		gender: "N",
		baseStats: {hp: 120, atk: 120, def: 120, spa: 120, spd: 120, spe: 120},
		abilities: {0: "Multitype"},
		heightm: 3.2,
		weightkg: 320,
		color: "Gray",
		eggGroups: ["Undiscovered"],
	},
	arceuselectric: {
		num: 493,
		species: "Arceus-Electric",
		baseSpecies: "Arceus",
		forme: "Electric",
		formeLetter: "E",
		types: ["Electric"],
		gender: "N",
		baseStats: {hp: 120, atk: 120, def: 120, spa: 120, spd: 120, spe: 120},
		abilities: {0: "Multitype"},
		heightm: 3.2,
		weightkg: 320,
		color: "Gray",
		eggGroups: ["Undiscovered"],
	},
	arceusfairy: {
		num: 493,
		species: "Arceus-Fairy",
		baseSpecies: "Arceus",
		forme: "Fairy",
		formeLetter: "F",
		types: ["Fairy"],
		gender: "N",
		baseStats: {hp: 120, atk: 120, def: 120, spa: 120, spd: 120, spe: 120},
		abilities: {0: "Multitype"},
		heightm: 3.2,
		weightkg: 320,
		color: "Gray",
		eggGroups: ["Undiscovered"],
	},
	arceusfighting: {
		num: 493,
		species: "Arceus-Fighting",
		baseSpecies: "Arceus",
		forme: "Fighting",
		formeLetter: "F",
		types: ["Fighting"],
		gender: "N",
		baseStats: {hp: 120, atk: 120, def: 120, spa: 120, spd: 120, spe: 120},
		abilities: {0: "Multitype"},
		heightm: 3.2,
		weightkg: 320,
		color: "Gray",
		eggGroups: ["Undiscovered"],
	},
	arceusfire: {
		num: 493,
		species: "Arceus-Fire",
		baseSpecies: "Arceus",
		forme: "Fire",
		formeLetter: "F",
		types: ["Fire"],
		gender: "N",
		baseStats: {hp: 120, atk: 120, def: 120, spa: 120, spd: 120, spe: 120},
		abilities: {0: "Multitype"},
		heightm: 3.2,
		weightkg: 320,
		color: "Gray",
		eggGroups: ["Undiscovered"],
	},
	arceusflying: {
		num: 493,
		species: "Arceus-Flying",
		baseSpecies: "Arceus",
		forme: "Flying",
		formeLetter: "F",
		types: ["Flying"],
		gender: "N",
		baseStats: {hp: 120, atk: 120, def: 120, spa: 120, spd: 120, spe: 120},
		abilities: {0: "Multitype"},
		heightm: 3.2,
		weightkg: 320,
		color: "Gray",
		eggGroups: ["Undiscovered"],
	},
	arceusghost: {
		num: 493,
		species: "Arceus-Ghost",
		baseSpecies: "Arceus",
		forme: "Ghost",
		formeLetter: "G",
		types: ["Ghost"],
		gender: "N",
		baseStats: {hp: 120, atk: 120, def: 120, spa: 120, spd: 120, spe: 120},
		abilities: {0: "Multitype"},
		heightm: 3.2,
		weightkg: 320,
		color: "Gray",
		eggGroups: ["Undiscovered"],
	},
	arceusgrass: {
		num: 493,
		species: "Arceus-Grass",
		baseSpecies: "Arceus",
		forme: "Grass",
		formeLetter: "G",
		types: ["Grass"],
		gender: "N",
		baseStats: {hp: 120, atk: 120, def: 120, spa: 120, spd: 120, spe: 120},
		abilities: {0: "Multitype"},
		heightm: 3.2,
		weightkg: 320,
		color: "Gray",
		eggGroups: ["Undiscovered"],
	},
	arceusground: {
		num: 493,
		species: "Arceus-Ground",
		baseSpecies: "Arceus",
		forme: "Ground",
		formeLetter: "G",
		types: ["Ground"],
		gender: "N",
		baseStats: {hp: 120, atk: 120, def: 120, spa: 120, spd: 120, spe: 120},
		abilities: {0: "Multitype"},
		heightm: 3.2,
		weightkg: 320,
		color: "Gray",
		eggGroups: ["Undiscovered"],
	},
	arceusice: {
		num: 493,
		species: "Arceus-Ice",
		baseSpecies: "Arceus",
		forme: "Ice",
		formeLetter: "I",
		types: ["Ice"],
		gender: "N",
		baseStats: {hp: 120, atk: 120, def: 120, spa: 120, spd: 120, spe: 120},
		abilities: {0: "Multitype"},
		heightm: 3.2,
		weightkg: 320,
		color: "Gray",
		eggGroups: ["Undiscovered"],
	},
	arceuspoison: {
		num: 493,
		species: "Arceus-Poison",
		baseSpecies: "Arceus",
		forme: "Poison",
		formeLetter: "P",
		types: ["Poison"],
		gender: "N",
		baseStats: {hp: 120, atk: 120, def: 120, spa: 120, spd: 120, spe: 120},
		abilities: {0: "Multitype"},
		heightm: 3.2,
		weightkg: 320,
		color: "Gray",
		eggGroups: ["Undiscovered"],
	},
	arceuspsychic: {
		num: 493,
		species: "Arceus-Psychic",
		baseSpecies: "Arceus",
		forme: "Psychic",
		formeLetter: "P",
		types: ["Psychic"],
		gender: "N",
		baseStats: {hp: 120, atk: 120, def: 120, spa: 120, spd: 120, spe: 120},
		abilities: {0: "Multitype"},
		heightm: 3.2,
		weightkg: 320,
		color: "Gray",
		eggGroups: ["Undiscovered"],
	},
	arceusrock: {
		num: 493,
		species: "Arceus-Rock",
		baseSpecies: "Arceus",
		forme: "Rock",
		formeLetter: "R",
		types: ["Rock"],
		gender: "N",
		baseStats: {hp: 120, atk: 120, def: 120, spa: 120, spd: 120, spe: 120},
		abilities: {0: "Multitype"},
		heightm: 3.2,
		weightkg: 320,
		color: "Gray",
		eggGroups: ["Undiscovered"],
	},
	arceussteel: {
		num: 493,
		species: "Arceus-Steel",
		baseSpecies: "Arceus",
		forme: "Steel",
		formeLetter: "S",
		types: ["Steel"],
		gender: "N",
		baseStats: {hp: 120, atk: 120, def: 120, spa: 120, spd: 120, spe: 120},
		abilities: {0: "Multitype"},
		heightm: 3.2,
		weightkg: 320,
		color: "Gray",
		eggGroups: ["Undiscovered"],
	},
	arceuswater: {
		num: 493,
		species: "Arceus-Water",
		baseSpecies: "Arceus",
		forme: "Water",
		formeLetter: "W",
		types: ["Water"],
		gender: "N",
		baseStats: {hp: 120, atk: 120, def: 120, spa: 120, spd: 120, spe: 120},
		abilities: {0: "Multitype"},
		heightm: 3.2,
		weightkg: 320,
		color: "Gray",
		eggGroups: ["Undiscovered"],
	},
	victini: {
		num: 494,
		species: "Victini",
		types: ["Psychic", "Fire"],
		gender: "N",
		baseStats: {hp: 100, atk: 100, def: 100, spa: 100, spd: 100, spe: 100},
		abilities: {0: "Victory Star"},
		heightm: 0.4,
		weightkg: 4,
		color: "Yellow",
		eggGroups: ["Undiscovered"],
	},
	snivy: {
		num: 495,
		species: "Snivy",
		types: ["Grass"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 45, atk: 45, def: 55, spa: 45, spd: 55, spe: 63},
		abilities: {0: "Overgrow", H: "Contrary"},
		heightm: 0.6,
		weightkg: 8.1,
		color: "Green",
		evos: ["servine"],
		eggGroups: ["Field", "Grass"],
	},
	servine: {
		num: 496,
		species: "Servine",
		types: ["Grass"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 60, atk: 60, def: 75, spa: 60, spd: 75, spe: 83},
		abilities: {0: "Overgrow", H: "Contrary"},
		heightm: 0.8,
		weightkg: 16,
		color: "Green",
		prevo: "snivy",
		evoLevel: 17,
		evos: ["serperior"],
		eggGroups: ["Field", "Grass"],
	},
	serperior: {
		num: 497,
		species: "Serperior",
		types: ["Grass"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 75, atk: 75, def: 95, spa: 75, spd: 95, spe: 113},
		abilities: {0: "Overgrow", H: "Contrary"},
		heightm: 3.3,
		weightkg: 63,
		color: "Green",
		prevo: "servine",
		evoLevel: 36,
		eggGroups: ["Field", "Grass"],
	},
	tepig: {
		num: 498,
		species: "Tepig",
		types: ["Fire"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 65, atk: 63, def: 45, spa: 45, spd: 45, spe: 45},
		abilities: {0: "Blaze", H: "Thick Fat"},
		heightm: 0.5,
		weightkg: 9.9,
		color: "Red",
		evos: ["pignite"],
		eggGroups: ["Field"],
	},
	pignite: {
		num: 499,
		species: "Pignite",
		types: ["Fire", "Fighting"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 90, atk: 93, def: 55, spa: 70, spd: 55, spe: 55},
		abilities: {0: "Blaze", H: "Thick Fat"},
		heightm: 1,
		weightkg: 55.5,
		color: "Red",
		prevo: "tepig",
		evoLevel: 17,
		evos: ["emboar"],
		eggGroups: ["Field"],
	},
	emboar: {
		num: 500,
		species: "Emboar",
		types: ["Fire", "Fighting"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 110, atk: 123, def: 65, spa: 100, spd: 65, spe: 65},
		abilities: {0: "Blaze", H: "Reckless"},
		heightm: 1.6,
		weightkg: 150,
		color: "Red",
		prevo: "pignite",
		evoLevel: 36,
		eggGroups: ["Field"],
	},
	oshawott: {
		num: 501,
		species: "Oshawott",
		types: ["Water"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 55, atk: 55, def: 45, spa: 63, spd: 45, spe: 45},
		abilities: {0: "Torrent", H: "Shell Armor"},
		heightm: 0.5,
		weightkg: 5.9,
		color: "Blue",
		evos: ["dewott"],
		eggGroups: ["Field"],
	},
	dewott: {
		num: 502,
		species: "Dewott",
		types: ["Water"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 75, atk: 75, def: 60, spa: 83, spd: 60, spe: 60},
		abilities: {0: "Torrent", H: "Shell Armor"},
		heightm: 0.8,
		weightkg: 24.5,
		color: "Blue",
		prevo: "oshawott",
		evoLevel: 17,
		evos: ["samurott"],
		eggGroups: ["Field"],
	},
	samurott: {
		num: 503,
		species: "Samurott",
		types: ["Water"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 95, atk: 100, def: 85, spa: 108, spd: 70, spe: 70},
		abilities: {0: "Torrent", H: "Shell Armor"},
		heightm: 1.5,
		weightkg: 94.6,
		color: "Blue",
		prevo: "dewott",
		evoLevel: 36,
		eggGroups: ["Field"],
	},
	patrat: {
		num: 504,
		species: "Patrat",
		types: ["Normal"],
		baseStats: {hp: 45, atk: 55, def: 39, spa: 35, spd: 39, spe: 42},
		abilities: {0: "Run Away", 1: "Keen Eye", H: "Analytic"},
		heightm: 0.5,
		weightkg: 11.6,
		color: "Brown",
		evos: ["watchog"],
		eggGroups: ["Field"],
	},
	watchog: {
		num: 505,
		species: "Watchog",
		types: ["Normal"],
		baseStats: {hp: 60, atk: 85, def: 69, spa: 60, spd: 69, spe: 77},
		abilities: {0: "Illuminate", 1: "Keen Eye", H: "Analytic"},
		heightm: 1.1,
		weightkg: 27,
		color: "Brown",
		prevo: "patrat",
		evoLevel: 20,
		eggGroups: ["Field"],
	},
	lillipup: {
		num: 506,
		species: "Lillipup",
		types: ["Normal"],
		baseStats: {hp: 45, atk: 60, def: 45, spa: 25, spd: 45, spe: 55},
		abilities: {0: "Vital Spirit", 1: "Pickup", H: "Run Away"},
		heightm: 0.4,
		weightkg: 4.1,
		color: "Brown",
		evos: ["herdier"],
		eggGroups: ["Field"],
	},
	herdier: {
		num: 507,
		species: "Herdier",
		types: ["Normal"],
		baseStats: {hp: 65, atk: 80, def: 65, spa: 35, spd: 65, spe: 60},
		abilities: {0: "Intimidate", 1: "Sand Rush", H: "Scrappy"},
		heightm: 0.9,
		weightkg: 14.7,
		color: "Gray",
		prevo: "lillipup",
		evoLevel: 16,
		evos: ["stoutland"],
		eggGroups: ["Field"],
	},
	stoutland: {
		num: 508,
		species: "Stoutland",
		types: ["Normal"],
		baseStats: {hp: 85, atk: 110, def: 90, spa: 45, spd: 90, spe: 80},
		abilities: {0: "Intimidate", 1: "Sand Rush", H: "Scrappy"},
		heightm: 1.2,
		weightkg: 61,
		color: "Gray",
		prevo: "herdier",
		evoLevel: 32,
		eggGroups: ["Field"],
	},
	purrloin: {
		num: 509,
		species: "Purrloin",
		types: ["Dark"],
		baseStats: {hp: 41, atk: 50, def: 37, spa: 50, spd: 37, spe: 66},
		abilities: {0: "Limber", 1: "Unburden", H: "Prankster"},
		heightm: 0.4,
		weightkg: 10.1,
		color: "Purple",
		evos: ["liepard"],
		eggGroups: ["Field"],
	},
	liepard: {
		num: 510,
		species: "Liepard",
		types: ["Dark"],
		baseStats: {hp: 64, atk: 88, def: 50, spa: 88, spd: 50, spe: 106},
		abilities: {0: "Limber", 1: "Unburden", H: "Prankster"},
		heightm: 1.1,
		weightkg: 37.5,
		color: "Purple",
		prevo: "purrloin",
		evoLevel: 20,
		eggGroups: ["Field"],
	},
	pansage: {
		num: 511,
		species: "Pansage",
		types: ["Grass"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 50, atk: 53, def: 48, spa: 53, spd: 48, spe: 64},
		abilities: {0: "Gluttony", H: "Overgrow"},
		heightm: 0.6,
		weightkg: 10.5,
		color: "Green",
		evos: ["simisage"],
		eggGroups: ["Field"],
	},
	simisage: {
		num: 512,
		species: "Simisage",
		types: ["Grass"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 75, atk: 98, def: 63, spa: 98, spd: 63, spe: 101},
		abilities: {0: "Gluttony", H: "Overgrow"},
		heightm: 1.1,
		weightkg: 30.5,
		color: "Green",
		prevo: "pansage",
		evoType: "stone",
		evoItem: "Leaf Stone",
		eggGroups: ["Field"],
	},
	pansear: {
		num: 513,
		species: "Pansear",
		types: ["Fire"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 50, atk: 53, def: 48, spa: 53, spd: 48, spe: 64},
		abilities: {0: "Gluttony", H: "Blaze"},
		heightm: 0.6,
		weightkg: 11,
		color: "Red",
		evos: ["simisear"],
		eggGroups: ["Field"],
	},
	simisear: {
		num: 514,
		species: "Simisear",
		types: ["Fire"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 75, atk: 98, def: 63, spa: 98, spd: 63, spe: 101},
		abilities: {0: "Gluttony", H: "Blaze"},
		heightm: 1,
		weightkg: 28,
		color: "Red",
		prevo: "pansear",
		evoType: "stone",
		evoItem: "Fire Stone",
		eggGroups: ["Field"],
	},
	panpour: {
		num: 515,
		species: "Panpour",
		types: ["Water"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 50, atk: 53, def: 48, spa: 53, spd: 48, spe: 64},
		abilities: {0: "Gluttony", H: "Torrent"},
		heightm: 0.6,
		weightkg: 13.5,
		color: "Blue",
		evos: ["simipour"],
		eggGroups: ["Field"],
	},
	simipour: {
		num: 516,
		species: "Simipour",
		types: ["Water"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 75, atk: 98, def: 63, spa: 98, spd: 63, spe: 101},
		abilities: {0: "Gluttony", H: "Torrent"},
		heightm: 1,
		weightkg: 29,
		color: "Blue",
		prevo: "panpour",
		evoType: "stone",
		evoItem: "Water Stone",
		eggGroups: ["Field"],
	},
	munna: {
		num: 517,
		species: "Munna",
		types: ["Psychic"],
		baseStats: {hp: 76, atk: 25, def: 45, spa: 67, spd: 55, spe: 24},
		abilities: {0: "Forewarn", 1: "Synchronize", H: "Telepathy"},
		heightm: 0.6,
		weightkg: 23.3,
		color: "Pink",
		evos: ["musharna"],
		eggGroups: ["Field"],
	},
	musharna: {
		num: 518,
		species: "Musharna",
		types: ["Psychic"],
		baseStats: {hp: 116, atk: 55, def: 85, spa: 107, spd: 95, spe: 29},
		abilities: {0: "Forewarn", 1: "Synchronize", H: "Telepathy"},
		heightm: 1.1,
		weightkg: 60.5,
		color: "Pink",
		prevo: "munna",
		evoType: "stone",
		evoItem: "Moon Stone",
		eggGroups: ["Field"],
	},
	pidove: {
		num: 519,
		species: "Pidove",
		types: ["Normal", "Flying"],
		baseStats: {hp: 50, atk: 55, def: 50, spa: 36, spd: 30, spe: 43},
		abilities: {0: "Big Pecks", 1: "Super Luck", H: "Rivalry"},
		heightm: 0.3,
		weightkg: 2.1,
		color: "Gray",
		evos: ["tranquill"],
		eggGroups: ["Flying"],
	},
	tranquill: {
		num: 520,
		species: "Tranquill",
		types: ["Normal", "Flying"],
		baseStats: {hp: 62, atk: 77, def: 62, spa: 50, spd: 42, spe: 65},
		abilities: {0: "Big Pecks", 1: "Super Luck", H: "Rivalry"},
		heightm: 0.6,
		weightkg: 15,
		color: "Gray",
		prevo: "pidove",
		evoLevel: 21,
		evos: ["unfezant"],
		eggGroups: ["Flying"],
	},
	unfezant: {
		num: 521,
		species: "Unfezant",
		types: ["Normal", "Flying"],
		baseStats: {hp: 80, atk: 115, def: 80, spa: 65, spd: 55, spe: 93},
		abilities: {0: "Big Pecks", 1: "Super Luck", H: "Rivalry"},
		heightm: 1.2,
		weightkg: 29,
		color: "Gray",
		prevo: "tranquill",
		evoLevel: 32,
		eggGroups: ["Flying"],
	},
	blitzle: {
		num: 522,
		species: "Blitzle",
		types: ["Electric"],
		baseStats: {hp: 45, atk: 60, def: 32, spa: 50, spd: 32, spe: 76},
		abilities: {0: "Lightning Rod", 1: "Motor Drive", H: "Sap Sipper"},
		heightm: 0.8,
		weightkg: 29.8,
		color: "Black",
		evos: ["zebstrika"],
		eggGroups: ["Field"],
	},
	zebstrika: {
		num: 523,
		species: "Zebstrika",
		types: ["Electric"],
		baseStats: {hp: 75, atk: 100, def: 63, spa: 80, spd: 63, spe: 116},
		abilities: {0: "Lightning Rod", 1: "Motor Drive", H: "Sap Sipper"},
		heightm: 1.6,
		weightkg: 79.5,
		color: "Black",
		prevo: "blitzle",
		evoLevel: 27,
		eggGroups: ["Field"],
	},
	roggenrola: {
		num: 524,
		species: "Roggenrola",
		types: ["Rock"],
		baseStats: {hp: 55, atk: 75, def: 85, spa: 25, spd: 25, spe: 15},
		abilities: {0: "Sturdy", 1: "Weak Armor", H: "Sand Force"},
		heightm: 0.4,
		weightkg: 18,
		color: "Blue",
		evos: ["boldore"],
		eggGroups: ["Mineral"],
	},
	boldore: {
		num: 525,
		species: "Boldore",
		types: ["Rock"],
		baseStats: {hp: 70, atk: 105, def: 105, spa: 50, spd: 40, spe: 20},
		abilities: {0: "Sturdy", 1: "Weak Armor", H: "Sand Force"},
		heightm: 0.9,
		weightkg: 102,
		color: "Blue",
		prevo: "roggenrola",
		evoLevel: 25,
		evos: ["gigalith"],
		eggGroups: ["Mineral"],
	},
	gigalith: {
		num: 526,
		species: "Gigalith",
		types: ["Rock"],
		baseStats: {hp: 85, atk: 135, def: 130, spa: 60, spd: 80, spe: 25},
		abilities: {0: "Sturdy", 1: "Sand Stream", H: "Sand Force"},
		heightm: 1.7,
		weightkg: 260,
		color: "Blue",
		prevo: "boldore",
		evoType: "trade",
		eggGroups: ["Mineral"],
	},
	woobat: {
		num: 527,
		species: "Woobat",
		types: ["Psychic", "Flying"],
		baseStats: {hp: 65, atk: 45, def: 43, spa: 55, spd: 43, spe: 72},
		abilities: {0: "Unaware", 1: "Klutz", H: "Simple"},
		heightm: 0.4,
		weightkg: 2.1,
		color: "Blue",
		evos: ["swoobat"],
		eggGroups: ["Flying", "Field"],
	},
	swoobat: {
		num: 528,
		species: "Swoobat",
		types: ["Psychic", "Flying"],
		baseStats: {hp: 67, atk: 57, def: 55, spa: 77, spd: 55, spe: 114},
		abilities: {0: "Unaware", 1: "Klutz", H: "Simple"},
		heightm: 0.9,
		weightkg: 10.5,
		color: "Blue",
		prevo: "woobat",
		evoType: "levelFriendship",
		eggGroups: ["Flying", "Field"],
	},
	drilbur: {
		num: 529,
		species: "Drilbur",
		types: ["Ground"],
		baseStats: {hp: 60, atk: 85, def: 40, spa: 30, spd: 45, spe: 68},
		abilities: {0: "Sand Rush", 1: "Sand Force", H: "Mold Breaker"},
		heightm: 0.3,
		weightkg: 8.5,
		color: "Gray",
		evos: ["excadrill"],
		eggGroups: ["Field"],
	},
	excadrill: {
		num: 530,
		species: "Excadrill",
		types: ["Ground", "Steel"],
		baseStats: {hp: 110, atk: 135, def: 60, spa: 50, spd: 65, spe: 88},
		abilities: {0: "Sand Rush", 1: "Sand Force", H: "Mold Breaker"},
		heightm: 0.7,
		weightkg: 40.4,
		color: "Gray",
		prevo: "drilbur",
		evoLevel: 31,
		eggGroups: ["Field"],
	},
	audino: {
		num: 531,
		species: "Audino",
		types: ["Normal"],
		baseStats: {hp: 103, atk: 60, def: 86, spa: 60, spd: 86, spe: 50},
		abilities: {0: "Healer", 1: "Regenerator", H: "Klutz"},
		heightm: 1.1,
		weightkg: 31,
		color: "Pink",
		eggGroups: ["Fairy"],
		otherFormes: ["audinomega"],
	},
	audinomega: {
		num: 531,
		species: "Audino-Mega",
		baseSpecies: "Audino",
		forme: "Mega",
		formeLetter: "M",
		types: ["Normal", "Fairy"],
		baseStats: {hp: 103, atk: 60, def: 126, spa: 80, spd: 126, spe: 50},
		abilities: {0: "Healer"},
		heightm: 1.5,
		weightkg: 32,
		color: "White",
		eggGroups: ["Fairy"],
	},
	timburr: {
		num: 532,
		species: "Timburr",
		types: ["Fighting"],
		genderRatio: {M: 0.75, F: 0.25},
		baseStats: {hp: 75, atk: 80, def: 55, spa: 25, spd: 35, spe: 35},
		abilities: {0: "Guts", 1: "Sheer Force", H: "Iron Fist"},
		heightm: 0.6,
		weightkg: 12.5,
		color: "Gray",
		evos: ["gurdurr"],
		eggGroups: ["Human-Like"],
	},
	gurdurr: {
		num: 533,
		species: "Gurdurr",
		types: ["Fighting"],
		genderRatio: {M: 0.75, F: 0.25},
		baseStats: {hp: 85, atk: 105, def: 85, spa: 40, spd: 50, spe: 40},
		abilities: {0: "Guts", 1: "Sheer Force", H: "Iron Fist"},
		heightm: 1.2,
		weightkg: 40,
		color: "Gray",
		prevo: "timburr",
		evoLevel: 25,
		evos: ["conkeldurr"],
		eggGroups: ["Human-Like"],
	},
	conkeldurr: {
		num: 534,
		species: "Conkeldurr",
		types: ["Fighting"],
		genderRatio: {M: 0.75, F: 0.25},
		baseStats: {hp: 105, atk: 140, def: 95, spa: 55, spd: 65, spe: 45},
		abilities: {0: "Guts", 1: "Sheer Force", H: "Iron Fist"},
		heightm: 1.4,
		weightkg: 87,
		color: "Brown",
		prevo: "gurdurr",
		evoType: "trade",
		eggGroups: ["Human-Like"],
	},
	tympole: {
		num: 535,
		species: "Tympole",
		types: ["Water"],
		baseStats: {hp: 50, atk: 50, def: 40, spa: 50, spd: 40, spe: 64},
		abilities: {0: "Swift Swim", 1: "Hydration", H: "Water Absorb"},
		heightm: 0.5,
		weightkg: 4.5,
		color: "Blue",
		evos: ["palpitoad"],
		eggGroups: ["Water 1"],
	},
	palpitoad: {
		num: 536,
		species: "Palpitoad",
		types: ["Water", "Ground"],
		baseStats: {hp: 75, atk: 65, def: 55, spa: 65, spd: 55, spe: 69},
		abilities: {0: "Swift Swim", 1: "Hydration", H: "Water Absorb"},
		heightm: 0.8,
		weightkg: 17,
		color: "Blue",
		prevo: "tympole",
		evoLevel: 25,
		evos: ["seismitoad"],
		eggGroups: ["Water 1"],
	},
	seismitoad: {
		num: 537,
		species: "Seismitoad",
		types: ["Water", "Ground"],
		baseStats: {hp: 105, atk: 95, def: 75, spa: 85, spd: 75, spe: 74},
		abilities: {0: "Swift Swim", 1: "Poison Touch", H: "Water Absorb"},
		heightm: 1.5,
		weightkg: 62,
		color: "Blue",
		prevo: "palpitoad",
		evoLevel: 36,
		eggGroups: ["Water 1"],
	},
	throh: {
		num: 538,
		species: "Throh",
		types: ["Fighting"],
		gender: "M",
		baseStats: {hp: 120, atk: 100, def: 85, spa: 30, spd: 85, spe: 45},
		abilities: {0: "Guts", 1: "Inner Focus", H: "Mold Breaker"},
		heightm: 1.3,
		weightkg: 55.5,
		color: "Red",
		eggGroups: ["Human-Like"],
	},
	sawk: {
		num: 539,
		species: "Sawk",
		types: ["Fighting"],
		gender: "M",
		baseStats: {hp: 75, atk: 125, def: 75, spa: 30, spd: 75, spe: 85},
		abilities: {0: "Sturdy", 1: "Inner Focus", H: "Mold Breaker"},
		heightm: 1.4,
		weightkg: 51,
		color: "Blue",
		eggGroups: ["Human-Like"],
	},
	sewaddle: {
		num: 540,
		species: "Sewaddle",
		types: ["Bug", "Grass"],
		baseStats: {hp: 45, atk: 53, def: 70, spa: 40, spd: 60, spe: 42},
		abilities: {0: "Swarm", 1: "Chlorophyll", H: "Overcoat"},
		heightm: 0.3,
		weightkg: 2.5,
		color: "Yellow",
		evos: ["swadloon"],
		eggGroups: ["Bug"],
	},
	swadloon: {
		num: 541,
		species: "Swadloon",
		types: ["Bug", "Grass"],
		baseStats: {hp: 55, atk: 63, def: 90, spa: 50, spd: 80, spe: 42},
		abilities: {0: "Leaf Guard", 1: "Chlorophyll", H: "Overcoat"},
		heightm: 0.5,
		weightkg: 7.3,
		color: "Green",
		prevo: "sewaddle",
		evoLevel: 20,
		evos: ["leavanny"],
		eggGroups: ["Bug"],
	},
	leavanny: {
		num: 542,
		species: "Leavanny",
		types: ["Bug", "Grass"],
		baseStats: {hp: 75, atk: 103, def: 80, spa: 70, spd: 80, spe: 92},
		abilities: {0: "Swarm", 1: "Chlorophyll", H: "Overcoat"},
		heightm: 1.2,
		weightkg: 20.5,
		color: "Yellow",
		prevo: "swadloon",
		evoType: "levelFriendship",
		eggGroups: ["Bug"],
	},
	venipede: {
		num: 543,
		species: "Venipede",
		types: ["Bug", "Poison"],
		baseStats: {hp: 30, atk: 45, def: 59, spa: 30, spd: 39, spe: 57},
		abilities: {0: "Poison Point", 1: "Swarm", H: "Speed Boost"},
		heightm: 0.4,
		weightkg: 5.3,
		color: "Red",
		evos: ["whirlipede"],
		eggGroups: ["Bug"],
	},
	whirlipede: {
		num: 544,
		species: "Whirlipede",
		types: ["Bug", "Poison"],
		baseStats: {hp: 40, atk: 55, def: 99, spa: 40, spd: 79, spe: 47},
		abilities: {0: "Poison Point", 1: "Swarm", H: "Speed Boost"},
		heightm: 1.2,
		weightkg: 58.5,
		color: "Gray",
		prevo: "venipede",
		evoLevel: 22,
		evos: ["scolipede"],
		eggGroups: ["Bug"],
	},
	scolipede: {
		num: 545,
		species: "Scolipede",
		types: ["Bug", "Poison"],
		baseStats: {hp: 60, atk: 100, def: 89, spa: 55, spd: 69, spe: 112},
		abilities: {0: "Poison Point", 1: "Swarm", H: "Speed Boost"},
		heightm: 2.5,
		weightkg: 200.5,
		color: "Red",
		prevo: "whirlipede",
		evoLevel: 30,
		eggGroups: ["Bug"],
	},
	cottonee: {
		num: 546,
		species: "Cottonee",
		types: ["Grass", "Fairy"],
		baseStats: {hp: 40, atk: 27, def: 60, spa: 37, spd: 50, spe: 66},
		abilities: {0: "Prankster", 1: "Infiltrator", H: "Chlorophyll"},
		heightm: 0.3,
		weightkg: 0.6,
		color: "Green",
		evos: ["whimsicott"],
		eggGroups: ["Fairy", "Grass"],
	},
	whimsicott: {
		num: 547,
		species: "Whimsicott",
		types: ["Grass", "Fairy"],
		baseStats: {hp: 60, atk: 67, def: 85, spa: 77, spd: 75, spe: 116},
		abilities: {0: "Prankster", 1: "Infiltrator", H: "Chlorophyll"},
		heightm: 0.7,
		weightkg: 6.6,
		color: "Green",
		prevo: "cottonee",
		evoType: "stone",
		evoItem: "Sun Stone",
		eggGroups: ["Fairy", "Grass"],
	},
	petilil: {
		num: 548,
		species: "Petilil",
		types: ["Grass"],
		gender: "F",
		baseStats: {hp: 45, atk: 35, def: 50, spa: 70, spd: 50, spe: 30},
		abilities: {0: "Chlorophyll", 1: "Own Tempo", H: "Leaf Guard"},
		heightm: 0.5,
		weightkg: 6.6,
		color: "Green",
		evos: ["lilligant"],
		eggGroups: ["Grass"],
	},
	lilligant: {
		num: 549,
		species: "Lilligant",
		types: ["Grass"],
		gender: "F",
		baseStats: {hp: 70, atk: 60, def: 75, spa: 110, spd: 75, spe: 90},
		abilities: {0: "Chlorophyll", 1: "Own Tempo", H: "Leaf Guard"},
		heightm: 1.1,
		weightkg: 16.3,
		color: "Green",
		prevo: "petilil",
		evoType: "stone",
		evoItem: "Sun Stone",
		eggGroups: ["Grass"],
	},
	basculin: {
		num: 550,
		species: "Basculin",
		baseForme: "Red-Striped",
		types: ["Water"],
		baseStats: {hp: 70, atk: 92, def: 65, spa: 80, spd: 55, spe: 98},
		abilities: {0: "Reckless", 1: "Adaptability", H: "Mold Breaker"},
		heightm: 1,
		weightkg: 18,
		color: "Green",
		eggGroups: ["Water 2"],
		otherFormes: ["basculinbluestriped"],
	},
	basculinbluestriped: {
		num: 550,
		species: "Basculin-Blue-Striped",
		baseSpecies: "Basculin",
		forme: "Blue-Striped",
		formeLetter: "B",
		types: ["Water"],
		baseStats: {hp: 70, atk: 92, def: 65, spa: 80, spd: 55, spe: 98},
		abilities: {0: "Rock Head", 1: "Adaptability", H: "Mold Breaker"},
		heightm: 1,
		weightkg: 18,
		color: "Green",
		eggGroups: ["Water 2"],
	},
	sandile: {
		num: 551,
		species: "Sandile",
		types: ["Ground", "Dark"],
		baseStats: {hp: 50, atk: 72, def: 35, spa: 35, spd: 35, spe: 65},
		abilities: {0: "Intimidate", 1: "Moxie", H: "Anger Point"},
		heightm: 0.7,
		weightkg: 15.2,
		color: "Brown",
		evos: ["krokorok"],
		eggGroups: ["Field"],
	},
	krokorok: {
		num: 552,
		species: "Krokorok",
		types: ["Ground", "Dark"],
		baseStats: {hp: 60, atk: 82, def: 45, spa: 45, spd: 45, spe: 74},
		abilities: {0: "Intimidate", 1: "Moxie", H: "Anger Point"},
		heightm: 1,
		weightkg: 33.4,
		color: "Brown",
		prevo: "sandile",
		evoLevel: 29,
		evos: ["krookodile"],
		eggGroups: ["Field"],
	},
	krookodile: {
		num: 553,
		species: "Krookodile",
		types: ["Ground", "Dark"],
		baseStats: {hp: 95, atk: 117, def: 80, spa: 65, spd: 70, spe: 92},
		abilities: {0: "Intimidate", 1: "Moxie", H: "Anger Point"},
		heightm: 1.5,
		weightkg: 96.3,
		color: "Red",
		prevo: "krokorok",
		evoLevel: 40,
		eggGroups: ["Field"],
	},
	darumaka: {
		num: 554,
		species: "Darumaka",
		types: ["Fire"],
		baseStats: {hp: 70, atk: 90, def: 45, spa: 15, spd: 45, spe: 50},
		abilities: {0: "Hustle", H: "Inner Focus"},
		heightm: 0.6,
		weightkg: 37.5,
		color: "Red",
		evos: ["darmanitan"],
		eggGroups: ["Field"],
	},
	darmanitan: {
		num: 555,
		species: "Darmanitan",
		baseForme: "Standard",
		types: ["Fire"],
		baseStats: {hp: 105, atk: 140, def: 55, spa: 30, spd: 55, spe: 95},
		abilities: {0: "Sheer Force", H: "Zen Mode"},
		heightm: 1.3,
		weightkg: 92.9,
		color: "Red",
		prevo: "darumaka",
		evoLevel: 35,
		eggGroups: ["Field"],
		otherFormes: ["darmanitanzen"],
	},
	darmanitanzen: {
		num: 555,
		species: "Darmanitan-Zen",
		baseSpecies: "Darmanitan",
		forme: "Zen",
		formeLetter: "Z",
		types: ["Fire", "Psychic"],
		baseStats: {hp: 105, atk: 30, def: 105, spa: 140, spd: 105, spe: 55},
		abilities: {0: "Zen Mode"},
		heightm: 1.3,
		weightkg: 92.9,
		color: "Blue",
		prevo: "darumaka",
		evoLevel: 35,
		eggGroups: ["Field"],
	},
	maractus: {
		num: 556,
		species: "Maractus",
		types: ["Grass"],
		baseStats: {hp: 75, atk: 86, def: 67, spa: 106, spd: 67, spe: 60},
		abilities: {0: "Water Absorb", 1: "Chlorophyll", H: "Storm Drain"},
		heightm: 1,
		weightkg: 28,
		color: "Green",
		eggGroups: ["Grass"],
	},
	dwebble: {
		num: 557,
		species: "Dwebble",
		types: ["Bug", "Rock"],
		baseStats: {hp: 50, atk: 65, def: 85, spa: 35, spd: 35, spe: 55},
		abilities: {0: "Sturdy", 1: "Shell Armor", H: "Weak Armor"},
		heightm: 0.3,
		weightkg: 14.5,
		color: "Red",
		evos: ["crustle"],
		eggGroups: ["Bug", "Mineral"],
	},
	crustle: {
		num: 558,
		species: "Crustle",
		types: ["Bug", "Rock"],
		baseStats: {hp: 70, atk: 105, def: 125, spa: 65, spd: 75, spe: 45},
		abilities: {0: "Sturdy", 1: "Shell Armor", H: "Weak Armor"},
		heightm: 1.4,
		weightkg: 200,
		color: "Red",
		prevo: "dwebble",
		evoLevel: 34,
		eggGroups: ["Bug", "Mineral"],
	},
	scraggy: {
		num: 559,
		species: "Scraggy",
		types: ["Dark", "Fighting"],
		baseStats: {hp: 50, atk: 75, def: 70, spa: 35, spd: 70, spe: 48},
		abilities: {0: "Shed Skin", 1: "Moxie", H: "Intimidate"},
		heightm: 0.6,
		weightkg: 11.8,
		color: "Yellow",
		evos: ["scrafty"],
		eggGroups: ["Field", "Dragon"],
	},
	scrafty: {
		num: 560,
		species: "Scrafty",
		types: ["Dark", "Fighting"],
		baseStats: {hp: 65, atk: 90, def: 115, spa: 45, spd: 115, spe: 58},
		abilities: {0: "Shed Skin", 1: "Moxie", H: "Intimidate"},
		heightm: 1.1,
		weightkg: 30,
		color: "Red",
		prevo: "scraggy",
		evoLevel: 39,
		eggGroups: ["Field", "Dragon"],
	},
	sigilyph: {
		num: 561,
		species: "Sigilyph",
		types: ["Psychic", "Flying"],
		baseStats: {hp: 72, atk: 58, def: 80, spa: 103, spd: 80, spe: 97},
		abilities: {0: "Wonder Skin", 1: "Magic Guard", H: "Tinted Lens"},
		heightm: 1.4,
		weightkg: 14,
		color: "Black",
		eggGroups: ["Flying"],
	},
	yamask: {
		num: 562,
		species: "Yamask",
		types: ["Ghost"],
		baseStats: {hp: 38, atk: 30, def: 85, spa: 55, spd: 65, spe: 30},
		abilities: {0: "Mummy"},
		heightm: 0.5,
		weightkg: 1.5,
		color: "Black",
		evos: ["cofagrigus"],
		eggGroups: ["Mineral", "Amorphous"],
	},
	cofagrigus: {
		num: 563,
		species: "Cofagrigus",
		types: ["Ghost"],
		baseStats: {hp: 58, atk: 50, def: 145, spa: 95, spd: 105, spe: 30},
		abilities: {0: "Mummy"},
		heightm: 1.7,
		weightkg: 76.5,
		color: "Yellow",
		prevo: "yamask",
		evoLevel: 34,
		eggGroups: ["Mineral", "Amorphous"],
	},
	tirtouga: {
		num: 564,
		species: "Tirtouga",
		types: ["Water", "Rock"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 54, atk: 78, def: 103, spa: 53, spd: 45, spe: 22},
		abilities: {0: "Solid Rock", 1: "Sturdy", H: "Swift Swim"},
		heightm: 0.7,
		weightkg: 16.5,
		color: "Blue",
		evos: ["carracosta"],
		eggGroups: ["Water 1", "Water 3"],
	},
	carracosta: {
		num: 565,
		species: "Carracosta",
		types: ["Water", "Rock"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 74, atk: 108, def: 133, spa: 83, spd: 65, spe: 32},
		abilities: {0: "Solid Rock", 1: "Sturdy", H: "Swift Swim"},
		heightm: 1.2,
		weightkg: 81,
		color: "Blue",
		prevo: "tirtouga",
		evoLevel: 37,
		eggGroups: ["Water 1", "Water 3"],
	},
	archen: {
		num: 566,
		species: "Archen",
		types: ["Rock", "Flying"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 55, atk: 112, def: 45, spa: 74, spd: 45, spe: 70},
		abilities: {0: "Defeatist"},
		heightm: 0.5,
		weightkg: 9.5,
		color: "Yellow",
		evos: ["archeops"],
		eggGroups: ["Flying", "Water 3"],
	},
	archeops: {
		num: 567,
		species: "Archeops",
		types: ["Rock", "Flying"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 75, atk: 140, def: 65, spa: 112, spd: 65, spe: 110},
		abilities: {0: "Defeatist"},
		heightm: 1.4,
		weightkg: 32,
		color: "Yellow",
		prevo: "archen",
		evoLevel: 37,
		eggGroups: ["Flying", "Water 3"],
	},
	trubbish: {
		num: 568,
		species: "Trubbish",
		types: ["Poison"],
		baseStats: {hp: 50, atk: 50, def: 62, spa: 40, spd: 62, spe: 65},
		abilities: {0: "Stench", 1: "Sticky Hold", H: "Aftermath"},
		heightm: 0.6,
		weightkg: 31,
		color: "Green",
		evos: ["garbodor"],
		eggGroups: ["Mineral"],
	},
	garbodor: {
		num: 569,
		species: "Garbodor",
		types: ["Poison"],
		baseStats: {hp: 80, atk: 95, def: 82, spa: 60, spd: 82, spe: 75},
		abilities: {0: "Stench", 1: "Weak Armor", H: "Aftermath"},
		heightm: 1.9,
		weightkg: 107.3,
		color: "Green",
		prevo: "trubbish",
		evoLevel: 36,
		eggGroups: ["Mineral"],
	},
	zorua: {
		num: 570,
		species: "Zorua",
		types: ["Dark"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 40, atk: 65, def: 40, spa: 80, spd: 40, spe: 65},
		abilities: {0: "Illusion"},
		heightm: 0.7,
		weightkg: 12.5,
		color: "Gray",
		evos: ["zoroark"],
		eggGroups: ["Field"],
	},
	zoroark: {
		num: 571,
		species: "Zoroark",
		types: ["Dark"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 60, atk: 105, def: 60, spa: 120, spd: 60, spe: 105},
		abilities: {0: "Illusion"},
		heightm: 1.6,
		weightkg: 81.1,
		color: "Gray",
		prevo: "zorua",
		evoLevel: 30,
		eggGroups: ["Field"],
	},
	minccino: {
		num: 572,
		species: "Minccino",
		types: ["Normal"],
		genderRatio: {M: 0.25, F: 0.75},
		baseStats: {hp: 55, atk: 50, def: 40, spa: 40, spd: 40, spe: 75},
		abilities: {0: "Cute Charm", 1: "Technician", H: "Skill Link"},
		heightm: 0.4,
		weightkg: 5.8,
		color: "Gray",
		evos: ["cinccino"],
		eggGroups: ["Field"],
	},
	cinccino: {
		num: 573,
		species: "Cinccino",
		types: ["Normal"],
		genderRatio: {M: 0.25, F: 0.75},
		baseStats: {hp: 75, atk: 95, def: 60, spa: 65, spd: 60, spe: 115},
		abilities: {0: "Cute Charm", 1: "Technician", H: "Skill Link"},
		heightm: 0.5,
		weightkg: 7.5,
		color: "Gray",
		prevo: "minccino",
		evoType: "stone",
		evoItem: "Shiny Stone",
		eggGroups: ["Field"],
	},
	gothita: {
		num: 574,
		species: "Gothita",
		types: ["Psychic"],
		genderRatio: {M: 0.25, F: 0.75},
		baseStats: {hp: 45, atk: 30, def: 50, spa: 55, spd: 65, spe: 45},
		abilities: {0: "Frisk", 1: "Competitive", H: "Shadow Tag"},
		heightm: 0.4,
		weightkg: 5.8,
		color: "Purple",
		evos: ["gothorita"],
		eggGroups: ["Human-Like"],
	},
	gothorita: {
		num: 575,
		species: "Gothorita",
		types: ["Psychic"],
		genderRatio: {M: 0.25, F: 0.75},
		baseStats: {hp: 60, atk: 45, def: 70, spa: 75, spd: 85, spe: 55},
		abilities: {0: "Frisk", 1: "Competitive", H: "Shadow Tag"},
		heightm: 0.7,
		weightkg: 18,
		color: "Purple",
		prevo: "gothita",
		evoLevel: 32,
		evos: ["gothitelle"],
		eggGroups: ["Human-Like"],
	},
	gothitelle: {
		num: 576,
		species: "Gothitelle",
		types: ["Psychic"],
		genderRatio: {M: 0.25, F: 0.75},
		baseStats: {hp: 70, atk: 55, def: 95, spa: 95, spd: 110, spe: 65},
		abilities: {0: "Frisk", 1: "Competitive", H: "Shadow Tag"},
		heightm: 1.5,
		weightkg: 44,
		color: "Purple",
		prevo: "gothorita",
		evoLevel: 41,
		eggGroups: ["Human-Like"],
	},
	solosis: {
		num: 577,
		species: "Solosis",
		types: ["Psychic"],
		baseStats: {hp: 45, atk: 30, def: 40, spa: 105, spd: 50, spe: 20},
		abilities: {0: "Overcoat", 1: "Magic Guard", H: "Regenerator"},
		heightm: 0.3,
		weightkg: 1,
		color: "Green",
		evos: ["duosion"],
		eggGroups: ["Amorphous"],
	},
	duosion: {
		num: 578,
		species: "Duosion",
		types: ["Psychic"],
		baseStats: {hp: 65, atk: 40, def: 50, spa: 125, spd: 60, spe: 30},
		abilities: {0: "Overcoat", 1: "Magic Guard", H: "Regenerator"},
		heightm: 0.6,
		weightkg: 8,
		color: "Green",
		prevo: "solosis",
		evoLevel: 32,
		evos: ["reuniclus"],
		eggGroups: ["Amorphous"],
	},
	reuniclus: {
		num: 579,
		species: "Reuniclus",
		types: ["Psychic"],
		baseStats: {hp: 110, atk: 65, def: 75, spa: 125, spd: 85, spe: 30},
		abilities: {0: "Overcoat", 1: "Magic Guard", H: "Regenerator"},
		heightm: 1,
		weightkg: 20.1,
		color: "Green",
		prevo: "duosion",
		evoLevel: 41,
		eggGroups: ["Amorphous"],
	},
	ducklett: {
		num: 580,
		species: "Ducklett",
		types: ["Water", "Flying"],
		baseStats: {hp: 62, atk: 44, def: 50, spa: 44, spd: 50, spe: 55},
		abilities: {0: "Keen Eye", 1: "Big Pecks", H: "Hydration"},
		heightm: 0.5,
		weightkg: 5.5,
		color: "Blue",
		evos: ["swanna"],
		eggGroups: ["Water 1", "Flying"],
	},
	swanna: {
		num: 581,
		species: "Swanna",
		types: ["Water", "Flying"],
		baseStats: {hp: 75, atk: 87, def: 63, spa: 87, spd: 63, spe: 98},
		abilities: {0: "Keen Eye", 1: "Big Pecks", H: "Hydration"},
		heightm: 1.3,
		weightkg: 24.2,
		color: "White",
		prevo: "ducklett",
		evoLevel: 35,
		eggGroups: ["Water 1", "Flying"],
	},
	vanillite: {
		num: 582,
		species: "Vanillite",
		types: ["Ice"],
		baseStats: {hp: 36, atk: 50, def: 50, spa: 65, spd: 60, spe: 44},
		abilities: {0: "Ice Body", 1: "Snow Cloak", H: "Weak Armor"},
		heightm: 0.4,
		weightkg: 5.7,
		color: "White",
		evos: ["vanillish"],
		eggGroups: ["Mineral"],
	},
	vanillish: {
		num: 583,
		species: "Vanillish",
		types: ["Ice"],
		baseStats: {hp: 51, atk: 65, def: 65, spa: 80, spd: 75, spe: 59},
		abilities: {0: "Ice Body", 1: "Snow Cloak", H: "Weak Armor"},
		heightm: 1.1,
		weightkg: 41,
		color: "White",
		prevo: "vanillite",
		evoLevel: 35,
		evos: ["vanilluxe"],
		eggGroups: ["Mineral"],
	},
	vanilluxe: {
		num: 584,
		species: "Vanilluxe",
		types: ["Ice"],
		baseStats: {hp: 71, atk: 95, def: 85, spa: 110, spd: 95, spe: 79},
		abilities: {0: "Ice Body", 1: "Snow Warning", H: "Weak Armor"},
		heightm: 1.3,
		weightkg: 57.5,
		color: "White",
		prevo: "vanillish",
		evoLevel: 47,
		eggGroups: ["Mineral"],
	},
	deerling: {
		num: 585,
		species: "Deerling",
		baseForme: "Spring",
		types: ["Normal", "Grass"],
		baseStats: {hp: 60, atk: 60, def: 50, spa: 40, spd: 50, spe: 75},
		abilities: {0: "Chlorophyll", 1: "Sap Sipper", H: "Serene Grace"},
		heightm: 0.6,
		weightkg: 19.5,
		color: "Pink",
		evos: ["sawsbuck"],
		eggGroups: ["Field"],
		otherForms: ["deerlingsummer", "deerlingautumn", "deerlingwinter"],
	},
	sawsbuck: {
		num: 586,
		species: "Sawsbuck",
		baseForme: "Spring",
		types: ["Normal", "Grass"],
		baseStats: {hp: 80, atk: 100, def: 70, spa: 60, spd: 70, spe: 95},
		abilities: {0: "Chlorophyll", 1: "Sap Sipper", H: "Serene Grace"},
		heightm: 1.9,
		weightkg: 92.5,
		color: "Brown",
		prevo: "deerling",
		evoLevel: 34,
		eggGroups: ["Field"],
		otherForms: ["sawsbucksummer", "sawsbuckautumn", "sawsbuckwinter"],
	},
	emolga: {
		num: 587,
		species: "Emolga",
		types: ["Electric", "Flying"],
		baseStats: {hp: 55, atk: 75, def: 60, spa: 75, spd: 60, spe: 103},
		abilities: {0: "Static", H: "Motor Drive"},
		heightm: 0.4,
		weightkg: 5,
		color: "White",
		eggGroups: ["Field"],
	},
	karrablast: {
		num: 588,
		species: "Karrablast",
		types: ["Bug"],
		baseStats: {hp: 50, atk: 75, def: 45, spa: 40, spd: 45, spe: 60},
		abilities: {0: "Swarm", 1: "Shed Skin", H: "No Guard"},
		heightm: 0.5,
		weightkg: 5.9,
		color: "Blue",
		evos: ["escavalier"],
		eggGroups: ["Bug"],
	},
	escavalier: {
		num: 589,
		species: "Escavalier",
		types: ["Bug", "Steel"],
		baseStats: {hp: 70, atk: 135, def: 105, spa: 60, spd: 105, spe: 20},
		abilities: {0: "Swarm", 1: "Shell Armor", H: "Overcoat"},
		heightm: 1,
		weightkg: 33,
		color: "Gray",
		prevo: "karrablast",
		evoType: "trade",
		eggGroups: ["Bug"],
	},
	foongus: {
		num: 590,
		species: "Foongus",
		types: ["Grass", "Poison"],
		baseStats: {hp: 69, atk: 55, def: 45, spa: 55, spd: 55, spe: 15},
		abilities: {0: "Effect Spore", H: "Regenerator"},
		heightm: 0.2,
		weightkg: 1,
		color: "White",
		evos: ["amoonguss"],
		eggGroups: ["Grass"],
	},
	amoonguss: {
		num: 591,
		species: "Amoonguss",
		types: ["Grass", "Poison"],
		baseStats: {hp: 114, atk: 85, def: 70, spa: 85, spd: 80, spe: 30},
		abilities: {0: "Effect Spore", H: "Regenerator"},
		heightm: 0.6,
		weightkg: 10.5,
		color: "White",
		prevo: "foongus",
		evoLevel: 39,
		eggGroups: ["Grass"],
	},
	frillish: {
		num: 592,
		species: "Frillish",
		types: ["Water", "Ghost"],
		baseStats: {hp: 55, atk: 40, def: 50, spa: 65, spd: 85, spe: 40},
		abilities: {0: "Water Absorb", 1: "Cursed Body", H: "Damp"},
		heightm: 1.2,
		weightkg: 33,
		color: "White",
		evos: ["jellicent"],
		eggGroups: ["Amorphous"],
	},
	jellicent: {
		num: 593,
		species: "Jellicent",
		types: ["Water", "Ghost"],
		baseStats: {hp: 100, atk: 60, def: 70, spa: 85, spd: 105, spe: 60},
		abilities: {0: "Water Absorb", 1: "Cursed Body", H: "Damp"},
		heightm: 2.2,
		weightkg: 135,
		color: "White",
		prevo: "frillish",
		evoLevel: 40,
		eggGroups: ["Amorphous"],
	},
	alomomola: {
		num: 594,
		species: "Alomomola",
		types: ["Water"],
		baseStats: {hp: 165, atk: 75, def: 80, spa: 40, spd: 45, spe: 65},
		abilities: {0: "Healer", 1: "Hydration", H: "Regenerator"},
		heightm: 1.2,
		weightkg: 31.6,
		color: "Pink",
		eggGroups: ["Water 1", "Water 2"],
	},
	joltik: {
		num: 595,
		species: "Joltik",
		types: ["Bug", "Electric"],
		baseStats: {hp: 50, atk: 47, def: 50, spa: 57, spd: 50, spe: 65},
		abilities: {0: "Compound Eyes", 1: "Unnerve", H: "Swarm"},
		heightm: 0.1,
		weightkg: 0.6,
		color: "Yellow",
		evos: ["galvantula"],
		eggGroups: ["Bug"],
	},
	galvantula: {
		num: 596,
		species: "Galvantula",
		types: ["Bug", "Electric"],
		baseStats: {hp: 70, atk: 77, def: 60, spa: 97, spd: 60, spe: 108},
		abilities: {0: "Compound Eyes", 1: "Unnerve", H: "Swarm"},
		heightm: 0.8,
		weightkg: 14.3,
		color: "Yellow",
		prevo: "joltik",
		evoLevel: 36,
		eggGroups: ["Bug"],
	},
	ferroseed: {
		num: 597,
		species: "Ferroseed",
		types: ["Grass", "Steel"],
		baseStats: {hp: 44, atk: 50, def: 91, spa: 24, spd: 86, spe: 10},
		abilities: {0: "Iron Barbs"},
		heightm: 0.6,
		weightkg: 18.8,
		color: "Gray",
		evos: ["ferrothorn"],
		eggGroups: ["Grass", "Mineral"],
	},
	ferrothorn: {
		num: 598,
		species: "Ferrothorn",
		types: ["Grass", "Steel"],
		baseStats: {hp: 74, atk: 94, def: 131, spa: 54, spd: 116, spe: 20},
		abilities: {0: "Iron Barbs", H: "Anticipation"},
		heightm: 1,
		weightkg: 110,
		color: "Gray",
		prevo: "ferroseed",
		evoLevel: 40,
		eggGroups: ["Grass", "Mineral"],
	},
	klink: {
		num: 599,
		species: "Klink",
		types: ["Steel"],
		gender: "N",
		baseStats: {hp: 40, atk: 55, def: 70, spa: 45, spd: 60, spe: 30},
		abilities: {0: "Plus", 1: "Minus", H: "Clear Body"},
		heightm: 0.3,
		weightkg: 21,
		color: "Gray",
		evos: ["klang"],
		eggGroups: ["Mineral"],
	},
	klang: {
		num: 600,
		species: "Klang",
		types: ["Steel"],
		gender: "N",
		baseStats: {hp: 60, atk: 80, def: 95, spa: 70, spd: 85, spe: 50},
		abilities: {0: "Plus", 1: "Minus", H: "Clear Body"},
		heightm: 0.6,
		weightkg: 51,
		color: "Gray",
		prevo: "klink",
		evoLevel: 38,
		evos: ["klinklang"],
		eggGroups: ["Mineral"],
	},
	klinklang: {
		num: 601,
		species: "Klinklang",
		types: ["Steel"],
		gender: "N",
		baseStats: {hp: 60, atk: 100, def: 115, spa: 70, spd: 85, spe: 90},
		abilities: {0: "Plus", 1: "Minus", H: "Clear Body"},
		heightm: 0.6,
		weightkg: 81,
		color: "Gray",
		prevo: "klang",
		evoLevel: 49,
		eggGroups: ["Mineral"],
	},
	tynamo: {
		num: 602,
		species: "Tynamo",
		types: ["Electric"],
		baseStats: {hp: 35, atk: 55, def: 40, spa: 45, spd: 40, spe: 60},
		abilities: {0: "Levitate"},
		heightm: 0.2,
		weightkg: 0.3,
		color: "White",
		evos: ["eelektrik"],
		eggGroups: ["Amorphous"],
	},
	eelektrik: {
		num: 603,
		species: "Eelektrik",
		types: ["Electric"],
		baseStats: {hp: 65, atk: 85, def: 70, spa: 75, spd: 70, spe: 40},
		abilities: {0: "Levitate"},
		heightm: 1.2,
		weightkg: 22,
		color: "Blue",
		prevo: "tynamo",
		evoLevel: 39,
		evos: ["eelektross"],
		eggGroups: ["Amorphous"],
	},
	eelektross: {
		num: 604,
		species: "Eelektross",
		types: ["Electric"],
		baseStats: {hp: 85, atk: 115, def: 80, spa: 105, spd: 80, spe: 50},
		abilities: {0: "Levitate"},
		heightm: 2.1,
		weightkg: 80.5,
		color: "Blue",
		prevo: "eelektrik",
		evoType: "stone",
		evoItem: "Thunder Stone",
		eggGroups: ["Amorphous"],
	},
	elgyem: {
		num: 605,
		species: "Elgyem",
		types: ["Psychic"],
		baseStats: {hp: 55, atk: 55, def: 55, spa: 85, spd: 55, spe: 30},
		abilities: {0: "Telepathy", 1: "Synchronize", H: "Analytic"},
		heightm: 0.5,
		weightkg: 9,
		color: "Blue",
		evos: ["beheeyem"],
		eggGroups: ["Human-Like"],
	},
	beheeyem: {
		num: 606,
		species: "Beheeyem",
		types: ["Psychic"],
		baseStats: {hp: 75, atk: 75, def: 75, spa: 125, spd: 95, spe: 40},
		abilities: {0: "Telepathy", 1: "Synchronize", H: "Analytic"},
		heightm: 1,
		weightkg: 34.5,
		color: "Brown",
		prevo: "elgyem",
		evoLevel: 42,
		eggGroups: ["Human-Like"],
	},
	litwick: {
		num: 607,
		species: "Litwick",
		types: ["Ghost", "Fire"],
		baseStats: {hp: 50, atk: 30, def: 55, spa: 65, spd: 55, spe: 20},
		abilities: {0: "Flash Fire", 1: "Flame Body", H: "Infiltrator"},
		heightm: 0.3,
		weightkg: 3.1,
		color: "White",
		evos: ["lampent"],
		eggGroups: ["Amorphous"],
	},
	lampent: {
		num: 608,
		species: "Lampent",
		types: ["Ghost", "Fire"],
		baseStats: {hp: 60, atk: 40, def: 60, spa: 95, spd: 60, spe: 55},
		abilities: {0: "Flash Fire", 1: "Flame Body", H: "Infiltrator"},
		heightm: 0.6,
		weightkg: 13,
		color: "Black",
		prevo: "litwick",
		evoLevel: 41,
		evos: ["chandelure"],
		eggGroups: ["Amorphous"],
	},
	chandelure: {
		num: 609,
		species: "Chandelure",
		types: ["Ghost", "Fire"],
		baseStats: {hp: 60, atk: 55, def: 90, spa: 145, spd: 90, spe: 80},
		abilities: {0: "Flash Fire", 1: "Flame Body", H: "Infiltrator"},
		heightm: 1,
		weightkg: 34.3,
		color: "Black",
		prevo: "lampent",
		evoType: "stone",
		evoItem: "Dusk Stone",
		eggGroups: ["Amorphous"],
	},
	axew: {
		num: 610,
		species: "Axew",
		types: ["Dragon"],
		baseStats: {hp: 46, atk: 87, def: 60, spa: 30, spd: 40, spe: 57},
		abilities: {0: "Rivalry", 1: "Mold Breaker", H: "Unnerve"},
		heightm: 0.6,
		weightkg: 18,
		color: "Green",
		evos: ["fraxure"],
		eggGroups: ["Monster", "Dragon"],
	},
	fraxure: {
		num: 611,
		species: "Fraxure",
		types: ["Dragon"],
		baseStats: {hp: 66, atk: 117, def: 70, spa: 40, spd: 50, spe: 67},
		abilities: {0: "Rivalry", 1: "Mold Breaker", H: "Unnerve"},
		heightm: 1,
		weightkg: 36,
		color: "Green",
		prevo: "axew",
		evoLevel: 38,
		evos: ["haxorus"],
		eggGroups: ["Monster", "Dragon"],
	},
	haxorus: {
		num: 612,
		species: "Haxorus",
		types: ["Dragon"],
		baseStats: {hp: 76, atk: 147, def: 90, spa: 60, spd: 70, spe: 97},
		abilities: {0: "Rivalry", 1: "Mold Breaker", H: "Unnerve"},
		heightm: 1.8,
		weightkg: 105.5,
		color: "Yellow",
		prevo: "fraxure",
		evoLevel: 48,
		eggGroups: ["Monster", "Dragon"],
	},
	cubchoo: {
		num: 613,
		species: "Cubchoo",
		types: ["Ice"],
		baseStats: {hp: 55, atk: 70, def: 40, spa: 60, spd: 40, spe: 40},
		abilities: {0: "Snow Cloak", 1: "Slush Rush", H: "Rattled"},
		heightm: 0.5,
		weightkg: 8.5,
		color: "White",
		evos: ["beartic"],
		eggGroups: ["Field"],
	},
	beartic: {
		num: 614,
		species: "Beartic",
		types: ["Ice"],
		baseStats: {hp: 95, atk: 130, def: 80, spa: 70, spd: 80, spe: 50},
		abilities: {0: "Snow Cloak", 1: "Slush Rush", H: "Swift Swim"},
		heightm: 2.6,
		weightkg: 260,
		color: "White",
		prevo: "cubchoo",
		evoLevel: 37,
		eggGroups: ["Field"],
	},
	cryogonal: {
		num: 615,
		species: "Cryogonal",
		types: ["Ice"],
		gender: "N",
		baseStats: {hp: 80, atk: 50, def: 50, spa: 95, spd: 135, spe: 105},
		abilities: {0: "Levitate"},
		heightm: 1.1,
		weightkg: 148,
		color: "Blue",
		eggGroups: ["Mineral"],
	},
	shelmet: {
		num: 616,
		species: "Shelmet",
		types: ["Bug"],
		baseStats: {hp: 50, atk: 40, def: 85, spa: 40, spd: 65, spe: 25},
		abilities: {0: "Hydration", 1: "Shell Armor", H: "Overcoat"},
		heightm: 0.4,
		weightkg: 7.7,
		color: "Red",
		evos: ["accelgor"],
		eggGroups: ["Bug"],
	},
	accelgor: {
		num: 617,
		species: "Accelgor",
		types: ["Bug"],
		baseStats: {hp: 80, atk: 70, def: 40, spa: 100, spd: 60, spe: 145},
		abilities: {0: "Hydration", 1: "Sticky Hold", H: "Unburden"},
		heightm: 0.8,
		weightkg: 25.3,
		color: "Red",
		prevo: "shelmet",
		evoType: "trade",
		eggGroups: ["Bug"],
	},
	stunfisk: {
		num: 618,
		species: "Stunfisk",
		types: ["Ground", "Electric"],
		baseStats: {hp: 109, atk: 66, def: 84, spa: 81, spd: 99, spe: 32},
		abilities: {0: "Static", 1: "Limber", H: "Sand Veil"},
		heightm: 0.7,
		weightkg: 11,
		color: "Brown",
		eggGroups: ["Water 1", "Amorphous"],
	},
	mienfoo: {
		num: 619,
		species: "Mienfoo",
		types: ["Fighting"],
		baseStats: {hp: 45, atk: 85, def: 50, spa: 55, spd: 50, spe: 65},
		abilities: {0: "Inner Focus", 1: "Regenerator", H: "Reckless"},
		heightm: 0.9,
		weightkg: 20,
		color: "Yellow",
		evos: ["mienshao"],
		eggGroups: ["Field", "Human-Like"],
	},
	mienshao: {
		num: 620,
		species: "Mienshao",
		types: ["Fighting"],
		baseStats: {hp: 65, atk: 125, def: 60, spa: 95, spd: 60, spe: 105},
		abilities: {0: "Inner Focus", 1: "Regenerator", H: "Reckless"},
		heightm: 1.4,
		weightkg: 35.5,
		color: "Purple",
		prevo: "mienfoo",
		evoLevel: 50,
		eggGroups: ["Field", "Human-Like"],
	},
	druddigon: {
		num: 621,
		species: "Druddigon",
		types: ["Dragon"],
		baseStats: {hp: 77, atk: 120, def: 90, spa: 60, spd: 90, spe: 48},
		abilities: {0: "Rough Skin", 1: "Sheer Force", H: "Mold Breaker"},
		heightm: 1.6,
		weightkg: 139,
		color: "Red",
		eggGroups: ["Monster", "Dragon"],
	},
	golett: {
		num: 622,
		species: "Golett",
		types: ["Ground", "Ghost"],
		gender: "N",
		baseStats: {hp: 59, atk: 74, def: 50, spa: 35, spd: 50, spe: 35},
		abilities: {0: "Iron Fist", 1: "Klutz", H: "No Guard"},
		heightm: 1,
		weightkg: 92,
		color: "Green",
		evos: ["golurk"],
		eggGroups: ["Mineral"],
	},
	golurk: {
		num: 623,
		species: "Golurk",
		types: ["Ground", "Ghost"],
		gender: "N",
		baseStats: {hp: 89, atk: 124, def: 80, spa: 55, spd: 80, spe: 55},
		abilities: {0: "Iron Fist", 1: "Klutz", H: "No Guard"},
		heightm: 2.8,
		weightkg: 330,
		color: "Green",
		prevo: "golett",
		evoLevel: 43,
		eggGroups: ["Mineral"],
	},
	pawniard: {
		num: 624,
		species: "Pawniard",
		types: ["Dark", "Steel"],
		baseStats: {hp: 45, atk: 85, def: 70, spa: 40, spd: 40, spe: 60},
		abilities: {0: "Defiant", 1: "Inner Focus", H: "Pressure"},
		heightm: 0.5,
		weightkg: 10.2,
		color: "Red",
		evos: ["bisharp"],
		eggGroups: ["Human-Like"],
	},
	bisharp: {
		num: 625,
		species: "Bisharp",
		types: ["Dark", "Steel"],
		baseStats: {hp: 65, atk: 125, def: 100, spa: 60, spd: 70, spe: 70},
		abilities: {0: "Defiant", 1: "Inner Focus", H: "Pressure"},
		heightm: 1.6,
		weightkg: 70,
		color: "Red",
		prevo: "pawniard",
		evoLevel: 52,
		eggGroups: ["Human-Like"],
	},
	bouffalant: {
		num: 626,
		species: "Bouffalant",
		types: ["Normal"],
		baseStats: {hp: 95, atk: 110, def: 95, spa: 40, spd: 95, spe: 55},
		abilities: {0: "Reckless", 1: "Sap Sipper", H: "Soundproof"},
		heightm: 1.6,
		weightkg: 94.6,
		color: "Brown",
		eggGroups: ["Field"],
	},
	rufflet: {
		num: 627,
		species: "Rufflet",
		types: ["Normal", "Flying"],
		gender: "M",
		baseStats: {hp: 70, atk: 83, def: 50, spa: 37, spd: 50, spe: 60},
		abilities: {0: "Keen Eye", 1: "Sheer Force", H: "Hustle"},
		heightm: 0.5,
		weightkg: 10.5,
		color: "White",
		evos: ["braviary"],
		eggGroups: ["Flying"],
	},
	braviary: {
		num: 628,
		species: "Braviary",
		types: ["Normal", "Flying"],
		gender: "M",
		baseStats: {hp: 100, atk: 123, def: 75, spa: 57, spd: 75, spe: 80},
		abilities: {0: "Keen Eye", 1: "Sheer Force", H: "Defiant"},
		heightm: 1.5,
		weightkg: 41,
		color: "Red",
		prevo: "rufflet",
		evoLevel: 54,
		eggGroups: ["Flying"],
	},
	vullaby: {
		num: 629,
		species: "Vullaby",
		types: ["Dark", "Flying"],
		gender: "F",
		baseStats: {hp: 70, atk: 55, def: 75, spa: 45, spd: 65, spe: 60},
		abilities: {0: "Big Pecks", 1: "Overcoat", H: "Weak Armor"},
		heightm: 0.5,
		weightkg: 9,
		color: "Brown",
		evos: ["mandibuzz"],
		eggGroups: ["Flying"],
	},
	mandibuzz: {
		num: 630,
		species: "Mandibuzz",
		types: ["Dark", "Flying"],
		gender: "F",
		baseStats: {hp: 110, atk: 65, def: 105, spa: 55, spd: 95, spe: 80},
		abilities: {0: "Big Pecks", 1: "Overcoat", H: "Weak Armor"},
		heightm: 1.2,
		weightkg: 39.5,
		color: "Brown",
		prevo: "vullaby",
		evoLevel: 54,
		eggGroups: ["Flying"],
	},
	heatmor: {
		num: 631,
		species: "Heatmor",
		types: ["Fire"],
		baseStats: {hp: 85, atk: 97, def: 66, spa: 105, spd: 66, spe: 65},
		abilities: {0: "Gluttony", 1: "Flash Fire", H: "White Smoke"},
		heightm: 1.4,
		weightkg: 58,
		color: "Red",
		eggGroups: ["Field"],
	},
	durant: {
		num: 632,
		species: "Durant",
		types: ["Bug", "Steel"],
		baseStats: {hp: 58, atk: 109, def: 112, spa: 48, spd: 48, spe: 109},
		abilities: {0: "Swarm", 1: "Hustle", H: "Truant"},
		heightm: 0.3,
		weightkg: 33,
		color: "Gray",
		eggGroups: ["Bug"],
	},
	deino: {
		num: 633,
		species: "Deino",
		types: ["Dark", "Dragon"],
		baseStats: {hp: 52, atk: 65, def: 50, spa: 45, spd: 50, spe: 38},
		abilities: {0: "Hustle"},
		heightm: 0.8,
		weightkg: 17.3,
		color: "Blue",
		evos: ["zweilous"],
		eggGroups: ["Dragon"],
	},
	zweilous: {
		num: 634,
		species: "Zweilous",
		types: ["Dark", "Dragon"],
		baseStats: {hp: 72, atk: 85, def: 70, spa: 65, spd: 70, spe: 58},
		abilities: {0: "Hustle"},
		heightm: 1.4,
		weightkg: 50,
		color: "Blue",
		prevo: "deino",
		evoLevel: 50,
		evos: ["hydreigon"],
		eggGroups: ["Dragon"],
	},
	hydreigon: {
		num: 635,
		species: "Hydreigon",
		types: ["Dark", "Dragon"],
		baseStats: {hp: 92, atk: 105, def: 90, spa: 125, spd: 90, spe: 98},
		abilities: {0: "Levitate"},
		heightm: 1.8,
		weightkg: 160,
		color: "Blue",
		prevo: "zweilous",
		evoLevel: 64,
		eggGroups: ["Dragon"],
	},
	larvesta: {
		num: 636,
		species: "Larvesta",
		types: ["Bug", "Fire"],
		baseStats: {hp: 55, atk: 85, def: 55, spa: 50, spd: 55, spe: 60},
		abilities: {0: "Flame Body", H: "Swarm"},
		heightm: 1.1,
		weightkg: 28.8,
		color: "White",
		evos: ["volcarona"],
		eggGroups: ["Bug"],
	},
	volcarona: {
		num: 637,
		species: "Volcarona",
		types: ["Bug", "Fire"],
		baseStats: {hp: 85, atk: 60, def: 65, spa: 135, spd: 105, spe: 100},
		abilities: {0: "Flame Body", H: "Swarm"},
		heightm: 1.6,
		weightkg: 46,
		color: "White",
		prevo: "larvesta",
		evoLevel: 59,
		eggGroups: ["Bug"],
	},
	cobalion: {
		num: 638,
		species: "Cobalion",
		types: ["Steel", "Fighting"],
		gender: "N",
		baseStats: {hp: 91, atk: 90, def: 129, spa: 90, spd: 72, spe: 108},
		abilities: {0: "Justified"},
		heightm: 2.1,
		weightkg: 250,
		color: "Blue",
		eggGroups: ["Undiscovered"],
	},
	terrakion: {
		num: 639,
		species: "Terrakion",
		types: ["Rock", "Fighting"],
		gender: "N",
		baseStats: {hp: 91, atk: 129, def: 90, spa: 72, spd: 90, spe: 108},
		abilities: {0: "Justified"},
		heightm: 1.9,
		weightkg: 260,
		color: "Gray",
		eggGroups: ["Undiscovered"],
	},
	virizion: {
		num: 640,
		species: "Virizion",
		types: ["Grass", "Fighting"],
		gender: "N",
		baseStats: {hp: 91, atk: 90, def: 72, spa: 90, spd: 129, spe: 108},
		abilities: {0: "Justified"},
		heightm: 2,
		weightkg: 200,
		color: "Green",
		eggGroups: ["Undiscovered"],
	},
	tornadus: {
		num: 641,
		species: "Tornadus",
		baseForme: "Incarnate",
		types: ["Flying"],
		gender: "M",
		baseStats: {hp: 79, atk: 115, def: 70, spa: 125, spd: 80, spe: 111},
		abilities: {0: "Prankster", H: "Defiant"},
		heightm: 1.5,
		weightkg: 63,
		color: "Green",
		eggGroups: ["Undiscovered"],
		otherFormes: ["tornadustherian"],
	},
	tornadustherian: {
		num: 641,
		species: "Tornadus-Therian",
		baseSpecies: "Tornadus",
		forme: "Therian",
		formeLetter: "T",
		types: ["Flying"],
		gender: "M",
		baseStats: {hp: 79, atk: 100, def: 80, spa: 110, spd: 90, spe: 121},
		abilities: {0: "Regenerator"},
		heightm: 1.4,
		weightkg: 63,
		color: "Green",
		eggGroups: ["Undiscovered"],
	},
	thundurus: {
		num: 642,
		species: "Thundurus",
		baseForme: "Incarnate",
		types: ["Electric", "Flying"],
		gender: "M",
		baseStats: {hp: 79, atk: 115, def: 70, spa: 125, spd: 80, spe: 111},
		abilities: {0: "Prankster", H: "Defiant"},
		heightm: 1.5,
		weightkg: 61,
		color: "Blue",
		eggGroups: ["Undiscovered"],
		otherFormes: ["thundurustherian"],
	},
	thundurustherian: {
		num: 642,
		species: "Thundurus-Therian",
		baseSpecies: "Thundurus",
		forme: "Therian",
		formeLetter: "T",
		types: ["Electric", "Flying"],
		gender: "M",
		baseStats: {hp: 79, atk: 105, def: 70, spa: 145, spd: 80, spe: 101},
		abilities: {0: "Volt Absorb"},
		heightm: 3,
		weightkg: 61,
		color: "Blue",
		eggGroups: ["Undiscovered"],
	},
	reshiram: {
		num: 643,
		species: "Reshiram",
		types: ["Dragon", "Fire"],
		gender: "N",
		baseStats: {hp: 100, atk: 120, def: 100, spa: 150, spd: 120, spe: 90},
		abilities: {0: "Turboblaze"},
		heightm: 3.2,
		weightkg: 330,
		color: "White",
		eggGroups: ["Undiscovered"],
	},
	zekrom: {
		num: 644,
		species: "Zekrom",
		types: ["Dragon", "Electric"],
		gender: "N",
		baseStats: {hp: 100, atk: 150, def: 120, spa: 120, spd: 100, spe: 90},
		abilities: {0: "Teravolt"},
		heightm: 2.9,
		weightkg: 345,
		color: "Black",
		eggGroups: ["Undiscovered"],
	},
	landorus: {
		num: 645,
		species: "Landorus",
		baseForme: "Incarnate",
		types: ["Ground", "Flying"],
		gender: "M",
		baseStats: {hp: 89, atk: 125, def: 90, spa: 115, spd: 80, spe: 101},
		abilities: {0: "Sand Force", H: "Sheer Force"},
		heightm: 1.5,
		weightkg: 68,
		color: "Brown",
		eggGroups: ["Undiscovered"],
		otherFormes: ["landorustherian"],
	},
	landorustherian: {
		num: 645,
		species: "Landorus-Therian",
		baseSpecies: "Landorus",
		forme: "Therian",
		formeLetter: "T",
		types: ["Ground", "Flying"],
		gender: "M",
		baseStats: {hp: 89, atk: 145, def: 90, spa: 105, spd: 80, spe: 91},
		abilities: {0: "Intimidate"},
		heightm: 1.3,
		weightkg: 68,
		color: "Brown",
		eggGroups: ["Undiscovered"],
	},
	kyurem: {
		num: 646,
		species: "Kyurem",
		types: ["Dragon", "Ice"],
		gender: "N",
		baseStats: {hp: 125, atk: 130, def: 90, spa: 130, spd: 90, spe: 95},
		abilities: {0: "Pressure"},
		heightm: 3,
		weightkg: 325,
		color: "Gray",
		eggGroups: ["Undiscovered"],
		otherFormes: ["kyuremblack", "kyuremwhite"],
	},
	kyuremblack: {
		num: 646,
		species: "Kyurem-Black",
		baseSpecies: "Kyurem",
		forme: "Black",
		formeLetter: "B",
		types: ["Dragon", "Ice"],
		gender: "N",
		baseStats: {hp: 125, atk: 170, def: 100, spa: 120, spd: 90, spe: 95},
		abilities: {0: "Teravolt"},
		heightm: 3.3,
		weightkg: 325,
		color: "Gray",
		eggGroups: ["Undiscovered"],
	},
	kyuremwhite: {
		num: 646,
		species: "Kyurem-White",
		baseSpecies: "Kyurem",
		forme: "White",
		formeLetter: "W",
		types: ["Dragon", "Ice"],
		gender: "N",
		baseStats: {hp: 125, atk: 120, def: 90, spa: 170, spd: 100, spe: 95},
		abilities: {0: "Turboblaze"},
		heightm: 3.6,
		weightkg: 325,
		color: "Gray",
		eggGroups: ["Undiscovered"],
	},
	keldeo: {
		num: 647,
		species: "Keldeo",
		baseForme: "Ordinary",
		types: ["Water", "Fighting"],
		gender: "N",
		baseStats: {hp: 91, atk: 72, def: 90, spa: 129, spd: 90, spe: 108},
		abilities: {0: "Justified"},
		heightm: 1.4,
		weightkg: 48.5,
		color: "Yellow",
		eggGroups: ["Undiscovered"],
		otherFormes: ["keldeoresolute"],
	},
	keldeoresolute: {
		num: 647,
		species: "Keldeo-Resolute",
		baseSpecies: "Keldeo",
		forme: "Resolute",
		formeLetter: "R",
		types: ["Water", "Fighting"],
		gender: "N",
		baseStats: {hp: 91, atk: 72, def: 90, spa: 129, spd: 90, spe: 108},
		abilities: {0: "Justified"},
		heightm: 1.4,
		weightkg: 48.5,
		color: "Yellow",
		eggGroups: ["Undiscovered"],
	},
	meloetta: {
		num: 648,
		species: "Meloetta",
		baseForme: "Aria",
		types: ["Normal", "Psychic"],
		gender: "N",
		baseStats: {hp: 100, atk: 77, def: 77, spa: 128, spd: 128, spe: 90},
		abilities: {0: "Serene Grace"},
		heightm: 0.6,
		weightkg: 6.5,
		color: "White",
		eggGroups: ["Undiscovered"],
		otherFormes: ["meloettapirouette"],
	},
	meloettapirouette: {
		num: 648,
		species: "Meloetta-Pirouette",
		baseSpecies: "Meloetta",
		forme: "Pirouette",
		formeLetter: "P",
		types: ["Normal", "Fighting"],
		gender: "N",
		baseStats: {hp: 100, atk: 128, def: 90, spa: 77, spd: 77, spe: 128},
		abilities: {0: "Serene Grace"},
		heightm: 0.6,
		weightkg: 6.5,
		color: "White",
		eggGroups: ["Undiscovered"],
	},
	genesect: {
		num: 649,
		species: "Genesect",
		types: ["Bug", "Steel"],
		gender: "N",
		baseStats: {hp: 71, atk: 120, def: 95, spa: 120, spd: 95, spe: 99},
		abilities: {0: "Download"},
		heightm: 1.5,
		weightkg: 82.5,
		color: "Purple",
		eggGroups: ["Undiscovered"],
		otherFormes: ["genesectdouse", "genesectshock", "genesectburn", "genesectchill"],
	},
	genesectdouse: {
		num: 649,
		species: "Genesect-Douse",
		baseSpecies: "Genesect",
		forme: "Douse",
		formeLetter: "D",
		types: ["Bug", "Steel"],
		gender: "N",
		baseStats: {hp: 71, atk: 120, def: 95, spa: 120, spd: 95, spe: 99},
		abilities: {0: "Download"},
		heightm: 1.5,
		weightkg: 82.5,
		color: "Purple",
		eggGroups: ["Undiscovered"],
	},
	genesectshock: {
		num: 649,
		species: "Genesect-Shock",
		baseSpecies: "Genesect",
		forme: "Shock",
		formeLetter: "S",
		types: ["Bug", "Steel"],
		gender: "N",
		baseStats: {hp: 71, atk: 120, def: 95, spa: 120, spd: 95, spe: 99},
		abilities: {0: "Download"},
		heightm: 1.5,
		weightkg: 82.5,
		color: "Purple",
		eggGroups: ["Undiscovered"],
	},
	genesectburn: {
		num: 649,
		species: "Genesect-Burn",
		baseSpecies: "Genesect",
		forme: "Burn",
		formeLetter: "B",
		types: ["Bug", "Steel"],
		gender: "N",
		baseStats: {hp: 71, atk: 120, def: 95, spa: 120, spd: 95, spe: 99},
		abilities: {0: "Download"},
		heightm: 1.5,
		weightkg: 82.5,
		color: "Purple",
		eggGroups: ["Undiscovered"],
	},
	genesectchill: {
		num: 649,
		species: "Genesect-Chill",
		baseSpecies: "Genesect",
		forme: "Chill",
		formeLetter: "C",
		types: ["Bug", "Steel"],
		gender: "N",
		baseStats: {hp: 71, atk: 120, def: 95, spa: 120, spd: 95, spe: 99},
		abilities: {0: "Download"},
		heightm: 1.5,
		weightkg: 82.5,
		color: "Purple",
		eggGroups: ["Undiscovered"],
	},
	chespin: {
		num: 650,
		species: "Chespin",
		types: ["Grass"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 56, atk: 61, def: 65, spa: 48, spd: 45, spe: 38},
		abilities: {0: "Overgrow", H: "Bulletproof"},
		heightm: 0.4,
		weightkg: 9,
		color: "Green",
		evos: ["quilladin"],
		eggGroups: ["Field"],
	},
	quilladin: {
		num: 651,
		species: "Quilladin",
		types: ["Grass"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 61, atk: 78, def: 95, spa: 56, spd: 58, spe: 57},
		abilities: {0: "Overgrow", H: "Bulletproof"},
		heightm: 0.7,
		weightkg: 29,
		color: "Green",
		prevo: "chespin",
		evoLevel: 16,
		evos: ["chesnaught"],
		eggGroups: ["Field"],
	},
	chesnaught: {
		num: 652,
		species: "Chesnaught",
		types: ["Grass", "Fighting"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 88, atk: 107, def: 122, spa: 74, spd: 75, spe: 64},
		abilities: {0: "Overgrow", H: "Bulletproof"},
		heightm: 1.6,
		weightkg: 90,
		color: "Green",
		prevo: "quilladin",
		evoLevel: 36,
		eggGroups: ["Field"],
	},
	fennekin: {
		num: 653,
		species: "Fennekin",
		types: ["Fire"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 40, atk: 45, def: 40, spa: 62, spd: 60, spe: 60},
		abilities: {0: "Blaze", H: "Magician"},
		heightm: 0.4,
		weightkg: 9.4,
		color: "Red",
		evos: ["braixen"],
		eggGroups: ["Field"],
	},
	braixen: {
		num: 654,
		species: "Braixen",
		types: ["Fire"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 59, atk: 59, def: 58, spa: 90, spd: 70, spe: 73},
		abilities: {0: "Blaze", H: "Magician"},
		heightm: 1,
		weightkg: 14.5,
		color: "Red",
		prevo: "fennekin",
		evoLevel: 16,
		evos: ["delphox"],
		eggGroups: ["Field"],
	},
	delphox: {
		num: 655,
		species: "Delphox",
		types: ["Fire", "Psychic"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 75, atk: 69, def: 72, spa: 114, spd: 100, spe: 104},
		abilities: {0: "Blaze", H: "Magician"},
		heightm: 1.5,
		weightkg: 39,
		color: "Red",
		prevo: "braixen",
		evoLevel: 36,
		eggGroups: ["Field"],
	},
	froakie: {
		num: 656,
		species: "Froakie",
		types: ["Water"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 41, atk: 56, def: 40, spa: 62, spd: 44, spe: 71},
		abilities: {0: "Torrent", H: "Protean"},
		heightm: 0.3,
		weightkg: 7,
		color: "Blue",
		evos: ["frogadier"],
		eggGroups: ["Water 1"],
	},
	frogadier: {
		num: 657,
		species: "Frogadier",
		types: ["Water"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 54, atk: 63, def: 52, spa: 83, spd: 56, spe: 97},
		abilities: {0: "Torrent", H: "Protean"},
		heightm: 0.6,
		weightkg: 10.9,
		color: "Blue",
		prevo: "froakie",
		evoLevel: 16,
		evos: ["greninja"],
		eggGroups: ["Water 1"],
	},
	greninja: {
		num: 658,
		species: "Greninja",
		types: ["Water", "Dark"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 72, atk: 95, def: 67, spa: 103, spd: 71, spe: 122},
		abilities: {0: "Torrent", H: "Protean", S: "Battle Bond"},
		heightm: 1.5,
		weightkg: 40,
		color: "Blue",
		prevo: "frogadier",
		evoLevel: 36,
		eggGroups: ["Water 1"],
		otherFormes: ["greninjaash"],
	},
	greninjaash: {
		num: 658,
		species: "Greninja-Ash",
		baseSpecies: "Greninja",
		forme: "Ash",
		formeLetter: "A",
		types: ["Water", "Dark"],
		gender: "M",
		baseStats: {hp: 72, atk: 145, def: 67, spa: 153, spd: 71, spe: 132},
		abilities: {0: "Battle Bond"},
		heightm: 1.5,
		weightkg: 40,
		color: "Blue",
		eggGroups: ["Undiscovered"],
	},
	bunnelby: {
		num: 659,
		species: "Bunnelby",
		types: ["Normal"],
		baseStats: {hp: 38, atk: 36, def: 38, spa: 32, spd: 36, spe: 57},
		abilities: {0: "Pickup", 1: "Cheek Pouch", H: "Huge Power"},
		heightm: 0.4,
		weightkg: 5,
		color: "Brown",
		evos: ["diggersby"],
		eggGroups: ["Field"],
	},
	diggersby: {
		num: 660,
		species: "Diggersby",
		types: ["Normal", "Ground"],
		baseStats: {hp: 85, atk: 56, def: 77, spa: 50, spd: 77, spe: 78},
		abilities: {0: "Pickup", 1: "Cheek Pouch", H: "Huge Power"},
		heightm: 1,
		weightkg: 42.4,
		color: "Brown",
		prevo: "bunnelby",
		evoLevel: 20,
		eggGroups: ["Field"],
	},
	fletchling: {
		num: 661,
		species: "Fletchling",
		types: ["Normal", "Flying"],
		baseStats: {hp: 45, atk: 50, def: 43, spa: 40, spd: 38, spe: 62},
		abilities: {0: "Big Pecks", H: "Gale Wings"},
		heightm: 0.3,
		weightkg: 1.7,
		color: "Red",
		evos: ["fletchinder"],
		eggGroups: ["Flying"],
	},
	fletchinder: {
		num: 662,
		species: "Fletchinder",
		types: ["Fire", "Flying"],
		baseStats: {hp: 62, atk: 73, def: 55, spa: 56, spd: 52, spe: 84},
		abilities: {0: "Flame Body", H: "Gale Wings"},
		heightm: 0.7,
		weightkg: 16,
		color: "Red",
		prevo: "fletchling",
		evoLevel: 17,
		evos: ["talonflame"],
		eggGroups: ["Flying"],
	},
	talonflame: {
		num: 663,
		species: "Talonflame",
		types: ["Fire", "Flying"],
		baseStats: {hp: 78, atk: 81, def: 71, spa: 74, spd: 69, spe: 126},
		abilities: {0: "Flame Body", H: "Gale Wings"},
		heightm: 1.2,
		weightkg: 24.5,
		color: "Red",
		prevo: "fletchinder",
		evoLevel: 35,
		eggGroups: ["Flying"],
	},
	scatterbug: {
		num: 664,
		species: "Scatterbug",
		types: ["Bug"],
		baseStats: {hp: 38, atk: 35, def: 40, spa: 27, spd: 25, spe: 35},
		abilities: {0: "Shield Dust", 1: "Compound Eyes", H: "Friend Guard"},
		heightm: 0.3,
		weightkg: 2.5,
		color: "Black",
		evos: ["spewpa"],
		eggGroups: ["Bug"],
	},
	spewpa: {
		num: 665,
		species: "Spewpa",
		types: ["Bug"],
		baseStats: {hp: 45, atk: 22, def: 60, spa: 27, spd: 30, spe: 29},
		abilities: {0: "Shed Skin", H: "Friend Guard"},
		heightm: 0.3,
		weightkg: 8.4,
		color: "Black",
		prevo: "scatterbug",
		evoLevel: 9,
		evos: ["vivillon"],
		eggGroups: ["Bug"],
	},
	vivillon: {
		num: 666,
		species: "Vivillon",
		types: ["Bug", "Flying"],
		baseStats: {hp: 80, atk: 52, def: 50, spa: 90, spd: 50, spe: 89},
		abilities: {0: "Shield Dust", 1: "Compound Eyes", H: "Friend Guard"},
		heightm: 1.2,
		weightkg: 17,
		color: "White",
		prevo: "spewpa",
		evoLevel: 12,
		eggGroups: ["Bug"],
		otherForms: ["vivillonarchipelago", "vivilloncontinental", "vivillonelegant", "vivillongarden", "vivillonhighplains", "vivillonicysnow", "vivillonjungle", "vivillonmarine", "vivillonmodern", "vivillonmonsoon", "vivillonocean", "vivillonpolar", "vivillonriver", "vivillonsandstorm", "vivillonsavanna", "vivillonsun", "vivillontundra"],
		otherFormes: ["vivillonfancy", "vivillonpokeball"],
	},
	vivillonfancy: {
		num: 666,
		species: "Vivillon-Fancy",
		baseSpecies: "Vivillon",
		forme: "Fancy",
		formeLetter: "F",
		types: ["Bug", "Flying"],
		baseStats: {hp: 80, atk: 52, def: 50, spa: 90, spd: 50, spe: 89},
		abilities: {0: "Shield Dust", 1: "Compound Eyes"},
		heightm: 1.2,
		weightkg: 17,
		color: "Black",
		eggGroups: ["Bug"],
	},
	vivillonpokeball: {
		num: 666,
		species: "Vivillon-Pokeball",
		baseSpecies: "Vivillon",
		forme: "Pokeball",
		formeLetter: "P",
		types: ["Bug", "Flying"],
		baseStats: {hp: 80, atk: 52, def: 50, spa: 90, spd: 50, spe: 89},
		abilities: {0: "Shield Dust", 1: "Compound Eyes"},
		heightm: 1.2,
		weightkg: 17,
		color: "Black",
		eggGroups: ["Bug"],
	},
	litleo: {
		num: 667,
		species: "Litleo",
		types: ["Fire", "Normal"],
		genderRatio: {M: 0.125, F: 0.875},
		baseStats: {hp: 62, atk: 50, def: 58, spa: 73, spd: 54, spe: 72},
		abilities: {0: "Rivalry", 1: "Unnerve", H: "Moxie"},
		heightm: 0.6,
		weightkg: 13.5,
		color: "Brown",
		evos: ["pyroar"],
		eggGroups: ["Field"],
	},
	pyroar: {
		num: 668,
		species: "Pyroar",
		types: ["Fire", "Normal"],
		genderRatio: {M: 0.125, F: 0.875},
		baseStats: {hp: 86, atk: 68, def: 72, spa: 109, spd: 66, spe: 106},
		abilities: {0: "Rivalry", 1: "Unnerve", H: "Moxie"},
		heightm: 1.5,
		weightkg: 81.5,
		color: "Brown",
		prevo: "litleo",
		evoLevel: 35,
		eggGroups: ["Field"],
	},
	flabebe: {
		num: 669,
		species: "Flabe\u0301be\u0301",
		baseForme: "Red",
		types: ["Fairy"],
		gender: "F",
		baseStats: {hp: 44, atk: 38, def: 39, spa: 61, spd: 79, spe: 42},
		abilities: {0: "Flower Veil", H: "Symbiosis"},
		heightm: 0.1,
		weightkg: 0.1,
		color: "White",
		evos: ["floette"],
		eggGroups: ["Fairy"],
		otherForms: ["flabebeblue", "flabebeorange", "flabebewhite", "flabebeyellow"],
	},
	floette: {
		num: 670,
		species: "Floette",
		baseForme: "Red",
		types: ["Fairy"],
		gender: "F",
		baseStats: {hp: 54, atk: 45, def: 47, spa: 75, spd: 98, spe: 52},
		abilities: {0: "Flower Veil", H: "Symbiosis"},
		heightm: 0.2,
		weightkg: 0.9,
		color: "White",
		prevo: "flabebe",
		evoLevel: 19,
		evos: ["florges"],
		eggGroups: ["Fairy"],
		otherForms: ["floetteblue", "floetteorange", "floettewhite", "floetteyellow"],
		otherFormes: ["floetteeternal"],
	},
	floetteeternal: {
		num: 670,
		species: "Floette-Eternal",
		baseSpecies: "Floette",
		forme: "Eternal",
		formeLetter: "E",
		types: ["Fairy"],
		gender: "F",
		baseStats: {hp: 74, atk: 65, def: 67, spa: 125, spd: 128, spe: 92},
		abilities: {0: "Flower Veil"},
		heightm: 0.2,
		weightkg: 0.9,
		color: "White",
		eggGroups: ["Undiscovered"],
	},
	florges: {
		num: 671,
		species: "Florges",
		baseForme: "Red",
		types: ["Fairy"],
		gender: "F",
		baseStats: {hp: 78, atk: 65, def: 68, spa: 112, spd: 154, spe: 75},
		abilities: {0: "Flower Veil", H: "Symbiosis"},
		heightm: 1.1,
		weightkg: 10,
		color: "White",
		prevo: "floette",
		evoType: "stone",
		evoItem: "Shiny Stone",
		eggGroups: ["Fairy"],
		otherForms: ["florgesblue", "florgesorange", "florgeswhite", "florgesyellow"],
	},
	skiddo: {
		num: 672,
		species: "Skiddo",
		types: ["Grass"],
		baseStats: {hp: 66, atk: 65, def: 48, spa: 62, spd: 57, spe: 52},
		abilities: {0: "Sap Sipper", H: "Grass Pelt"},
		heightm: 0.9,
		weightkg: 31,
		color: "Brown",
		evos: ["gogoat"],
		eggGroups: ["Field"],
	},
	gogoat: {
		num: 673,
		species: "Gogoat",
		types: ["Grass"],
		baseStats: {hp: 123, atk: 100, def: 62, spa: 97, spd: 81, spe: 68},
		abilities: {0: "Sap Sipper", H: "Grass Pelt"},
		heightm: 1.7,
		weightkg: 91,
		color: "Brown",
		prevo: "skiddo",
		evoLevel: 32,
		eggGroups: ["Field"],
	},
	pancham: {
		num: 674,
		species: "Pancham",
		types: ["Fighting"],
		baseStats: {hp: 67, atk: 82, def: 62, spa: 46, spd: 48, spe: 43},
		abilities: {0: "Iron Fist", 1: "Mold Breaker", H: "Scrappy"},
		heightm: 0.6,
		weightkg: 8,
		color: "White",
		evos: ["pangoro"],
		eggGroups: ["Field", "Human-Like"],
	},
	pangoro: {
		num: 675,
		species: "Pangoro",
		types: ["Fighting", "Dark"],
		baseStats: {hp: 95, atk: 124, def: 78, spa: 69, spd: 71, spe: 58},
		abilities: {0: "Iron Fist", 1: "Mold Breaker", H: "Scrappy"},
		heightm: 2.1,
		weightkg: 136,
		color: "White",
		prevo: "pancham",
		evoLevel: 32,
		eggGroups: ["Field", "Human-Like"],
	},
	furfrou: {
		num: 676,
		species: "Furfrou",
		types: ["Normal"],
		baseStats: {hp: 75, atk: 80, def: 60, spa: 65, spd: 90, spe: 102},
		abilities: {0: "Fur Coat"},
		heightm: 1.2,
		weightkg: 28,
		color: "White",
		eggGroups: ["Field"],
		otherForms: ["furfroudandy", "furfroudebutante", "furfroudiamond", "furfrouheart", "furfroukabuki", "furfroulareine", "furfroumatron", "furfroupharaoh", "furfroustar"],
	},
	espurr: {
		num: 677,
		species: "Espurr",
		types: ["Psychic"],
		baseStats: {hp: 62, atk: 48, def: 54, spa: 63, spd: 60, spe: 68},
		abilities: {0: "Keen Eye", 1: "Infiltrator", H: "Own Tempo"},
		heightm: 0.3,
		weightkg: 3.5,
		color: "Gray",
		evos: ["meowstic"],
		eggGroups: ["Field"],
	},
	meowstic: {
		num: 678,
		species: "Meowstic",
		baseForme: "M",
		types: ["Psychic"],
		gender: "M",
		baseStats: {hp: 74, atk: 48, def: 76, spa: 83, spd: 81, spe: 104},
		abilities: {0: "Keen Eye", 1: "Infiltrator", H: "Prankster"},
		heightm: 0.6,
		weightkg: 8.5,
		color: "Blue",
		prevo: "espurr",
		evoLevel: 25,
		eggGroups: ["Field"],
		otherFormes: ["meowsticf"],
	},
	meowsticf: {
		num: 678,
		species: "Meowstic-F",
		baseSpecies: "Meowstic",
		forme: "F",
		formeLetter: "F",
		types: ["Psychic"],
		gender: "F",
		baseStats: {hp: 74, atk: 48, def: 76, spa: 83, spd: 81, spe: 104},
		abilities: {0: "Keen Eye", 1: "Infiltrator", H: "Competitive"},
		heightm: 0.6,
		weightkg: 8.5,
		color: "White",
		prevo: "espurr",
		evoLevel: 25,
		eggGroups: ["Field"],
	},
	honedge: {
		num: 679,
		species: "Honedge",
		types: ["Steel", "Ghost"],
		baseStats: {hp: 45, atk: 80, def: 100, spa: 35, spd: 37, spe: 28},
		abilities: {0: "No Guard"},
		heightm: 0.8,
		weightkg: 2,
		color: "Brown",
		evos: ["doublade"],
		eggGroups: ["Mineral"],
	},
	doublade: {
		num: 680,
		species: "Doublade",
		types: ["Steel", "Ghost"],
		baseStats: {hp: 59, atk: 110, def: 150, spa: 45, spd: 49, spe: 35},
		abilities: {0: "No Guard"},
		heightm: 0.8,
		weightkg: 4.5,
		color: "Brown",
		prevo: "honedge",
		evoLevel: 35,
		evos: ["aegislash"],
		eggGroups: ["Mineral"],
	},
	aegislash: {
		num: 681,
		species: "Aegislash",
		baseForme: "Shield",
		types: ["Steel", "Ghost"],
		baseStats: {hp: 60, atk: 50, def: 150, spa: 50, spd: 150, spe: 60},
		abilities: {0: "Stance Change"},
		heightm: 1.7,
		weightkg: 53,
		color: "Brown",
		prevo: "doublade",
		evoType: "stone",
		evoItem: "Dusk Stone",
		eggGroups: ["Mineral"],
		otherFormes: ["aegislashblade"],
	},
	aegislashblade: {
		num: 681,
		species: "Aegislash-Blade",
		baseSpecies: "Aegislash",
		forme: "Blade",
		formeLetter: "B",
		types: ["Steel", "Ghost"],
		baseStats: {hp: 60, atk: 150, def: 50, spa: 150, spd: 50, spe: 60},
		abilities: {0: "Stance Change"},
		heightm: 1.7,
		weightkg: 53,
		color: "Brown",
		prevo: "doublade",
		evoType: "stone",
		evoItem: "Dusk Stone",
		eggGroups: ["Mineral"],
	},
	spritzee: {
		num: 682,
		species: "Spritzee",
		types: ["Fairy"],
		baseStats: {hp: 78, atk: 52, def: 60, spa: 63, spd: 65, spe: 23},
		abilities: {0: "Healer", H: "Aroma Veil"},
		heightm: 0.2,
		weightkg: 0.5,
		color: "Pink",
		evos: ["aromatisse"],
		eggGroups: ["Fairy"],
	},
	aromatisse: {
		num: 683,
		species: "Aromatisse",
		types: ["Fairy"],
		baseStats: {hp: 101, atk: 72, def: 72, spa: 99, spd: 89, spe: 29},
		abilities: {0: "Healer", H: "Aroma Veil"},
		heightm: 0.8,
		weightkg: 15.5,
		color: "Pink",
		prevo: "spritzee",
		evoType: "trade",
		eggGroups: ["Fairy"],
	},
	swirlix: {
		num: 684,
		species: "Swirlix",
		types: ["Fairy"],
		baseStats: {hp: 62, atk: 48, def: 66, spa: 59, spd: 57, spe: 49},
		abilities: {0: "Sweet Veil", H: "Unburden"},
		heightm: 0.4,
		weightkg: 3.5,
		color: "White",
		evos: ["slurpuff"],
		eggGroups: ["Fairy"],
	},
	slurpuff: {
		num: 685,
		species: "Slurpuff",
		types: ["Fairy"],
		baseStats: {hp: 82, atk: 80, def: 86, spa: 85, spd: 75, spe: 72},
		abilities: {0: "Sweet Veil", H: "Unburden"},
		heightm: 0.8,
		weightkg: 5,
		color: "White",
		prevo: "swirlix",
		evoType: "trade",
		eggGroups: ["Fairy"],
	},
	inkay: {
		num: 686,
		species: "Inkay",
		types: ["Dark", "Psychic"],
		baseStats: {hp: 53, atk: 54, def: 53, spa: 37, spd: 46, spe: 45},
		abilities: {0: "Contrary", 1: "Suction Cups", H: "Infiltrator"},
		heightm: 0.4,
		weightkg: 3.5,
		color: "Blue",
		evos: ["malamar"],
		eggGroups: ["Water 1", "Water 2"],
	},
	malamar: {
		num: 687,
		species: "Malamar",
		types: ["Dark", "Psychic"],
		baseStats: {hp: 86, atk: 92, def: 88, spa: 68, spd: 75, spe: 73},
		abilities: {0: "Contrary", 1: "Suction Cups", H: "Infiltrator"},
		heightm: 1.5,
		weightkg: 47,
		color: "Blue",
		prevo: "inkay",
		evoLevel: 30,
		eggGroups: ["Water 1", "Water 2"],
	},
	binacle: {
		num: 688,
		species: "Binacle",
		types: ["Rock", "Water"],
		baseStats: {hp: 42, atk: 52, def: 67, spa: 39, spd: 56, spe: 50},
		abilities: {0: "Tough Claws", 1: "Sniper", H: "Pickpocket"},
		heightm: 0.5,
		weightkg: 31,
		color: "Brown",
		evos: ["barbaracle"],
		eggGroups: ["Water 3"],
	},
	barbaracle: {
		num: 689,
		species: "Barbaracle",
		types: ["Rock", "Water"],
		baseStats: {hp: 72, atk: 105, def: 115, spa: 54, spd: 86, spe: 68},
		abilities: {0: "Tough Claws", 1: "Sniper", H: "Pickpocket"},
		heightm: 1.3,
		weightkg: 96,
		color: "Brown",
		prevo: "binacle",
		evoLevel: 39,
		eggGroups: ["Water 3"],
	},
	skrelp: {
		num: 690,
		species: "Skrelp",
		types: ["Poison", "Water"],
		baseStats: {hp: 50, atk: 60, def: 60, spa: 60, spd: 60, spe: 30},
		abilities: {0: "Poison Point", 1: "Poison Touch", H: "Adaptability"},
		heightm: 0.5,
		weightkg: 7.3,
		color: "Brown",
		evos: ["dragalge"],
		eggGroups: ["Water 1", "Dragon"],
	},
	dragalge: {
		num: 691,
		species: "Dragalge",
		types: ["Poison", "Dragon"],
		baseStats: {hp: 65, atk: 75, def: 90, spa: 97, spd: 123, spe: 44},
		abilities: {0: "Poison Point", 1: "Poison Touch", H: "Adaptability"},
		heightm: 1.8,
		weightkg: 81.5,
		color: "Brown",
		prevo: "skrelp",
		evoLevel: 48,
		eggGroups: ["Water 1", "Dragon"],
	},
	clauncher: {
		num: 692,
		species: "Clauncher",
		types: ["Water"],
		baseStats: {hp: 50, atk: 53, def: 62, spa: 58, spd: 63, spe: 44},
		abilities: {0: "Mega Launcher"},
		heightm: 0.5,
		weightkg: 8.3,
		color: "Blue",
		evos: ["clawitzer"],
		eggGroups: ["Water 1", "Water 3"],
	},
	clawitzer: {
		num: 693,
		species: "Clawitzer",
		types: ["Water"],
		baseStats: {hp: 71, atk: 73, def: 88, spa: 120, spd: 89, spe: 59},
		abilities: {0: "Mega Launcher"},
		heightm: 1.3,
		weightkg: 35.3,
		color: "Blue",
		prevo: "clauncher",
		evoLevel: 37,
		eggGroups: ["Water 1", "Water 3"],
	},
	helioptile: {
		num: 694,
		species: "Helioptile",
		types: ["Electric", "Normal"],
		baseStats: {hp: 44, atk: 38, def: 33, spa: 61, spd: 43, spe: 70},
		abilities: {0: "Dry Skin", 1: "Sand Veil", H: "Solar Power"},
		heightm: 0.5,
		weightkg: 6,
		color: "Yellow",
		evos: ["heliolisk"],
		eggGroups: ["Monster", "Dragon"],
	},
	heliolisk: {
		num: 695,
		species: "Heliolisk",
		types: ["Electric", "Normal"],
		baseStats: {hp: 62, atk: 55, def: 52, spa: 109, spd: 94, spe: 109},
		abilities: {0: "Dry Skin", 1: "Sand Veil", H: "Solar Power"},
		heightm: 1,
		weightkg: 21,
		color: "Yellow",
		prevo: "helioptile",
		evoType: "stone",
		evoItem: "Sun Stone",
		eggGroups: ["Monster", "Dragon"],
	},
	tyrunt: {
		num: 696,
		species: "Tyrunt",
		types: ["Rock", "Dragon"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 58, atk: 89, def: 77, spa: 45, spd: 45, spe: 48},
		abilities: {0: "Strong Jaw", H: "Sturdy"},
		heightm: 0.8,
		weightkg: 26,
		color: "Brown",
		evos: ["tyrantrum"],
		eggGroups: ["Monster", "Dragon"],
	},
	tyrantrum: {
		num: 697,
		species: "Tyrantrum",
		types: ["Rock", "Dragon"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 82, atk: 121, def: 119, spa: 69, spd: 59, spe: 71},
		abilities: {0: "Strong Jaw", H: "Rock Head"},
		heightm: 2.5,
		weightkg: 270,
		color: "Red",
		prevo: "tyrunt",
		evoLevel: 39,
		eggGroups: ["Monster", "Dragon"],
	},
	amaura: {
		num: 698,
		species: "Amaura",
		types: ["Rock", "Ice"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 77, atk: 59, def: 50, spa: 67, spd: 63, spe: 46},
		abilities: {0: "Refrigerate", H: "Snow Warning"},
		heightm: 1.3,
		weightkg: 25.2,
		color: "Blue",
		evos: ["aurorus"],
		eggGroups: ["Monster"],
	},
	aurorus: {
		num: 699,
		species: "Aurorus",
		types: ["Rock", "Ice"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 123, atk: 77, def: 72, spa: 99, spd: 92, spe: 58},
		abilities: {0: "Refrigerate", H: "Snow Warning"},
		heightm: 2.7,
		weightkg: 225,
		color: "Blue",
		prevo: "amaura",
		evoLevel: 39,
		eggGroups: ["Monster"],
	},
	sylveon: {
		num: 700,
		species: "Sylveon",
		types: ["Fairy"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 95, atk: 65, def: 65, spa: 110, spd: 130, spe: 60},
		abilities: {0: "Cute Charm", H: "Pixilate"},
		heightm: 1,
		weightkg: 23.5,
		color: "Pink",
		prevo: "eevee",
		evoType: "levelExtra",
		evoCondition: "with a Fairy-type move and two levels of Affection",
		eggGroups: ["Field"],
	},
	hawlucha: {
		num: 701,
		species: "Hawlucha",
		types: ["Fighting", "Flying"],
		baseStats: {hp: 78, atk: 92, def: 75, spa: 74, spd: 63, spe: 118},
		abilities: {0: "Limber", 1: "Unburden", H: "Mold Breaker"},
		heightm: 0.8,
		weightkg: 21.5,
		color: "Green",
		eggGroups: ["Human-Like"],
	},
	dedenne: {
		num: 702,
		species: "Dedenne",
		types: ["Electric", "Fairy"],
		baseStats: {hp: 67, atk: 58, def: 57, spa: 81, spd: 67, spe: 101},
		abilities: {0: "Cheek Pouch", 1: "Pickup", H: "Plus"},
		heightm: 0.2,
		weightkg: 2.2,
		color: "Yellow",
		eggGroups: ["Field", "Fairy"],
	},
	carbink: {
		num: 703,
		species: "Carbink",
		types: ["Rock", "Fairy"],
		gender: "N",
		baseStats: {hp: 50, atk: 50, def: 150, spa: 50, spd: 150, spe: 50},
		abilities: {0: "Clear Body", H: "Sturdy"},
		heightm: 0.3,
		weightkg: 5.7,
		color: "Gray",
		eggGroups: ["Fairy", "Mineral"],
	},
	goomy: {
		num: 704,
		species: "Goomy",
		types: ["Dragon"],
		baseStats: {hp: 45, atk: 50, def: 35, spa: 55, spd: 75, spe: 40},
		abilities: {0: "Sap Sipper", 1: "Hydration", H: "Gooey"},
		heightm: 0.3,
		weightkg: 2.8,
		color: "Purple",
		evos: ["sliggoo"],
		eggGroups: ["Dragon"],
	},
	sliggoo: {
		num: 705,
		species: "Sliggoo",
		types: ["Dragon"],
		baseStats: {hp: 68, atk: 75, def: 53, spa: 83, spd: 113, spe: 60},
		abilities: {0: "Sap Sipper", 1: "Hydration", H: "Gooey"},
		heightm: 0.8,
		weightkg: 17.5,
		color: "Purple",
		prevo: "goomy",
		evoLevel: 40,
		evos: ["goodra"],
		eggGroups: ["Dragon"],
	},
	goodra: {
		num: 706,
		species: "Goodra",
		types: ["Dragon"],
		baseStats: {hp: 90, atk: 100, def: 70, spa: 110, spd: 150, spe: 80},
		abilities: {0: "Sap Sipper", 1: "Hydration", H: "Gooey"},
		heightm: 2,
		weightkg: 150.5,
		color: "Purple",
		prevo: "sliggoo",
		evoLevel: 50,
		eggGroups: ["Dragon"],
	},
	klefki: {
		num: 707,
		species: "Klefki",
		types: ["Steel", "Fairy"],
		baseStats: {hp: 57, atk: 80, def: 91, spa: 80, spd: 87, spe: 75},
		abilities: {0: "Prankster", H: "Magician"},
		heightm: 0.2,
		weightkg: 3,
		color: "Gray",
		eggGroups: ["Mineral"],
	},
	phantump: {
		num: 708,
		species: "Phantump",
		types: ["Ghost", "Grass"],
		baseStats: {hp: 43, atk: 70, def: 48, spa: 50, spd: 60, spe: 38},
		abilities: {0: "Natural Cure", 1: "Frisk", H: "Harvest"},
		heightm: 0.4,
		weightkg: 7,
		color: "Brown",
		evos: ["trevenant"],
		eggGroups: ["Grass", "Amorphous"],
	},
	trevenant: {
		num: 709,
		species: "Trevenant",
		types: ["Ghost", "Grass"],
		baseStats: {hp: 85, atk: 110, def: 76, spa: 65, spd: 82, spe: 56},
		abilities: {0: "Natural Cure", 1: "Frisk", H: "Harvest"},
		heightm: 1.5,
		weightkg: 71,
		color: "Brown",
		prevo: "phantump",
		evoType: "trade",
		eggGroups: ["Grass", "Amorphous"],
	},
	pumpkaboo: {
		num: 710,
		species: "Pumpkaboo",
		baseForme: "Average",
		types: ["Ghost", "Grass"],
		baseStats: {hp: 49, atk: 66, def: 70, spa: 44, spd: 55, spe: 51},
		abilities: {0: "Pickup", 1: "Frisk", H: "Insomnia"},
		heightm: 0.4,
		weightkg: 5,
		color: "Brown",
		evos: ["gourgeist"],
		eggGroups: ["Amorphous"],
		otherFormes: ["pumpkaboosmall", "pumpkaboolarge", "pumpkaboosuper"],
	},
	pumpkaboosmall: {
		num: 710,
		species: "Pumpkaboo-Small",
		baseSpecies: "Pumpkaboo",
		forme: "Small",
		formeLetter: "S",
		types: ["Ghost", "Grass"],
		baseStats: {hp: 44, atk: 66, def: 70, spa: 44, spd: 55, spe: 56},
		abilities: {0: "Pickup", 1: "Frisk", H: "Insomnia"},
		heightm: 0.3,
		weightkg: 3.5,
		color: "Brown",
		evos: ["gourgeistsmall"],
		eggGroups: ["Amorphous"],
	},
	pumpkaboolarge: {
		num: 710,
		species: "Pumpkaboo-Large",
		baseSpecies: "Pumpkaboo",
		forme: "Large",
		formeLetter: "L",
		types: ["Ghost", "Grass"],
		baseStats: {hp: 54, atk: 66, def: 70, spa: 44, spd: 55, spe: 46},
		abilities: {0: "Pickup", 1: "Frisk", H: "Insomnia"},
		heightm: 0.5,
		weightkg: 7.5,
		color: "Brown",
		evos: ["gourgeistlarge"],
		eggGroups: ["Amorphous"],
	},
	pumpkaboosuper: {
		num: 710,
		species: "Pumpkaboo-Super",
		baseSpecies: "Pumpkaboo",
		forme: "Super",
		formeLetter: "S",
		types: ["Ghost", "Grass"],
		baseStats: {hp: 59, atk: 66, def: 70, spa: 44, spd: 55, spe: 41},
		abilities: {0: "Pickup", 1: "Frisk", H: "Insomnia"},
		heightm: 0.8,
		weightkg: 15,
		color: "Brown",
		evos: ["gourgeistsuper"],
		eggGroups: ["Amorphous"],
	},
	gourgeist: {
		num: 711,
		species: "Gourgeist",
		baseForme: "Average",
		types: ["Ghost", "Grass"],
		baseStats: {hp: 65, atk: 90, def: 122, spa: 58, spd: 75, spe: 84},
		abilities: {0: "Pickup", 1: "Frisk", H: "Insomnia"},
		heightm: 0.9,
		weightkg: 12.5,
		color: "Brown",
		prevo: "pumpkaboo",
		evoType: "trade",
		eggGroups: ["Amorphous"],
		otherFormes: ["gourgeistsmall", "gourgeistlarge", "gourgeistsuper"],
	},
	gourgeistsmall: {
		num: 711,
		species: "Gourgeist-Small",
		baseSpecies: "Gourgeist",
		forme: "Small",
		formeLetter: "S",
		types: ["Ghost", "Grass"],
		baseStats: {hp: 55, atk: 85, def: 122, spa: 58, spd: 75, spe: 99},
		abilities: {0: "Pickup", 1: "Frisk", H: "Insomnia"},
		heightm: 0.7,
		weightkg: 9.5,
		color: "Brown",
		prevo: "pumpkaboosmall",
		evoType: "trade",
		eggGroups: ["Amorphous"],
	},
	gourgeistlarge: {
		num: 711,
		species: "Gourgeist-Large",
		baseSpecies: "Gourgeist",
		forme: "Large",
		formeLetter: "L",
		types: ["Ghost", "Grass"],
		baseStats: {hp: 75, atk: 95, def: 122, spa: 58, spd: 75, spe: 69},
		abilities: {0: "Pickup", 1: "Frisk", H: "Insomnia"},
		heightm: 1.1,
		weightkg: 14,
		color: "Brown",
		prevo: "pumpkaboolarge",
		evoType: "trade",
		eggGroups: ["Amorphous"],
	},
	gourgeistsuper: {
		num: 711,
		species: "Gourgeist-Super",
		baseSpecies: "Gourgeist",
		forme: "Super",
		formeLetter: "S",
		types: ["Ghost", "Grass"],
		baseStats: {hp: 85, atk: 100, def: 122, spa: 58, spd: 75, spe: 54},
		abilities: {0: "Pickup", 1: "Frisk", H: "Insomnia"},
		heightm: 1.7,
		weightkg: 39,
		color: "Brown",
		prevo: "pumpkaboosuper",
		evoType: "trade",
		eggGroups: ["Amorphous"],
	},
	bergmite: {
		num: 712,
		species: "Bergmite",
		types: ["Ice"],
		baseStats: {hp: 55, atk: 69, def: 85, spa: 32, spd: 35, spe: 28},
		abilities: {0: "Own Tempo", 1: "Ice Body", H: "Sturdy"},
		heightm: 1,
		weightkg: 99.5,
		color: "Blue",
		evos: ["avalugg"],
		eggGroups: ["Monster"],
	},
	avalugg: {
		num: 713,
		species: "Avalugg",
		types: ["Ice"],
		baseStats: {hp: 95, atk: 117, def: 184, spa: 44, spd: 46, spe: 28},
		abilities: {0: "Own Tempo", 1: "Ice Body", H: "Sturdy"},
		heightm: 2,
		weightkg: 505,
		color: "Blue",
		prevo: "bergmite",
		evoLevel: 37,
		eggGroups: ["Monster"],
	},
	noibat: {
		num: 714,
		species: "Noibat",
		types: ["Flying", "Dragon"],
		baseStats: {hp: 40, atk: 30, def: 35, spa: 45, spd: 40, spe: 55},
		abilities: {0: "Frisk", 1: "Infiltrator", H: "Telepathy"},
		heightm: 0.5,
		weightkg: 8,
		color: "Purple",
		evos: ["noivern"],
		eggGroups: ["Flying"],
	},
	noivern: {
		num: 715,
		species: "Noivern",
		types: ["Flying", "Dragon"],
		baseStats: {hp: 85, atk: 70, def: 80, spa: 97, spd: 80, spe: 123},
		abilities: {0: "Frisk", 1: "Infiltrator", H: "Telepathy"},
		heightm: 1.5,
		weightkg: 85,
		color: "Purple",
		prevo: "noibat",
		evoLevel: 48,
		eggGroups: ["Flying"],
	},
	xerneas: {
		num: 716,
		species: "Xerneas",
		types: ["Fairy"],
		gender: "N",
		baseStats: {hp: 126, atk: 131, def: 95, spa: 131, spd: 98, spe: 99},
		abilities: {0: "Fairy Aura"},
		heightm: 3,
		weightkg: 215,
		color: "Blue",
		eggGroups: ["Undiscovered"],
	},
	yveltal: {
		num: 717,
		species: "Yveltal",
		types: ["Dark", "Flying"],
		gender: "N",
		baseStats: {hp: 126, atk: 131, def: 95, spa: 131, spd: 98, spe: 99},
		abilities: {0: "Dark Aura"},
		heightm: 5.8,
		weightkg: 203,
		color: "Red",
		eggGroups: ["Undiscovered"],
	},
	zygarde: {
		num: 718,
		species: "Zygarde",
		baseForme: "50%",
		types: ["Dragon", "Ground"],
		gender: "N",
		baseStats: {hp: 108, atk: 100, def: 121, spa: 81, spd: 95, spe: 95},
		abilities: {0: "Aura Break", S: "Power Construct"},
		heightm: 5,
		weightkg: 305,
		color: "Green",
		eggGroups: ["Undiscovered"],
		otherFormes: ["zygarde10", "zygardecomplete"],
	},
	zygarde10: {
		num: 718,
		species: "Zygarde-10%",
		baseSpecies: "Zygarde",
		forme: "10%",
		formeLetter: "T",
		types: ["Dragon", "Ground"],
		gender: "N",
		baseStats: {hp: 54, atk: 100, def: 71, spa: 61, spd: 85, spe: 115},
		abilities: {0: "Aura Break", S: "Power Construct"},
		heightm: 1.2,
		weightkg: 33.5,
		color: "Green",
		eggGroups: ["Undiscovered"],
	},
	zygardecomplete: {
		num: 718,
		species: "Zygarde-Complete",
		baseSpecies: "Zygarde",
		forme: "Complete",
		formeLetter: "C",
		types: ["Dragon", "Ground"],
		gender: "N",
		baseStats: {hp: 216, atk: 100, def: 121, spa: 91, spd: 95, spe: 85},
		abilities: {0: "Power Construct"},
		heightm: 4.5,
		weightkg: 610,
		color: "Green",
		eggGroups: ["Undiscovered"],
	},
	diancie: {
		num: 719,
		species: "Diancie",
		types: ["Rock", "Fairy"],
		gender: "N",
		baseStats: {hp: 50, atk: 100, def: 150, spa: 100, spd: 150, spe: 50},
		abilities: {0: "Clear Body"},
		heightm: 0.7,
		weightkg: 8.8,
		color: "Pink",
		eggGroups: ["Undiscovered"],
		otherFormes: ["dianciemega"],
	},
	dianciemega: {
		num: 719,
		species: "Diancie-Mega",
		baseSpecies: "Diancie",
		forme: "Mega",
		formeLetter: "M",
		types: ["Rock", "Fairy"],
		gender: "N",
		baseStats: {hp: 50, atk: 160, def: 110, spa: 160, spd: 110, spe: 110},
		abilities: {0: "Magic Bounce"},
		heightm: 1.1,
		weightkg: 27.8,
		color: "Pink",
		eggGroups: ["Undiscovered"],
	},
	hoopa: {
		num: 720,
		species: "Hoopa",
		baseForme: "Confined",
		types: ["Psychic", "Ghost"],
		gender: "N",
		baseStats: {hp: 80, atk: 110, def: 60, spa: 150, spd: 130, spe: 70},
		abilities: {0: "Magician"},
		heightm: 0.5,
		weightkg: 9,
		color: "Purple",
		eggGroups: ["Undiscovered"],
		otherFormes: ["hoopaunbound"],
	},
	hoopaunbound: {
		num: 720,
		species: "Hoopa-Unbound",
		baseSpecies: "Hoopa",
		forme: "Unbound",
		formeLetter: "U",
		types: ["Psychic", "Dark"],
		gender: "N",
		baseStats: {hp: 80, atk: 160, def: 60, spa: 170, spd: 130, spe: 80},
		abilities: {0: "Magician"},
		heightm: 6.5,
		weightkg: 490,
		color: "Purple",
		eggGroups: ["Undiscovered"],
	},
	volcanion: {
		num: 721,
		species: "Volcanion",
		types: ["Fire", "Water"],
		gender: "N",
		baseStats: {hp: 80, atk: 110, def: 120, spa: 130, spd: 90, spe: 70},
		abilities: {0: "Water Absorb"},
		heightm: 1.7,
		weightkg: 195,
		color: "Brown",
		eggGroups: ["Undiscovered"],
	},
	rowlet: {
		num: 722,
		species: "Rowlet",
		types: ["Grass", "Flying"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 68, atk: 55, def: 55, spa: 50, spd: 50, spe: 42},
		abilities: {0: "Overgrow", H: "Long Reach"},
		heightm: 0.3,
		weightkg: 1.5,
		color: "Brown",
		evos: ["dartrix"],
		eggGroups: ["Flying"],
	},
	dartrix: {
		num: 723,
		species: "Dartrix",
		types: ["Grass", "Flying"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 78, atk: 75, def: 75, spa: 70, spd: 70, spe: 52},
		abilities: {0: "Overgrow", H: "Long Reach"},
		heightm: 0.7,
		weightkg: 16,
		color: "Brown",
		prevo: "rowlet",
		evoLevel: 17,
		evos: ["decidueye"],
		eggGroups: ["Flying"],
	},
	decidueye: {
		num: 724,
		species: "Decidueye",
		types: ["Grass", "Ghost"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 78, atk: 107, def: 75, spa: 100, spd: 100, spe: 70},
		abilities: {0: "Overgrow", H: "Long Reach"},
		heightm: 1.6,
		weightkg: 36.6,
		color: "Brown",
		prevo: "dartrix",
		evoLevel: 34,
		eggGroups: ["Flying"],
	},
	litten: {
		num: 725,
		species: "Litten",
		types: ["Fire"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 45, atk: 65, def: 40, spa: 60, spd: 40, spe: 70},
		abilities: {0: "Blaze", H: "Intimidate"},
		heightm: 0.4,
		weightkg: 4.3,
		color: "Red",
		evos: ["torracat"],
		eggGroups: ["Field"],
	},
	torracat: {
		num: 726,
		species: "Torracat",
		types: ["Fire"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 65, atk: 85, def: 50, spa: 80, spd: 50, spe: 90},
		abilities: {0: "Blaze", H: "Intimidate"},
		heightm: 0.7,
		weightkg: 25,
		color: "Red",
		prevo: "litten",
		evoLevel: 17,
		evos: ["incineroar"],
		eggGroups: ["Field"],
	},
	incineroar: {
		num: 727,
		species: "Incineroar",
		types: ["Fire", "Dark"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 95, atk: 115, def: 90, spa: 80, spd: 90, spe: 60},
		abilities: {0: "Blaze", H: "Intimidate"},
		heightm: 1.8,
		weightkg: 83,
		color: "Red",
		prevo: "torracat",
		evoLevel: 34,
		eggGroups: ["Field"],
	},
	popplio: {
		num: 728,
		species: "Popplio",
		types: ["Water"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 50, atk: 54, def: 54, spa: 66, spd: 56, spe: 40},
		abilities: {0: "Torrent", H: "Liquid Voice"},
		heightm: 0.4,
		weightkg: 7.5,
		color: "Blue",
		evos: ["brionne"],
		eggGroups: ["Water 1", "Field"],
	},
	brionne: {
		num: 729,
		species: "Brionne",
		types: ["Water"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 60, atk: 69, def: 69, spa: 91, spd: 81, spe: 50},
		abilities: {0: "Torrent", H: "Liquid Voice"},
		heightm: 0.6,
		weightkg: 17.5,
		color: "Blue",
		prevo: "popplio",
		evoLevel: 17,
		evos: ["primarina"],
		eggGroups: ["Water 1", "Field"],
	},
	primarina: {
		num: 730,
		species: "Primarina",
		types: ["Water", "Fairy"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 80, atk: 74, def: 74, spa: 126, spd: 116, spe: 60},
		abilities: {0: "Torrent", H: "Liquid Voice"},
		heightm: 1.8,
		weightkg: 44,
		color: "Blue",
		prevo: "brionne",
		evoLevel: 34,
		eggGroups: ["Water 1", "Field"],
	},
	pikipek: {
		num: 731,
		species: "Pikipek",
		types: ["Normal", "Flying"],
		baseStats: {hp: 35, atk: 75, def: 30, spa: 30, spd: 30, spe: 65},
		abilities: {0: "Keen Eye", 1: "Skill Link", H: "Pickup"},
		heightm: 0.3,
		weightkg: 1.2,
		color: "Black",
		evos: ["trumbeak"],
		eggGroups: ["Flying"],
	},
	trumbeak: {
		num: 732,
		species: "Trumbeak",
		types: ["Normal", "Flying"],
		baseStats: {hp: 55, atk: 85, def: 50, spa: 40, spd: 50, spe: 75},
		abilities: {0: "Keen Eye", 1: "Skill Link", H: "Pickup"},
		heightm: 0.6,
		weightkg: 14.8,
		color: "Black",
		prevo: "pikipek",
		evoLevel: 14,
		evos: ["toucannon"],
		eggGroups: ["Flying"],
	},
	toucannon: {
		num: 733,
		species: "Toucannon",
		types: ["Normal", "Flying"],
		baseStats: {hp: 80, atk: 120, def: 75, spa: 75, spd: 75, spe: 60},
		abilities: {0: "Keen Eye", 1: "Skill Link", H: "Sheer Force"},
		heightm: 1.1,
		weightkg: 26,
		color: "Black",
		prevo: "trumbeak",
		evoLevel: 28,
		eggGroups: ["Flying"],
	},
	yungoos: {
		num: 734,
		species: "Yungoos",
		types: ["Normal"],
		baseStats: {hp: 48, atk: 70, def: 30, spa: 30, spd: 30, spe: 45},
		abilities: {0: "Stakeout", 1: "Strong Jaw", H: "Adaptability"},
		heightm: 0.4,
		weightkg: 6,
		color: "Brown",
		evos: ["gumshoos"],
		eggGroups: ["Field"],
	},
	gumshoos: {
		num: 735,
		species: "Gumshoos",
		types: ["Normal"],
		baseStats: {hp: 88, atk: 110, def: 60, spa: 55, spd: 60, spe: 45},
		abilities: {0: "Stakeout", 1: "Strong Jaw", H: "Adaptability"},
		heightm: 0.7,
		weightkg: 14.2,
		color: "Brown",
		prevo: "yungoos",
		evoLevel: 20,
		eggGroups: ["Field"],
		otherFormes: ["gumshoostotem"],
	},
	gumshoostotem: {
		num: 735,
		species: "Gumshoos-Totem",
		baseSpecies: "Gumshoos",
		forme: "Totem",
		formeLetter: "T",
		types: ["Normal"],
		baseStats: {hp: 88, atk: 110, def: 60, spa: 55, spd: 60, spe: 45},
		abilities: {0: "Adaptability"},
		heightm: 1.4,
		weightkg: 60,
		color: "Brown",
		eggGroups: ["Field"],
	},
	grubbin: {
		num: 736,
		species: "Grubbin",
		types: ["Bug"],
		baseStats: {hp: 47, atk: 62, def: 45, spa: 55, spd: 45, spe: 46},
		abilities: {0: "Swarm"},
		heightm: 0.4,
		weightkg: 4.4,
		color: "Gray",
		evos: ["charjabug"],
		eggGroups: ["Bug"],
	},
	charjabug: {
		num: 737,
		species: "Charjabug",
		types: ["Bug", "Electric"],
		baseStats: {hp: 57, atk: 82, def: 95, spa: 55, spd: 75, spe: 36},
		abilities: {0: "Battery"},
		heightm: 0.5,
		weightkg: 10.5,
		color: "Green",
		prevo: "grubbin",
		evoLevel: 20,
		evos: ["vikavolt"],
		eggGroups: ["Bug"],
	},
	vikavolt: {
		num: 738,
		species: "Vikavolt",
		types: ["Bug", "Electric"],
		baseStats: {hp: 77, atk: 70, def: 90, spa: 145, spd: 75, spe: 43},
		abilities: {0: "Levitate"},
		heightm: 1.5,
		weightkg: 45,
		color: "Blue",
		prevo: "charjabug",
		evoType: "levelExtra",
		evoCondition: "near a special magnetic field",
		eggGroups: ["Bug"],
		otherFormes: ["vikavolttotem"],
	},
	vikavolttotem: {
		num: 738,
		species: "Vikavolt-Totem",
		baseSpecies: "Vikavolt",
		forme: "Totem",
		formeLetter: "T",
		types: ["Bug", "Electric"],
		baseStats: {hp: 77, atk: 70, def: 90, spa: 145, spd: 75, spe: 43},
		abilities: {0: "Levitate"},
		heightm: 2.6,
		weightkg: 147.5,
		color: "Blue",
		eggGroups: ["Bug"],
	},
	crabrawler: {
		num: 739,
		species: "Crabrawler",
		types: ["Fighting"],
		baseStats: {hp: 47, atk: 82, def: 57, spa: 42, spd: 47, spe: 63},
		abilities: {0: "Hyper Cutter", 1: "Iron Fist", H: "Anger Point"},
		heightm: 0.6,
		weightkg: 7,
		color: "Purple",
		evos: ["crabominable"],
		eggGroups: ["Water 3"],
	},
	crabominable: {
		num: 740,
		species: "Crabominable",
		types: ["Fighting", "Ice"],
		baseStats: {hp: 97, atk: 132, def: 77, spa: 62, spd: 67, spe: 43},
		abilities: {0: "Hyper Cutter", 1: "Iron Fist", H: "Anger Point"},
		heightm: 1.7,
		weightkg: 180,
		color: "White",
		prevo: "crabrawler",
		evoType: "levelExtra",
		evoCondition: "at Mount Lanakila",
		eggGroups: ["Water 3"],
	},
	oricorio: {
		num: 741,
		species: "Oricorio",
		baseForme: "Baile",
		types: ["Fire", "Flying"],
		genderRatio: {M: 0.25, F: 0.75},
		baseStats: {hp: 75, atk: 70, def: 70, spa: 98, spd: 70, spe: 93},
		abilities: {0: "Dancer"},
		heightm: 0.6,
		weightkg: 3.4,
		color: "Red",
		eggGroups: ["Flying"],
		otherFormes: ["oricoriopompom", "oricoriopau", "oricoriosensu"],
	},
	oricoriopompom: {
		num: 741,
		species: "Oricorio-Pom-Pom",
		baseSpecies: "Oricorio",
		forme: "Pom-Pom",
		formeLetter: "P",
		types: ["Electric", "Flying"],
		genderRatio: {M: 0.25, F: 0.75},
		baseStats: {hp: 75, atk: 70, def: 70, spa: 98, spd: 70, spe: 93},
		abilities: {0: "Dancer"},
		heightm: 0.6,
		weightkg: 3.4,
		color: "Yellow",
		eggGroups: ["Flying"],
	},
	oricoriopau: {
		num: 741,
		species: "Oricorio-Pa'u",
		baseSpecies: "Oricorio",
		forme: "Pa'u",
		formeLetter: "P",
		types: ["Psychic", "Flying"],
		genderRatio: {M: 0.25, F: 0.75},
		baseStats: {hp: 75, atk: 70, def: 70, spa: 98, spd: 70, spe: 93},
		abilities: {0: "Dancer"},
		heightm: 0.6,
		weightkg: 3.4,
		color: "Pink",
		eggGroups: ["Flying"],
	},
	oricoriosensu: {
		num: 741,
		species: "Oricorio-Sensu",
		baseSpecies: "Oricorio",
		forme: "Sensu",
		formeLetter: "S",
		types: ["Ghost", "Flying"],
		genderRatio: {M: 0.25, F: 0.75},
		baseStats: {hp: 75, atk: 70, def: 70, spa: 98, spd: 70, spe: 93},
		abilities: {0: "Dancer"},
		heightm: 0.6,
		weightkg: 3.4,
		color: "Purple",
		eggGroups: ["Flying"],
	},
	cutiefly: {
		num: 742,
		species: "Cutiefly",
		types: ["Bug", "Fairy"],
		baseStats: {hp: 40, atk: 45, def: 40, spa: 55, spd: 40, spe: 84},
		abilities: {0: "Honey Gather", 1: "Shield Dust", H: "Sweet Veil"},
		heightm: 0.1,
		weightkg: 0.2,
		color: "Yellow",
		evos: ["ribombee"],
		eggGroups: ["Bug", "Fairy"],
	},
	ribombee: {
		num: 743,
		species: "Ribombee",
		types: ["Bug", "Fairy"],
		baseStats: {hp: 60, atk: 55, def: 60, spa: 95, spd: 70, spe: 124},
		abilities: {0: "Honey Gather", 1: "Shield Dust", H: "Sweet Veil"},
		heightm: 0.2,
		weightkg: 0.5,
		color: "Yellow",
		prevo: "cutiefly",
		evoLevel: 25,
		eggGroups: ["Bug", "Fairy"],
		otherFormes: ["ribombeetotem"],
	},
	ribombeetotem: {
		num: 743,
		species: "Ribombee-Totem",
		baseSpecies: "Ribombee",
		forme: "Totem",
		formeLetter: "T",
		types: ["Bug", "Fairy"],
		baseStats: {hp: 60, atk: 55, def: 60, spa: 95, spd: 70, spe: 124},
		abilities: {0: "Sweet Veil"},
		heightm: 0.4,
		weightkg: 2,
		color: "Yellow",
		eggGroups: ["Bug", "Fairy"],
	},
	rockruff: {
		num: 744,
		species: "Rockruff",
		baseForme: "Midday",
		types: ["Rock"],
		baseStats: {hp: 45, atk: 65, def: 40, spa: 30, spd: 40, spe: 60},
		abilities: {0: "Keen Eye", 1: "Vital Spirit", H: "Steadfast", S: "Own Tempo"},
		heightm: 0.5,
		weightkg: 9.2,
		color: "Brown",
		evos: ["lycanroc", "lycanrocmidnight", "lycanrocdusk"],
		eggGroups: ["Field"],
	},
	lycanroc: {
		num: 745,
		species: "Lycanroc",
		baseForme: "Midday",
		types: ["Rock"],
		baseStats: {hp: 75, atk: 115, def: 65, spa: 55, spd: 65, spe: 112},
		abilities: {0: "Keen Eye", 1: "Sand Rush", H: "Steadfast"},
		heightm: 0.8,
		weightkg: 25,
		color: "Brown",
		prevo: "rockruff",
		evoLevel: 25,
		eggGroups: ["Field"],
		otherFormes: ["lycanrocmidnight", "lycanrocdusk"],
	},
	lycanrocmidnight: {
		num: 745,
		species: "Lycanroc-Midnight",
		baseSpecies: "Lycanroc",
		forme: "Midnight",
		formeLetter: "M",
		types: ["Rock"],
		baseStats: {hp: 85, atk: 115, def: 75, spa: 55, spd: 75, spe: 82},
		abilities: {0: "Keen Eye", 1: "Vital Spirit", H: "No Guard"},
		heightm: 1.1,
		weightkg: 25,
		color: "Red",
		prevo: "rockruff",
		evoLevel: 25,
		eggGroups: ["Field"],
	},
	lycanrocdusk: {
		num: 745,
		species: "Lycanroc-Dusk",
		baseSpecies: "Lycanroc",
		forme: "Dusk",
		formeLetter: "D",
		types: ["Rock"],
		baseStats: {hp: 75, atk: 117, def: 65, spa: 55, spd: 65, spe: 110},
		abilities: {0: "Tough Claws"},
		heightm: 0.8,
		weightkg: 25,
		color: "Brown",
		prevo: "rockruff",
		evoLevel: 25,
		eggGroups: ["Field"],
	},
	wishiwashi: {
		num: 746,
		species: "Wishiwashi",
		baseForme: "Solo",
		types: ["Water"],
		baseStats: {hp: 45, atk: 20, def: 20, spa: 25, spd: 25, spe: 40},
		abilities: {0: "Schooling"},
		heightm: 0.2,
		weightkg: 0.3,
		color: "Blue",
		eggGroups: ["Water 2"],
		otherFormes: ["wishiwashischool"],
	},
	wishiwashischool: {
		num: 746,
		species: "Wishiwashi-School",
		baseSpecies: "Wishiwashi",
		forme: "School",
		formeLetter: "S",
		types: ["Water"],
		baseStats: {hp: 45, atk: 140, def: 130, spa: 140, spd: 135, spe: 30},
		abilities: {0: "Schooling"},
		heightm: 8.2,
		weightkg: 78.6,
		color: "Blue",
		eggGroups: ["Water 2"],
	},
	mareanie: {
		num: 747,
		species: "Mareanie",
		types: ["Poison", "Water"],
		baseStats: {hp: 50, atk: 53, def: 62, spa: 43, spd: 52, spe: 45},
		abilities: {0: "Merciless", 1: "Limber", H: "Regenerator"},
		heightm: 0.4,
		weightkg: 8,
		color: "Blue",
		evos: ["toxapex"],
		eggGroups: ["Water 1"],
	},
	toxapex: {
		num: 748,
		species: "Toxapex",
		types: ["Poison", "Water"],
		baseStats: {hp: 50, atk: 63, def: 152, spa: 53, spd: 142, spe: 35},
		abilities: {0: "Merciless", 1: "Limber", H: "Regenerator"},
		heightm: 0.7,
		weightkg: 14.5,
		color: "Blue",
		prevo: "mareanie",
		evoLevel: 38,
		eggGroups: ["Water 1"],
	},
	mudbray: {
		num: 749,
		species: "Mudbray",
		types: ["Ground"],
		baseStats: {hp: 70, atk: 100, def: 70, spa: 45, spd: 55, spe: 45},
		abilities: {0: "Own Tempo", 1: "Stamina", H: "Inner Focus"},
		heightm: 1,
		weightkg: 110,
		color: "Brown",
		evos: ["mudsdale"],
		eggGroups: ["Field"],
	},
	mudsdale: {
		num: 750,
		species: "Mudsdale",
		types: ["Ground"],
		baseStats: {hp: 100, atk: 125, def: 100, spa: 55, spd: 85, spe: 35},
		abilities: {0: "Own Tempo", 1: "Stamina", H: "Inner Focus"},
		heightm: 2.5,
		weightkg: 920,
		color: "Brown",
		prevo: "mudbray",
		evoLevel: 30,
		eggGroups: ["Field"],
	},
	dewpider: {
		num: 751,
		species: "Dewpider",
		types: ["Water", "Bug"],
		baseStats: {hp: 38, atk: 40, def: 52, spa: 40, spd: 72, spe: 27},
		abilities: {0: "Water Bubble", H: "Water Absorb"},
		heightm: 0.3,
		weightkg: 4,
		color: "Green",
		evos: ["araquanid"],
		eggGroups: ["Water 1", "Bug"],
	},
	araquanid: {
		num: 752,
		species: "Araquanid",
		types: ["Water", "Bug"],
		baseStats: {hp: 68, atk: 70, def: 92, spa: 50, spd: 132, spe: 42},
		abilities: {0: "Water Bubble", H: "Water Absorb"},
		heightm: 1.8,
		weightkg: 82,
		color: "Green",
		prevo: "dewpider",
		evoLevel: 22,
		eggGroups: ["Water 1", "Bug"],
		otherFormes: ["araquanidtotem"],
	},
	araquanidtotem: {
		num: 752,
		species: "Araquanid-Totem",
		baseSpecies: "Araquanid",
		forme: "Totem",
		formeLetter: "T",
		types: ["Water", "Bug"],
		baseStats: {hp: 68, atk: 70, def: 92, spa: 50, spd: 132, spe: 42},
		abilities: {0: "Water Bubble"},
		heightm: 3.1,
		weightkg: 217.5,
		color: "Green",
		eggGroups: ["Water 1", "Bug"],
	},
	fomantis: {
		num: 753,
		species: "Fomantis",
		types: ["Grass"],
		baseStats: {hp: 40, atk: 55, def: 35, spa: 50, spd: 35, spe: 35},
		abilities: {0: "Leaf Guard", H: "Contrary"},
		heightm: 0.3,
		weightkg: 1.5,
		color: "Pink",
		evos: ["lurantis"],
		eggGroups: ["Grass"],
	},
	lurantis: {
		num: 754,
		species: "Lurantis",
		types: ["Grass"],
		baseStats: {hp: 70, atk: 105, def: 90, spa: 80, spd: 90, spe: 45},
		abilities: {0: "Leaf Guard", H: "Contrary"},
		heightm: 0.9,
		weightkg: 18.5,
		color: "Pink",
		prevo: "fomantis",
		evoLevel: 34,
		eggGroups: ["Grass"],
		otherFormes: ["lurantistotem"],
	},
	lurantistotem: {
		num: 754,
		species: "Lurantis-Totem",
		baseSpecies: "Lurantis",
		forme: "Totem",
		formeLetter: "T",
		types: ["Grass"],
		baseStats: {hp: 70, atk: 105, def: 90, spa: 80, spd: 90, spe: 45},
		abilities: {0: "Leaf Guard"},
		heightm: 1.5,
		weightkg: 58,
		color: "Pink",
		eggGroups: ["Grass"],
	},
	morelull: {
		num: 755,
		species: "Morelull",
		types: ["Grass", "Fairy"],
		baseStats: {hp: 40, atk: 35, def: 55, spa: 65, spd: 75, spe: 15},
		abilities: {0: "Illuminate", 1: "Effect Spore", H: "Rain Dish"},
		heightm: 0.2,
		weightkg: 1.5,
		color: "Purple",
		evos: ["shiinotic"],
		eggGroups: ["Grass"],
	},
	shiinotic: {
		num: 756,
		species: "Shiinotic",
		types: ["Grass", "Fairy"],
		baseStats: {hp: 60, atk: 45, def: 80, spa: 90, spd: 100, spe: 30},
		abilities: {0: "Illuminate", 1: "Effect Spore", H: "Rain Dish"},
		heightm: 1,
		weightkg: 11.5,
		color: "Purple",
		prevo: "morelull",
		evoLevel: 24,
		eggGroups: ["Grass"],
	},
	salandit: {
		num: 757,
		species: "Salandit",
		types: ["Poison", "Fire"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 48, atk: 44, def: 40, spa: 71, spd: 40, spe: 77},
		abilities: {0: "Corrosion", H: "Oblivious"},
		heightm: 0.6,
		weightkg: 4.8,
		color: "Black",
		evos: ["salazzle"],
		eggGroups: ["Monster", "Dragon"],
	},
	salazzle: {
		num: 758,
		species: "Salazzle",
		types: ["Poison", "Fire"],
		gender: "F",
		baseStats: {hp: 68, atk: 64, def: 60, spa: 111, spd: 60, spe: 117},
		abilities: {0: "Corrosion", H: "Oblivious"},
		heightm: 1.2,
		weightkg: 22.2,
		color: "Black",
		prevo: "salandit",
		evoLevel: 33,
		eggGroups: ["Monster", "Dragon"],
		otherFormes: ["salazzletotem"],
	},
	salazzletotem: {
		num: 758,
		species: "Salazzle-Totem",
		baseSpecies: "Salazzle",
		forme: "Totem",
		formeLetter: "T",
		types: ["Poison", "Fire"],
		gender: "F",
		baseStats: {hp: 68, atk: 64, def: 60, spa: 111, spd: 60, spe: 117},
		abilities: {0: "Corrosion"},
		heightm: 2.1,
		weightkg: 81,
		color: "Black",
		eggGroups: ["Monster", "Dragon"],
	},
	stufful: {
		num: 759,
		species: "Stufful",
		types: ["Normal", "Fighting"],
		baseStats: {hp: 70, atk: 75, def: 50, spa: 45, spd: 50, spe: 50},
		abilities: {0: "Fluffy", 1: "Klutz", H: "Cute Charm"},
		heightm: 0.5,
		weightkg: 6.8,
		color: "Pink",
		evos: ["bewear"],
		eggGroups: ["Field"],
	},
	bewear: {
		num: 760,
		species: "Bewear",
		types: ["Normal", "Fighting"],
		baseStats: {hp: 120, atk: 125, def: 80, spa: 55, spd: 60, spe: 60},
		abilities: {0: "Fluffy", 1: "Klutz", H: "Unnerve"},
		heightm: 2.1,
		weightkg: 135,
		color: "Pink",
		prevo: "stufful",
		evoLevel: 27,
		eggGroups: ["Field"],
	},
	bounsweet: {
		num: 761,
		species: "Bounsweet",
		types: ["Grass"],
		gender: "F",
		baseStats: {hp: 42, atk: 30, def: 38, spa: 30, spd: 38, spe: 32},
		abilities: {0: "Leaf Guard", 1: "Oblivious", H: "Sweet Veil"},
		heightm: 0.3,
		weightkg: 3.2,
		color: "Purple",
		evos: ["steenee"],
		eggGroups: ["Grass"],
	},
	steenee: {
		num: 762,
		species: "Steenee",
		types: ["Grass"],
		gender: "F",
		baseStats: {hp: 52, atk: 40, def: 48, spa: 40, spd: 48, spe: 62},
		abilities: {0: "Leaf Guard", 1: "Oblivious", H: "Sweet Veil"},
		heightm: 0.7,
		weightkg: 8.2,
		color: "Purple",
		prevo: "bounsweet",
		evoLevel: 18,
		evos: ["tsareena"],
		eggGroups: ["Grass"],
	},
	tsareena: {
		num: 763,
		species: "Tsareena",
		types: ["Grass"],
		gender: "F",
		baseStats: {hp: 72, atk: 120, def: 98, spa: 50, spd: 98, spe: 72},
		abilities: {0: "Leaf Guard", 1: "Queenly Majesty", H: "Sweet Veil"},
		heightm: 1.2,
		weightkg: 21.4,
		color: "Purple",
		prevo: "steenee",
		evoType: "levelMove",
		evoMove: "Stomp",
		eggGroups: ["Grass"],
	},
	comfey: {
		num: 764,
		species: "Comfey",
		types: ["Fairy"],
		genderRatio: {M: 0.25, F: 0.75},
		baseStats: {hp: 51, atk: 52, def: 90, spa: 82, spd: 110, spe: 100},
		abilities: {0: "Flower Veil", 1: "Triage", H: "Natural Cure"},
		heightm: 0.1,
		weightkg: 0.3,
		color: "Green",
		eggGroups: ["Grass"],
	},
	oranguru: {
		num: 765,
		species: "Oranguru",
		types: ["Normal", "Psychic"],
		baseStats: {hp: 90, atk: 60, def: 80, spa: 90, spd: 110, spe: 60},
		abilities: {0: "Inner Focus", 1: "Telepathy", H: "Symbiosis"},
		heightm: 1.5,
		weightkg: 76,
		color: "White",
		eggGroups: ["Field"],
	},
	passimian: {
		num: 766,
		species: "Passimian",
		types: ["Fighting"],
		baseStats: {hp: 100, atk: 120, def: 90, spa: 40, spd: 60, spe: 80},
		abilities: {0: "Receiver", H: "Defiant"},
		heightm: 2,
		weightkg: 82.8,
		color: "White",
		eggGroups: ["Field"],
	},
	wimpod: {
		num: 767,
		species: "Wimpod",
		types: ["Bug", "Water"],
		baseStats: {hp: 25, atk: 35, def: 40, spa: 20, spd: 30, spe: 80},
		abilities: {0: "Wimp Out"},
		heightm: 0.5,
		weightkg: 12,
		color: "Gray",
		evos: ["golisopod"],
		eggGroups: ["Bug", "Water 3"],
	},
	golisopod: {
		num: 768,
		species: "Golisopod",
		types: ["Bug", "Water"],
		baseStats: {hp: 75, atk: 125, def: 140, spa: 60, spd: 90, spe: 40},
		abilities: {0: "Emergency Exit"},
		heightm: 2,
		weightkg: 108,
		color: "Gray",
		prevo: "wimpod",
		evoLevel: 30,
		eggGroups: ["Bug", "Water 3"],
	},
	sandygast: {
		num: 769,
		species: "Sandygast",
		types: ["Ghost", "Ground"],
		baseStats: {hp: 55, atk: 55, def: 80, spa: 70, spd: 45, spe: 15},
		abilities: {0: "Water Compaction", H: "Sand Veil"},
		heightm: 0.5,
		weightkg: 70,
		color: "Brown",
		evos: ["palossand"],
		eggGroups: ["Amorphous"],
	},
	palossand: {
		num: 770,
		species: "Palossand",
		types: ["Ghost", "Ground"],
		baseStats: {hp: 85, atk: 75, def: 110, spa: 100, spd: 75, spe: 35},
		abilities: {0: "Water Compaction", H: "Sand Veil"},
		heightm: 1.3,
		weightkg: 250,
		color: "Brown",
		prevo: "sandygast",
		evoLevel: 42,
		eggGroups: ["Amorphous"],
	},
	pyukumuku: {
		num: 771,
		species: "Pyukumuku",
		types: ["Water"],
		baseStats: {hp: 55, atk: 60, def: 130, spa: 30, spd: 130, spe: 5},
		abilities: {0: "Innards Out", H: "Unaware"},
		heightm: 0.3,
		weightkg: 1.2,
		color: "Black",
		eggGroups: ["Water 1"],
	},
	typenull: {
		num: 772,
		species: "Type: Null",
		types: ["Normal"],
		gender: "N",
		baseStats: {hp: 95, atk: 95, def: 95, spa: 95, spd: 95, spe: 59},
		abilities: {0: "Battle Armor"},
		heightm: 1.9,
		weightkg: 120.5,
		color: "Gray",
		evos: ["silvally"],
		eggGroups: ["Undiscovered"],
	},
	silvally: {
		num: 773,
		species: "Silvally",
		types: ["Normal"],
		gender: "N",
		baseStats: {hp: 95, atk: 95, def: 95, spa: 95, spd: 95, spe: 95},
		abilities: {0: "RKS System"},
		heightm: 2.3,
		weightkg: 100.5,
		color: "Gray",
		prevo: "typenull",
		evoType: "levelFriendship",
		eggGroups: ["Undiscovered"],
		otherFormes: ["silvallybug", "silvallydark", "silvallydragon", "silvallyelectric", "silvallyfairy", "silvallyfighting", "silvallyfire", "silvallyflying", "silvallyghost", "silvallygrass", "silvallyground", "silvallyice", "silvallypoison", "silvallypsychic", "silvallyrock", "silvallysteel", "silvallywater"],
	},
	silvallybug: {
		num: 773,
		species: "Silvally-Bug",
		baseSpecies: "Silvally",
		forme: "Bug",
		formeLetter: "B",
		types: ["Bug"],
		gender: "N",
		baseStats: {hp: 95, atk: 95, def: 95, spa: 95, spd: 95, spe: 95},
		abilities: {0: "RKS System"},
		heightm: 2.3,
		weightkg: 100.5,
		color: "Gray",
		prevo: "typenull",
		evoType: "levelFriendship",
		eggGroups: ["Undiscovered"],
	},
	silvallydark: {
		num: 773,
		species: "Silvally-Dark",
		baseSpecies: "Silvally",
		forme: "Dark",
		formeLetter: "D",
		types: ["Dark"],
		gender: "N",
		baseStats: {hp: 95, atk: 95, def: 95, spa: 95, spd: 95, spe: 95},
		abilities: {0: "RKS System"},
		heightm: 2.3,
		weightkg: 100.5,
		color: "Gray",
		prevo: "typenull",
		evoType: "levelFriendship",
		eggGroups: ["Undiscovered"],
	},
	silvallydragon: {
		num: 773,
		species: "Silvally-Dragon",
		baseSpecies: "Silvally",
		forme: "Dragon",
		formeLetter: "D",
		types: ["Dragon"],
		gender: "N",
		baseStats: {hp: 95, atk: 95, def: 95, spa: 95, spd: 95, spe: 95},
		abilities: {0: "RKS System"},
		heightm: 2.3,
		weightkg: 100.5,
		color: "Gray",
		prevo: "typenull",
		evoType: "levelFriendship",
		eggGroups: ["Undiscovered"],
	},
	silvallyelectric: {
		num: 773,
		species: "Silvally-Electric",
		baseSpecies: "Silvally",
		forme: "Electric",
		formeLetter: "E",
		types: ["Electric"],
		gender: "N",
		baseStats: {hp: 95, atk: 95, def: 95, spa: 95, spd: 95, spe: 95},
		abilities: {0: "RKS System"},
		heightm: 2.3,
		weightkg: 100.5,
		color: "Gray",
		prevo: "typenull",
		evoType: "levelFriendship",
		eggGroups: ["Undiscovered"],
	},
	silvallyfairy: {
		num: 773,
		species: "Silvally-Fairy",
		baseSpecies: "Silvally",
		forme: "Fairy",
		formeLetter: "F",
		types: ["Fairy"],
		gender: "N",
		baseStats: {hp: 95, atk: 95, def: 95, spa: 95, spd: 95, spe: 95},
		abilities: {0: "RKS System"},
		heightm: 2.3,
		weightkg: 100.5,
		color: "Gray",
		prevo: "typenull",
		evoType: "levelFriendship",
		eggGroups: ["Undiscovered"],
	},
	silvallyfighting: {
		num: 773,
		species: "Silvally-Fighting",
		baseSpecies: "Silvally",
		forme: "Fighting",
		formeLetter: "F",
		types: ["Fighting"],
		gender: "N",
		baseStats: {hp: 95, atk: 95, def: 95, spa: 95, spd: 95, spe: 95},
		abilities: {0: "RKS System"},
		heightm: 2.3,
		weightkg: 100.5,
		color: "Gray",
		prevo: "typenull",
		evoType: "levelFriendship",
		eggGroups: ["Undiscovered"],
	},
	silvallyfire: {
		num: 773,
		species: "Silvally-Fire",
		baseSpecies: "Silvally",
		forme: "Fire",
		formeLetter: "F",
		types: ["Fire"],
		gender: "N",
		baseStats: {hp: 95, atk: 95, def: 95, spa: 95, spd: 95, spe: 95},
		abilities: {0: "RKS System"},
		heightm: 2.3,
		weightkg: 100.5,
		color: "Gray",
		prevo: "typenull",
		evoType: "levelFriendship",
		eggGroups: ["Undiscovered"],
	},
	silvallyflying: {
		num: 773,
		species: "Silvally-Flying",
		baseSpecies: "Silvally",
		forme: "Flying",
		formeLetter: "F",
		types: ["Flying"],
		gender: "N",
		baseStats: {hp: 95, atk: 95, def: 95, spa: 95, spd: 95, spe: 95},
		abilities: {0: "RKS System"},
		heightm: 2.3,
		weightkg: 100.5,
		color: "Gray",
		prevo: "typenull",
		evoType: "levelFriendship",
		eggGroups: ["Undiscovered"],
	},
	silvallyghost: {
		num: 773,
		species: "Silvally-Ghost",
		baseSpecies: "Silvally",
		forme: "Ghost",
		formeLetter: "G",
		types: ["Ghost"],
		gender: "N",
		baseStats: {hp: 95, atk: 95, def: 95, spa: 95, spd: 95, spe: 95},
		abilities: {0: "RKS System"},
		heightm: 2.3,
		weightkg: 100.5,
		color: "Gray",
		prevo: "typenull",
		evoType: "levelFriendship",
		eggGroups: ["Undiscovered"],
	},
	silvallygrass: {
		num: 773,
		species: "Silvally-Grass",
		baseSpecies: "Silvally",
		forme: "Grass",
		formeLetter: "G",
		types: ["Grass"],
		gender: "N",
		baseStats: {hp: 95, atk: 95, def: 95, spa: 95, spd: 95, spe: 95},
		abilities: {0: "RKS System"},
		heightm: 2.3,
		weightkg: 100.5,
		color: "Gray",
		prevo: "typenull",
		evoType: "levelFriendship",
		eggGroups: ["Undiscovered"],
	},
	silvallyground: {
		num: 773,
		species: "Silvally-Ground",
		baseSpecies: "Silvally",
		forme: "Ground",
		formeLetter: "G",
		types: ["Ground"],
		gender: "N",
		baseStats: {hp: 95, atk: 95, def: 95, spa: 95, spd: 95, spe: 95},
		abilities: {0: "RKS System"},
		heightm: 2.3,
		weightkg: 100.5,
		color: "Gray",
		prevo: "typenull",
		evoType: "levelFriendship",
		eggGroups: ["Undiscovered"],
	},
	silvallyice: {
		num: 773,
		species: "Silvally-Ice",
		baseSpecies: "Silvally",
		forme: "Ice",
		formeLetter: "I",
		types: ["Ice"],
		gender: "N",
		baseStats: {hp: 95, atk: 95, def: 95, spa: 95, spd: 95, spe: 95},
		abilities: {0: "RKS System"},
		heightm: 2.3,
		weightkg: 100.5,
		color: "Gray",
		prevo: "typenull",
		evoType: "levelFriendship",
		eggGroups: ["Undiscovered"],
	},
	silvallypoison: {
		num: 773,
		species: "Silvally-Poison",
		baseSpecies: "Silvally",
		forme: "Poison",
		formeLetter: "P",
		types: ["Poison"],
		gender: "N",
		baseStats: {hp: 95, atk: 95, def: 95, spa: 95, spd: 95, spe: 95},
		abilities: {0: "RKS System"},
		heightm: 2.3,
		weightkg: 100.5,
		color: "Gray",
		prevo: "typenull",
		evoType: "levelFriendship",
		eggGroups: ["Undiscovered"],
	},
	silvallypsychic: {
		num: 773,
		species: "Silvally-Psychic",
		baseSpecies: "Silvally",
		forme: "Psychic",
		formeLetter: "P",
		types: ["Psychic"],
		gender: "N",
		baseStats: {hp: 95, atk: 95, def: 95, spa: 95, spd: 95, spe: 95},
		abilities: {0: "RKS System"},
		heightm: 2.3,
		weightkg: 100.5,
		color: "Gray",
		prevo: "typenull",
		evoType: "levelFriendship",
		eggGroups: ["Undiscovered"],
	},
	silvallyrock: {
		num: 773,
		species: "Silvally-Rock",
		baseSpecies: "Silvally",
		forme: "Rock",
		formeLetter: "R",
		types: ["Rock"],
		gender: "N",
		baseStats: {hp: 95, atk: 95, def: 95, spa: 95, spd: 95, spe: 95},
		abilities: {0: "RKS System"},
		heightm: 2.3,
		weightkg: 100.5,
		color: "Gray",
		prevo: "typenull",
		evoType: "levelFriendship",
		eggGroups: ["Undiscovered"],
	},
	silvallysteel: {
		num: 773,
		species: "Silvally-Steel",
		baseSpecies: "Silvally",
		forme: "Steel",
		formeLetter: "S",
		types: ["Steel"],
		gender: "N",
		baseStats: {hp: 95, atk: 95, def: 95, spa: 95, spd: 95, spe: 95},
		abilities: {0: "RKS System"},
		heightm: 2.3,
		weightkg: 100.5,
		color: "Gray",
		prevo: "typenull",
		evoType: "levelFriendship",
		eggGroups: ["Undiscovered"],
	},
	silvallywater: {
		num: 773,
		species: "Silvally-Water",
		baseSpecies: "Silvally",
		forme: "Water",
		formeLetter: "W",
		types: ["Water"],
		gender: "N",
		baseStats: {hp: 95, atk: 95, def: 95, spa: 95, spd: 95, spe: 95},
		abilities: {0: "RKS System"},
		heightm: 2.3,
		weightkg: 100.5,
		color: "Gray",
		prevo: "typenull",
		evoType: "levelFriendship",
		eggGroups: ["Undiscovered"],
	},
	minior: {
		num: 774,
		species: "Minior",
		baseForme: "Red",
		types: ["Rock", "Flying"],
		gender: "N",
		baseStats: {hp: 60, atk: 100, def: 60, spa: 100, spd: 60, spe: 120},
		abilities: {0: "Shields Down"},
		heightm: 0.3,
		weightkg: 0.3,
		color: "Red",
		eggGroups: ["Mineral"],
		otherFormes: ["miniormeteor"],
		otherForms: ["miniororange", "minioryellow", "miniorgreen", "miniorblue", "miniorindigo", "miniorviolet"],
	},
	miniormeteor: {
		num: 774,
		species: "Minior-Meteor",
		baseSpecies: "Minior",
		forme: "Meteor",
		formeLetter: "M",
		types: ["Rock", "Flying"],
		gender: "N",
		baseStats: {hp: 60, atk: 60, def: 100, spa: 60, spd: 100, spe: 60},
		abilities: {0: "Shields Down"},
		heightm: 0.3,
		weightkg: 40,
		color: "Brown",
		eggGroups: ["Mineral"],
	},
	komala: {
		num: 775,
		species: "Komala",
		types: ["Normal"],
		baseStats: {hp: 65, atk: 115, def: 65, spa: 75, spd: 95, spe: 65},
		abilities: {0: "Comatose"},
		heightm: 0.4,
		weightkg: 19.9,
		color: "Blue",
		eggGroups: ["Field"],
	},
	turtonator: {
		num: 776,
		species: "Turtonator",
		types: ["Fire", "Dragon"],
		baseStats: {hp: 60, atk: 78, def: 135, spa: 91, spd: 85, spe: 36},
		abilities: {0: "Shell Armor"},
		heightm: 2,
		weightkg: 212,
		color: "Red",
		eggGroups: ["Monster", "Dragon"],
	},
	togedemaru: {
		num: 777,
		species: "Togedemaru",
		types: ["Electric", "Steel"],
		baseStats: {hp: 65, atk: 98, def: 63, spa: 40, spd: 73, spe: 96},
		abilities: {0: "Iron Barbs", 1: "Lightning Rod", H: "Sturdy"},
		heightm: 0.3,
		weightkg: 3.3,
		color: "Gray",
		eggGroups: ["Field", "Fairy"],
		otherFormes: ["togedemarutotem"],
	},
	togedemarutotem: {
		num: 777,
		species: "Togedemaru-Totem",
		baseSpecies: "Togedemaru",
		forme: "Totem",
		formeLetter: "T",
		types: ["Electric", "Steel"],
		baseStats: {hp: 65, atk: 98, def: 63, spa: 40, spd: 73, spe: 96},
		abilities: {0: "Sturdy"},
		heightm: 0.6,
		weightkg: 13,
		color: "Gray",
		eggGroups: ["Field", "Fairy"],
	},
	mimikyu: {
		num: 778,
		species: "Mimikyu",
		types: ["Ghost", "Fairy"],
		baseStats: {hp: 55, atk: 90, def: 80, spa: 50, spd: 105, spe: 96},
		abilities: {0: "Disguise"},
		heightm: 0.2,
		weightkg: 0.7,
		color: "Yellow",
		eggGroups: ["Amorphous"],
		otherFormes: ["mimikyubusted", "mimikyutotem", "mimikyubustedtotem"],
	},
	mimikyubusted: {
		num: 778,
		species: "Mimikyu-Busted",
		baseSpecies: "Mimikyu",
		forme: "Busted",
		formeLetter: "B",
		types: ["Ghost", "Fairy"],
		baseStats: {hp: 55, atk: 90, def: 80, spa: 50, spd: 105, spe: 96},
		abilities: {0: "Disguise"},
		heightm: 0.2,
		weightkg: 0.7,
		color: "Yellow",
		eggGroups: ["Amorphous"],
	},
	mimikyutotem: {
		num: 778,
		species: "Mimikyu-Totem",
		baseSpecies: "Mimikyu",
		forme: "Totem",
		formeLetter: "T",
		types: ["Ghost", "Fairy"],
		baseStats: {hp: 55, atk: 90, def: 80, spa: 50, spd: 105, spe: 96},
		abilities: {0: "Disguise"},
		heightm: 0.4,
		weightkg: 2.8,
		color: "Yellow",
		eggGroups: ["Amorphous"],
	},
	mimikyubustedtotem: {
		num: 778,
		species: "Mimikyu-Busted-Totem",
		baseSpecies: "Mimikyu",
		forme: "Busted-Totem",
		formeLetter: "T",
		types: ["Ghost", "Fairy"],
		baseStats: {hp: 55, atk: 90, def: 80, spa: 50, spd: 105, spe: 96},
		abilities: {0: "Disguise"},
		heightm: 0.4,
		weightkg: 2.8,
		color: "Yellow",
		eggGroups: ["Amorphous"],
	},
	bruxish: {
		num: 779,
		species: "Bruxish",
		types: ["Water", "Psychic"],
		baseStats: {hp: 68, atk: 105, def: 70, spa: 70, spd: 70, spe: 92},
		abilities: {0: "Dazzling", 1: "Strong Jaw", H: "Wonder Skin"},
		heightm: 0.9,
		weightkg: 19,
		color: "Pink",
		eggGroups: ["Water 2"],
	},
	drampa: {
		num: 780,
		species: "Drampa",
		types: ["Normal", "Dragon"],
		baseStats: {hp: 78, atk: 60, def: 85, spa: 135, spd: 91, spe: 36},
		abilities: {0: "Berserk", 1: "Sap Sipper", H: "Cloud Nine"},
		heightm: 3,
		weightkg: 185,
		color: "White",
		eggGroups: ["Monster", "Dragon"],
	},
	dhelmise: {
		num: 781,
		species: "Dhelmise",
		types: ["Ghost", "Grass"],
		gender: "N",
		baseStats: {hp: 70, atk: 131, def: 100, spa: 86, spd: 90, spe: 40},
		abilities: {0: "Steelworker"},
		heightm: 3.9,
		weightkg: 210,
		color: "Green",
		eggGroups: ["Mineral"],
	},
	jangmoo: {
		num: 782,
		species: "Jangmo-o",
		types: ["Dragon"],
		baseStats: {hp: 45, atk: 55, def: 65, spa: 45, spd: 45, spe: 45},
		abilities: {0: "Bulletproof", 1: "Soundproof", H: "Overcoat"},
		heightm: 0.6,
		weightkg: 29.7,
		color: "Gray",
		evos: ["hakamoo"],
		eggGroups: ["Dragon"],
	},
	hakamoo: {
		num: 783,
		species: "Hakamo-o",
		types: ["Dragon", "Fighting"],
		baseStats: {hp: 55, atk: 75, def: 90, spa: 65, spd: 70, spe: 65},
		abilities: {0: "Bulletproof", 1: "Soundproof", H: "Overcoat"},
		heightm: 1.2,
		weightkg: 47,
		color: "Gray",
		prevo: "jangmoo",
		evoLevel: 35,
		evos: ["kommoo"],
		eggGroups: ["Dragon"],
	},
	kommoo: {
		num: 784,
		species: "Kommo-o",
		types: ["Dragon", "Fighting"],
		baseStats: {hp: 75, atk: 110, def: 125, spa: 100, spd: 105, spe: 85},
		abilities: {0: "Bulletproof", 1: "Soundproof", H: "Overcoat"},
		heightm: 1.6,
		weightkg: 78.2,
		color: "Gray",
		prevo: "hakamoo",
		evoLevel: 45,
		eggGroups: ["Dragon"],
		otherFormes: ["kommoototem"],
	},
	kommoototem: {
		num: 784,
		species: "Kommo-o-Totem",
		baseSpecies: "Kommo-o",
		forme: "Totem",
		formeLetter: "T",
		types: ["Dragon", "Fighting"],
		baseStats: {hp: 75, atk: 110, def: 125, spa: 100, spd: 105, spe: 85},
		abilities: {0: "Overcoat"},
		heightm: 2.4,
		weightkg: 207.5,
		color: "Gray",
		eggGroups: ["Dragon"],
	},
	tapukoko: {
		num: 785,
		species: "Tapu Koko",
		types: ["Electric", "Fairy"],
		gender: "N",
		baseStats: {hp: 70, atk: 115, def: 85, spa: 95, spd: 75, spe: 130},
		abilities: {0: "Electric Surge", H: "Telepathy"},
		heightm: 1.8,
		weightkg: 20.5,
		color: "Yellow",
		eggGroups: ["Undiscovered"],
	},
	tapulele: {
		num: 786,
		species: "Tapu Lele",
		types: ["Psychic", "Fairy"],
		gender: "N",
		baseStats: {hp: 70, atk: 85, def: 75, spa: 130, spd: 115, spe: 95},
		abilities: {0: "Psychic Surge", H: "Telepathy"},
		heightm: 1.2,
		weightkg: 18.6,
		color: "Pink",
		eggGroups: ["Undiscovered"],
	},
	tapubulu: {
		num: 787,
		species: "Tapu Bulu",
		types: ["Grass", "Fairy"],
		gender: "N",
		baseStats: {hp: 70, atk: 130, def: 115, spa: 85, spd: 95, spe: 75},
		abilities: {0: "Grassy Surge", H: "Telepathy"},
		heightm: 1.9,
		weightkg: 45.5,
		color: "Red",
		eggGroups: ["Undiscovered"],
	},
	tapufini: {
		num: 788,
		species: "Tapu Fini",
		types: ["Water", "Fairy"],
		gender: "N",
		baseStats: {hp: 70, atk: 75, def: 115, spa: 95, spd: 130, spe: 85},
		abilities: {0: "Misty Surge", H: "Telepathy"},
		heightm: 1.3,
		weightkg: 21.2,
		color: "Purple",
		eggGroups: ["Undiscovered"],
	},
	cosmog: {
		num: 789,
		species: "Cosmog",
		types: ["Psychic"],
		gender: "N",
		baseStats: {hp: 43, atk: 29, def: 31, spa: 29, spd: 31, spe: 37},
		abilities: {0: "Unaware"},
		heightm: 0.2,
		weightkg: 0.1,
		color: "Blue",
		evos: ["cosmoem"],
		eggGroups: ["Undiscovered"],
	},
	cosmoem: {
		num: 790,
		species: "Cosmoem",
		types: ["Psychic"],
		gender: "N",
		baseStats: {hp: 43, atk: 29, def: 131, spa: 29, spd: 131, spe: 37},
		abilities: {0: "Sturdy"},
		heightm: 0.1,
		weightkg: 999.9,
		color: "Blue",
		prevo: "cosmog",
		evoLevel: 43,
		evos: ["solgaleo", "lunala"],
		eggGroups: ["Undiscovered"],
	},
	solgaleo: {
		num: 791,
		species: "Solgaleo",
		types: ["Psychic", "Steel"],
		gender: "N",
		baseStats: {hp: 137, atk: 137, def: 107, spa: 113, spd: 89, spe: 97},
		abilities: {0: "Full Metal Body"},
		heightm: 3.4,
		weightkg: 230,
		color: "White",
		prevo: "cosmoem",
		evoLevel: 53,
		eggGroups: ["Undiscovered"],
	},
	lunala: {
		num: 792,
		species: "Lunala",
		types: ["Psychic", "Ghost"],
		gender: "N",
		baseStats: {hp: 137, atk: 113, def: 89, spa: 137, spd: 107, spe: 97},
		abilities: {0: "Shadow Shield"},
		heightm: 4,
		weightkg: 120,
		color: "Purple",
		prevo: "cosmoem",
		evoLevel: 53,
		eggGroups: ["Undiscovered"],
	},
	nihilego: {
		num: 793,
		species: "Nihilego",
		types: ["Rock", "Poison"],
		gender: "N",
		baseStats: {hp: 109, atk: 53, def: 47, spa: 127, spd: 131, spe: 103},
		abilities: {0: "Beast Boost"},
		heightm: 1.2,
		weightkg: 55.5,
		color: "White",
		eggGroups: ["Undiscovered"],
	},
	buzzwole: {
		num: 794,
		species: "Buzzwole",
		types: ["Bug", "Fighting"],
		gender: "N",
		baseStats: {hp: 107, atk: 139, def: 139, spa: 53, spd: 53, spe: 79},
		abilities: {0: "Beast Boost"},
		heightm: 2.4,
		weightkg: 333.6,
		color: "Red",
		eggGroups: ["Undiscovered"],
	},
	pheromosa: {
		num: 795,
		species: "Pheromosa",
		types: ["Bug", "Fighting"],
		gender: "N",
		baseStats: {hp: 71, atk: 137, def: 37, spa: 137, spd: 37, spe: 151},
		abilities: {0: "Beast Boost"},
		heightm: 1.8,
		weightkg: 25,
		color: "White",
		eggGroups: ["Undiscovered"],
	},
	xurkitree: {
		num: 796,
		species: "Xurkitree",
		types: ["Electric"],
		gender: "N",
		baseStats: {hp: 83, atk: 89, def: 71, spa: 173, spd: 71, spe: 83},
		abilities: {0: "Beast Boost"},
		heightm: 3.8,
		weightkg: 100,
		color: "Black",
		eggGroups: ["Undiscovered"],
	},
	celesteela: {
		num: 797,
		species: "Celesteela",
		types: ["Steel", "Flying"],
		gender: "N",
		baseStats: {hp: 97, atk: 101, def: 103, spa: 107, spd: 101, spe: 61},
		abilities: {0: "Beast Boost"},
		heightm: 9.2,
		weightkg: 999.9,
		color: "Green",
		eggGroups: ["Undiscovered"],
	},
	kartana: {
		num: 798,
		species: "Kartana",
		types: ["Grass", "Steel"],
		gender: "N",
		baseStats: {hp: 59, atk: 181, def: 131, spa: 59, spd: 31, spe: 109},
		abilities: {0: "Beast Boost"},
		heightm: 0.3,
		weightkg: 0.1,
		color: "White",
		eggGroups: ["Undiscovered"],
	},
	guzzlord: {
		num: 799,
		species: "Guzzlord",
		types: ["Dark", "Dragon"],
		gender: "N",
		baseStats: {hp: 223, atk: 101, def: 53, spa: 97, spd: 53, spe: 43},
		abilities: {0: "Beast Boost"},
		heightm: 5.5,
		weightkg: 888,
		color: "Black",
		eggGroups: ["Undiscovered"],
	},
	necrozma: {
		num: 800,
		species: "Necrozma",
		types: ["Psychic"],
		gender: "N",
		baseStats: {hp: 97, atk: 107, def: 101, spa: 127, spd: 89, spe: 79},
		abilities: {0: "Prism Armor"},
		heightm: 2.4,
		weightkg: 230,
		color: "Black",
		eggGroups: ["Undiscovered"],
		otherFormes: ["necrozmaduskmane", "necrozmadawnwings", "necrozmaultra"],
	},
	necrozmaduskmane: {
		num: 800,
		species: "Necrozma-Dusk-Mane",
		baseSpecies: "Necrozma",
		forme: "Dusk-Mane",
		formeLetter: "D",
		types: ["Psychic", "Steel"],
		gender: "N",
		baseStats: {hp: 97, atk: 157, def: 127, spa: 113, spd: 109, spe: 77},
		abilities: {0: "Prism Armor"},
		heightm: 3.8,
		weightkg: 460,
		color: "Yellow",
		eggGroups: ["Undiscovered"],
	},
	necrozmadawnwings: {
		num: 800,
		species: "Necrozma-Dawn-Wings",
		baseSpecies: "Necrozma",
		forme: "Dawn-Wings",
		formeLetter: "D",
		types: ["Psychic", "Ghost"],
		gender: "N",
		baseStats: {hp: 97, atk: 113, def: 109, spa: 157, spd: 127, spe: 77},
		abilities: {0: "Prism Armor"},
		heightm: 4.2,
		weightkg: 350,
		color: "Blue",
		eggGroups: ["Undiscovered"],
	},
	necrozmaultra: {
		num: 800,
		species: "Necrozma-Ultra",
		baseSpecies: "Necrozma",
		forme: "Ultra",
		formeLetter: "U",
		types: ["Psychic", "Dragon"],
		gender: "N",
		baseStats: {hp: 97, atk: 167, def: 97, spa: 167, spd: 97, spe: 129},
		abilities: {0: "Neuroforce"},
		heightm: 7.5,
		weightkg: 230,
		color: "Blue",
		eggGroups: ["Undiscovered"],
	},
	magearna: {
		num: 801,
		species: "Magearna",
		types: ["Steel", "Fairy"],
		gender: "N",
		baseStats: {hp: 80, atk: 95, def: 115, spa: 130, spd: 115, spe: 65},
		abilities: {0: "Soul-Heart"},
		heightm: 1,
		weightkg: 80.5,
		color: "Gray",
		eggGroups: ["Undiscovered"],
		otherFormes: ["magearnaoriginal"],
	},
	magearnaoriginal: {
		num: 801,
		species: "Magearna-Original",
		baseSpecies: "Magearna",
		forme: "Original",
		formeLetter: "O",
		types: ["Steel", "Fairy"],
		gender: "N",
		baseStats: {hp: 80, atk: 95, def: 115, spa: 130, spd: 115, spe: 65},
		abilities: {0: "Soul-Heart"},
		heightm: 1,
		weightkg: 80.5,
		color: "Red",
		eggGroups: ["Undiscovered"],
	},
	marshadow: {
		num: 802,
		species: "Marshadow",
		types: ["Fighting", "Ghost"],
		gender: "N",
		baseStats: {hp: 90, atk: 125, def: 80, spa: 90, spd: 90, spe: 125},
		abilities: {0: "Technician"},
		heightm: 0.7,
		weightkg: 22.2,
		color: "Gray",
		eggGroups: ["Undiscovered"],
	},
	poipole: {
		num: 803,
		species: "Poipole",
		types: ["Poison"],
		gender: "N",
		baseStats: {hp: 67, atk: 73, def: 67, spa: 73, spd: 67, spe: 73},
		abilities: {0: "Beast Boost"},
		heightm: 0.6,
		weightkg: 1.8,
		color: "Purple",
		evos: ["naganadel"],
		eggGroups: ["Undiscovered"],
	},
	naganadel: {
		num: 804,
		species: "Naganadel",
		types: ["Poison", "Dragon"],
		gender: "N",
		baseStats: {hp: 73, atk: 73, def: 73, spa: 127, spd: 73, spe: 121},
		abilities: {0: "Beast Boost"},
		heightm: 3.6,
		weightkg: 150,
		color: "Purple",
		prevo: "poipole",
		evoType: "levelMove",
		evoMove: "Dragon Pulse",
		eggGroups: ["Undiscovered"],
	},
	stakataka: {
		num: 805,
		species: "Stakataka",
		types: ["Rock", "Steel"],
		gender: "N",
		baseStats: {hp: 61, atk: 131, def: 211, spa: 53, spd: 101, spe: 13},
		abilities: {0: "Beast Boost"},
		heightm: 5.5,
		weightkg: 820,
		color: "Gray",
		eggGroups: ["Undiscovered"],
	},
	blacephalon: {
		num: 806,
		species: "Blacephalon",
		types: ["Fire", "Ghost"],
		gender: "N",
		baseStats: {hp: 53, atk: 127, def: 53, spa: 151, spd: 79, spe: 107},
		abilities: {0: "Beast Boost"},
		heightm: 1.8,
		weightkg: 13,
		color: "White",
		eggGroups: ["Undiscovered"],
	},
	zeraora: {
		num: 807,
		species: "Zeraora",
		types: ["Electric"],
		gender: "N",
		baseStats: {hp: 88, atk: 112, def: 75, spa: 102, spd: 80, spe: 143},
		abilities: {0: "Volt Absorb"},
		heightm: 1.5,
		weightkg: 44.5,
		color: "Yellow",
		eggGroups: ["Undiscovered"],
	},
	meltan: {
		num: 808,
		species: "Meltan",
		types: ["Steel"],
		gender: "N",
		baseStats: {hp: 46, atk: 65, def: 65, spa: 55, spd: 35, spe: 34},
		abilities: {0: "Magnet Pull"},
		heightm: 0.2,
		weightkg: 8,
		color: "Gray",
		evos: ["melmetal"],
		eggGroups: ["Undiscovered"],
	},
	melmetal: {
		num: 809,
		species: "Melmetal",
		types: ["Steel"],
		gender: "N",
		baseStats: {hp: 135, atk: 143, def: 143, spa: 80, spd: 65, spe: 34},
		abilities: {0: "Iron Fist"},
		heightm: 2.5,
		weightkg: 800,
		color: "Gray",
		prevo: "meltan",
		eggGroups: ["Undiscovered"],
	},
	missingno: {
		num: 0,
		species: "Missingno.",
		types: ["Bird", "Normal"],
		baseStats: {hp: 33, atk: 136, def: 0, spa: 6, spd: 6, spe: 29},
		abilities: {0: ""},
		heightm: 3,
		weightkg: 1590.8,
		color: "Gray",
		eggGroups: ["Undiscovered"],
	},
	syclant: {
		num: -1,
		species: "Syclant",
		types: ["Ice", "Bug"],
		baseStats: {hp: 70, atk: 116, def: 70, spa: 114, spd: 64, spe: 121},
		abilities: {0: "Compound Eyes", 1: "Mountaineer", H: "Ice Body"},
		heightm: 1.7,
		weightkg: 52,
		color: "Blue",
		prevo: "syclar",
		evoLevel: 30,
		eggGroups: ["Bug"],
	},
	revenankh: {
		num: -2,
		species: "Revenankh",
		types: ["Ghost", "Fighting"],
		baseStats: {hp: 90, atk: 105, def: 90, spa: 65, spd: 110, spe: 65},
		abilities: {0: "Shed Skin", 1: "Air Lock", H: "Triage"},
		heightm: 1.8,
		weightkg: 44,
		color: "White",
		eggGroups: ["Amorphous", "Human-Like"],
	},
	pyroak: {
		num: -3,
		species: "Pyroak",
		types: ["Fire", "Grass"],
		baseStats: {hp: 120, atk: 70, def: 105, spa: 95, spd: 90, spe: 60},
		abilities: {0: "Rock Head", 1: "Battle Armor", H: "White Smoke"},
		heightm: 2.1,
		weightkg: 168,
		color: "Brown",
		prevo: "flarelm",
		evoLevel: 38,
		eggGroups: ["Monster", "Dragon"],
	},
	fidgit: {
		num: -4,
		species: "Fidgit",
		types: ["Poison", "Ground"],
		baseStats: {hp: 95, atk: 76, def: 109, spa: 90, spd: 80, spe: 105},
		abilities: {0: "Persistent", 1: "Vital Spirit", H: "Frisk"},
		heightm: 0.9,
		weightkg: 53,
		color: "Purple",
		prevo: "breezi",
		evoLevel: 33,
		eggGroups: ["Field"],
	},
	stratagem: {
		num: -5,
		species: "Stratagem",
		types: ["Rock"],
		gender: "N",
		baseStats: {hp: 90, atk: 60, def: 65, spa: 120, spd: 70, spe: 130},
		abilities: {0: "Levitate", 1: "Technician", H: "Sniper"},
		heightm: 0.9,
		weightkg: 45,
		color: "Gray",
		prevo: "tactite",
		evoType: "trade",
		eggGroups: ["Undiscovered"],
	},
	arghonaut: {
		num: -6,
		species: "Arghonaut",
		types: ["Water", "Fighting"],
		baseStats: {hp: 105, atk: 110, def: 95, spa: 70, spd: 100, spe: 75},
		abilities: {0: "Unaware", H: "Technician"},
		heightm: 1.7,
		weightkg: 151,
		color: "Green",
		prevo: "privatyke",
		evoLevel: 37,
		eggGroups: ["Water 1", "Water 3"],
	},
	kitsunoh: {
		num: -7,
		species: "Kitsunoh",
		types: ["Steel", "Ghost"],
		baseStats: {hp: 80, atk: 103, def: 85, spa: 55, spd: 80, spe: 110},
		abilities: {0: "Frisk", 1: "Limber", H: "Iron Fist"},
		heightm: 1.1,
		weightkg: 51,
		color: "Gray",
		eggGroups: ["Field"],
	},
	cyclohm: {
		num: -8,
		species: "Cyclohm",
		types: ["Electric", "Dragon"],
		baseStats: {hp: 108, atk: 60, def: 118, spa: 112, spd: 70, spe: 80},
		abilities: {0: "Shield Dust", 1: "Static", H: "Damp"},
		heightm: 1.6,
		weightkg: 59,
		color: "Yellow",
		eggGroups: ["Dragon", "Monster"],
	},
	colossoil: {
		num: -9,
		species: "Colossoil",
		types: ["Dark", "Ground"],
		baseStats: {hp: 133, atk: 122, def: 72, spa: 71, spd: 72, spe: 95},
		abilities: {0: "Rebound", 1: "Guts", H: "Unnerve"},
		heightm: 2.6,
		weightkg: 683.6,
		color: "Brown",
		eggGroups: ["Water 2", "Field"],
	},
	krilowatt: {
		num: -10,
		species: "Krilowatt",
		types: ["Electric", "Water"],
		baseStats: {hp: 151, atk: 84, def: 73, spa: 83, spd: 74, spe: 105},
		abilities: {0: "Trace", 1: "Magic Guard", H: "Minus"},
		heightm: 0.7,
		weightkg: 10.6,
		color: "Red",
		eggGroups: ["Water 1", "Fairy"],
	},
	voodoom: {
		num: -11,
		species: "Voodoom",
		types: ["Fighting", "Dark"],
		baseStats: {hp: 90, atk: 85, def: 80, spa: 105, spd: 80, spe: 110},
		abilities: {0: "Volt Absorb", 1: "Lightning Rod", H: "Cursed Body"},
		heightm: 2,
		weightkg: 75.5,
		color: "Brown",
		prevo: "voodoll",
		evoLevel: 32,
		eggGroups: ["Human-Like", "Field"],
	},
	tomohawk: {
		num: -12,
		species: "Tomohawk",
		types: ["Flying", "Fighting"],
		baseStats: {hp: 105, atk: 60, def: 90, spa: 115, spd: 80, spe: 85},
		abilities: {0: "Intimidate", 1: "Prankster", H: "Justified"},
		heightm: 1.27,
		weightkg: 37.2,
		color: "Red",
		prevo: "scratchet",
		evoLevel: 23,
		eggGroups: ["Field", "Flying"],
	},
	necturna: {
		num: -13,
		species: "Necturna",
		types: ["Grass", "Ghost"],
		gender: "F",
		baseStats: {hp: 64, atk: 120, def: 100, spa: 85, spd: 120, spe: 58},
		abilities: {0: "Forewarn", H: "Telepathy"},
		heightm: 1.65,
		weightkg: 49.6,
		color: "Black",
		prevo: "necturine",
		evoLevel: 31,
		eggGroups: ["Grass", "Field"],
	},
	mollux: {
		num: -14,
		species: "Mollux",
		types: ["Fire", "Poison"],
		baseStats: {hp: 95, atk: 45, def: 83, spa: 131, spd: 105, spe: 76},
		abilities: {0: "Dry Skin", H: "Illuminate"},
		heightm: 1.2,
		weightkg: 41,
		color: "Pink",
		eggGroups: ["Fairy", "Field"],
	},
	aurumoth: {
		num: -15,
		species: "Aurumoth",
		types: ["Bug", "Psychic"],
		baseStats: {hp: 110, atk: 120, def: 99, spa: 117, spd: 60, spe: 94},
		abilities: {0: "Weak Armor", 1: "No Guard", H: "Light Metal"},
		heightm: 2.1,
		weightkg: 193,
		color: "Purple",
		prevo: "argalis",
		evoLevel: 50,
		eggGroups: ["Bug"],
	},
	malaconda: {
		num: -16,
		species: "Malaconda",
		types: ["Dark", "Grass"],
		baseStats: {hp: 115, atk: 100, def: 60, spa: 40, spd: 130, spe: 55},
		abilities: {0: "Harvest", 1: "Infiltrator", H: "Drought"},
		heightm: 5.5,
		weightkg: 108.8,
		color: "Brown",
		prevo: "brattler",
		evoLevel: 33,
		eggGroups: ["Grass", "Dragon"],
	},
	cawmodore: {
		num: -17,
		species: "Cawmodore",
		types: ["Steel", "Flying"],
		baseStats: {hp: 50, atk: 92, def: 130, spa: 65, spd: 75, spe: 118},
		abilities: {0: "Intimidate", 1: "Volt Absorb", H: "Big Pecks"},
		heightm: 1.7,
		weightkg: 37,
		color: "Black",
		prevo: "cawdet",
		evoLevel: 33,
		eggGroups: ["Flying"],
	},
	volkraken: {
		num: -18,
		species: "Volkraken",
		types: ["Water", "Fire"],
		baseStats: {hp: 100, atk: 45, def: 80, spa: 135, spd: 100, spe: 95},
		abilities: {0: "Analytic", 1: "Infiltrator", H: "Pressure"},
		heightm: 1.3,
		weightkg: 44.5,
		color: "Red",
		prevo: "volkritter",
		evoLevel: 34,
		eggGroups: ["Water 1", "Water 2"],
	},
	plasmanta: {
		num: -19,
		species: "Plasmanta",
		types: ["Electric", "Poison"],
		baseStats: {hp: 60, atk: 57, def: 119, spa: 131, spd: 98, spe: 100},
		abilities: {0: "Storm Drain", 1: "Vital Spirit", H: "Telepathy"},
		heightm: 7,
		weightkg: 460,
		color: "Purple",
		prevo: "snugglow",
		evoLevel: 29,
		eggGroups: ["Water 1", "Water 2"],
	},
	naviathan: {
		num: -20,
		species: "Naviathan",
		types: ["Water", "Steel"],
		baseStats: {hp: 103, atk: 110, def: 90, spa: 95, spd: 65, spe: 97},
		abilities: {0: "Guts", 1: "Heatproof", H: "Light Metal"},
		heightm: 3,
		weightkg: 510,
		color: "Gray",
		prevo: "caimanoe",
		evoLevel: 40,
		eggGroups: ["Water 1", "Field"],
	},
	crucibelle: {
		num: -21,
		species: "Crucibelle",
		types: ["Rock", "Poison"],
		genderRatio: {M: 0.25, F: 0.75},
		baseStats: {hp: 106, atk: 105, def: 65, spa: 75, spd: 85, spe: 104},
		abilities: {0: "Regenerator", 1: "Mold Breaker", H: "Liquid Ooze"},
		heightm: 1.3,
		weightkg: 23.6,
		color: "Purple",
		eggGroups: ["Amorphous", "Mineral"],
		otherFormes: ["crucibellemega"],
	},
	crucibellemega: {
		num: -21,
		species: "Crucibelle-Mega",
		baseSpecies: "Crucibelle",
		forme: "Mega",
		formeLetter: "M",
		types: ["Rock", "Poison"],
		genderRatio: {M: 0.25, F: 0.75},
		baseStats: {hp: 106, atk: 135, def: 75, spa: 91, spd: 125, spe: 108},
		abilities: {0: "Magic Guard"},
		heightm: 1.4,
		weightkg: 22.5,
		color: "Purple",
		eggGroups: ["Amorphous", "Mineral"],
	},
	kerfluffle: {
		num: -22,
		species: "Kerfluffle",
		types: ["Fairy", "Fighting"],
		baseStats: {hp: 84, atk: 78, def: 86, spa: 115, spd: 88, spe: 119},
		abilities: {0: "Natural Cure", 1: "Aroma Veil", H: "Friend Guard"},
		heightm: 2.1,
		weightkg: 24.2,
		color: "Pink",
		prevo: "pluffle",
		evoType: "levelExtra",
		eggGroups: ["Fairy", "Human-Like"],
	},
	pajantom: {
		num: -23,
		species: "Pajantom",
		types: ["Dragon", "Ghost"],
		baseStats: {hp: 84, atk: 133, def: 71, spa: 51, spd: 111, spe: 101},
		abilities: {0: "Comatose"},
		heightm: 1.1,
		weightkg: 3.1,
		color: "Purple",
		eggGroups: ["Dragon", "Monster"],
	},
	jumbao: {
		num: -24,
		species: "Jumbao",
		types: ["Grass", "Fairy"],
		baseStats: {hp: 92, atk: 63, def: 97, spa: 124, spd: 104, spe: 96},
		abilities: {0: "Drought", 1: "Trace", H: "Overcoat"},
		heightm: 2.4,
		weightkg: 600,
		color: "Brown",
		prevo: "mumbao",
		evoType: "levelExtra",
		eggGroups: ["Grass"],
	},
	caribolt: {
		num: -25,
		species: "Caribolt",
		types: ["Grass", "Electric"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 84, atk: 106, def: 82, spa: 77, spd: 80, spe: 106},
		abilities: {0: "Overgrow", H: "Galvanize"},
		heightm: 2.5,
		weightkg: 140,
		color: "Green",
		eggGroups: ["Field"],
	},
	smokomodo: {
		num: -26,
		species: "Smokomodo",
		types: ["Fire", "Ground"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 88, atk: 116, def: 67, spa: 88, spd: 78, spe: 97},
		abilities: {0: "Blaze", H: "Technician"},
		heightm: 2.2,
		weightkg: 205,
		color: "Red",
		eggGroups: ["Field", "Monster"],
	},
	snaelstrom: {
		num: -27,
		species: "Snaelstrom",
		types: ["Water", "Bug"],
		genderRatio: {M: 0.875, F: 0.125},
		baseStats: {hp: 91, atk: 94, def: 110, spa: 80, spd: 97, spe: 63},
		abilities: {0: "Torrent", H: "Poison Heal"},
		heightm: 2,
		weightkg: 120,
		color: "Blue",
		eggGroups: ["Water 1", "Fairy"],
	},
	syclar: {
		num: -101,
		species: "Syclar",
		types: ["Ice", "Bug"],
		baseStats: {hp: 40, atk: 76, def: 45, spa: 74, spd: 39, spe: 91},
		abilities: {0: "Compound Eyes", 1: "Snow Cloak", H: "Ice Body"},
		heightm: 0.2,
		weightkg: 4.0,
		color: "Blue",
		evos: ["syclant"],
		eggGroups: ["Bug"],
	},
	embirch: {
		num: -102,
		species: "Embirch",
		types: ["Fire", "Grass"],
		baseStats: {hp: 60, atk: 40, def: 55, spa: 65, spd: 40, spe: 60},
		abilities: {0: "Reckless", 1: "Leaf Guard", H: "Chlorophyll"},
		heightm: 0.6,
		weightkg: 15,
		color: "Brown",
		evos: ["flarelm"],
		eggGroups: ["Monster", "Dragon"],
	},
	flarelm: {
		num: -103,
		species: "Flarelm",
		types: ["Fire", "Grass"],
		baseStats: {hp: 90, atk: 50, def: 95, spa: 75, spd: 70, spe: 40},
		abilities: {0: "Rock Head", 1: "Battle Armor", H: "White Smoke"},
		heightm: 1.4,
		weightkg: 73,
		color: "Brown",
		prevo: "embirch",
		evoLevel: 24,
		evos: ["pyroak"],
		eggGroups: ["Monster", "Dragon"],
	},
	breezi: {
		num: -104,
		species: "Breezi",
		types: ["Poison", "Flying"],
		baseStats: {hp: 50, atk: 46, def: 69, spa: 60, spd: 50, spe: 75},
		abilities: {0: "Unburden", 1: "Own Tempo", H: "Frisk"},
		heightm: 0.4,
		weightkg: 0.6,
		color: "Purple",
		evos: ["fidgit"],
		eggGroups: ["Field"],
	},
	scratchet: {
		num: -105,
		species: "Scratchet",
		types: ["Normal", "Fighting"],
		baseStats: {hp: 55, atk: 85, def: 80, spa: 20, spd: 70, spe: 40},
		abilities: {0: "Scrappy", 1: "Prankster", H: "Vital Spirit"},
		heightm: 0.5,
		weightkg: 20,
		color: "Brown",
		evos: ["tomohawk"],
		eggGroups: ["Field", "Flying"],
	},
	necturine: {
		num: -106,
		species: "Necturine",
		types: ["Grass", "Ghost"],
		gender: "F",
		baseStats: {hp: 49, atk: 55, def: 60, spa: 50, spd: 75, spe: 51},
		abilities: {0: "Anticipation", H: "Telepathy"},
		heightm: 0.3,
		weightkg: 1.8,
		color: "White",
		evos: ["necturna"],
		eggGroups: ["Grass", "Field"],
	},
	cupra: {
		num: -107,
		species: "Cupra",
		types: ["Bug", "Psychic"],
		baseStats: {hp: 50, atk: 60, def: 49, spa: 67, spd: 30, spe: 44},
		abilities: {0: "Shield Dust", 1: "Keen Eye", H: "Magic Guard"},
		heightm: 0.5,
		weightkg: 4.8,
		color: "Brown",
		evos: ["argalis"],
		eggGroups: ["Bug"],
	},
	argalis: {
		num: -108,
		species: "Argalis",
		types: ["Bug", "Psychic"],
		baseStats: {hp: 60, atk: 90, def: 89, spa: 87, spd: 40, spe: 54},
		abilities: {0: "Shed Skin", 1: "Compound Eyes", H: "Overcoat"},
		heightm: 1.3,
		weightkg: 341.4,
		color: "Gray",
		prevo: "cupra",
		evoLevel: 30,
		evos: ["aurumoth"],
		eggGroups: ["Bug"],
	},
	brattler: {
		num: -109,
		species: "Brattler",
		types: ["Dark", "Grass"],
		baseStats: {hp: 80, atk: 70, def: 40, spa: 20, spd: 90, spe: 30},
		abilities: {0: "Harvest", 1: "Infiltrator", H: "Rattled"},
		heightm: 1.8,
		weightkg: 11.5,
		color: "Brown",
		evos: ["malaconda"],
		eggGroups: ["Grass", "Dragon"],
	},
	cawdet: {
		num: -110,
		species: "Cawdet",
		types: ["Steel", "Flying"],
		baseStats: {hp: 35, atk: 72, def: 85, spa: 40, spd: 55, spe: 88},
		abilities: {0: "Keen Eye", 1: "Volt Absorb", H: "Big Pecks"},
		heightm: 0.76,
		weightkg: 25.0,
		color: "Gray",
		evos: ["cawmodore"],
		eggGroups: ["Flying"],
	},
	volkritter: {
		num: -111,
		species: "Volkritter",
		types: ["Water", "Fire"],
		baseStats: {hp: 60, atk: 30, def: 50, spa: 80, spd: 60, spe: 70},
		abilities: {0: "Anticipation", 1: "Infiltrator", H: "Unnerve"},
		heightm: 0.3,
		weightkg: 15,
		color: "Red",
		evos: ["volkraken"],
		eggGroups: ["Water 1", "Water 2"],
	},
	snugglow: {
		num: -112,
		species: "Snugglow",
		types: ["Electric", "Poison"],
		baseStats: {hp: 40, atk: 37, def: 79, spa: 91, spd: 68, spe: 70},
		abilities: {0: "Storm Drain", 1: "Vital Spirit", H: "Telepathy"},
		heightm: 1.2,
		weightkg: 6,
		color: "Purple",
		evos: ["plasmanta"],
		eggGroups: ["Water 1", "Water 2"],
	},
	floatoy: {
		num: -113,
		species: "Floatoy",
		types: ["Water"],
		baseStats: {hp: 48, atk: 70, def: 40, spa: 70, spd: 30, spe: 77},
		abilities: {0: "Water Veil", 1: "Heatproof", H: "Swift Swim"},
		heightm: 0.8,
		weightkg: 1.9,
		color: "White",
		evos: ["caimanoe"],
		eggGroups: ["Water 1", "Field"],
	},
	caimanoe: {
		num: -114,
		species: "Caimanoe",
		types: ["Water", "Steel"],
		baseStats: {hp: 73, atk: 85, def: 65, spa: 80, spd: 40, spe: 87},
		abilities: {0: "Water Veil", 1: "Heatproof", H: "Light Metal"},
		heightm: 1.4,
		weightkg: 72.5,
		color: "Gray",
		prevo: "floatoy",
		evoLevel: 21,
		evos: ["naviathan"],
		eggGroups: ["Water 1", "Field"],
	},
	pluffle: {
		num: -115,
		species: "Pluffle",
		types: ["Fairy"],
		baseStats: {hp: 74, atk: 38, def: 51, spa: 65, spd: 78, spe: 49},
		abilities: {0: "Natural Cure", 1: "Aroma Veil", H: "Friend Guard"},
		heightm: 0.8,
		weightkg: 1.8,
		color: "Pink",
		evos: ["kerfluffle"],
		eggGroups: ["Fairy", "Human-Like"],
	},
	rebble: {
		num: -116,
		species: "Rebble",
		types: ["Rock"],
		gender: "N",
		baseStats: {hp: 45, atk: 25, def: 65, spa: 75, spd: 55, spe: 80},
		abilities: {0: "Levitate", 1: "Solid Rock", H: "Sniper"},
		heightm: 0.3,
		weightkg: 7,
		color: "Gray",
		evos: ["tactite"],
		eggGroups: ["Undiscovered"],
	},
	tactite: {
		num: -117,
		species: "Tactite",
		types: ["Rock"],
		gender: "N",
		baseStats: {hp: 70, atk: 40, def: 65, spa: 100, spd: 65, spe: 95},
		abilities: {0: "Levitate", 1: "Technician", H: "Sniper"},
		heightm: 0.6,
		weightkg: 16,
		color: "Gray",
		prevo: "rebble",
		evoLevel: 28,
		evos: ["stratagem"],
		eggGroups: ["Undiscovered"],
	},
	privatyke: {
		num: -118,
		species: "Privatyke",
		types: ["Water", "Fighting"],
		baseStats: {hp: 65, atk: 75, def: 65, spa: 40, spd: 60, spe: 45},
		abilities: {0: "Unaware", H: "Technician"},
		heightm: 1,
		weightkg: 35,
		color: "Green",
		evos: ["arghonaut"],
		eggGroups: ["Water 1", "Water 3"],
	},
	voodoll: {
		num: -119,
		species: "Voodoll",
		types: ["Normal", "Dark"],
		baseStats: {hp: 55, atk: 40, def: 55, spa: 75, spd: 50, spe: 70},
		abilities: {0: "Volt Absorb", 1: "Lightning Rod", H: "Cursed Body"},
		heightm: 1,
		weightkg: 25,
		color: "Brown",
		evos: ["voodoom"],
		eggGroups: ["Human-Like", "Field"],
	},
	mumbao: {
		num: -120,
		species: "Mumbao",
		types: ["Grass", "Fairy"],
		baseStats: {hp: 55, atk: 30, def: 64, spa: 87, spd: 73, spe: 66},
		abilities: {0: "Solar Power", 1: "Trace", H: "Overcoat"},
		heightm: 1,
		weightkg: 250,
		color: "Brown",
		evos: ["jumbao"],
		eggGroups: ["Grass"],
	},
	pokestarsmeargle: {
		num: -5000,
		species: "Pokestar Smeargle",
		types: ["Normal"],
		baseStats: {hp: 55, atk: 20, def: 35, spa: 20, spd: 45, spe: 75},
		abilities: {0: "Own Tempo", 1: "Technician", H: "Moody"},
		heightm: 1.5,
		weightkg: 61,
		color: "White",
		eggGroups: ["Field"],
	},
	pokestarufo: {
		num: -5001,
		species: "Pokestar UFO",
		types: ["Flying", "Electric"],
		gender: "N",
		baseStats: {hp: 100, atk: 100, def: 100, spa: 100, spd: 100, spe: 100},
		abilities: {0: "Levitate"},
		heightm: 1.5,
		weightkg: 61,
		color: "White",
		eggGroups: ["Undiscovered"],
		otherForms: ["pokestarufopropu1"],
		otherFormes: ["pokestarufo2", "pokestarufopropu2"],
	},
	pokestarufo2: {
		num: -5001,
		species: "Pokestar UFO-2",
		baseSpecies: "Pokestar UFO",
		forme: "2",
		formeLetter: "2",
		types: ["Psychic", "Electric"],
		gender: "N",
		baseStats: {hp: 100, atk: 100, def: 100, spa: 100, spd: 100, spe: 100},
		abilities: {0: "Levitate"},
		heightm: 1.5,
		weightkg: 61,
		color: "White",
		eggGroups: ["Undiscovered"],
	},
	pokestarbrycenman: {
		num: -5002,
		species: "Pokestar Brycen-Man",
		types: ["Dark", "Psychic"],
		gender: "M",
		baseStats: {hp: 100, atk: 100, def: 100, spa: 100, spd: 100, spe: 100},
		abilities: {0: "Levitate"},
		heightm: 1.5,
		weightkg: 61,
		color: "White",
		eggGroups: ["Undiscovered"],
		otherForms: ["pokestarbrycenmanprop"],
	},
	pokestarmt: {
		num: -5003,
		species: "Pokestar MT",
		types: ["Steel"],
		gender: "N",
		baseStats: {hp: 100, atk: 100, def: 100, spa: 100, spd: 100, spe: 100},
		abilities: {0: "Analytic"},
		heightm: 1.5,
		weightkg: 61,
		color: "White",
		eggGroups: ["Undiscovered"],
		otherForms: ["pokestarmtprop"],
	},
	pokestarmt2: {
		num: -5004,
		species: "Pokestar MT2",
		types: ["Steel", "Electric"],
		gender: "N",
		baseStats: {hp: 100, atk: 100, def: 100, spa: 100, spd: 100, spe: 100},
		abilities: {0: "Flash Fire"},
		heightm: 1.5,
		weightkg: 61,
		color: "White",
		eggGroups: ["Undiscovered"],
		otherForms: ["pokestarmt2prop"],
	},
	pokestartransport: {
		num: -5005,
		species: "Pokestar Transport",
		types: ["Steel"],
		gender: "N",
		baseStats: {hp: 100, atk: 100, def: 100, spa: 100, spd: 100, spe: 100},
		abilities: {0: "Motor Drive"},
		heightm: 1.5,
		weightkg: 61,
		color: "White",
		eggGroups: ["Undiscovered"],
		otherForms: ["pokestartransportprop"],
	},
	pokestargiant: {
		num: -5006,
		species: "Pokestar Giant",
		types: ["Normal"],
		gender: "F",
		baseStats: {hp: 100, atk: 100, def: 100, spa: 100, spd: 100, spe: 100},
		abilities: {0: "Huge Power"},
		heightm: 1.5,
		weightkg: 61,
		color: "White",
		eggGroups: ["Undiscovered"],
		otherForms: ["pokestargiant2", "pokestargiantpropo1", "pokestargiantpropo2"],
	},
	pokestarhumanoid: {
		num: -5007,
		species: "Pokestar Humanoid",
		types: ["Normal"],
		baseStats: {hp: 100, atk: 100, def: 100, spa: 100, spd: 100, spe: 100},
		abilities: {0: "Insomnia"},
		heightm: 1.5,
		weightkg: 61,
		color: "White",
		eggGroups: ["Undiscovered"],
		otherForms: ["pokestarhumanoidprop"],
	},
	pokestarmonster: {
		num: -5008,
		species: "Pokestar Monster",
		types: ["Dark"],
		baseStats: {hp: 100, atk: 100, def: 100, spa: 100, spd: 100, spe: 100},
		abilities: {0: "Pressure"},
		heightm: 1.5,
		weightkg: 61,
		color: "White",
		eggGroups: ["Undiscovered"],
		otherForms: ["pokestarmonsterprop"],
	},
	pokestarf00: {
		num: -5009,
		species: "Pokestar F-00",
		types: ["Steel", "Normal"],
		baseStats: {hp: 100, atk: 100, def: 100, spa: 100, spd: 100, spe: 100},
		abilities: {0: "Volt Absorb"},
		heightm: 1.5,
		weightkg: 61,
		color: "White",
		eggGroups: ["Undiscovered"],
		otherForms: ["pokestarf00prop"],
	},
	pokestarf002: {
		num: -5010,
		species: "Pokestar F-002",
		types: ["Steel", "Normal"],
		baseStats: {hp: 100, atk: 100, def: 100, spa: 100, spd: 100, spe: 100},
		abilities: {0: "Reckless"},
		heightm: 1.5,
		weightkg: 61,
		color: "White",
		eggGroups: ["Undiscovered"],
		otherForms: ["pokestarf002prop"],
	},
	pokestarspirit: {
		num: -5011,
		species: "Pokestar Spirit",
		types: ["Dark", "Ghost"],
		baseStats: {hp: 100, atk: 100, def: 100, spa: 100, spd: 100, spe: 100},
		abilities: {0: "Wonder Guard"},
		heightm: 1.5,
		weightkg: 61,
		color: "White",
		eggGroups: ["Undiscovered"],
		otherForms: ["pokestarspiritprop"],
	},
	pokestarblackdoor: {
		num: -5012,
		species: "Pokestar Black Door",
		types: ["Grass"],
		gender: "F",
		baseStats: {hp: 100, atk: 100, def: 100, spa: 100, spd: 100, spe: 100},
		abilities: {0: "Early Bird"},
		heightm: 1.5,
		weightkg: 61,
		color: "White",
		eggGroups: ["Undiscovered"],
		otherForms: ["pokestarblackdoorprop"],
	},
	pokestarwhitedoor: {
		num: -5013,
		species: "Pokestar White Door",
		types: ["Fire"],
		gender: "M",
		baseStats: {hp: 100, atk: 100, def: 100, spa: 100, spd: 100, spe: 100},
		abilities: {0: "Blaze"},
		heightm: 1.5,
		weightkg: 61,
		color: "White",
		eggGroups: ["Undiscovered"],
		otherForms: ["pokestarwhitedoorprop"],
	},
	pokestarblackbelt: {
		num: -5014,
		species: "Pokestar Black Belt",
		types: ["Fighting"],
		gender: "M",
		baseStats: {hp: 100, atk: 100, def: 100, spa: 100, spd: 100, spe: 100},
		abilities: {0: "Huge Power"},
		heightm: 1.5,
		weightkg: 61,
		color: "White",
		eggGroups: ["Undiscovered"],
		otherForms: ["pokestarblackbeltprop"],
	},
	pokestarufopropu2: {
		num: -5001,
		species: "Pokestar UFO-PropU2",
		baseForme: "Pokestar UFO",
		forme: "PropU2",
		types: ["Psychic", "Electric"],
		gender: "N",
		baseStats: {hp: 100, atk: 100, def: 100, spa: 100, spd: 100, spe: 100},
		abilities: {0: "Levitate"},
		heightm: 1.5,
		weightkg: 61,
		color: "White",
		eggGroups: ["Undiscovered"],
	},
};

exports.BattlePokedex = BattlePokedex;
var BattleSceneStub=function(){function BattleSceneStub(){this.
animating=false;this.
acceleration=NaN;this.
gen=NaN;this.
activeCount=NaN;this.
numericId=NaN;this.
timeOffset=NaN;this.
interruptionCount=NaN;this.
messagebarOpen=false;this.
log={add:function(args,kwargs){}};}var _proto=BattleSceneStub.prototype;_proto.

abilityActivateAnim=function abilityActivateAnim(pokemon,result){};_proto.
addPokemonSprite=function addPokemonSprite(pokemon){return null;};_proto.
addSideCondition=function addSideCondition(siden,id,instant){};_proto.
animationOff=function animationOff(){};_proto.
animationOn=function animationOn(){};_proto.
maybeCloseMessagebar=function maybeCloseMessagebar(args,kwArgs){return false;};_proto.
closeMessagebar=function closeMessagebar(){};_proto.
damageAnim=function damageAnim(pokemon,damage){};_proto.
destroy=function destroy(){};_proto.
finishAnimations=function finishAnimations(){return void 0;};_proto.
healAnim=function healAnim(pokemon,damage){};_proto.
hideJoinButtons=function hideJoinButtons(){};_proto.
incrementTurn=function incrementTurn(){};_proto.
message=function message(_message,hiddenMessage){};_proto.
pause=function pause(){};_proto.
preemptCatchup=function preemptCatchup(){};_proto.
removeSideCondition=function removeSideCondition(siden,id){};_proto.
reset=function reset(){};_proto.
resultAnim=function resultAnim(
pokemon,result,type)
{};_proto.
typeAnim=function typeAnim(pokemon,types){};_proto.
resume=function resume(){};_proto.
runMoveAnim=function runMoveAnim(moveid,participants){};_proto.
runOtherAnim=function runOtherAnim(moveid,participants){};_proto.
runPrepareAnim=function runPrepareAnim(moveid,attacker,defender){};_proto.
runResidualAnim=function runResidualAnim(moveid,pokemon){};_proto.
runStatusAnim=function runStatusAnim(moveid,participants){};_proto.
soundStart=function soundStart(){};_proto.
soundStop=function soundStop(){};_proto.
startAnimations=function startAnimations(){};_proto.
teamPreview=function teamPreview(){};_proto.
teamPreviewEnd=function teamPreviewEnd(){};_proto.
updateGen=function updateGen(){};_proto.
updateSidebar=function updateSidebar(side){};_proto.
updateSidebars=function updateSidebars(){};_proto.
updateStatbars=function updateStatbars(){};_proto.
updateWeather=function updateWeather(instant){};_proto.
upkeepWeather=function upkeepWeather(){};_proto.
wait=function wait(time){};_proto.
setFrameHTML=function setFrameHTML(html){};_proto.
setControlsHTML=function setControlsHTML(html){};_proto.
removeEffect=function removeEffect(pokemon,id,instant){};_proto.
addEffect=function addEffect(pokemon,id,instant){};_proto.
animSummon=function animSummon(pokemon,slot,instant){};_proto.
animUnsummon=function animUnsummon(pokemon,instant){};_proto.
animDragIn=function animDragIn(pokemon,slot){};_proto.
animDragOut=function animDragOut(pokemon){};_proto.
updateStatbar=function updateStatbar(pokemon,updatePrevhp,updateHp){};_proto.
updateStatbarIfExists=function updateStatbarIfExists(pokemon,updatePrevhp,updateHp){};_proto.
animTransform=function animTransform(pokemon,isCustomAnim,isPermanent){};_proto.
clearEffects=function clearEffects(pokemon){};_proto.
removeTransform=function removeTransform(pokemon){};_proto.
animFaint=function animFaint(pokemon){};_proto.
animReset=function animReset(pokemon){};_proto.
anim=function anim(pokemon,end,transition){};_proto.
beforeMove=function beforeMove(pokemon){};_proto.
afterMove=function afterMove(pokemon){};_proto.
updateSpritesForSide=function updateSpritesForSide(side){};_proto.
unlink=function unlink(userid){var showRevealButton=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;};return BattleSceneStub;}();


if(typeof require==='function'){

global.BattleSceneStub=BattleSceneStub;
}var _temp;/**
 * Pokemon Showdown Dex
 *
 * Roughly equivalent to sim/dex.js in a Pokemon Showdown server, but
 * designed for use in browsers rather than in Node.
 *
 * This is a generic utility library for Pokemon Showdown code: any
 * code shared between the replay viewer and the client usually ends up
 * here.
 *
 * Licensing note: PS's client has complicated licensing:
 * - The client as a whole is AGPLv3
 * - The battle replay/animation engine (battle-*.ts) by itself is MIT
 *
 * Compiled into battledata.js which includes all dependencies
 *
 * @author Guangcong Luo <guangcongluo@gmail.com>
 * @license MIT
 */




if(!Array.prototype.indexOf){
Array.prototype.indexOf=function indexOf(searchElement,fromIndex){
for(var i=fromIndex||0;i<this.length;i++){
if(this[i]===searchElement)return i;
}
return-1;
};
}
if(!Array.prototype.includes){
Array.prototype.includes=function includes(thing){
return this.indexOf(thing)!==-1;
};
}
if(!Array.isArray){
Array.isArray=function isArray(thing){
return Object.prototype.toString.call(thing)==='[object Array]';
};
}
if(!String.prototype.includes){
String.prototype.includes=function includes(thing){
return this.indexOf(thing)!==-1;
};
}
if(!String.prototype.startsWith){
String.prototype.startsWith=function startsWith(thing){
return this.slice(0,thing.length)===thing;
};
}
if(!String.prototype.endsWith){
String.prototype.endsWith=function endsWith(thing){
return this.slice(-thing.length)===thing;
};
}
if(!String.prototype.trim){
String.prototype.trim=function trim(){
return this.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,'');
};
}
if(!Object.assign){
Object.assign=function assign(thing,rest){
for(var i=1;i<arguments.length;i++){
var source=arguments[i];
for(var _k in source){
thing[_k]=source[_k];
}
}
return thing;
};
}
if(!Object.values){
Object.values=function values(thing){
var out=[];
for(var _k2 in thing){
out.push(thing[_k2]);
}
return out;
};
}
if(!Object.keys){
Object.keys=function keys(thing){
var out=[];
for(var _k3 in thing){
out.push(_k3);
}
return out;
};
}
if(!Object.entries){
Object.entries=function entries(thing){
var out=[];
for(var _k4 in thing){
out.push([_k4,thing[_k4]]);
}
return out;
};
}
if(!Object.create){
Object.create=function(proto){
function F(){}
F.prototype=proto;
return new F();
};
}

if(typeof window==='undefined'){

global.window=global;
}else{

window.exports=window;
}

if(window.soundManager){
soundManager.setup({url:'https://play.pokemonshowdown.com/swf/'});
if(window.Replays)soundManager.onready(window.Replays.soundReady);
soundManager.onready(function(){
soundManager.createSound({
id:'notif',
url:'https://play.pokemonshowdown.com/audio/notification.wav'});

});
}


window.nodewebkit=!!(typeof process!=='undefined'&&process.versions&&process.versions['node-webkit']);

function getString(str){
if(typeof str==='string'||typeof str==='number')return''+str;
return'';
}

function toID(text){
if(text&&text.id){
text=text.id;
}else if(text&&text.userid){
text=text.userid;
}
if(typeof text!=='string'&&typeof text!=='number')return'';
return(''+text).toLowerCase().replace(/[^a-z0-9]+/g,'');
}

function toUserid(text){
return toID(text);
}





function toRoomid(roomid){
return roomid.replace(/[^a-zA-Z0-9-]+/g,'').toLowerCase();
}

function toName(name){
if(typeof name!=='string'&&typeof name!=='number')return'';
name=(''+name).replace(/[\|\s\[\]\,\u202e]+/g,' ').trim();
if(name.length>18)name=name.substr(0,18).trim();


name=name.replace(
/[\u0300-\u036f\u0483-\u0489\u0610-\u0615\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06ED\u0E31\u0E34-\u0E3A\u0E47-\u0E4E]{3,}/g,
'');

name=name.replace(/[\u239b-\u23b9]/g,'');

return name;
}













var Dex=new(_temp=function(){function _temp(){this.
gen=7;this.
modid='gen7';this.
cache=null;this.

statNames=['hp','atk','def','spa','spd','spe'];this.
statNamesExceptHP=['atk','def','spa','spd','spe'];this.

resourcePrefix=function(){
var prefix='';
if(!window.document||!document.location||document.location.protocol!=='http:')prefix='https:';
return prefix+'//play.pokemonshowdown.com/';
}();this.

fxPrefix=function(){
if(window.document&&document.location&&document.location.protocol==='file:'){
if(window.Replays)return'https://play.pokemonshowdown.com/fx/';
return'fx/';
}
return'//play.pokemonshowdown.com/fx/';
}();this.

loadedSpriteData={xy:1,bw:0};this.
moddedDexes={};}var _proto=_temp.prototype;_proto.

mod=function mod(modid){
if(modid==='gen7')return this;
if(!window.BattleTeambuilderTable)return this;
if(modid in this.moddedDexes){
return this.moddedDexes[modid];
}
this.moddedDexes[modid]=new ModdedDex(modid);
return this.moddedDexes[modid];
};_proto.
forGen=function forGen(gen){
return this.mod("gen"+gen);
};_proto.

resolveAvatar=function resolveAvatar(avatar){
if(window.BattleAvatarNumbers&&avatar in BattleAvatarNumbers){
avatar=BattleAvatarNumbers[avatar];
}
if(avatar.charAt(0)==='#'){
return Dex.resourcePrefix+'sprites/trainers-custom/'+toID(avatar.substr(1))+'.png';
}
if(avatar.includes('.')&&window.Config&&Config.server&&Config.server.registered){

var protocol=Config.server.port===443?'https':'http';
return protocol+'://'+Config.server.host+':'+Config.server.port+
'/avatars/'+encodeURIComponent(avatar).replace(/\%3F/g,'?');
}
return Dex.resourcePrefix+'sprites/trainers/'+Dex.sanitizeName(avatar||'unknown')+'.png';
};_proto.












sanitizeName=function sanitizeName(name){
if(!name)return'';
return(''+name).
replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;').replace(/"/g,'&quot;').
slice(0,50);
};_proto.

prefs=function prefs(prop,value,save){

if(window.Storage&&Storage.prefs)return Storage.prefs(prop,value,save);
return undefined;
};_proto.

getShortName=function getShortName(name){
var shortName=name.replace(/[^A-Za-z0-9]+$/,'');
if(shortName.indexOf('(')>=0){
shortName+=name.slice(shortName.length).replace(/[^\(\)]+/g,'').replace(/\(\)/g,'');
}
return shortName;
};_proto.

getEffect=function getEffect(name){
name=(name||'').trim();
if(name.substr(0,5)==='item:'){
return Dex.getItem(name.substr(5).trim());
}else if(name.substr(0,8)==='ability:'){
return Dex.getAbility(name.substr(8).trim());
}else if(name.substr(0,5)==='move:'){
return Dex.getMove(name.substr(5).trim());
}
var id=toID(name);
return new PureEffect(id,name);
};_proto.

getMove=function getMove(nameOrMove){
if(nameOrMove&&typeof nameOrMove!=='string'){

return nameOrMove;
}
var name=nameOrMove||'';
var id=toID(nameOrMove);
if(window.BattleAliases&&id in BattleAliases){
name=BattleAliases[id];
id=toID(name);
}
if(!window.BattleMovedex)window.BattleMovedex={};
var data=window.BattleMovedex[id];
if(data&&typeof data.exists==='boolean')return data;

if(!data&&id.substr(0,11)==='hiddenpower'&&id.length>11){var _ref=
/([a-z]*)([0-9]*)/.exec(id),hpWithType=_ref[1],hpPower=_ref[2];
data=Object.assign({},
window.BattleMovedex[hpWithType]||{},{
basePower:Number(hpPower)||60});

}
if(!data&&id.substr(0,6)==='return'&&id.length>6){
data=Object.assign({},
window.BattleMovedex['return']||{},{
basePower:Number(id.slice(6))});

}
if(!data&&id.substr(0,11)==='frustration'&&id.length>11){
data=Object.assign({},
window.BattleMovedex['frustration']||{},{
basePower:Number(id.slice(11))});

}

if(!data)data={exists:false};
var move=new Move(id,name,data);
window.BattleMovedex[id]=move;
return move;
};_proto.

getGen3Category=function getGen3Category(type){
return[
'Fire','Water','Grass','Electric','Ice','Psychic','Dark','Dragon'].
includes(type)?'Special':'Physical';
};_proto.

getItem=function getItem(nameOrItem){
if(nameOrItem&&typeof nameOrItem!=='string'){

return nameOrItem;
}
var name=nameOrItem||'';
var id=toID(nameOrItem);
if(window.BattleAliases&&id in BattleAliases){
name=BattleAliases[id];
id=toID(name);
}
if(!window.BattleItems)window.BattleItems={};
var data=window.BattleItems[id];
if(data&&typeof data.exists==='boolean')return data;
if(!data)data={exists:false};
var item=new Item(id,name,data);
window.BattleItems[id]=item;
return item;
};_proto.

getAbility=function getAbility(nameOrAbility){
if(nameOrAbility&&typeof nameOrAbility!=='string'){

return nameOrAbility;
}
var name=nameOrAbility||'';
var id=toID(nameOrAbility);
if(window.BattleAliases&&id in BattleAliases){
name=BattleAliases[id];
id=toID(name);
}
if(!window.BattleAbilities)window.BattleAbilities={};
var data=window.BattleAbilities[id];
if(data&&typeof data.exists==='boolean')return data;
if(!data)data={exists:false};
var ability=new Ability(id,name,data);
window.BattleAbilities[id]=ability;
return ability;
};_proto.

getTemplate=function getTemplate(nameOrTemplate){
if(nameOrTemplate&&typeof nameOrTemplate!=='string'){

return nameOrTemplate;
}
var name=nameOrTemplate||'';
var id=toID(nameOrTemplate);
var formid=id;
if(!window.BattlePokedexAltForms)window.BattlePokedexAltForms={};
if(formid in window.BattlePokedexAltForms)return window.BattlePokedexAltForms[formid];
if(window.BattleAliases&&id in BattleAliases){
name=BattleAliases[id];
id=toID(name);
}
if(!window.BattlePokedex)window.BattlePokedex={};
var data=window.BattlePokedex[id];

var template;
if(data&&typeof data.exists==='boolean'){
template=data;
}else{
if(!data)data={exists:false};
if(!data.tier&&id.slice(-5)==='totem'){
data.tier=this.getTemplate(id.slice(0,-5)).tier;
}
if(!data.tier&&data.baseSpecies&&toID(data.baseSpecies)!==id){
data.tier=this.getTemplate(data.baseSpecies).tier;
}
template=new Template(id,name,data);
window.BattlePokedex[id]=template;
}

if(formid===id||!template.otherForms||!template.otherForms.includes(formid)){
return template;
}
var forme=formid.slice(id.length);
forme=forme[0].toUpperCase()+forme.slice(1);
name=template.baseSpecies+(forme?'-'+forme:'');

template=window.BattlePokedexAltForms[formid]=new Template(formid,name,Object.assign({},
template,{
name:name,
forme:forme}));

return template;
};_proto.


getTier=function getTier(pokemon){var gen=arguments.length>1&&arguments[1]!==undefined?arguments[1]:7;var isDoubles=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;
if(gen<7)pokemon=this.forGen(gen).getTemplate(pokemon.id);
if(!isDoubles)return pokemon.tier;
var table=window.BattleTeambuilderTable;
if(table&&table["gen"+this.gen+"doubles"]){
table=table["gen"+this.gen+"doubles"];
}
if(!table)return pokemon.tier;

var id=pokemon.id;
if(id in table.overrideTier){
return table.overrideTier[id];
}
if(id.slice(-5)==='totem'&&id.slice(0,-5)in table.overrideTier){
return table.overrideTier[id.slice(0,-5)];
}
id=toID(pokemon.baseSpecies);
if(id in table.overrideTier){
return table.overrideTier[id];
}

return pokemon.tier;
};_proto.

getType=function getType(type){
if(!type||typeof type==='string'){
var id=toID(type);
id=id.substr(0,1).toUpperCase()+id.substr(1);
type=window.BattleTypeChart&&window.BattleTypeChart[id]||{};
if(type.damageTaken)type.exists=true;
if(!type.id)type.id=id;
if(!type.name)type.name=id;
if(!type.effectType){
type.effectType='Type';
}
}
return type;
};_proto.

hasAbility=function hasAbility(template,ability){
for(var i in template.abilities){

if(ability===template.abilities[i])return true;
}
return false;
};_proto.

loadSpriteData=function loadSpriteData(gen){
if(this.loadedSpriteData[gen])return;
this.loadedSpriteData[gen]=1;

var path=$('script[src*="pokedex-mini.js"]').attr('src')||'';
var qs='?'+(path.split('?')[1]||'');
path=(path.match(/.+?(?=data\/pokedex-mini\.js)/)||[])[0]||'';

var el=document.createElement('script');
el.src=path+'data/pokedex-mini-bw.js'+qs;
document.getElementsByTagName('body')[0].appendChild(el);
};_proto.
getSpriteData=function getSpriteData(pokemon,siden)

{var options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{gen:6};
if(!options.gen)options.gen=6;
if(pokemon instanceof Pokemon){
if(pokemon.volatiles.transform){
options.shiny=pokemon.volatiles.transform[2];
options.gender=pokemon.volatiles.transform[3];
}else{
options.shiny=pokemon.shiny;
options.gender=pokemon.gender;
}
pokemon=pokemon.getSpecies();
}
var template=Dex.getTemplate(pokemon);
var spriteData={
w:96,
h:96,
y:0,
url:Dex.resourcePrefix+'sprites/',
pixelated:true,
isBackSprite:false,
cryurl:'',
shiny:options.shiny};

var name=template.spriteid;
var dir;
var facing;
if(siden){
dir='';
facing='front';
}else{
spriteData.isBackSprite=true;
dir='-back';
facing='back';
}


var fieldGenNum=options.gen;
if(Dex.prefs('nopastgens'))fieldGenNum=6;
if(Dex.prefs('bwgfx')&&fieldGenNum>=6)fieldGenNum=5;
var genNum=Math.max(fieldGenNum,Math.min(template.gen,5));
var gen=['','rby','gsc','rse','dpp','bw','xy','xy'][genNum];

var animationData=null;
var miscData=null;
var speciesid=template.speciesid;
if(template.isTotem)speciesid=toID(name);
if(gen==='xy'&&window.BattlePokemonSprites){
animationData=BattlePokemonSprites[speciesid];
}
if(gen==='bw'&&window.BattlePokemonSpritesBW){
animationData=BattlePokemonSpritesBW[speciesid];
}
if(window.BattlePokemonSprites)miscData=BattlePokemonSprites[speciesid];
if(!miscData&&window.BattlePokemonSpritesBW)miscData=BattlePokemonSpritesBW[speciesid];
if(!animationData)animationData={};
if(!miscData)miscData={};

if(miscData.num>0){
var baseSpeciesid=toID(template.baseSpecies);
spriteData.cryurl='audio/cries/'+baseSpeciesid;
var formeid=template.formeid;
if(template.isMega||formeid&&(
formeid==='-sky'||
formeid==='-therian'||
formeid==='-primal'||
formeid==='-eternal'||
baseSpeciesid==='kyurem'||
baseSpeciesid==='necrozma'||
formeid==='-super'||
formeid==='-unbound'||
formeid==='-midnight'||
formeid==='-school'||
baseSpeciesid==='oricorio'||
baseSpeciesid==='zygarde'))
{
spriteData.cryurl+=formeid;
}
spriteData.cryurl+=window.nodewebkit?'.ogg':'.mp3';
}

if(options.shiny&&options.gen>1)dir+='-shiny';


if(window.Config&&Config.server&&Config.server.afd||options.afd){
dir='afd'+dir;
spriteData.url+=dir+'/'+name+'.png';
return spriteData;
}


if(options.mod){
spriteData.cryurl="sprites/"+options.mod+"/audio/"+toID(template.baseSpecies);
spriteData.cryurl+=window.nodewebkit?'.ogg':'.mp3';
}

if(animationData[facing+'f']&&options.gender==='F')facing+='f';
var allowAnim=!Dex.prefs('noanim')&&!Dex.prefs('nogif');
if(allowAnim&&genNum>=6)spriteData.pixelated=false;
if(allowAnim&&animationData[facing]&&genNum>=5){
if(facing.slice(-1)==='f')name+='-f';
dir=gen+'ani'+dir;

spriteData.w=animationData[facing].w;
spriteData.h=animationData[facing].h;
spriteData.url+=dir+'/'+name+'.gif';
}else{


if(gen==='xy')gen='bw';
dir=gen+dir;



if(genNum>=4&&miscData['frontf']&&options.gender==='F'){
name+='-f';
}

spriteData.url+=dir+'/'+name+'.png';
}

if(!options.noScale){
if(fieldGenNum>5){

}else if(!spriteData.isBackSprite||fieldGenNum===5){
spriteData.w*=2;
spriteData.h*=2;
spriteData.y+=-16;
}else{

spriteData.w*=2/1.5;
spriteData.h*=2/1.5;
spriteData.y+=-11;
}
if(fieldGenNum===5)spriteData.y=-35;
if(fieldGenNum===5&&spriteData.isBackSprite)spriteData.y+=40;
if(genNum<=2)spriteData.y+=2;
}
if(template.isTotem&&!options.noScale){
spriteData.w*=1.5;
spriteData.h*=1.5;
spriteData.y+=-11;
}

return spriteData;
};_proto.

getPokemonIcon=function getPokemonIcon(pokemon,facingLeft){
var num=0;
if(pokemon==='pokeball'){
return'background:transparent url('+Dex.resourcePrefix+'sprites/smicons-pokeball-sheet.png) no-repeat scroll -0px 4px';
}else if(pokemon==='pokeball-statused'){
return'background:transparent url('+Dex.resourcePrefix+'sprites/smicons-pokeball-sheet.png) no-repeat scroll -40px 4px';
}else if(pokemon==='pokeball-fainted'){
return'background:transparent url('+Dex.resourcePrefix+'sprites/smicons-pokeball-sheet.png) no-repeat scroll -80px 4px;opacity:.4;filter:contrast(0)';
}else if(pokemon==='pokeball-none'){
return'background:transparent url('+Dex.resourcePrefix+'sprites/smicons-pokeball-sheet.png) no-repeat scroll -80px 4px';
}
var id=toID(pokemon);
if(pokemon&&pokemon.species)id=toID(pokemon.species);
if(pokemon&&pokemon.volatiles&&pokemon.volatiles.formechange&&!pokemon.volatiles.transform){
id=toID(pokemon.volatiles.formechange[1]);
}
if(pokemon&&pokemon.num){
num=pokemon.num;
}else if(window.BattlePokemonSprites&&BattlePokemonSprites[id]&&BattlePokemonSprites[id].num){
num=BattlePokemonSprites[id].num;
}else if(window.BattlePokedex&&window.BattlePokedex[id]&&BattlePokedex[id].num){
num=BattlePokedex[id].num;
}
if(num<0)num=0;
if(num>809)num=0;

if(BattlePokemonIconIndexes[id]){
num=BattlePokemonIconIndexes[id];
}

if(pokemon&&pokemon.gender==='F'){
if(id==='unfezant'||id==='frillish'||id==='jellicent'||id==='meowstic'||id==='pyroar'){
num=BattlePokemonIconIndexes[id+'f'];
}
}

if(facingLeft){
if(BattlePokemonIconIndexesLeft[id]){
num=BattlePokemonIconIndexesLeft[id];
}
}

var top=Math.floor(num/12)*30;
var left=num%12*40;
var fainted=pokemon&&pokemon.fainted?';opacity:.3;filter:grayscale(100%) brightness(.5)':'';
return'background:transparent url('+Dex.resourcePrefix+'sprites/smicons-sheet.png?a6) no-repeat scroll -'+left+'px -'+top+'px'+fainted;
};_proto.

getTeambuilderSprite=function getTeambuilderSprite(pokemon){var gen=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;
if(!pokemon)return'';
var id=toID(pokemon.species);
var spriteid=pokemon.spriteid;
var template=Dex.getTemplate(pokemon.species);
if(pokemon.species&&!spriteid){
spriteid=template.spriteid||toID(pokemon.species);
}
if(Dex.getTemplate(pokemon.species).exists===false){
return'background-image:url('+Dex.resourcePrefix+'sprites/bw/0.png);background-position:10px 5px;background-repeat:no-repeat';
}
var shiny=pokemon.shiny?'-shiny':'';











if(Dex.prefs('nopastgens'))gen=6;
var spriteDir=Dex.resourcePrefix+'sprites/xydex';
if((!gen||gen>=6)&&!template.isNonstandard&&!Dex.prefs('bwgfx')){
var offset='-2px -3px';
if(template.gen>=7)offset='-6px -7px';
if(id.substr(0,6)==='arceus')offset='-2px 7px';
if(id==='garchomp')offset='-2px 2px';
if(id==='garchompmega')offset='-2px 0px';
return'background-image:url('+spriteDir+shiny+'/'+spriteid+'.png);background-position:'+offset+';background-repeat:no-repeat';
}
spriteDir=Dex.resourcePrefix+'sprites/bw';
if(gen<=1&&template.gen<=1)spriteDir=Dex.resourcePrefix+'sprites/rby';else
if(gen<=2&&template.gen<=2)spriteDir=Dex.resourcePrefix+'sprites/gsc';else
if(gen<=3&&template.gen<=3)spriteDir=Dex.resourcePrefix+'sprites/rse';else
if(gen<=4&&template.gen<=4)spriteDir=Dex.resourcePrefix+'sprites/dpp';
return'background-image:url('+spriteDir+shiny+'/'+spriteid+'.png);background-position:10px 5px;background-repeat:no-repeat';
};_proto.

getItemIcon=function getItemIcon(item){
var num=0;
if(typeof item==='string'&&exports.BattleItems)item=exports.BattleItems[toID(item)];
if(item&&item.spritenum)num=item.spritenum;

var top=Math.floor(num/16)*24;
var left=num%16*24;
return'background:transparent url('+Dex.resourcePrefix+'sprites/itemicons-sheet.png) no-repeat scroll -'+left+'px -'+top+'px';
};_proto.

getTypeIcon=function getTypeIcon(type,b){
if(!type)return'';
var sanitizedType=type.replace(/\?/g,'%3f');
return'<img src="'+Dex.resourcePrefix+'sprites/types/'+sanitizedType+'.png" alt="'+type+'" height="14" width="32"'+(b?' class="b"':'')+' />';
};return _temp;}(),_temp)();var


ModdedDex=function(){








function ModdedDex(modid){this.cache={Moves:{},Items:{},Templates:{}};this.getAbility=Dex.getAbility;
this.modid=modid;
var gen=parseInt(modid.slice(3),10);
if(!modid.startsWith('gen')||!gen)throw new Error("Unsupported modid");
this.gen=gen;
}var _proto2=ModdedDex.prototype;_proto2.
getMove=function getMove(name){
var id=toID(name);
if(window.BattleAliases&&id in BattleAliases){
name=BattleAliases[id];
id=toID(name);
}
if(this.cache.Moves.hasOwnProperty(id))return this.cache.Moves[id];

var data=Object.assign({},Dex.getMove(name));

var table=window.BattleTeambuilderTable[this.modid];
if(id in table.overrideAcc)data.accuracy=table.overrideAcc[id];
if(id in table.overrideBP)data.basePower=table.overrideBP[id];
if(id in table.overridePP)data.pp=table.overridePP[id];
if(id in table.overrideMoveType)data.type=table.overrideMoveType[id];
for(var i=this.gen;i<7;i++){
if(id in window.BattleTeambuilderTable['gen'+i].overrideMoveDesc){
data.shortDesc=window.BattleTeambuilderTable['gen'+i].overrideMoveDesc[id];
break;
}
}
if(this.gen<=3&&data.category!=='Status'){
data.category=Dex.getGen3Category(data.type);
}

var move=new Move(id,name,data);
this.cache.Moves[id]=move;
return move;
};_proto2.
getItem=function getItem(name){
var id=toID(name);
if(window.BattleAliases&&id in BattleAliases){
name=BattleAliases[id];
id=toID(name);
}
if(this.cache.Items.hasOwnProperty(id))return this.cache.Items[id];

var data=Object.assign({},Dex.getItem(name));

for(var i=this.gen;i<7;i++){
if(id in window.BattleTeambuilderTable['gen'+i].overrideItemDesc){
data.shortDesc=window.BattleTeambuilderTable['gen'+i].overrideItemDesc[id];
break;
}
}

var item=new Item(id,name,data);
this.cache.Items[id]=item;
return item;
};_proto2.
getTemplate=function getTemplate(name){
var id=toID(name);
if(window.BattleAliases&&id in BattleAliases){
name=BattleAliases[id];
id=toID(name);
}
if(this.cache.Templates.hasOwnProperty(id))return this.cache.Templates[id];

var data=Object.assign({},Dex.getTemplate(name));

var table=window.BattleTeambuilderTable[this.modid];
if(this.gen<3){
data.abilities={0:"None"};
}else{
var abilities=Object.assign({},data.abilities);
if(id in table.overrideAbility){
abilities['0']=table.overrideAbility[id];
}
if(id in table.removeSecondAbility){
delete abilities['1'];
}
if(id in table.overrideHiddenAbility){
abilities['H']=table.overrideHiddenAbility[id];
}
if(this.gen<5)delete abilities['H'];
if(this.gen<7)delete abilities['S'];

data.abilities=abilities;
}
if(id in table.overrideStats){
data.baseStats=Object.assign({},data.baseStats,table.overrideStats[id]);
}
if(id in table.overrideType)data.types=table.overrideType[id].split('/');

if(id in table.overrideTier)data.tier=table.overrideTier[id];
if(!data.tier&&id.slice(-5)==='totem'){
data.tier=this.getTemplate(id.slice(0,-5)).tier;
}
if(!data.tier&&data.baseSpecies&&toID(data.baseSpecies)!==id){
data.tier=this.getTemplate(data.baseSpecies).tier;
}
if(data.gen>this.gen)data.tier='Illegal';

var template=new Template(id,name,data);
this.cache.Templates[id]=template;
return template;
};return ModdedDex;}();


if(typeof require==='function'){

global.Dex=Dex;
global.toID=toID;
}/**
 * Pokemon Showdown Dex Data
 *
 * A collection of data and definitions for src/battle-dex.ts.
 *
 * Larger data has their own files in data/, so this is just for small
 * miscellaneous data that doesn't need its own file.
 *
 * Licensing note: PS's client has complicated licensing:
 * - The client as a whole is AGPLv3
 * - The battle replay/animation engine (battle-*.ts) by itself is MIT
 *
 * @author Guangcong Luo <guangcongluo@gmail.com>
 * @license MIT
 */






var BattleNatures={
Adamant:{
plus:'atk',
minus:'spa'},

Bashful:{},
Bold:{
plus:'def',
minus:'atk'},

Brave:{
plus:'atk',
minus:'spe'},

Calm:{
plus:'spd',
minus:'atk'},

Careful:{
plus:'spd',
minus:'spa'},

Docile:{},
Gentle:{
plus:'spd',
minus:'def'},

Hardy:{},
Hasty:{
plus:'spe',
minus:'def'},

Impish:{
plus:'def',
minus:'spa'},

Jolly:{
plus:'spe',
minus:'spa'},

Lax:{
plus:'def',
minus:'spd'},

Lonely:{
plus:'atk',
minus:'def'},

Mild:{
plus:'spa',
minus:'def'},

Modest:{
plus:'spa',
minus:'atk'},

Naive:{
plus:'spe',
minus:'spd'},

Naughty:{
plus:'atk',
minus:'spd'},

Quiet:{
plus:'spa',
minus:'spe'},

Quirky:{},
Rash:{
plus:'spa',
minus:'spd'},

Relaxed:{
plus:'def',
minus:'spe'},

Sassy:{
plus:'spd',
minus:'spe'},

Serious:{},
Timid:{
plus:'spe',
minus:'atk'}};


var BattleStatIDs={
HP:'hp',
hp:'hp',
Atk:'atk',
atk:'atk',
Def:'def',
def:'def',
SpA:'spa',
SAtk:'spa',
SpAtk:'spa',
spa:'spa',
spc:'spa',
Spc:'spa',
SpD:'spd',
SDef:'spd',
SpDef:'spd',
spd:'spd',
Spe:'spe',
Spd:'spe',
spe:'spe'};

var BattlePOStatNames={
hp:'HP',
atk:'Atk',
def:'Def',
spa:'SAtk',
spd:'SDef',
spe:'Spd'};

var BattleStatNames={
hp:'HP',
atk:'Atk',
def:'Def',
spa:'SpA',
spd:'SpD',
spe:'Spe'};

var BattleStats={
hp:'HP',
atk:'Attack',
def:'Defense',
spa:'Special Attack',
spd:'Special Defense',
spe:'Speed',
accuracy:'accuracy',
evasion:'evasiveness',
spc:'Special'};


var BattleBaseSpeciesChart=[
'pikachu',
'pichu',
'unown',
'castform',
'deoxys',
'burmy',
'wormadam',
'cherrim',
'shellos',
'gastrodon',
'rotom',
'giratina',
'shaymin',
'arceus',
'basculin',
'darmanitan',
'deerling',
'sawsbuck',
'tornadus',
'thundurus',
'landorus',
'kyurem',
'keldeo',
'meloetta',
'genesect',
'vivillon',
'flabebe',
'floette',
'florges',
'furfrou',
'aegislash',
'pumpkaboo',
'gourgeist',
'meowstic',
'hoopa',
'zygarde',
'lycanroc',
'wishiwashi',
'minior',
'mimikyu',
'greninja',
'oricorio',
'silvally',
'necrozma',


'raticate',
'marowak',
'kommoo',


'charizard',
'mewtwo'];



var BattlePokemonIconIndexes={
egg:816+1,
pikachubelle:816+2,
pikachulibre:816+3,
pikachuphd:816+4,
pikachupopstar:816+5,
pikachurockstar:816+6,
pikachucosplay:816+7,

castformrainy:816+35,
castformsnowy:816+36,
castformsunny:816+37,
deoxysattack:816+38,
deoxysdefense:816+39,
deoxysspeed:816+40,
burmysandy:816+41,
burmytrash:816+42,
wormadamsandy:816+43,
wormadamtrash:816+44,
cherrimsunshine:816+45,
shelloseast:816+46,
gastrodoneast:816+47,
rotomfan:816+48,
rotomfrost:816+49,
rotomheat:816+50,
rotommow:816+51,
rotomwash:816+52,
giratinaorigin:816+53,
shayminsky:816+54,
unfezantf:816+55,
basculinbluestriped:816+56,
darmanitanzen:816+57,
deerlingautumn:816+58,
deerlingsummer:816+59,
deerlingwinter:816+60,
sawsbuckautumn:816+61,
sawsbucksummer:816+62,
sawsbuckwinter:816+63,
frillishf:816+64,
jellicentf:816+65,
tornadustherian:816+66,
thundurustherian:816+67,
landorustherian:816+68,
kyuremblack:816+69,
kyuremwhite:816+70,
keldeoresolute:816+71,
meloettapirouette:816+72,
vivillonarchipelago:816+73,
vivilloncontinental:816+74,
vivillonelegant:816+75,
vivillonfancy:816+76,
vivillongarden:816+77,
vivillonhighplains:816+78,
vivillonicysnow:816+79,
vivillonjungle:816+80,
vivillonmarine:816+81,
vivillonmodern:816+82,
vivillonmonsoon:816+83,
vivillonocean:816+84,
vivillonpokeball:816+85,
vivillonpolar:816+86,
vivillonriver:816+87,
vivillonsandstorm:816+88,
vivillonsavanna:816+89,
vivillonsun:816+90,
vivillontundra:816+91,
pyroarf:816+92,
flabebeblue:816+93,
flabebeorange:816+94,
flabebewhite:816+95,
flabebeyellow:816+96,
floetteblue:816+97,
floetteeternal:816+98,
floetteorange:816+99,
floettewhite:816+100,
floetteyellow:816+101,
florgesblue:816+102,
florgesorange:816+103,
florgeswhite:816+104,
florgesyellow:816+105,
furfroudandy:816+106,
furfroudebutante:816+107,
furfroudiamond:816+108,
furfrouheart:816+109,
furfroukabuki:816+110,
furfroulareine:816+111,
furfroumatron:816+112,
furfroupharaoh:816+113,
furfroustar:816+114,
meowsticf:816+115,
aegislashblade:816+116,
hoopaunbound:816+118,
rattataalola:816+119,
raticatealola:816+120,
raichualola:816+121,
sandshrewalola:816+122,
sandslashalola:816+123,
vulpixalola:816+124,
ninetalesalola:816+125,
diglettalola:816+126,
dugtrioalola:816+127,
meowthalola:816+128,
persianalola:816+129,
geodudealola:816+130,
graveleralola:816+131,
golemalola:816+132,
grimeralola:816+133,
mukalola:816+134,
exeggutoralola:816+135,
marowakalola:816+136,
greninjaash:816+137,
zygarde10:816+138,
zygardecomplete:816+139,
oricoriopompom:816+140,
oricoriopau:816+141,
oricoriosensu:816+142,
lycanrocmidnight:816+143,
wishiwashischool:816+144,
miniormeteor:816+145,
miniororange:816+146,
minioryellow:816+147,
miniorgreen:816+148,
miniorblue:816+149,
miniorviolet:816+150,
miniorindigo:816+151,
magearnaoriginal:816+152,
pikachuoriginal:816+153,
pikachuhoenn:816+154,
pikachusinnoh:816+155,
pikachuunova:816+156,
pikachukalos:816+157,
pikachualola:816+158,
pikachupartner:816+159,
lycanrocdusk:816+160,
necrozmaduskmane:816+161,
necrozmadawnwings:816+162,
necrozmaultra:816+163,
pikachustarter:816+164,
eeveestarter:816+165,

gumshoostotem:735,
raticatealolatotem:816+120,
marowakalolatotem:816+136,
araquanidtotem:752,
lurantistotem:754,
salazzletotem:758,
vikavolttotem:738,
togedemarutotem:777,
mimikyutotem:778,
mimikyubustedtotem:778,
ribombeetotem:743,
kommoototem:784,

venusaurmega:984+0,
charizardmegax:984+1,
charizardmegay:984+2,
blastoisemega:984+3,
beedrillmega:984+4,
pidgeotmega:984+5,
alakazammega:984+6,
slowbromega:984+7,
gengarmega:984+8,
kangaskhanmega:984+9,
pinsirmega:984+10,
gyaradosmega:984+11,
aerodactylmega:984+12,
mewtwomegax:984+13,
mewtwomegay:984+14,
ampharosmega:984+15,
steelixmega:984+16,
scizormega:984+17,
heracrossmega:984+18,
houndoommega:984+19,
tyranitarmega:984+20,
sceptilemega:984+21,
blazikenmega:984+22,
swampertmega:984+23,
gardevoirmega:984+24,
sableyemega:984+25,
mawilemega:984+26,
aggronmega:984+27,
medichammega:984+28,
manectricmega:984+29,
sharpedomega:984+30,
cameruptmega:984+31,
altariamega:984+32,
banettemega:984+33,
absolmega:984+34,
glaliemega:984+35,
salamencemega:984+36,
metagrossmega:984+37,
latiasmega:984+38,
latiosmega:984+39,
kyogreprimal:984+40,
groudonprimal:984+41,
rayquazamega:984+42,
lopunnymega:984+43,
garchompmega:984+44,
lucariomega:984+45,
abomasnowmega:984+46,
gallademega:984+47,
audinomega:984+48,
dianciemega:984+49,

syclant:1152+0,
revenankh:1152+1,
pyroak:1152+2,
fidgit:1152+3,
stratagem:1152+4,
arghonaut:1152+5,
kitsunoh:1152+6,
cyclohm:1152+7,
colossoil:1152+8,
krilowatt:1152+9,
voodoom:1152+10,
tomohawk:1152+11,
necturna:1152+12,
mollux:1152+13,
aurumoth:1152+14,
malaconda:1152+15,
cawmodore:1152+16,
volkraken:1152+17,
plasmanta:1152+18,
naviathan:1152+19,
crucibelle:1152+20,
crucibellemega:1152+21,
kerfluffle:1152+22,
pajantom:1152+23,
jumbao:1152+24,
caribolt:1152+25,
smokomodo:1152+26,
snaelstrom:1152+27,
equilibra:1152+28,

syclar:1188+0,
embirch:1188+1,
flarelm:1188+2,
breezi:1188+3,
scratchet:1188+4,
necturine:1188+5,
cupra:1188+6,
argalis:1188+7,
brattler:1188+8,
cawdet:1188+9,
volkritter:1188+10,
snugglow:1188+11,
floatoy:1188+12,
caimanoe:1188+13,
pluffle:1188+14,
rebble:1188+15,
tactite:1188+16,
privatyke:1188+17,
nohface:1188+18,
monohm:1188+19,
duohm:1188+20,

voodoll:1188+22,
mumbao:1188+23,
fawnifer:1188+24,
electrelk:1188+25,
smogecko:1188+26,
smoguana:1188+27,
swirlpool:1188+28,
coribalis:1188+29};


var BattlePokemonIconIndexesLeft={
pikachubelle:1044+0,
pikachupopstar:1044+1,
clefairy:1044+2,
clefable:1044+3,
jigglypuff:1044+4,
wigglytuff:1044+5,
dugtrioalola:1044+6,
poliwhirl:1044+7,
poliwrath:1044+8,
mukalola:1044+9,
kingler:1044+10,
croconaw:1044+11,
cleffa:1044+12,
igglybuff:1044+13,
politoed:1044+14,

sneasel:1044+35,
teddiursa:1044+36,
roselia:1044+37,
zangoose:1044+38,
seviper:1044+39,
castformrainy:1044+40,
absolmega:1044+41,
absol:1044+42,
regirock:1044+43,
torterra:1044+44,
budew:1044+45,
roserade:1044+46,
magmortar:1044+47,
togekiss:1044+48,
rotomwash:1044+49,
shayminsky:1044+50,
emboar:1044+51,
pansear:1044+52,
simisear:1044+53,
drilbur:1044+54,
excadrill:1044+55,
sawk:1044+56,
lilligant:1044+57,
garbodor:1044+58,
solosis:1044+59,
vanilluxe:1044+60,
amoonguss:1044+61,
klink:1044+62,
klang:1044+63,
klinklang:1044+64,
litwick:1044+65,
golett:1044+66,
golurk:1044+67,
kyuremblack:1044+68,
kyuremwhite:1044+69,
kyurem:1044+70,
keldeoresolute:1044+71,
meloetta:1044+72,
greninja:1044+73,
greninjaash:1044+74,
furfroudebutante:1044+75,
barbaracle:1044+76,
clauncher:1044+77,
clawitzer:1044+78,
sylveon:1044+79,
klefki:1044+80,
zygarde:1044+81,
zygarde10:1044+82,
zygardecomplete:1044+83,
dartrix:1044+84,
steenee:1044+85,
tsareena:1044+86,
comfey:1044+87,
miniormeteor:1044+88,
minior:1044+89,
miniororange:1044+90,
minioryellow:1044+91,
miniorgreen:1044+92,
miniorblue:1044+93,
miniorviolet:1044+94,
miniorindigo:1044+95,
dhelmise:1044+96,
necrozma:1044+97,
marshadow:1044+98,
pikachuoriginal:1044+99,
pikachupartner:1044+100,
necrozmaduskmane:1044+101,
necrozmadawnwings:1044+102,
necrozmaultra:1044+103,
stakataka:1044+104,
blacephalon:1044+105};


var BattleAvatarNumbers={
1:'lucas',
2:'dawn',
3:'youngster-gen4',
4:'lass-gen4dp',
5:'camper',
6:'picnicker',
7:'bugcatcher',
8:'aromalady',
9:'twins-gen4dp',
10:'hiker-gen4',
11:'battlegirl-gen4',
12:'fisherman-gen4',
13:'cyclist-gen4',
14:'cyclistf-gen4',
15:'blackbelt-gen4dp',
16:'artist-gen4',
17:'pokemonbreeder-gen4',
18:'pokemonbreederf-gen4',
19:'cowgirl',
20:'jogger',
21:'pokefan-gen4',
22:'pokefanf-gen4',
23:'pokekid',
24:'youngcouple-gen4dp',
25:'acetrainer-gen4dp',
26:'acetrainerf-gen4dp',
27:'waitress-gen4',
28:'veteran-gen4',
29:'ninjaboy',
30:'dragontamer',
31:'birdkeeper-gen4dp',
32:'doubleteam',
33:'richboy-gen4',
34:'lady-gen4',
35:'gentleman-gen4dp',
36:'madame-gen4dp',
37:'beauty-gen4dp',
38:'collector',
39:'policeman-gen4',
40:'pokemonranger-gen4',
41:'pokemonrangerf-gen4',
42:'scientist-gen4dp',
43:'swimmer-gen4dp',
44:'swimmerf-gen4dp',
45:'tuber',
46:'tuberf',
47:'sailor',
48:'sisandbro',
49:'ruinmaniac',
50:'psychic-gen4',
51:'psychicf-gen4',
52:'gambler',
53:'guitarist-gen4',
54:'acetrainersnow',
55:'acetrainersnowf',
56:'skier',
57:'skierf-gen4dp',
58:'roughneck-gen4',
59:'clown',
60:'worker-gen4',
61:'schoolkid-gen4dp',
62:'schoolkidf-gen4',
63:'roark',
64:'barry',
65:'byron',
66:'aaron',
67:'bertha',
68:'flint',
69:'lucian',
70:'cynthia-gen4',
71:'bellepa',
72:'rancher',
73:'mars',
74:'galacticgrunt',
75:'gardenia',
76:'crasherwake',
77:'maylene',
78:'fantina',
79:'candice',
80:'volkner',
81:'parasollady-gen4',
82:'waiter-gen4dp',
83:'interviewers',
84:'cameraman',
85:'reporter',
86:'idol',
87:'cyrus',
88:'jupiter',
89:'saturn',
90:'galacticgruntf',
91:'argenta',
92:'palmer',
93:'thorton',
94:'buck',
95:'darach',
96:'marley',
97:'mira',
98:'cheryl',
99:'riley',
100:'dahlia',
101:'ethan',
102:'lyra',
103:'twins-gen4',
104:'lass-gen4',
105:'acetrainer-gen4',
106:'acetrainerf-gen4',
107:'juggler',
108:'sage',
109:'li',
110:'gentleman-gen4',
111:'teacher',
112:'beauty',
113:'birdkeeper',
114:'swimmer-gen4',
115:'swimmerf-gen4',
116:'kimonogirl',
117:'scientist-gen4',
118:'acetrainercouple',
119:'youngcouple',
120:'supernerd',
121:'medium',
122:'schoolkid-gen4',
123:'blackbelt-gen4',
124:'pokemaniac',
125:'firebreather',
126:'burglar',
127:'biker-gen4',
128:'skierf',
129:'boarder',
130:'rocketgrunt',
131:'rocketgruntf',
132:'archer',
133:'ariana',
134:'proton',
135:'petrel',
136:'eusine',
137:'lucas-gen4pt',
138:'dawn-gen4pt',
139:'madame-gen4',
140:'waiter-gen4',
141:'falkner',
142:'bugsy',
143:'whitney',
144:'morty',
145:'chuck',
146:'jasmine',
147:'pryce',
148:'clair',
149:'will',
150:'koga',
151:'bruno',
152:'karen',
153:'lance',
154:'brock',
155:'misty',
156:'ltsurge',
157:'erika',
158:'janine',
159:'sabrina',
160:'blaine',
161:'blue',
162:'red',
163:'red',
164:'silver',
165:'giovanni',
166:'unknownf',
167:'unknown',
168:'unknown',
169:'hilbert',
170:'hilda',
171:'youngster',
172:'lass',
173:'schoolkid',
174:'schoolkidf',
175:'smasher',
176:'linebacker',
177:'waiter',
178:'waitress',
179:'chili',
180:'cilan',
181:'cress',
182:'nurseryaide',
183:'preschoolerf',
184:'preschooler',
185:'twins',
186:'pokemonbreeder',
187:'pokemonbreederf',
188:'lenora',
189:'burgh',
190:'elesa',
191:'clay',
192:'skyla',
193:'pokemonranger',
194:'pokemonrangerf',
195:'worker',
196:'backpacker',
197:'backpackerf',
198:'fisherman',
199:'musician',
200:'dancer',
201:'harlequin',
202:'artist',
203:'baker',
204:'psychic',
205:'psychicf',
206:'cheren',
207:'bianca',
208:'plasmagrunt-gen5bw',
209:'n',
210:'richboy',
211:'lady',
212:'pilot',
213:'workerice',
214:'hoopster',
215:'scientistf',
216:'clerkf',
217:'acetrainerf',
218:'acetrainer',
219:'blackbelt',
220:'scientist',
221:'striker',
222:'brycen',
223:'iris',
224:'drayden',
225:'roughneck',
226:'janitor',
227:'pokefan',
228:'pokefanf',
229:'doctor',
230:'nurse',
231:'hooligans',
232:'battlegirl',
233:'parasollady',
234:'clerk',
235:'clerk-boss',
236:'backers',
237:'backersf',
238:'veteran',
239:'veteranf',
240:'biker',
241:'infielder',
242:'hiker',
243:'madame',
244:'gentleman',
245:'plasmagruntf-gen5bw',
246:'shauntal',
247:'marshal',
248:'grimsley',
249:'caitlin',
250:'ghetsis-gen5bw',
251:'depotagent',
252:'swimmer',
253:'swimmerf',
254:'policeman',
255:'maid',
256:'ingo',
257:'alder',
258:'cyclist',
259:'cyclistf',
260:'cynthia',
261:'emmet',
262:'hilbert-dueldisk',
263:'hilda-dueldisk',
264:'hugh',
265:'rosa',
266:'nate',
267:'colress',
268:'beauty-gen5bw2',
269:'ghetsis',
270:'plasmagrunt',
271:'plasmagruntf',
272:'iris-gen5bw2',
273:'brycenman',
274:'shadowtriad',
275:'rood',
276:'zinzolin',
277:'cheren-gen5bw2',
278:'marlon',
279:'roxie',
280:'roxanne',
281:'brawly',
282:'wattson',
283:'flannery',
284:'norman',
285:'winona',
286:'tate',
287:'liza',
288:'juan',
289:'guitarist',
290:'steven',
291:'wallace',
292:'bellelba',
293:'benga',
294:'ash',
'#bw2elesa':'elesa-gen5bw2',
'#teamrocket':'teamrocket',
'#yellow':'yellow',
'#zinnia':'zinnia',
'#clemont':'clemont',
'#wally':'wally',
breeder:'pokemonbreeder',
breederf:'pokemonbreederf',

1001:'#1001',
1002:'#1002',
1003:'#1003',
1005:'#1005',
1010:'#1010'};var

























PureEffect=





function PureEffect(id,name){this.effectType='PureEffect';
this.id=id;
this.name=name;
this.gen=0;
this.exists=false;
};var


Item=
























function Item(id,name,data){this.effectType='Item';
if(!data||typeof data!=='object')data={};
if(data.name)name=data.name;
this.name=Dex.sanitizeName(name);
this.id=id;
this.gen=data.gen||0;
this.exists='exists'in data?!!data.exists:true;

this.num=data.num||0;
this.spritenum=data.spritenum||0;
this.desc=data.desc||data.shortDesc||'';
this.shortDesc=data.shortDesc||this.desc;

this.megaStone=data.megaStone||'';
this.megaEvolves=data.megaEvolves||'';
this.zMove=data.zMove||null;
this.zMoveType=data.zMoveType||'';
this.zMoveFrom=data.zMoveFrom||'';
this.zMoveUser=data.zMoveUser||null;
this.onPlate=data.onPlate||'';
this.onMemory=data.onMemory||'';
this.onDrive=data.onDrive||'';
this.fling=data.fling||null;
this.naturalGift=data.naturalGift||null;

if(!this.gen){
if(this.num>=577){
this.gen=6;
}else if(this.num>=537){
this.gen=5;
}else if(this.num>=377){
this.gen=4;
}else{
this.gen=3;
}
}
};var















































Move=





































function Move(id,name,data){this.effectType='Move';
if(!data||typeof data!=='object')data={};
if(data.name)name=data.name;
this.name=Dex.sanitizeName(name);
this.id=id;
this.gen=data.gen||0;
this.exists='exists'in data?!!data.exists:true;

this.basePower=data.basePower||0;
this.accuracy=data.accuracy||0;
this.pp=data.pp||1;
this.type=data.type||'???';
this.category=data.category||'Physical';
this.priority=data.priority||0;
this.target=data.target||'normal';
this.flags=data.flags||{};
this.critRatio=data.critRatio===0?0:data.critRatio||1;


this.desc=data.desc;
this.shortDesc=data.shortDesc;
this.isViable=!!data.isViable;
this.isNonstandard=!!data.isNonstandard;
this.isZ=data.isZ||'';
this.zMovePower=data.zMovePower||0;
this.zMoveEffect=data.zMoveEffect||'';
this.zMoveBoost=data.zMoveBoost||null;
this.ohko=data.ohko||null;
this.recoil=data.recoil||null;
this.heal=data.heal||null;
this.hasCustomRecoil=data.hasCustomRecoil||false;
this.noPPBoosts=data.noPPBoosts||false;
this.secondaries=data.secondaries||(data.secondary?[data.secondary]:null);

this.num=data.num||0;
if(!this.gen){
if(this.num>=560){
this.gen=6;
}else if(this.num>=468){
this.gen=5;
}else if(this.num>=355){
this.gen=4;
}else if(this.num>=252){
this.gen=3;
}else if(this.num>=166){
this.gen=2;
}else if(this.num>=1){
this.gen=1;
}
}
};var


Ability=











function Ability(id,name,data){this.effectType='Ability';
if(!data||typeof data!=='object')data={};
if(data.name)name=data.name;
this.name=Dex.sanitizeName(name);
this.id=id;
this.gen=data.gen||0;
this.exists='exists'in data?!!data.exists:true;
this.num=data.num||0;
this.shortDesc=data.shortDesc||data.desc||'';
this.desc=data.desc||data.shortDesc||'';
if(!this.gen){
if(this.num>=165){
this.gen=6;
}else if(this.num>=124){
this.gen=5;
}else if(this.num>=77){
this.gen=4;
}else if(this.num>=1){
this.gen=3;
}
}
};var


Template=



















































function Template(id,name,data){this.effectType='Template';
if(!data||typeof data!=='object')data={};
if(data.name||data.species)name=data.name||data.species;
this.name=Dex.sanitizeName(name);
this.id=id;
this.gen=data.gen||0;
this.exists='exists'in data?!!data.exists:true;
this.species=this.name;
this.speciesid=this.id;
if(!data.abilities&&
!['hooh','hakamoo','jangmoo','kommoo','porygonz'].includes(this.id)){
var dashIndex=name.indexOf('-');
if(this.id==='kommoototem'){
data.baseSpecies='Kommo-o';
data.forme='Totem';
}else if(dashIndex>0){
data.baseSpecies=name.slice(0,dashIndex);
data.forme=name.slice(dashIndex+1);
}
}
if(!data.abilities){for(var _i=0;_i<

BattleBaseSpeciesChart.length;_i++){var baseid=BattleBaseSpeciesChart[_i];
if(this.id.length>baseid.length&&this.id.slice(0,baseid.length)===baseid){
data.baseSpecies=baseid;
data.forme=this.id.slice(baseid.length);
}
}
if(this.id!=='yanmega'&&this.id.slice(-4)==='mega'){
data.baseSpecies=this.id.slice(0,-4);
data.forme=this.id.slice(-4);
}else if(this.id.slice(-6)==='primal'){
data.baseSpecies=this.id.slice(0,-6);
data.forme=this.id.slice(-6);
}else if(this.id.slice(-5)==='alola'){
data.baseSpecies=this.id.slice(0,-5);
data.forme=this.id.slice(-5);
}
}
this.baseSpecies=data.baseSpecies||name;
this.forme=data.forme||'';
var baseId=toID(this.baseSpecies);
this.formeid=baseId===this.id?'':'-'+toID(this.forme);
this.spriteid=baseId+this.formeid;
if(this.spriteid.slice(-5)==='totem')this.spriteid=this.spriteid.slice(0,-5);
if(this.spriteid.slice(-1)==='-')this.spriteid=this.spriteid.slice(0,-1);
this.baseForme=data.baseForme||'';

this.num=data.num||0;
this.types=data.types||['???'];
var abilities={0:"No Ability"};
this.abilities=data.abilities||{0:"No Ability"};
this.baseStats=data.baseStats||{hp:0,atk:0,def:0,spa:0,spd:0,spe:0};
this.weightkg=data.weightkg||0;

this.heightm=data.heightm||0;
this.gender=data.gender||'';
this.color=data.color||'';
this.genderRatio=data.genderRatio||null;
this.eggGroups=data.eggGroups||[];

this.otherFormes=data.otherFormes||null;
this.otherForms=data.otherForms||null;
this.evos=data.evos||null;
this.prevo=data.prevo||'';
this.evoLevel=data.evoLevel||0;
this.evoType=data.evoType||'';
this.requiredItem=data.requiredItem||'';
this.tier=data.tier||'';

this.isTotem=false;
this.isMega=false;
this.isPrimal=false;
this.battleOnly=!!data.battleOnly;
this.isNonstandard=!!data.isNonstandard;
this.unreleasedHidden=!!data.unreleasedHidden;
if(!this.gen){
if(this.forme&&['-mega','-megax','-megay'].includes(this.formeid)){
this.gen=6;
this.isMega=true;
this.battleOnly=true;
}else if(this.formeid==='-primal'){
this.gen=6;
this.isPrimal=true;
this.battleOnly=true;
}else if(this.formeid==='-totem'||this.formeid==='-alolatotem'){
this.gen=7;
this.isTotem=true;
}else if(this.formeid==='-alola'){
this.gen=7;
}else if(this.num>=722){
this.gen=7;
}else if(this.num>=650){
this.gen=6;
}else if(this.num>=494){
this.gen=5;
}else if(this.num>=387){
this.gen=4;
}else if(this.num>=252){
this.gen=3;
}else if(this.num>=152){
this.gen=2;
}else if(this.num>=1){
this.gen=1;
}
}
};


if(typeof require==='function'){

global.BattleBaseSpeciesChart=BattleBaseSpeciesChart;
global.BattleStats=BattleStats;
global.BattleNatures=BattleNatures;
global.PureEffect=PureEffect;
global.Template=Template;
global.Ability=Ability;
global.Item=Item;
global.Move=Move;
}var




BattleTextParser=function(){







function BattleTextParser(){var perspective=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;this.p1="Player 1";this.p2="Player 2";this.gen=7;this.curLineSection='break';this.lowercaseRegExp=undefined;this.
















































































































































































pokemonName=function(pokemon){
if(!pokemon)return'';
if(!pokemon.startsWith('p1')&&!pokemon.startsWith('p2'))return"???pokemon:"+pokemon+"???";
if(pokemon.charAt(3)===':')return pokemon.slice(4).trim();else
if(pokemon.charAt(2)===':')return pokemon.slice(3).trim();
return"???pokemon:"+pokemon+"???";
};this.perspective=perspective;}BattleTextParser.parseLine=function parseLine(line){if(!line.startsWith('|')){return{args:['',line],kwArgs:{}};}if(line==='|'){return{args:['done'],kwArgs:{}};}var index=line.indexOf('|',1);var cmd=line.slice(1,index);switch(cmd){case'chatmsg':case'chatmsg-raw':case'raw':case'error':case'html':case'inactive':case'inactiveoff':case'warning':case'fieldhtml':case'controlshtml':case'bigerror':case'debug':case'tier':return{args:[cmd,line.slice(index+1)],kwArgs:{}};case'c':case'chat':case'uhtml':case'uhtmlchange':var index2a=line.indexOf('|',index+1);return{args:[cmd,line.slice(index+1,index2a),line.slice(index2a+1)],kwArgs:{}};case'c:':var index2b=line.indexOf('|',index+1);var index3b=line.indexOf('|',index2b+1);return{args:[cmd,line.slice(index+1,index2b),line.slice(index2b+1,index3b),line.slice(index3b+1)],kwArgs:{}};}var args=line.slice(1).split('|');var kwArgs={};while(args.length>1){var lastArg=args[args.length-1];if(lastArg.charAt(0)!=='[')break;var bracketPos=lastArg.indexOf(']');if(bracketPos<=0)break;kwArgs[lastArg.slice(1,bracketPos)]=lastArg.slice(bracketPos+1).trim()||'.';args.pop();}return BattleTextParser.upgradeArgs({args:args,kwArgs:kwArgs});};BattleTextParser.parseNameParts=function parseNameParts(text){var group='';if(!/[A-Za-z0-9]/.test(text.charAt(0))){group=text.charAt(0);text=text.slice(1);}var name=text;var atIndex=text.indexOf('@');var status='';var away=false;if(atIndex>0){name=text.slice(0,atIndex);status=text.slice(atIndex+1);if(status.startsWith('!')){away=true;status=status.slice(1);}}return{group:group,name:name,away:away,status:status};};BattleTextParser.upgradeArgs=function upgradeArgs(_ref){var args=_ref.args,kwArgs=_ref.kwArgs;switch(args[0]){case'-activate':{if(kwArgs.item||kwArgs.move||kwArgs.number||kwArgs.ability)return{args:args,kwArgs:kwArgs};var _args=args,pokemon=_args[1],effect=_args[2],arg3=_args[3],arg4=_args[4];var target=kwArgs.of;var _id=BattleTextParser.effectId(effect);if(kwArgs.block)return{args:['-fail',pokemon],kwArgs:kwArgs};if(_id==='wonderguard')return{args:['-immune',pokemon],kwArgs:{from:'ability:Wonder Guard'}};if(['ingrain','quickguard','wideguard','craftyshield','matblock','protect','mist','safeguard','electricterrain','mistyterrain','psychicterrain','telepathy','stickyhold','suctioncups','aromaveil','flowerveil','sweetveil','disguise','safetygoggles','protectivepads'].includes(_id)){return{args:['-block',target||pokemon,effect,arg3],kwArgs:{}};}if(['bind','wrap','clamp','whirlpool','firespin','magmastorm','sandtomb','infestation','charge','trapped'].includes(_id)){return{args:['-start',pokemon,effect],kwArgs:{of:target}};}if(_id==='fairylock'){return{args:['-fieldactivate',effect],kwArgs:{}};}if(_id==='symbiosis'){kwArgs.item=arg3;}else if(_id==='magnitude'){kwArgs.number=arg3;}else if(_id==='skillswap'||_id==='mummy'){kwArgs.ability=arg3;kwArgs.ability2=arg4;}else if(['spite','grudge','forewarn','sketch','leppaberry','mysteryberry'].includes(_id)){kwArgs.move=arg3;kwArgs.number=arg4;}args=['-activate',pokemon,effect,target||''];return{args:args,kwArgs:kwArgs};}case'-start':{if(kwArgs.from==='Protean'||kwArgs.from==='Color Change')kwArgs.from='ability:'+kwArgs.from;return{args:args,kwArgs:kwArgs};}case'move':{if(kwArgs.from==='Magic Bounce')kwArgs.from='ability:Magic Bounce';return{args:args,kwArgs:kwArgs};}case'cant':{var _args2=args,_pokemon2=_args2[1],_effect2=_args2[2];if(['ability: Queenly Majesty','ability: Damp','ability: Dazzling'].includes(_effect2)){args[0]='-block';}return{args:args,kwArgs:kwArgs};}case'-nothing':return{args:['-activate','','move:Splash'],kwArgs:kwArgs};}return{args:args,kwArgs:kwArgs};};var _proto=BattleTextParser.prototype;_proto.extractMessage=function extractMessage(buf){var out='';for(var _i=0,_buf$split=buf.split('\n');_i<_buf$split.length;_i++){var line=_buf$split[_i];var _BattleTextParser$par=BattleTextParser.parseLine(line),args=_BattleTextParser$par.args,kwArgs=_BattleTextParser$par.kwArgs;out+=this.parseArgs(args,kwArgs)||'';}return out;};_proto.fixLowercase=function fixLowercase(input){if(this.lowercaseRegExp===undefined){var prefixes=['pokemon','opposingPokemon','team','opposingTeam'].map(function(templateId){var template=BattleText["default"][templateId];if(template.charAt(0)===template.charAt(0).toUpperCase())return'';var bracketIndex=template.indexOf('[');if(bracketIndex>=0)return template.slice(0,bracketIndex);return template;}).filter(function(prefix){return prefix;});if(prefixes.length){var buf="((?:^|\n)(?:  |  \\(|  \\[)?)("+prefixes.map(BattleTextParser.escapeRegExp).join('|')+")";this.lowercaseRegExp=new RegExp(buf,'g');}else{this.lowercaseRegExp=null;}}if(!this.lowercaseRegExp)return input;return input.replace(this.lowercaseRegExp,function(match,p1,p2){return p1+p2.charAt(0).toUpperCase()+p2.slice(1);});};BattleTextParser.escapeRegExp=function escapeRegExp(input){return input.replace(/[\\^$.*+?()[\]{}|]/g,'\\$&');};_proto.

pokemon=function pokemon(_pokemon){
if(!_pokemon)return'';
var side;
switch(_pokemon.slice(0,2)){
case'p1':side=0;break;
case'p2':side=1;break;
default:return"???pokemon:"+_pokemon+"???";}

var name=this.pokemonName(_pokemon);
var template=BattleText["default"][side===this.perspective?'pokemon':'opposingPokemon'];
return template.replace('[NICKNAME]',name);
};_proto.

pokemonFull=function pokemonFull(pokemon,details){
var nickname=this.pokemonName(pokemon);

var species=details.split(',')[0];
if(nickname===species)return[pokemon.slice(0,2),"**"+species+"**"];
return[pokemon.slice(0,2),nickname+" (**"+species+"**)"];
};_proto.

trainer=function trainer(side){
side=side.slice(0,2);
if(side==='p1')return this.p1;
if(side==='p2')return this.p2;
return"???side:"+side+"???";
};_proto.

team=function team(side){
side=side.slice(0,2);
if(side===(this.perspective===0?'p1':'p2')){
return BattleText["default"].team;
}
return BattleText["default"].opposingTeam;
};_proto.

own=function own(side){
side=side.slice(0,2);
if(side===(this.perspective===0?'p1':'p2')){
return'OWN';
}
return'';
};BattleTextParser.

effectId=function effectId(effect){
if(!effect)return'';
if(effect.startsWith('item:')||effect.startsWith('move:')){
effect=effect.slice(5);
}else if(effect.startsWith('ability:')){
effect=effect.slice(8);
}
return toID(effect);
};_proto.

effect=function effect(_effect){
if(!_effect)return'';
if(_effect.startsWith('item:')||_effect.startsWith('move:')){
_effect=_effect.slice(5);
}else if(_effect.startsWith('ability:')){
_effect=_effect.slice(8);
}
return _effect.trim();
};_proto.

template=function template(type){for(var _len=arguments.length,namespaces=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){namespaces[_key-1]=arguments[_key];}for(var _i2=0;_i2<
namespaces.length;_i2++){var namespace=namespaces[_i2];
if(!namespace)continue;
if(namespace==='OWN'){
return BattleText["default"][type+'Own']+'\n';
}
if(namespace==='NODEFAULT'){
return'';
}
var _id2=BattleTextParser.effectId(namespace);
if(BattleText[_id2]&&type in BattleText[_id2]){
if(BattleText[_id2][type].charAt(1)==='.')type=BattleText[_id2][type].slice(2);
if(BattleText[_id2][type].charAt(0)==='#')_id2=BattleText[_id2][type].slice(1);
if(!BattleText[_id2][type])return'';
return BattleText[_id2][type]+'\n';
}
}
if(!BattleText["default"][type])return'';
return BattleText["default"][type]+'\n';
};_proto.

maybeAbility=function maybeAbility(effect,holder){
if(!effect)return'';
if(!effect.startsWith('ability:'))return'';
return this.ability(effect.slice(8).trim(),holder);
};_proto.

ability=function ability(name,holder){
if(!name)return'';
return BattleText["default"].abilityActivation.replace('[POKEMON]',this.pokemon(holder)).replace('[ABILITY]',this.effect(name))+'\n';
};_proto.

stat=function stat(_stat){
var entry=BattleText[_stat||"stats"];
if(!entry||!entry.statName)return"???stat:"+_stat+"???";
return entry.statName;
};_proto.

lineSection=function lineSection(args,kwArgs){
var cmd=args[0];
switch(cmd){
case'done':case'turn':
return'break';
case'move':case'cant':case'switch':case'drag':case'upkeep':case'start':case'-mega':
return'major';
case'switchout':case'faint':
return'preMajor';
case'-zpower':
return'postMajor';
case'-damage':{
var _id3=BattleTextParser.effectId(kwArgs.from);
if(_id3==='confusion')return'major';
return'postMajor';
}
case'-curestatus':{
var _id4=BattleTextParser.effectId(kwArgs.from);
if(_id4==='naturalcure')return'preMajor';
return'postMajor';
}
case'-start':{
var _id5=BattleTextParser.effectId(kwArgs.from);
if(_id5==='protean')return'preMajor';
return'postMajor';
}
case'-activate':{
var _id6=BattleTextParser.effectId(args[2]);
if(_id6==='confusion'||_id6==='attract')return'preMajor';
return'postMajor';
}}

return cmd.charAt(0)==='-'?'postMajor':'';
};_proto.

sectionBreak=function sectionBreak(args,kwArgs){
var prevSection=this.curLineSection;
var curSection=this.lineSection(args,kwArgs);
if(!curSection)return false;
this.curLineSection=curSection;
switch(curSection){
case'break':
if(prevSection!=='break')return true;
return false;
case'preMajor':
case'major':
if(prevSection==='postMajor'||prevSection==='major')return true;
return false;
case'postMajor':
return false;}

};_proto.

parseArgs=function parseArgs(args,kwArgs,noSectionBreak){
var buf=!noSectionBreak&&this.sectionBreak(args,kwArgs)?'\n':'';
return buf+this.fixLowercase(this.parseArgsInner(args,kwArgs)||'');
};_proto.

parseArgsInner=function parseArgsInner(args,kwArgs){
var cmd=args[0];
switch(cmd){
case'player':{var
side=args[1],name=args[2];
if(side==='p1'&&name){
this.p1=name;
}else if(side==='p2'&&name){
this.p2=name;
}
return'';
}

case'gen':{var
num=args[1];
this.gen=parseInt(num,10);
return'';
}

case'turn':{var
_num=args[1];
return this.template('turn').replace('[NUMBER]',_num)+'\n';
}

case'start':{
return this.template('startBattle').replace('[TRAINER]',this.p1).replace('[TRAINER]',this.p2);
}

case'win':case'tie':{var
_name=args[1];
if(cmd==='tie'||!_name){
return this.template('tieBattle').replace('[TRAINER]',this.p1).replace('[TRAINER]',this.p2);
}
return this.template('winBattle').replace('[TRAINER]',_name);
}

case'switch':{var
pokemon=args[1],details=args[2];var _this$pokemonFull=
this.pokemonFull(pokemon,details),_side=_this$pokemonFull[0],fullname=_this$pokemonFull[1];
var template=this.template('switchIn',this.own(_side));
return template.replace('[TRAINER]',this.trainer(_side)).replace('[FULLNAME]',fullname);
}

case'drag':{var
_pokemon3=args[1],_details=args[2];var _this$pokemonFull2=
this.pokemonFull(_pokemon3,_details),_side2=_this$pokemonFull2[0],_fullname=_this$pokemonFull2[1];
var _template=this.template('drag');
return _template.replace('[TRAINER]',this.trainer(_side2)).replace('[FULLNAME]',_fullname);
}

case'detailschange':case'-transform':case'-formechange':{var
_pokemon4=args[1],arg2=args[2],arg3=args[3];
var newSpecies='';
switch(cmd){
case'detailschange':newSpecies=arg2.split(',')[0].trim();break;
case'-transform':newSpecies=arg3;break;
case'-formechange':newSpecies=arg2;break;}

var newSpeciesId=toID(newSpecies);
var _id7='';
var _templateName='transform';
if(cmd!=='-transform'){
switch(newSpeciesId){
case'greninjaash':_id7='battlebond';break;
case'mimikyubusted':_id7='disguise';break;
case'zygardecomplete':_id7='powerconstruct';break;
case'necrozmaultra':_id7='ultranecroziumz';break;
case'darmanitanzen':_id7='zenmode';break;
case'darmanitan':_id7='zenmode';_templateName='transformEnd';break;
case'aegislashblade':_id7='stancechange';break;
case'aegislash':_id7='stancechange';_templateName='transformEnd';break;
case'wishiwashischool':_id7='schooling';break;
case'wishiwashi':_id7='schooling';_templateName='transformEnd';break;
case'miniormeteor':_id7='shieldsdown';break;
case'minior':_id7='shieldsdown';_templateName='transformEnd';break;}

}else if(newSpecies){
_id7='transform';
}
var _template2=this.template(_templateName,_id7,kwArgs.msg?'':'NODEFAULT');
var line1=this.maybeAbility(kwArgs.from,kwArgs.of||_pokemon4);
return line1+_template2.replace('[POKEMON]',this.pokemon(_pokemon4)).replace('[SPECIES]',newSpecies);
}

case'switchout':{var
_pokemon5=args[1];
var _side3=_pokemon5.slice(0,2);
var _template3=this.template('switchOut',kwArgs.from,this.own(_side3));
return _template3.replace('[TRAINER]',this.trainer(_side3)).replace('[NICKNAME]',this.pokemonName(_pokemon5)).replace('[POKEMON]',this.pokemon(_pokemon5));
}

case'faint':{var
_pokemon6=args[1];
var _template4=this.template('faint');
return _template4.replace('[POKEMON]',this.pokemon(_pokemon6));
}

case'swap':{var
_pokemon7=args[1],target=args[2];
if(!target||!isNaN(Number(target))){
var _template6=this.template('swapCenter');
return _template6.replace('[POKEMON]',this.pokemon(_pokemon7));
}
var _template5=this.template('swap');
return _template5.replace('[POKEMON]',this.pokemon(_pokemon7)).replace('[TARGET]',this.pokemon(target));
}

case'move':{var
_pokemon8=args[1],move=args[2];
var _line=this.maybeAbility(kwArgs.from,kwArgs.of||_pokemon8);
if(kwArgs.zEffect){
_line=this.template('zEffect').replace('[POKEMON]',this.pokemon(_pokemon8));
}
var _template7=this.template('move',kwArgs.from);
return _line+_template7.replace('[POKEMON]',this.pokemon(_pokemon8)).replace('[MOVE]',move);
}

case'cant':{var
_pokemon9=args[1],effect=args[2],_move=args[3];
var _template8=this.template('cant',effect,'NODEFAULT')||
this.template(_move?'cant':'cantNoMove');
var _line2=this.maybeAbility(effect,kwArgs.of||_pokemon9);
return _line2+_template8.replace('[POKEMON]',this.pokemon(_pokemon9)).replace('[MOVE]',_move);
}

case'message':{var
message=args[1];
return''+message+'\n';
}

case'-start':{var
_pokemon10=args[1],_effect3=args[2],_arg=args[3];
var _line3=this.maybeAbility(_effect3,_pokemon10)||this.maybeAbility(kwArgs.from,kwArgs.of||_pokemon10);
var _id8=BattleTextParser.effectId(_effect3);
if(_id8==='typechange'){
var _template10=this.template('typeChange',kwArgs.from);
return _line3+_template10.replace('[POKEMON]',this.pokemon(_pokemon10)).replace('[TYPE]',_arg).replace('[SOURCE]',this.pokemon(kwArgs.of));
}
if(_id8==='typeadd'){
var _template11=this.template('typeAdd',kwArgs.from);
return _line3+_template11.replace('[POKEMON]',this.pokemon(_pokemon10)).replace('[TYPE]',_arg);
}
if(_id8.startsWith('stockpile')){
var _num2=_id8.slice(9);
var _template12=this.template('start','stockpile');
return _line3+_template12.replace('[POKEMON]',this.pokemon(_pokemon10)).replace('[NUMBER]',_num2);
}
if(_id8.startsWith('perish')){
var _num3=_id8.slice(6);
var _template13=this.template('activate','perishsong');
return _line3+_template13.replace('[POKEMON]',this.pokemon(_pokemon10)).replace('[NUMBER]',_num3);
}
var templateId='start';
if(kwArgs.already)templateId='alreadyStarted';
if(kwArgs.fatigue)templateId='startFromFatigue';
if(kwArgs.zeffect)templateId='startFromZEffect';
if(kwArgs.damage)templateId='activate';
if(kwArgs.block)templateId='block';
if(kwArgs.upkeep)templateId='upkeep';
if(_id8==='reflect'||_id8==='lightscreen')templateId='startGen1';
if(templateId==='start'&&kwArgs.from&&kwArgs.from.startsWith('item:')){
templateId+='FromItem';
}
var _template9=this.template(templateId,_effect3);
return _line3+_template9.replace('[POKEMON]',this.pokemon(_pokemon10)).replace('[EFFECT]',this.effect(_effect3)).replace('[MOVE]',_arg).replace('[SOURCE]',this.pokemon(kwArgs.of)).replace('[ITEM]',this.effect(kwArgs.from));
}

case'-end':{var
_pokemon11=args[1],_effect4=args[2];
var _line4=this.maybeAbility(_effect4,_pokemon11)||this.maybeAbility(kwArgs.from,kwArgs.of||_pokemon11);
var _id9=BattleTextParser.effectId(_effect4);
if(_id9==='doomdesire'||_id9==='futuresight'){
var _template15=this.template('activate',_effect4);
return _line4+_template15.replace('[TARGET]',this.pokemon(_pokemon11));
}
var _templateId='end';
var _template14='';
if(kwArgs.from&&kwArgs.from.startsWith('item:')){
_template14=this.template('endFromItem',_effect4);
}
if(!_template14)_template14=this.template(_templateId,_effect4);
return _line4+_template14.replace('[POKEMON]',this.pokemon(_pokemon11)).replace('[EFFECT]',this.effect(_effect4)).replace('[SOURCE]',this.pokemon(kwArgs.of));
}

case'-ability':{var
_pokemon12=args[1],ability=args[2],oldAbility=args[3],arg4=args[4];
var _line5='';
if(oldAbility&&(oldAbility.startsWith('p1')||oldAbility.startsWith('p2')||oldAbility==='boost')){
arg4=oldAbility;
oldAbility='';
}
if(oldAbility)_line5+=this.ability(oldAbility,_pokemon12);
_line5+=this.ability(ability,_pokemon12);
if(kwArgs.fail){
var _template17=this.template('block',kwArgs.from);
return _line5+_template17;
}
if(kwArgs.from){
_line5=this.maybeAbility(kwArgs.from,_pokemon12)+_line5;
var _template18=this.template('changeAbility',kwArgs.from);
return _line5+_template18.replace('[POKEMON]',this.pokemon(_pokemon12)).replace('[ABILITY]',this.effect(ability)).replace('[SOURCE]',this.pokemon(kwArgs.of));
}
var _id10=BattleTextParser.effectId(ability);
if(_id10==='unnerve'){
var _template19=this.template('start',ability);
return _line5+_template19.replace('[TEAM]',this.team(arg4));
}
var _templateId2='start';
if(_id10==='anticipation'||_id10==='sturdy')_templateId2='activate';
var _template16=this.template(_templateId2,ability,'NODEFAULT');
return _line5+_template16.replace('[POKEMON]',this.pokemon(_pokemon12));
}

case'-endability':{var
_pokemon13=args[1],_ability=args[2];
if(_ability)return this.ability(_ability,_pokemon13);
var _line6=this.maybeAbility(kwArgs.from,kwArgs.of||_pokemon13);
var _template20=this.template('start','Gastro Acid');
return _line6+_template20.replace('[POKEMON]',this.pokemon(_pokemon13));
}

case'-item':{var
_pokemon14=args[1],item=args[2];
var _id11=BattleTextParser.effectId(kwArgs.from);
var _target='';
if(['magician','pickpocket'].includes(_id11)){var _ref2=
[kwArgs.of,''];_target=_ref2[0];kwArgs.of=_ref2[1];
}
var _line7=this.maybeAbility(kwArgs.from,kwArgs.of||_pokemon14);
if(['thief','covet','bestow','magician','pickpocket'].includes(_id11)){
var _template22=this.template('takeItem',kwArgs.from);
return _line7+_template22.replace('[POKEMON]',this.pokemon(_pokemon14)).replace('[ITEM]',this.effect(item)).replace('[SOURCE]',this.pokemon(_target||kwArgs.of));
}
if(_id11==='frisk'){
var hasTarget=kwArgs.of&&_pokemon14&&kwArgs.of!==_pokemon14;
var _template23=this.template(hasTarget?'activate':'activateNoTarget',"Frisk");
return _line7+_template23.replace('[POKEMON]',this.pokemon(kwArgs.of)).replace('[ITEM]',this.effect(item)).replace('[TARGET]',this.pokemon(_pokemon14));
}
if(kwArgs.from){
var _template24=this.template('addItem',kwArgs.from);
return _line7+_template24.replace('[POKEMON]',this.pokemon(_pokemon14)).replace('[ITEM]',this.effect(item));
}
var _template21=this.template('start',item,'NODEFAULT');
return _line7+_template21.replace('[POKEMON]',this.pokemon(_pokemon14));
}

case'-enditem':{var
_pokemon15=args[1],_item=args[2];
var _line8=this.maybeAbility(kwArgs.from,kwArgs.of||_pokemon15);
if(kwArgs.eat){
var _template26=this.template('eatItem',kwArgs.from);
return _line8+_template26.replace('[POKEMON]',this.pokemon(_pokemon15)).replace('[ITEM]',this.effect(_item));
}
var _id12=BattleTextParser.effectId(kwArgs.from);
if(_id12==='gem'){
var _template27=this.template('useGem',_item);
return _line8+_template27.replace('[POKEMON]',this.pokemon(_pokemon15)).replace('[ITEM]',this.effect(_item)).replace('[MOVE]',kwArgs.move);
}
if(_id12==='stealeat'){
var _template28=this.template('removeItem',"Bug Bite");
return _line8+_template28.replace('[SOURCE]',this.pokemon(kwArgs.of)).replace('[ITEM]',this.effect(_item));
}
if(kwArgs.from){
var _template29=this.template('removeItem',kwArgs.from);
return _line8+_template29.replace('[POKEMON]',this.pokemon(_pokemon15)).replace('[ITEM]',this.effect(_item)).replace('[SOURCE]',this.pokemon(kwArgs.of));
}
if(kwArgs.weaken){
var _template30=this.template('activateWeaken');
return _line8+_template30.replace('[POKEMON]',this.pokemon(_pokemon15)).replace('[ITEM]',this.effect(_item));
}
var _template25=this.template('end',_item,'NODEFAULT');
if(!_template25)_template25=this.template('activateItem').replace('[ITEM]',this.effect(_item));
return _line8+_template25.replace('[POKEMON]',this.pokemon(_pokemon15)).replace('[TARGET]',this.pokemon(kwArgs.of));
}

case'-status':{var
_pokemon16=args[1],status=args[2];
var _line9=this.maybeAbility(kwArgs.from,kwArgs.of||_pokemon16);
if(BattleTextParser.effectId(kwArgs.from)==='rest'){
var _template32=this.template('startFromRest',status);
return _line9+_template32.replace('[POKEMON]',this.pokemon(_pokemon16));
}
var _template31=this.template('start',status);
return _line9+_template31.replace('[POKEMON]',this.pokemon(_pokemon16));
}

case'-curestatus':{var
_pokemon17=args[1],_status=args[2];
if(BattleTextParser.effectId(kwArgs.from)==='naturalcure'){
var _template34=this.template('activate',kwArgs.from);
return _template34.replace('[POKEMON]',this.pokemon(_pokemon17));
}
var _line10=this.maybeAbility(kwArgs.from,kwArgs.of||_pokemon17);
if(kwArgs.from&&kwArgs.from.startsWith('item:')){
var _template35=this.template('endFromItem',_status);
return _line10+_template35.replace('[POKEMON]',this.pokemon(_pokemon17)).replace('[ITEM]',this.effect(kwArgs.from));
}
if(kwArgs.thaw){
var _template36=this.template('endFromMove',_status);
return _line10+_template36.replace('[POKEMON]',this.pokemon(_pokemon17)).replace('[MOVE]',this.effect(kwArgs.from));
}
var _template33=this.template('end',_status,'NODEFAULT');
if(!_template33)_template33=this.template('end').replace('[EFFECT]',_status);
return _line10+_template33.replace('[POKEMON]',this.pokemon(_pokemon17));
}

case'-cureteam':{
return this.template('activate',kwArgs.from);
}

case'-singleturn':case'-singlemove':{var
_pokemon18=args[1],_effect5=args[2];
var _line11=this.maybeAbility(_effect5,kwArgs.of||_pokemon18)||
this.maybeAbility(kwArgs.from,kwArgs.of||_pokemon18);
var _id13=BattleTextParser.effectId(_effect5);
if(_id13==='instruct'){
var _template38=this.template('activate',_effect5);
return _line11+_template38.replace('[POKEMON]',this.pokemon(kwArgs.of)).replace('[TARGET]',this.pokemon(_pokemon18));
}
var _template37=this.template('start',_effect5,'NODEFAULT');
if(!_template37)_template37=this.template('start').replace('[EFFECT]',this.effect(_effect5));
return _line11+_template37.replace('[POKEMON]',this.pokemon(_pokemon18)).replace('[SOURCE]',this.pokemon(kwArgs.of)).replace('[TEAM]',this.team(_pokemon18.slice(0,2)));
}

case'-sidestart':{var
_side4=args[1],_effect6=args[2];
var _template39=this.template('start',_effect6,'NODEFAULT');
if(!_template39)_template39=this.template('startTeamEffect').replace('[EFFECT]',this.effect(_effect6));
return _template39.replace('[TEAM]',this.team(_side4));
}

case'-sideend':{var
_side5=args[1],_effect7=args[2];
var _template40=this.template('end',_effect7,'NODEFAULT');
if(!_template40)_template40=this.template('endTeamEffect').replace('[EFFECT]',this.effect(_effect7));
return _template40.replace('[TEAM]',this.team(_side5));
}

case'-weather':{var
weather=args[1];
if(!weather||weather==='none'){
var _template42=this.template('end',kwArgs.from,'NODEFAULT');
if(!_template42)return this.template('endFieldEffect').replace('[EFFECT]',this.effect(weather));
return _template42;
}
if(kwArgs.upkeep){
return this.template('upkeep',weather,'NODEFAULT');
}
var _line12=this.maybeAbility(kwArgs.from,kwArgs.of);
var _template41=this.template('start',weather,'NODEFAULT');
if(!_template41)_template41=this.template('startFieldEffect').replace('[EFFECT]',this.effect(weather));
return _line12+_template41;
}

case'-fieldstart':case'-fieldactivate':{var
_effect8=args[1];
var _line13=this.maybeAbility(kwArgs.from,kwArgs.of);
var _templateId3=cmd.slice(6);
if(BattleTextParser.effectId(_effect8)==='perishsong')_templateId3='start';
var _template43=this.template(_templateId3,_effect8,'NODEFAULT');
if(!_template43)_template43=this.template('startFieldEffect').replace('[EFFECT]',this.effect(_effect8));
return _line13+_template43.replace('[POKEMON]',this.pokemon(kwArgs.of));
}

case'-fieldend':{var
_effect9=args[1];
var _template44=this.template('end',_effect9,'NODEFAULT');
if(!_template44)_template44=this.template('endFieldEffect').replace('[EFFECT]',this.effect(_effect9));
return _template44;
}

case'-sethp':{
var _effect10=kwArgs.from;
return this.template('activate',_effect10);
}

case'-message':{var
_message=args[1];
return'  '+_message+'\n';
}

case'-hint':{var
_message2=args[1];
return'  ('+_message2+')\n';
}

case'-activate':{var
_pokemon19=args[1],_effect11=args[2],_target2=args[3];
var _id14=BattleTextParser.effectId(_effect11);
if(_id14==='celebrate'){
return this.template('activate','celebrate').replace('[TRAINER]',this.trainer(_pokemon19.slice(0,2)));
}
if(!_target2&&['hyperspacefury','hyperspacehole','phantomforce','shadowforce','feint'].includes(_id14)){var _ref3=
[kwArgs.of,_pokemon19];_pokemon19=_ref3[0];_target2=_ref3[1];
if(!_pokemon19)_pokemon19=_target2;
}
if(!_target2)_target2=kwArgs.of||_pokemon19;

var _line14=this.maybeAbility(_effect11,_pokemon19);

if(_id14==='lockon'||_id14==='mindreader'){
var _template46=this.template('start',_effect11);
return _line14+_template46.replace('[POKEMON]',this.pokemon(kwArgs.of)).replace('[SOURCE]',this.pokemon(_pokemon19));
}

if(_id14==='mummy'){
_line14+=this.ability(kwArgs.ability,_target2);
_line14+=this.ability('Mummy',_target2);
var _template47=this.template('changeAbility','mummy');
return _line14+_template47.replace('[TARGET]',this.pokemon(_target2));
}

var _templateId4='activate';
if(_id14==='forewarn'&&_pokemon19===_target2){
_templateId4='activateNoTarget';
}
var _template45=this.template(_templateId4,_effect11,'NODEFAULT');
if(!_template45){
if(_line14)return _line14;
_template45=this.template('activate');
return _line14+_template45.replace('[EFFECT]',this.effect(_effect11));
}

if(_id14==='brickbreak'){
_template45=_template45.replace('[TEAM]',this.team(_target2.slice(0,2)));
}
if(kwArgs.ability){
_line14+=this.ability(kwArgs.ability,_pokemon19);
}
if(kwArgs.ability2){
_line14+=this.ability(kwArgs.ability2,_target2);
}
if(kwArgs.move||kwArgs.number||kwArgs.item){
_template45=_template45.replace('[MOVE]',kwArgs.move).replace('[NUMBER]',kwArgs.number).replace('[ITEM]',kwArgs.item);
}
return _line14+_template45.replace('[POKEMON]',this.pokemon(_pokemon19)).replace('[TARGET]',this.pokemon(_target2)).replace('[SOURCE]',this.pokemon(kwArgs.of));
}

case'-prepare':{var
_pokemon20=args[1],_effect12=args[2],_target3=args[3];
var _template48=this.template('prepare',_effect12);
return _template48.replace('[POKEMON]',this.pokemon(_pokemon20)).replace('[TARGET]',this.pokemon(_target3));
}

case'-damage':{var
_pokemon21=args[1],percentage=args[3];
var _template49=this.template('damage',kwArgs.from,'NODEFAULT');
var _line15=this.maybeAbility(kwArgs.from,kwArgs.of||_pokemon21);
var _id15=BattleTextParser.effectId(kwArgs.from);
if(_template49){
return _line15+_template49.replace('[POKEMON]',this.pokemon(_pokemon21));
}

if(!kwArgs.from){
_template49=this.template(percentage?'damagePercentage':'damage');
return _line15+_template49.replace('[POKEMON]',this.pokemon(_pokemon21)).replace('[PERCENTAGE]',percentage);
}
if(kwArgs.from.startsWith('item:')){
_template49=this.template(kwArgs.of?'damageFromPokemon':'damageFromItem');
return _line15+_template49.replace('[POKEMON]',this.pokemon(_pokemon21)).replace('[ITEM]',this.effect(kwArgs.from)).replace('[SOURCE]',this.pokemon(kwArgs.of));
}
if(kwArgs.partiallytrapped||_id15==='bind'||_id15==='wrap'){
_template49=this.template('damageFromPartialTrapping');
return _line15+_template49.replace('[POKEMON]',this.pokemon(_pokemon21)).replace('[MOVE]',this.effect(kwArgs.from));
}

_template49=this.template('damage');
return _line15+_template49.replace('[POKEMON]',this.pokemon(_pokemon21));
}

case'-heal':{var
_pokemon22=args[1];
var _template50=this.template('heal',kwArgs.from,'NODEFAULT');
var _line16=this.maybeAbility(kwArgs.from,_pokemon22);
if(_template50){
return _line16+_template50.replace('[POKEMON]',this.pokemon(_pokemon22)).replace('[SOURCE]',this.pokemon(kwArgs.of)).replace('[NICKNAME]',kwArgs.wisher);
}

if(kwArgs.from&&!kwArgs.from.startsWith('ability:')){
_template50=this.template('healFromEffect');
return _line16+_template50.replace('[POKEMON]',this.pokemon(_pokemon22)).replace('[EFFECT]',this.effect(kwArgs.from));
}

_template50=this.template('heal');
return _line16+_template50.replace('[POKEMON]',this.pokemon(_pokemon22));
}

case'-boost':case'-unboost':{var
_pokemon23=args[1],stat=args[2],_num4=args[3];
if(stat==='spa'&&this.gen===1)stat='spc';
var amount=parseInt(_num4,10);
var _line17=this.maybeAbility(kwArgs.from,kwArgs.of||_pokemon23);
var _templateId5=cmd.slice(1);
if(amount>=3)_templateId5+='3';else
if(amount>=2)_templateId5+='2';else
if(amount===0)_templateId5+='0';
if(amount&&kwArgs.zeffect){
_templateId5+=kwArgs.multiple?'MultipleFromZEffect':'FromZEffect';
}else if(amount&&kwArgs.from&&kwArgs.from.startsWith('item:')){
_templateId5+='FromItem';
}
var _template51=this.template(_templateId5,kwArgs.from);
return _line17+_template51.replace('[POKEMON]',this.pokemon(_pokemon23)).replace('[STAT]',this.stat(stat));
}

case'-setboost':{var
_pokemon24=args[1];
var _effect13=kwArgs.from;
var _line18=this.maybeAbility(_effect13,kwArgs.of||_pokemon24);
var _template52=this.template('boost',_effect13);
return _line18+_template52.replace('[POKEMON]',this.pokemon(_pokemon24));
}

case'-swapboost':{var
_pokemon25=args[1],_target4=args[2];
var _line19=this.maybeAbility(kwArgs.from,kwArgs.of||_pokemon25);
var _id16=BattleTextParser.effectId(kwArgs.from);
var _templateId6='swapBoost';
if(_id16==='guardswap')_templateId6='swapDefensiveBoost';
if(_id16==='powerswap')_templateId6='swapOffensiveBoost';
var _template53=this.template(_templateId6,kwArgs.from);
return _line19+_template53.replace('[POKEMON]',this.pokemon(_pokemon25)).replace('[TARGET]',this.pokemon(_target4));
}

case'-copyboost':{var
_pokemon26=args[1],_target5=args[2];
var _line20=this.maybeAbility(kwArgs.from,kwArgs.of||_pokemon26);
var _template54=this.template('copyBoost',kwArgs.from);
return _line20+_template54.replace('[POKEMON]',this.pokemon(_pokemon26)).replace('[TARGET]',this.pokemon(_target5));
}

case'-clearboost':case'-clearpositiveboost':case'-clearnegativeboost':{var
_pokemon27=args[1],source=args[2];
var _line21=this.maybeAbility(kwArgs.from,kwArgs.of||_pokemon27);
var _templateId7='clearBoost';
if(kwArgs.zeffect)_templateId7='clearBoostFromZEffect';
var _template55=this.template(_templateId7,kwArgs.from);
return _line21+_template55.replace('[POKEMON]',this.pokemon(_pokemon27)).replace('[SOURCE]',this.pokemon(source));
}

case'-invertboost':{var
_pokemon28=args[1];
var _line22=this.maybeAbility(kwArgs.from,kwArgs.of||_pokemon28);
var _template56=this.template('invertBoost',kwArgs.from);
return _line22+_template56.replace('[POKEMON]',this.pokemon(_pokemon28));
}

case'-clearallboost':{
return this.template('clearAllBoost',kwArgs.from);
}

case'-crit':case'-supereffective':case'-resisted':{var
_pokemon29=args[1];
var _templateId8=cmd.slice(1);
if(_templateId8==='supereffective')_templateId8='superEffective';
if(kwArgs.spread)_templateId8+='Spread';
var _template57=this.template(_templateId8);
return _template57.replace('[POKEMON]',this.pokemon(_pokemon29));
}

case'-block':{var
_pokemon30=args[1],_effect14=args[2],_move2=args[3];
var _line23=this.maybeAbility(_effect14,_pokemon30);
var _template58=this.template('block',_effect14);
return _line23+_template58.replace('[POKEMON]',this.pokemon(_pokemon30)).replace('[SOURCE]',this.pokemon(kwArgs.of)).replace('[MOVE]',_move2);
}

case'-fail':{var
_pokemon31=args[1],_effect15=args[2],_stat2=args[3];
var _id17=BattleTextParser.effectId(_effect15);
var blocker=BattleTextParser.effectId(kwArgs.from);
var _line24=this.maybeAbility(kwArgs.from,kwArgs.of||_pokemon31);
var _templateId9='block';
if(['desolateland','primordialsea'].includes(blocker)&&
!['sunnyday','raindance','sandstorm','hail'].includes(_id17)){
_templateId9='blockMove';
}else if(blocker==='uproar'&&kwArgs.msg){
_templateId9='blockSelf';
}
var _template59=this.template(_templateId9,kwArgs.from);
if(_template59){
return _line24+_template59.replace('[POKEMON]',this.pokemon(_pokemon31));
}

if(_id17==='unboost'){
_template59=this.template(_stat2?'failSingular':'fail','unboost');
if(BattleTextParser.effectId(kwArgs.from)==='flowerveil'){
_template59=this.template('block',kwArgs.from);
_pokemon31=kwArgs.of;
}
return _line24+_template59.replace('[POKEMON]',this.pokemon(_pokemon31)).replace('[STAT]',_stat2);
}

_templateId9='fail';
if(['brn','frz','par','psn','slp','substitute'].includes(_id17)){
_templateId9='alreadyStarted';
}
if(kwArgs.heavy)_templateId9='failTooHeavy';
if(kwArgs.weak)_templateId9='fail';
if(kwArgs.forme)_templateId9='failWrongForme';
_template59=this.template(_templateId9,_id17);
return _line24+_template59.replace('[POKEMON]',this.pokemon(_pokemon31));
}

case'-immune':{var
_pokemon32=args[1];
var _line25=this.maybeAbility(kwArgs.from,kwArgs.of||_pokemon32);
var _template60=this.template('block',kwArgs.from);
if(!_template60){
var _templateId10=kwArgs.ohko?'immuneOHKO':'immune';
_template60=this.template(_pokemon32?_templateId10:'immuneNoPokemon',kwArgs.from);
}
return _line25+_template60.replace('[POKEMON]',this.pokemon(_pokemon32));
}

case'-miss':{var
_source=args[1],_pokemon33=args[2];
var _line26=this.maybeAbility(kwArgs.from,kwArgs.of||_pokemon33);
if(!_pokemon33){
var _template62=this.template('missNoPokemon');
return _line26+_template62.replace('[SOURCE]',this.pokemon(_source));
}
var _template61=this.template('miss');
return _line26+_template61.replace('[POKEMON]',this.pokemon(_pokemon33));
}

case'-center':case'-ohko':case'-combine':{
return this.template(cmd.slice(1));
}

case'-notarget':{
return this.template('noTarget');
}

case'-mega':case'-primal':{var
_pokemon34=args[1],species=args[2],_item2=args[3];
var _id18='';
var _templateId11=cmd.slice(1);
if(species==='Rayquaza'){
_id18='dragonascent';
_templateId11='megaNoItem';
}
if(!_id18&&cmd==='-mega'&&this.gen<7)_templateId11='megaGen6';
if(!_item2&&cmd==='-mega')_templateId11='megaNoItem';
var _template63=this.template(_templateId11);
var _side6=_pokemon34.slice(0,2);
var pokemonName=this.pokemon(_pokemon34);
if(cmd==='-mega'){
var template2=this.template('transformMega');
_template63+=template2.replace('[POKEMON]',pokemonName).replace('[SPECIES]',species);
}
return _template63.replace('[POKEMON]',pokemonName).replace('[ITEM]',_item2).replace('[TRAINER]',this.trainer(_side6));
}

case'-zpower':{var
_pokemon35=args[1];
var _template64=this.template('zPower');
return _template64.replace('[POKEMON]',this.pokemon(_pokemon35));
}

case'-burst':{var
_pokemon36=args[1];
var _template65=this.template('activate',"Ultranecrozium Z");
return _template65.replace('[POKEMON]',this.pokemon(_pokemon36));
}

case'-zbroken':{var
_pokemon37=args[1];
var _template66=this.template('zBroken');
return _template66.replace('[POKEMON]',this.pokemon(_pokemon37));
}

case'-hitcount':{var
_num5=args[2];
if(_num5==='1'){
return this.template('hitCountSingular');
}
return this.template('hitCount').replace('[NUMBER]',_num5);
}

case'-waiting':{var
_pokemon38=args[1],_target6=args[2];
var _template67=this.template('activate',"Water Pledge");
return _template67.replace('[POKEMON]',this.pokemon(_pokemon38)).replace('[TARGET]',this.pokemon(_target6));
}

case'-anim':{
return'';
}

default:{
return null;
}}

};return BattleTextParser;}();


if(typeof require==='function'){

global.BattleTextParser=BattleTextParser;
}/**
 * Pokemon Showdown Battle
 *
 * This is the main file for handling battle animations
 *
 * Licensing note: PS's client has complicated licensing:
 * - The client as a whole is AGPLv3
 * - The battle replay/animation engine (battle-*.ts) by itself is MIT
 *
 * Layout:
 *
 * - Battle
 *   - Side
 *     - Pokemon
 *   - BattleScene
 *     - BattleLog
 *       - BattleTextParser
 *
 * When a Battle receives a message, it splits the message into tokens
 * and parses what happens, updating its own state, and then telling
 * BattleScene to do any relevant animations. The tokens then get
 * passed directly into BattleLog. If the message is an in-battle
 * message, it'll be extracted by BattleTextParser, which adds it to
 * both the battle log itself, as well as the messagebar.
 *
 * @author Guangcong Luo <guangcongluo@gmail.com>
 * @license MIT
 */var








Pokemon=function(){



































































function Pokemon(data,side){this.name='';this.species='';this.ident='';this.details='';this.searchid='';this.slot=0;this.fainted=false;this.hp=0;this.maxhp=1000;this.level=100;this.gender='N';this.shiny=false;this.hpcolor='g';this.moves=[];this.ability='';this.baseAbility='';this.item='';this.itemEffect='';this.prevItem='';this.prevItemEffect='';this.boosts={};this.status='';this.statusStage=0;this.volatiles={};this.turnstatuses={};this.movestatuses={};this.lastMove='';this.moveTrack=[];this.statusData={sleepTurns:0,toxicTurns:0};
this.side=side;
this.species=data.species;


Object.assign(this,Dex.getTemplate(data.species));
Object.assign(this,data);

this.sprite=side.battle.scene.addPokemonSprite(this);
}var _proto=Pokemon.prototype;_proto.

isActive=function isActive(){
return this.side.active.includes(this);
};_proto.

getHPColor=function getHPColor(){
if(this.hpcolor)return this.hpcolor;
var ratio=this.hp/this.maxhp;
if(ratio>0.5)return'g';
if(ratio>0.2)return'y';
return'r';
};_proto.
getHPColorClass=function getHPColorClass(){
switch(this.getHPColor()){
case'y':return' hpbar-yellow';
case'r':return' hpbar-red';}

return'';
};Pokemon.
getPixelRange=function getPixelRange(pixels,color){
var epsilon=0.5/714;

if(pixels===0)return[0,0];
if(pixels===1)return[0+epsilon,2/48-epsilon];
if(pixels===9){
if(color==='y'){
return[0.2+epsilon,10/48-epsilon];
}else{
return[9/48,0.2];
}
}
if(pixels===24){
if(color==='g'){
return[0.5+epsilon,25/48-epsilon];
}else{
return[0.5,0.5];
}
}
if(pixels===48)return[1,1];

return[pixels/48,(pixels+1)/48-epsilon];
};Pokemon.
getFormattedRange=function getFormattedRange(range,precision,separator){
if(range[0]===range[1]){
var percentage=Math.abs(range[0]*100);
if(Math.floor(percentage)===percentage){
return percentage+'%';
}
return percentage.toFixed(precision)+'%';
}
var lower;
var upper;
if(precision===0){
lower=Math.floor(range[0]*100);
upper=Math.ceil(range[1]*100);
}else{
lower=(range[0]*100).toFixed(precision);
upper=(range[1]*100).toFixed(precision);
}
return''+lower+separator+upper+'%';
};_proto.

getDamageRange=function getDamageRange(damage){
if(damage[1]!==48){
var ratio=damage[0]/damage[1];
return[ratio,ratio];
}else if(damage.length===undefined){


return[damage[2]/100,damage[2]/100];
}

var oldrange=Pokemon.getPixelRange(damage[3],damage[4]);
var newrange=Pokemon.getPixelRange(damage[3]+damage[0],this.hpcolor);
if(damage[0]===0){

return[0,newrange[1]-newrange[0]];
}
if(oldrange[0]<newrange[0]){
var r=oldrange;
oldrange=newrange;
newrange=r;
}
return[oldrange[0]-newrange[1],oldrange[1]-newrange[0]];
};_proto.
healthParse=function healthParse(hpstring,parsedamage,heal)
{

if(!hpstring||!hpstring.length)return null;
var parenIndex=hpstring.lastIndexOf('(');
if(parenIndex>=0){

if(parsedamage){
var damage=parseFloat(hpstring);

if(isNaN(damage))damage=50;
if(heal){
this.hp+=this.maxhp*damage/100;
if(this.hp>this.maxhp)this.hp=this.maxhp;
}else{
this.hp-=this.maxhp*damage/100;
}

var ret=this.healthParse(hpstring);
if(ret&&ret[1]===100){

return[damage,100,damage];
}

var percent=Math.round(Math.ceil(damage*48/100)/48*100);
var pixels=Math.ceil(damage*48/100);
return[pixels,48,percent];
}
if(hpstring.substr(hpstring.length-1)!==')'){
return null;
}
hpstring=hpstring.substr(parenIndex+1,hpstring.length-parenIndex-2);
}

var oldhp=this.fainted?0:this.hp||1;
var oldmaxhp=this.maxhp;
var oldwidth=this.hpWidth(100);
var oldcolor=this.hpcolor;

this.side.battle.parseHealth(hpstring,this);
if(oldmaxhp===0){
oldmaxhp=oldhp=this.maxhp;
}

var oldnum=oldhp?Math.floor(this.maxhp*oldhp/oldmaxhp)||1:0;
var delta=this.hp-oldnum;
var deltawidth=this.hpWidth(100)-oldwidth;
return[delta,this.maxhp,deltawidth,oldnum,oldcolor];
};_proto.
checkDetails=function checkDetails(details){
if(!details)return false;
if(details===this.details)return true;
if(this.searchid)return false;
if(details.indexOf(', shiny')>=0){
if(this.checkDetails(details.replace(', shiny','')))return true;
}

details=details.replace(/(-[A-Za-z0-9]+)?(, |$)/,'-*$2');
return details===this.details;
};_proto.
getIdent=function getIdent(){
var slots=['a','b','c','d','e','f'];
return this.ident.substr(0,2)+slots[this.slot]+this.ident.substr(2);
};_proto.
removeVolatile=function removeVolatile(volatile){
this.side.battle.scene.removeEffect(this,volatile);
if(!this.hasVolatile(volatile))return;
delete this.volatiles[volatile];
};_proto.
addVolatile=function addVolatile(volatile){for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}
if(this.hasVolatile(volatile)&&!args.length)return;
this.volatiles[volatile]=[volatile].concat(args);
this.side.battle.scene.addEffect(this,volatile);
};_proto.
hasVolatile=function hasVolatile(volatile){
return!!this.volatiles[volatile];
};_proto.
removeTurnstatus=function removeTurnstatus(volatile){
this.side.battle.scene.removeEffect(this,volatile);
if(!this.hasTurnstatus(volatile))return;
delete this.turnstatuses[volatile];
};_proto.
addTurnstatus=function addTurnstatus(volatile){
volatile=toID(volatile);
this.side.battle.scene.addEffect(this,volatile);
if(this.hasTurnstatus(volatile))return;
this.turnstatuses[volatile]=[volatile];
};_proto.
hasTurnstatus=function hasTurnstatus(volatile){
return!!this.turnstatuses[volatile];
};_proto.
clearTurnstatuses=function clearTurnstatuses(){
for(var _id in this.turnstatuses){
this.removeTurnstatus(_id);
}
this.turnstatuses={};
this.side.battle.scene.updateStatbar(this);
};_proto.
removeMovestatus=function removeMovestatus(volatile){
this.side.battle.scene.removeEffect(this,volatile);
if(!this.hasMovestatus(volatile))return;
delete this.movestatuses[volatile];
};_proto.
addMovestatus=function addMovestatus(volatile){
volatile=toID(volatile);
if(this.hasMovestatus(volatile))return;
this.movestatuses[volatile]=[volatile];
this.side.battle.scene.addEffect(this,volatile);
};_proto.
hasMovestatus=function hasMovestatus(volatile){
return!!this.movestatuses[volatile];
};_proto.
clearMovestatuses=function clearMovestatuses(){
for(var _id2 in this.movestatuses){
this.removeMovestatus(_id2);
}
this.movestatuses={};
};_proto.
clearVolatiles=function clearVolatiles(){
this.volatiles={};
this.clearTurnstatuses();
this.clearMovestatuses();
this.side.battle.scene.clearEffects(this);
};_proto.
rememberMove=function rememberMove(moveName){var pp=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;var recursionSource=arguments.length>2?arguments[2]:undefined;
if(recursionSource===this.ident)return;
moveName=Dex.getMove(moveName).name;
if(moveName.charAt(0)==='*')return;
if(moveName==='Struggle')return;
if(this.volatiles.transform){

if(!recursionSource)recursionSource=this.ident;
this.volatiles.transform[1].rememberMove(moveName,0,recursionSource);
moveName='*'+moveName;
}for(var _i=0,_this$moveTrack=
this.moveTrack;_i<_this$moveTrack.length;_i++){var entry=_this$moveTrack[_i];
if(moveName===entry[0]){
entry[1]+=pp;
if(entry[1]<0)entry[1]=0;
return;
}
}
this.moveTrack.push([moveName,pp]);
};_proto.
rememberAbility=function rememberAbility(ability,isNotBase){
ability=Dex.getAbility(ability).name;
this.ability=ability;
if(!this.baseAbility&&!isNotBase){
this.baseAbility=ability;
}
};_proto.
getBoost=function getBoost(boostStat){
var boostStatTable={
atk:'Atk',
def:'Def',
spa:'SpA',
spd:'SpD',
spe:'Spe',
accuracy:'Accuracy',
evasion:'Evasion',
spc:'Spc'};

if(!this.boosts[boostStat]){
return'1&times;&nbsp;'+boostStatTable[boostStat];
}
if(this.boosts[boostStat]>6)this.boosts[boostStat]=6;
if(this.boosts[boostStat]<-6)this.boosts[boostStat]=-6;
if(boostStat==='accuracy'||boostStat==='evasion'){
if(this.boosts[boostStat]>0){
var goodBoostTable=[
'1&times;','1.33&times;','1.67&times;','2&times;','2.33&times;','2.67&times;','3&times;'];


return''+goodBoostTable[this.boosts[boostStat]]+'&nbsp;'+boostStatTable[boostStat];
}
var _badBoostTable=[
'1&times;','0.75&times;','0.6&times;','0.5&times;','0.43&times;','0.38&times;','0.33&times;'];


return''+_badBoostTable[-this.boosts[boostStat]]+'&nbsp;'+boostStatTable[boostStat];
}
if(this.boosts[boostStat]>0){
var _goodBoostTable=[
'1&times;','1.5&times;','2&times;','2.5&times;','3&times;','3.5&times;','4&times;'];


return''+_goodBoostTable[this.boosts[boostStat]]+'&nbsp;'+boostStatTable[boostStat];
}
var badBoostTable=[
'1&times;','0.67&times;','0.5&times;','0.4&times;','0.33&times;','0.29&times;','0.25&times;'];


return''+badBoostTable[-this.boosts[boostStat]]+'&nbsp;'+boostStatTable[boostStat];
};_proto.
getWeightKg=function getWeightKg(serverPokemon){
var autotomizeFactor=this.volatiles.autotomize?this.volatiles.autotomize[1]*100:0;
return Math.max(this.getTemplate(serverPokemon).weightkg-autotomizeFactor,0.1);
};_proto.
getBoostType=function getBoostType(boostStat){
if(!this.boosts[boostStat])return'neutral';
if(this.boosts[boostStat]>0)return'good';
return'bad';
};_proto.
clearVolatile=function clearVolatile(){
this.ability=this.baseAbility;
this.boosts={};
this.clearVolatiles();
for(var i=0;i<this.moveTrack.length;i++){
if(this.moveTrack[i][0].charAt(0)==='*'){
this.moveTrack.splice(i,1);
i--;
}
}

this.statusStage=0;
this.statusData.toxicTurns=0;
if(this.side.battle.gen===5)this.statusData.sleepTurns=0;
};_proto.




copyVolatileFrom=function copyVolatileFrom(pokemon,copyAll){
this.boosts=pokemon.boosts;
this.volatiles=pokemon.volatiles;

if(!copyAll){
delete this.volatiles['airballoon'];
delete this.volatiles['attract'];
delete this.volatiles['autotomize'];
delete this.volatiles['disable'];
delete this.volatiles['encore'];
delete this.volatiles['foresight'];
delete this.volatiles['imprison'];
delete this.volatiles['mimic'];
delete this.volatiles['miracleeye'];
delete this.volatiles['nightmare'];
delete this.volatiles['smackdown'];
delete this.volatiles['stockpile1'];
delete this.volatiles['stockpile2'];
delete this.volatiles['stockpile3'];
delete this.volatiles['torment'];
delete this.volatiles['typeadd'];
delete this.volatiles['typechange'];
delete this.volatiles['yawn'];
}
delete this.volatiles['transform'];
delete this.volatiles['formechange'];

pokemon.boosts={};
pokemon.volatiles={};
pokemon.side.battle.scene.removeTransform(pokemon);
pokemon.statusStage=0;
};_proto.
copyTypesFrom=function copyTypesFrom(pokemon){var _pokemon$getTypes=
pokemon.getTypes(),types=_pokemon$getTypes[0],addedType=_pokemon$getTypes[1];
this.addVolatile('typechange',types.join('/'));
if(addedType){
this.addVolatile('typeadd',addedType);
}else{
this.removeVolatile('typeadd');
}
};_proto.
getTypes=function getTypes(serverPokemon){
var types;
if(this.volatiles.typechange){
types=this.volatiles.typechange[1].split('/');
}else{
types=this.getTemplate(serverPokemon).types;
}
if(this.volatiles.roost&&types.includes('Flying')){
types=types.filter(function(typeName){return typeName!=='Flying';});
if(!types.length)types=['Normal'];
}
var addedType=this.volatiles.typeadd?this.volatiles.typeadd[1]:'';
return[types,addedType];
};_proto.
isGrounded=function isGrounded(serverPokemon){
var battle=this.side.battle;
if(battle.hasPseudoWeather('Gravity')){
return true;
}else if(this.volatiles['ingrain']&&battle.gen>=4){
return true;
}else if(this.volatiles['smackdown']){
return true;
}

var item=toID(serverPokemon?serverPokemon.item:this.item);
var ability=toID(this.ability||serverPokemon&&serverPokemon.ability);
if(battle.hasPseudoWeather('Magic Room')||this.volatiles['embargo']||ability==='klutz'){
item='';
}

if(item==='ironball'){
return true;
}
if(ability==='levitate'){
return false;
}
if(this.volatiles['magnetrise']||this.volatiles['telekinesis']){
return false;
}
if(item==='airballoon'){
return false;
}
return!this.getTypeList(serverPokemon).includes('Flying');
};_proto.
getTypeList=function getTypeList(serverPokemon){var _this$getTypes=
this.getTypes(serverPokemon),types=_this$getTypes[0],addedType=_this$getTypes[1];
return addedType?types.concat(addedType):types;
};_proto.
getSpecies=function getSpecies(serverPokemon){
return this.volatiles.formechange?this.volatiles.formechange[1]:
serverPokemon?serverPokemon.species:this.species;
};_proto.
getTemplate=function getTemplate(serverPokemon){
return this.side.battle.dex.getTemplate(this.getSpecies(serverPokemon));
};_proto.
reset=function reset(){
this.clearVolatile();
this.hp=this.maxhp;
this.fainted=false;
this.status='';
this.moveTrack=[];
this.name=this.name||this.species;
};_proto.






hpWidth=function hpWidth(maxWidth){
if(this.fainted||!this.hp)return 0;


if(this.hp===1&&this.maxhp>45)return 1;

if(this.maxhp===48){



var range=Pokemon.getPixelRange(this.hp,this.hpcolor);
var ratio=(range[0]+range[1])/2;
return Math.round(maxWidth*ratio)||1;
}
var percentage=Math.ceil(100*this.hp/this.maxhp);
if(percentage===100&&this.hp<this.maxhp){
percentage=99;
}
return percentage*maxWidth/100;
};Pokemon.
getHPText=function getHPText(pokemon){var precision=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;
if(pokemon.maxhp===100)return pokemon.hp+'%';
if(pokemon.maxhp!==48)return(100*pokemon.hp/pokemon.maxhp).toFixed(precision)+'%';
var range=Pokemon.getPixelRange(pokemon.hp,pokemon.hpcolor);
return Pokemon.getFormattedRange(range,precision,'–');
};_proto.
destroy=function destroy(){
if(this.sprite)this.sprite.destroy();
this.sprite=null;
this.side=null;
};return Pokemon;}();var


Side=function(){





















function Side(battle,n){this.name='';this.id='';this.foe=null;this.avatar='unknown';this.totalPokemon=6;this.x=0;this.y=0;this.z=0;this.missedPokemon=null;this.wisher=null;this.active=[null];this.lastPokemon=null;this.pokemon=[];this.sideConditions={};
this.battle=battle;
this.n=n;
this.updateSprites();
}var _proto2=Side.prototype;_proto2.

rollTrainerSprites=function rollTrainerSprites(){
var sprites=['lucas','dawn','ethan','lyra','hilbert','hilda'];
this.avatar=sprites[Math.floor(Math.random()*sprites.length)];
};_proto2.

behindx=function behindx(offset){
return this.x+(!this.n?-1:1)*offset;
};_proto2.
behindy=function behindy(offset){
return this.y+(!this.n?1:-1)*offset;
};_proto2.
leftof=function leftof(offset){
return(!this.n?-1:1)*offset;
};_proto2.
behind=function behind(offset){
return this.z+(!this.n?-1:1)*offset;
};_proto2.

clearPokemon=function clearPokemon(){for(var _i2=0,_this$pokemon=
this.pokemon;_i2<_this$pokemon.length;_i2++){var pokemon=_this$pokemon[_i2];pokemon.destroy();}
this.pokemon=[];
for(var i=0;i<this.active.length;i++){this.active[i]=null;}
this.lastPokemon=null;
};_proto2.
reset=function reset(){
this.clearPokemon();
this.updateSprites();
this.sideConditions={};
};_proto2.
updateSprites=function updateSprites(){
this.z=this.n?200:0;
this.battle.scene.updateSpritesForSide(this);
};_proto2.
setAvatar=function setAvatar(avatar){
this.avatar=avatar;
};_proto2.
setName=function setName(name,avatar){
if(name)this.name=name;
this.id=toID(this.name);
if(avatar){
this.setAvatar(avatar);
}else{
this.rollTrainerSprites();
if(this.foe&&this.avatar===this.foe.avatar)this.rollTrainerSprites();
}
if(this.battle.stagnateCallback)this.battle.stagnateCallback(this.battle);
};_proto2.
addSideCondition=function addSideCondition(effect){
var condition=effect.id;
if(this.sideConditions[condition]){
if(condition==='spikes'||condition==='toxicspikes'){
this.sideConditions[condition][1]++;
}
this.battle.scene.addSideCondition(this.n,condition);
return;
}

switch(condition){
case'auroraveil':
this.sideConditions[condition]=[effect.name,1,5,8];
break;
case'reflect':
this.sideConditions[condition]=[effect.name,1,5,this.battle.gen>=4?8:0];
break;
case'safeguard':
this.sideConditions[condition]=[effect.name,1,5,0];
break;
case'lightscreen':
this.sideConditions[condition]=[effect.name,1,5,this.battle.gen>=4?8:0];
break;
case'mist':
this.sideConditions[condition]=[effect.name,1,5,0];
break;
case'tailwind':
this.sideConditions[condition]=[effect.name,1,this.battle.gen>=5?4:3,0];
break;
case'luckychant':
this.sideConditions[condition]=[effect.name,1,5,0];
break;
case'stealthrock':
this.sideConditions[condition]=[effect.name,1,0,0];
break;
case'spikes':
this.sideConditions[condition]=[effect.name,1,0,0];
break;
case'toxicspikes':
this.sideConditions[condition]=[effect.name,1,0,0];
break;
case'stickyweb':
this.sideConditions[condition]=[effect.name,1,0,0];
break;
default:
this.sideConditions[condition]=[effect.name,1,0,0];
break;}

this.battle.scene.addSideCondition(this.n,condition);
};_proto2.
removeSideCondition=function removeSideCondition(condition){
var id=toID(condition);
if(!this.sideConditions[id])return;
delete this.sideConditions[id];
this.battle.scene.removeSideCondition(this.n,id);
};_proto2.
newPokemon=function newPokemon(data){var replaceSlot=arguments.length>1&&arguments[1]!==undefined?arguments[1]:-1;
var poke=new Pokemon(data,this);
if(!poke.ability&&poke.baseAbility)poke.ability=poke.baseAbility;
poke.reset();

if(replaceSlot>=0){
this.pokemon[replaceSlot]=poke;
}else{
this.pokemon.push(poke);
}
if(this.pokemon.length>this.totalPokemon||this.battle.speciesClause){

var existingTable={};
var toRemove=-1;
for(var poke1i=0;poke1i<this.pokemon.length;poke1i++){
var poke1=this.pokemon[poke1i];
if(!poke1.searchid)continue;
if(poke1.searchid in existingTable){
var poke2i=existingTable[poke1.searchid];
var poke2=this.pokemon[poke2i];
if(poke===poke1){
toRemove=poke2i;
}else if(poke===poke2){
toRemove=poke1i;
}else if(this.active.indexOf(poke1)>=0){
toRemove=poke2i;
}else if(this.active.indexOf(poke2)>=0){
toRemove=poke1i;
}else if(poke1.fainted&&!poke2.fainted){
toRemove=poke2i;
}else{
toRemove=poke1i;
}
break;
}
existingTable[poke1.searchid]=poke1i;
}
if(toRemove>=0){
if(this.pokemon[toRemove].fainted){

var illusionFound=null;for(var _i3=0,_this$pokemon2=
this.pokemon;_i3<_this$pokemon2.length;_i3++){var curPoke=_this$pokemon2[_i3];
if(curPoke===poke)continue;
if(curPoke.fainted)continue;
if(this.active.indexOf(curPoke)>=0)continue;
if(curPoke.species==='Zoroark'||curPoke.species==='Zorua'||curPoke.ability==='Illusion'){
illusionFound=curPoke;
break;
}
}
if(!illusionFound){for(var _i4=0,_this$pokemon3=




this.pokemon;_i4<_this$pokemon3.length;_i4++){var _curPoke=_this$pokemon3[_i4];
if(_curPoke===poke)continue;
if(_curPoke.fainted)continue;
if(this.active.indexOf(_curPoke)>=0)continue;
illusionFound=_curPoke;
break;
}
}
if(illusionFound){
illusionFound.fainted=true;
illusionFound.hp=0;
illusionFound.status='';
}
}
this.pokemon.splice(toRemove,1);
}
}
this.battle.scene.updateSidebar(this);

return poke;
};_proto2.

switchIn=function switchIn(pokemon,slot){
if(slot===undefined)slot=pokemon.slot;
this.active[slot]=pokemon;
pokemon.slot=slot;
pokemon.clearVolatile();
pokemon.lastMove='';
this.battle.lastMove='switch-in';
if(this.lastPokemon&&(this.lastPokemon.lastMove==='batonpass'||this.lastPokemon.lastMove==='zbatonpass')){
pokemon.copyVolatileFrom(this.lastPokemon);
}

this.battle.scene.animSummon(pokemon,slot);

if(this.battle.switchCallback)this.battle.switchCallback(this.battle,this);
};_proto2.
dragIn=function dragIn(pokemon){var slot=arguments.length>1&&arguments[1]!==undefined?arguments[1]:pokemon.slot;
var oldpokemon=this.active[slot];
if(oldpokemon===pokemon)return;
this.lastPokemon=oldpokemon;
if(oldpokemon){
this.battle.scene.animDragOut(oldpokemon);
oldpokemon.clearVolatile();
}
pokemon.clearVolatile();
pokemon.lastMove='';
this.battle.lastMove='switch-in';
this.active[slot]=pokemon;
pokemon.slot=slot;

this.battle.scene.animDragIn(pokemon,slot);

if(this.battle.dragCallback)this.battle.dragCallback(this.battle,this);
};_proto2.
replace=function replace(pokemon){var slot=arguments.length>1&&arguments[1]!==undefined?arguments[1]:pokemon.slot;
var oldpokemon=this.active[slot];
if(pokemon===oldpokemon)return;
this.lastPokemon=oldpokemon;
pokemon.clearVolatile();
if(oldpokemon){
pokemon.lastMove=oldpokemon.lastMove;
pokemon.hp=oldpokemon.hp;
pokemon.maxhp=oldpokemon.maxhp;
pokemon.hpcolor=oldpokemon.hpcolor;
pokemon.status=oldpokemon.status;
pokemon.copyVolatileFrom(oldpokemon,true);
pokemon.statusData=Object.assign({},oldpokemon.statusData);


oldpokemon.fainted=false;
oldpokemon.hp=oldpokemon.maxhp;
oldpokemon.status='???';
}
this.active[slot]=pokemon;
pokemon.slot=slot;

if(oldpokemon){
this.battle.scene.animUnsummon(oldpokemon,true);
}
this.battle.scene.animSummon(pokemon,slot,true);

if(this.battle.dragCallback)this.battle.dragCallback(this.battle,this);
};_proto2.
switchOut=function switchOut(pokemon){var slot=arguments.length>1&&arguments[1]!==undefined?arguments[1]:pokemon.slot;
if(pokemon.lastMove!=='batonpass'&&pokemon.lastMove!=='zbatonpass'){
pokemon.clearVolatile();
}else{
pokemon.removeVolatile('transform');
pokemon.removeVolatile('formechange');
}
if(pokemon.lastMove==='uturn'||pokemon.lastMove==='voltswitch'){
this.battle.log(['switchout',pokemon.ident],{from:pokemon.lastMove});
}else if(pokemon.lastMove!=='batonpass'&&pokemon.lastMove!=='zbatonpass'){
this.battle.log(['switchout',pokemon.ident]);
}
pokemon.statusData.toxicTurns=0;
if(this.battle.gen===5)pokemon.statusData.sleepTurns=0;
this.lastPokemon=pokemon;
this.active[slot]=null;

this.battle.scene.animUnsummon(pokemon);
};_proto2.
swapTo=function swapTo(pokemon,slot,kwArgs){
if(pokemon.slot===slot)return;
var target=this.active[slot];

var oslot=pokemon.slot;

pokemon.slot=slot;
if(target)target.slot=oslot;

this.active[slot]=pokemon;
this.active[oslot]=target;

this.battle.scene.animUnsummon(pokemon,true);
if(target)this.battle.scene.animUnsummon(target,true);

this.battle.scene.animSummon(pokemon,slot,true);
if(target)this.battle.scene.animSummon(target,oslot,true);
};_proto2.
swapWith=function swapWith(pokemon,target,kwArgs){

if(pokemon===target)return;

var oslot=pokemon.slot;
var nslot=target.slot;

pokemon.slot=nslot;
target.slot=oslot;
this.active[nslot]=pokemon;
this.active[oslot]=target;

this.battle.scene.animUnsummon(pokemon,true);
this.battle.scene.animUnsummon(target,true);

this.battle.scene.animSummon(pokemon,nslot,true);
this.battle.scene.animSummon(target,oslot,true);
};_proto2.
faint=function faint(pokemon){var slot=arguments.length>1&&arguments[1]!==undefined?arguments[1]:pokemon.slot;
pokemon.clearVolatile();
this.lastPokemon=pokemon;
this.active[slot]=null;

pokemon.fainted=true;
pokemon.hp=0;

this.battle.scene.animFaint(pokemon);
if(this.battle.faintCallback)this.battle.faintCallback(this.battle,this);
};_proto2.
destroy=function destroy(){
this.clearPokemon();
this.battle=null;
this.foe=null;
};return Side;}();var


Playback;(function(Playback){Playback[Playback["Uninitialized"]=0]="Uninitialized";Playback[Playback["Ready"]=1]="Ready";Playback[Playback["Playing"]=2]="Playing";Playback[Playback["Paused"]=3]="Paused";Playback[Playback["Finished"]=4]="Finished";Playback[Playback["Seeking"]=5]="Seeking";})(Playback||(Playback={}));var


















































Battle=function(){




















































































function Battle($frame,$logFrame){var id=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'';this.sidesSwitched=false;this.activityQueue=[];this.preemptActivityQueue=[];this.waitForAnimations=true;this.activityStep=0;this.fastForward=0;this.fastForwardWillScroll=false;this.resultWaiting=false;this.activeMoveIsSpread=null;this.faintCallback=null;this.switchCallback=null;this.dragCallback=null;this.turnCallback=null;this.startCallback=null;this.stagnateCallback=null;this.endCallback=null;this.customCallback=null;this.errorCallback=null;this.mute=false;this.messageFadeTime=300;this.messageShownTime=1;this.turnsSinceMoved=0;this.turn=0;this.ended=false;this.usesUpkeep=false;this.weather='';this.pseudoWeather=[];this.weatherTimeLeft=0;this.weatherMinTimeLeft=0;this.mySide=null;this.yourSide=null;this.p1=null;this.p2=null;this.myPokemon=null;this.sides=[null,null];this.lastMove='';this.gen=7;this.dex=Dex;this.teamPreviewCount=0;this.speciesClause=false;this.tier='';this.gameType='singles';this.rated=false;this.endLastTurnPending=false;this.totalTimeLeft=0;this.graceTimeLeft=0;this.kickingInactive=false;this.id='';this.roomid='';this.hardcoreMode=false;this.ignoreNicks=Dex.prefs('ignorenicks');this.ignoreOpponent=false;this.ignoreSpects=false;this.debug=false;this.joinButtons=false;this.paused=true;this.playbackState=Playback.Uninitialized;this.resumeButton=null;
this.id=id;

if(!$frame&&!$logFrame){
this.scene=new BattleSceneStub();
}else{
this.scene=new BattleScene(this,$frame,$logFrame);
}

this.init();
}var _proto3=Battle.prototype;_proto3.

removePseudoWeather=function removePseudoWeather(weather){
for(var i=0;i<this.pseudoWeather.length;i++){
if(this.pseudoWeather[i][0]===weather){
this.pseudoWeather.splice(i,1);
this.scene.updateWeather();
return;
}
}
};_proto3.
addPseudoWeather=function addPseudoWeather(weather,minTimeLeft,timeLeft){
this.pseudoWeather.push([weather,minTimeLeft,timeLeft]);
this.scene.updateWeather();
};_proto3.
hasPseudoWeather=function hasPseudoWeather(weather){for(var _i5=0,_this$pseudoWeather=
this.pseudoWeather;_i5<_this$pseudoWeather.length;_i5++){var _ref=_this$pseudoWeather[_i5];var pseudoWeatherName=_ref[0];
if(weather===pseudoWeatherName){
return true;
}
}
return false;
};_proto3.
init=function init(){
this.mySide=new Side(this,0);
this.yourSide=new Side(this,1);
this.mySide.foe=this.yourSide;
this.yourSide.foe=this.mySide;
this.sides=[this.mySide,this.yourSide];
this.p1=this.mySide;
this.p2=this.yourSide;
this.gen=7;
this.reset();
};_proto3.
reset=function reset(dontResetSound){

this.turn=0;
this.ended=false;
this.weather='';
this.weatherTimeLeft=0;
this.weatherMinTimeLeft=0;
this.pseudoWeather=[];
this.lastMove='';


this.scene.reset();for(var _i6=0,_this$sides=

this.sides;_i6<_this$sides.length;_i6++){var _side=_this$sides[_i6];
if(_side)_side.reset();
}


this.activeMoveIsSpread=null;
this.activityStep=0;
this.fastForwardOff();
this.resultWaiting=false;
this.paused=true;
if(this.playbackState!==Playback.Seeking){
this.playbackState=this.activityQueue.length?Playback.Ready:Playback.Uninitialized;
if(!dontResetSound)this.scene.soundStop();
}
this.resetTurnsSinceMoved();
};_proto3.
destroy=function destroy(){
this.scene.destroy();

for(var i=0;i<this.sides.length;i++){
if(this.sides[i])this.sides[i].destroy();
this.sides[i]=null;
}
this.mySide=null;
this.yourSide=null;
this.p1=null;
this.p2=null;
};_proto3.

log=function log(args,kwArgs,preempt){
this.scene.log.add(args,kwArgs,preempt);
};_proto3.

resetToCurrentTurn=function resetToCurrentTurn(){
if(this.ended){
this.reset(true);
this.fastForwardTo(-1);
}else{
var turn=this.turn;
var paused=this.paused;
this.reset(true);
this.paused=paused;
if(turn)this.fastForwardTo(turn);
if(!paused){
this.play();
}else{
this.pause();
}
}
};_proto3.
switchSides=function switchSides(){
this.setSidesSwitched(!this.sidesSwitched);
this.resetToCurrentTurn();
};_proto3.
setSidesSwitched=function setSidesSwitched(sidesSwitched){
this.sidesSwitched=sidesSwitched;
if(this.sidesSwitched){
this.mySide=this.p2;
this.yourSide=this.p1;
}else{
this.mySide=this.p1;
this.yourSide=this.p2;
}
this.sides[0]=this.mySide;
this.sides[1]=this.yourSide;
this.sides[0].n=0;
this.sides[1].n=1;


};_proto3.




start=function start(){
this.log(['start']);
if(this.startCallback)this.startCallback(this);
};_proto3.
winner=function winner(_winner){
this.log(['win',_winner||'']);
this.ended=true;
};_proto3.
prematureEnd=function prematureEnd(){
this.log(['message','This replay ends here.']);
this.ended=true;
};_proto3.
endLastTurn=function endLastTurn(){
if(this.endLastTurnPending){
this.endLastTurnPending=false;
this.scene.updateStatbars();
}
};_proto3.
setHardcoreMode=function setHardcoreMode(mode){
this.hardcoreMode=mode;
this.scene.updateSidebars();
this.scene.updateWeather(true);
};_proto3.
setTurn=function setTurn(turnNum){
turnNum=parseInt(turnNum,10);
if(turnNum===this.turn+1){
this.endLastTurnPending=true;
}
if(this.turn&&!this.usesUpkeep)this.updatePseudoWeatherLeft();
this.turn=turnNum;

if(this.mySide.active[0])this.mySide.active[0].clearTurnstatuses();
if(this.mySide.active[1])this.mySide.active[1].clearTurnstatuses();
if(this.mySide.active[2])this.mySide.active[2].clearTurnstatuses();
if(this.yourSide.active[0])this.yourSide.active[0].clearTurnstatuses();
if(this.yourSide.active[1])this.yourSide.active[1].clearTurnstatuses();
if(this.yourSide.active[2])this.yourSide.active[2].clearTurnstatuses();

if(!this.fastForward)this.turnsSinceMoved++;

this.scene.incrementTurn();

if(this.fastForward){
if(this.turnCallback)this.turnCallback(this);
if(this.fastForward>-1&&turnNum>=this.fastForward){
this.fastForwardOff();
if(this.endCallback)this.endCallback(this);
}
return;
}

if(this.turnCallback)this.turnCallback(this);
};_proto3.
resetTurnsSinceMoved=function resetTurnsSinceMoved(){
this.turnsSinceMoved=0;
this.scene.acceleration=this.messageFadeTime<150?2:1;
};_proto3.
updateToxicTurns=function updateToxicTurns(){for(var _i7=0,_this$sides2=
this.sides;_i7<_this$sides2.length;_i7++){var _side2=_this$sides2[_i7];for(var _i8=0,_side2$active=
_side2.active;_i8<_side2$active.length;_i8++){var poke=_side2$active[_i8];
if(poke&&poke.status==='tox')poke.statusData.toxicTurns++;
}
}
};_proto3.
changeWeather=function changeWeather(weatherName,poke,isUpkeep,ability){
var weather=toID(weatherName);
if(!weather||weather==='none'){
weather='';
}
if(isUpkeep){
if(this.weather&&this.weatherTimeLeft){
this.weatherTimeLeft--;
if(this.weatherMinTimeLeft!==0)this.weatherMinTimeLeft--;
}
if(!this.fastForward){
this.scene.upkeepWeather();
}
return;
}
if(weather){
var isExtremeWeather=weather==='deltastream'||weather==='desolateland'||weather==='primordialsea';
if(poke){
if(ability){
this.activateAbility(poke,ability.name);
}
this.weatherTimeLeft=this.gen<=5||isExtremeWeather?0:8;
this.weatherMinTimeLeft=this.gen<=5||isExtremeWeather?0:5;
}else if(isExtremeWeather){
this.weatherTimeLeft=0;
this.weatherMinTimeLeft=0;
}else{
this.weatherTimeLeft=this.gen<=3?5:8;
this.weatherMinTimeLeft=this.gen<=3?0:5;
}
}
this.weather=weather;
this.scene.updateWeather();
};_proto3.
updatePseudoWeatherLeft=function updatePseudoWeatherLeft(){for(var _i9=0,_this$pseudoWeather2=
this.pseudoWeather;_i9<_this$pseudoWeather2.length;_i9++){var pWeather=_this$pseudoWeather2[_i9];
if(pWeather[1])pWeather[1]--;
if(pWeather[2])pWeather[2]--;
}for(var _i10=0,_this$sides3=
this.sides;_i10<_this$sides3.length;_i10++){var _side3=_this$sides3[_i10];
for(var _id3 in _side3.sideConditions){
var cond=_side3.sideConditions[_id3];
if(cond[2])cond[2]--;
if(cond[3])cond[3]--;
}
}
this.scene.updateWeather();
};_proto3.
useMove=function useMove(pokemon,move,target,kwArgs){
var fromeffect=Dex.getEffect(kwArgs.from);
this.activateAbility(pokemon,fromeffect);
pokemon.clearMovestatuses();
if(move.id==='focuspunch'){
pokemon.removeTurnstatus('focuspunch');
}
this.scene.updateStatbar(pokemon);
if(fromeffect.id==='sleeptalk'){
pokemon.rememberMove(move.name,0);
}else if(!fromeffect.id||fromeffect.id==='pursuit'){
var moveName=move.name;
if(move.isZ){
pokemon.item=move.isZ;
var item=Dex.getItem(move.isZ);
if(item.zMoveFrom)moveName=item.zMoveFrom;
}else if(move.name.slice(0,2)==='Z-'){
moveName=moveName.slice(2);
move=Dex.getMove(moveName);
if(window.BattleItems){
for(var _item in BattleItems){
if(BattleItems[_item].zMoveType===move.type)pokemon.item=_item;
}
}
}
var pp=1;
if(move.target==="all"){for(var _i11=0,_pokemon$side$foe$act=
pokemon.side.foe.active;_i11<_pokemon$side$foe$act.length;_i11++){var active=_pokemon$side$foe$act[_i11];
if(active&&toID(active.ability)==='pressure'){
pp+=1;
}
}
}else if(target&&target.side!==pokemon.side&&toID(target.ability)==='pressure'){
pp+=1;
}
pokemon.rememberMove(moveName,pp);
}
pokemon.lastMove=move.id;
this.lastMove=move.id;
if(move.id==='wish'||move.id==='healingwish'){
pokemon.side.wisher=pokemon;
}
};_proto3.
animateMove=function animateMove(pokemon,move,target,kwArgs){
if(this.fastForward||kwArgs.still)return;

if(!target)target=pokemon.side.foe.active[0];
if(!target)target=pokemon.side.foe.missedPokemon;
if(kwArgs.miss&&target.side){
target=target.side.missedPokemon;
}
if(kwArgs.notarget){
return;
}

if(kwArgs.prepare||kwArgs.anim==='prepare'){
this.scene.runPrepareAnim(move.id,pokemon,target);
return;
}

var usedMove=kwArgs.anim?Dex.getMove(kwArgs.anim):move;
if(!kwArgs.spread){
this.scene.runMoveAnim(usedMove.id,[pokemon,target]);
return;
}

this.activeMoveIsSpread=kwArgs.spread;
var targets=[pokemon];
if(kwArgs.spread==='.'){

targets.push(target.side.missedPokemon);
}else{for(var _i12=0,_kwArgs$spread$split=
kwArgs.spread.split(',');_i12<_kwArgs$spread$split.length;_i12++){var hitTarget=_kwArgs$spread$split[_i12];
targets.push(this.getPokemon(hitTarget+': ?'));
}
}

this.scene.runMoveAnim(usedMove.id,targets);
};_proto3.
cantUseMove=function cantUseMove(pokemon,effect,move,kwArgs){
pokemon.clearMovestatuses();
this.scene.updateStatbar(pokemon);
if(effect.id in BattleStatusAnims){
this.scene.runStatusAnim(effect.id,[pokemon]);
}
this.activateAbility(pokemon,effect);
if(move.id)pokemon.rememberMove(move.name,0);
switch(effect.id){
case'par':
this.scene.resultAnim(pokemon,'Paralyzed','par');
break;
case'frz':
this.scene.resultAnim(pokemon,'Frozen','frz');
break;
case'slp':
this.scene.resultAnim(pokemon,'Asleep','slp');
pokemon.statusData.sleepTurns++;
break;
case'truant':
this.scene.resultAnim(pokemon,'Loafing around','neutral');
break;
case'recharge':
this.scene.runOtherAnim('selfstatus',[pokemon]);
this.scene.resultAnim(pokemon,'Must recharge','neutral');
break;
case'focuspunch':
this.scene.resultAnim(pokemon,'Lost focus','neutral');
pokemon.removeTurnstatus('focuspunch');
break;
case'shelltrap':
this.scene.resultAnim(pokemon,'Trap failed','neutral');
pokemon.removeTurnstatus('shelltrap');
break;
case'flinch':
this.scene.resultAnim(pokemon,'Flinched','neutral');
pokemon.removeTurnstatus('focuspunch');
break;
case'attract':
this.scene.resultAnim(pokemon,'Immobilized','neutral');
break;}

this.scene.animReset(pokemon);
};_proto3.

activateAbility=function activateAbility(pokemon,effectOrName,isNotBase){
if(!pokemon||!effectOrName)return;
if(typeof effectOrName!=='string'){
if(effectOrName.effectType!=='Ability')return;
effectOrName=effectOrName.name;
}
this.scene.abilityActivateAnim(pokemon,effectOrName);
pokemon.rememberAbility(effectOrName,isNotBase);
};_proto3.

runMinor=function runMinor(args,kwArgs,nextArgs,nextKwargs){
if(nextArgs&&nextKwargs){
if(args[2]==='Sturdy'&&args[0]==='-activate'){
args[2]='ability: Sturdy';
}
if(['-crit','-supereffective','-resisted'].includes(args[0])||args[2]==='ability: Sturdy'){
kwArgs.then='.';
}
if(args[0]==='-damage'&&!kwArgs.from&&args[1]!==nextArgs[1]&&(
['-crit','-supereffective','-resisted'].includes(nextArgs[0])||
nextArgs[0]==='-damage'&&!nextKwargs.from))
{
kwArgs.then='.';
}
if(args[0]==='-damage'&&nextArgs[0]==='-damage'&&kwArgs.from&&kwArgs.from===nextKwargs.from){
kwArgs.then='.';
}
if(args[0]==='-ability'&&(args[2]==='Intimidate'||args[3]==='boost')){
kwArgs.then='.';
}
if(args[0]==='-unboost'&&nextArgs[0]==='-unboost'){
kwArgs.then='.';
}
if(args[0]==='-boost'&&nextArgs[0]==='-boost'){
kwArgs.then='.';
}
if(args[0]==='-damage'&&kwArgs.from==='Leech Seed'&&nextArgs[0]==='-heal'&&nextKwargs.silent){
kwArgs.then='.';
}
if(args[0]==='detailschange'&&nextArgs[0]==='-mega'){
if(this.scene.closeMessagebar()){
this.activityStep--;
return;
}
kwArgs.simult='.';
}
}
if(kwArgs.then)this.waitForAnimations=false;
if(kwArgs.simult)this.waitForAnimations='simult';

switch(args[0]){
case'-damage':{
var poke=this.getPokemon(args[1]);
var damage=poke.healthParse(args[2],true);
if(damage===null)break;
var range=poke.getDamageRange(damage);

if(kwArgs.from){
var effect=Dex.getEffect(kwArgs.from);
var ofpoke=this.getPokemon(kwArgs.of);
this.activateAbility(ofpoke,effect);
if(effect.effectType==='Item'){
(ofpoke||poke).item=effect.name;
}
switch(effect.id){
case'brn':
this.scene.runStatusAnim('brn',[poke]);
break;
case'psn':
this.scene.runStatusAnim('psn',[poke]);
break;
case'baddreams':
this.scene.runStatusAnim('cursed',[poke]);
break;
case'curse':
this.scene.runStatusAnim('cursed',[poke]);
break;
case'confusion':
this.scene.runStatusAnim('confusedselfhit',[poke]);
break;
case'leechseed':
this.scene.runOtherAnim('leech',[ofpoke,poke]);
break;
case'bind':
case'wrap':
this.scene.runOtherAnim('bound',[poke]);
break;}

}else{
var damageinfo=''+Pokemon.getFormattedRange(range,damage[1]===100?0:1,"\u2013");
if(damage[1]!==100){
var hover=''+(damage[0]<0?"\u2212":'')+
Math.abs(damage[0])+'/'+damage[1];
if(damage[1]===48){
hover+=' pixels';
}

damageinfo='||'+hover+'||'+damageinfo+'||';
}
args[3]=damageinfo;
}
this.scene.damageAnim(poke,Pokemon.getFormattedRange(range,0,' to '));
this.log(args,kwArgs);
break;
}
case'-heal':{
var _poke=this.getPokemon(args[1]);
var _damage=_poke.healthParse(args[2],true,true);
if(_damage===null)break;
var _range=_poke.getDamageRange(_damage);

if(kwArgs.from){
var _effect=Dex.getEffect(kwArgs.from);
this.activateAbility(_poke,_effect);
if(_effect.effectType==='Item'){
_poke.item=_effect.name;
}
switch(_effect.id){
case'lunardance':for(var _i13=0,_poke$moveTrack=
_poke.moveTrack;_i13<_poke$moveTrack.length;_i13++){var trackedMove=_poke$moveTrack[_i13];
trackedMove[1]=0;
}

case'healingwish':
this.lastMove='healing-wish';
this.scene.runResidualAnim('healingwish',_poke);
_poke.side.wisher=null;
break;
case'wish':
this.scene.runResidualAnim('wish',_poke);
break;}

}
this.scene.runOtherAnim('heal',[_poke]);
this.scene.healAnim(_poke,Pokemon.getFormattedRange(_range,0,' to '));
this.log(args,kwArgs);
break;
}
case'-sethp':{
for(var _k=0;_k<2;_k++){
var cpoke=this.getPokemon(args[1+2*_k]);
if(cpoke){
var _damage2=cpoke.healthParse(args[2+2*_k]);
var _range2=cpoke.getDamageRange(_damage2);
var formattedRange=Pokemon.getFormattedRange(_range2,0,' to ');
var diff=_damage2[0];
if(diff>0){
this.scene.healAnim(cpoke,formattedRange);
}else{
this.scene.damageAnim(cpoke,formattedRange);
}
}
}
this.log(args,kwArgs);
break;
}
case'-boost':{
var _poke2=this.getPokemon(args[1]);
var _stat=args[2];
if(this.gen===1&&_stat==='spd')break;
if(this.gen===1&&_stat==='spa')_stat='spc';
var amount=parseInt(args[3],10);
if(amount===0){
this.scene.resultAnim(_poke2,'Highest '+BattleStats[_stat],'neutral');
this.log(args,kwArgs);
break;
}
if(!_poke2.boosts[_stat]){
_poke2.boosts[_stat]=0;
}
_poke2.boosts[_stat]+=amount;

if(!kwArgs.silent&&kwArgs.from){
var _effect2=Dex.getEffect(kwArgs.from);
var _ofpoke=this.getPokemon(kwArgs.of);
if(!(_effect2.id==='weakarmor'&&_stat==='spe')){
this.activateAbility(_ofpoke||_poke2,_effect2);
}
}
this.scene.resultAnim(_poke2,_poke2.getBoost(_stat),'good');
this.log(args,kwArgs);
break;
}
case'-unboost':{
var _poke3=this.getPokemon(args[1]);
var _stat2=args[2];
if(this.gen===1&&_stat2==='spd')break;
if(this.gen===1&&_stat2==='spa')_stat2='spc';
var _amount=parseInt(args[3],10);
if(_amount===0){
this.scene.resultAnim(_poke3,'Lowest '+BattleStats[_stat2],'bad');
this.log(args,kwArgs);
break;
}
if(!_poke3.boosts[_stat2]){
_poke3.boosts[_stat2]=0;
}
_poke3.boosts[_stat2]-=_amount;

if(!kwArgs.silent&&kwArgs.from){
var _effect3=Dex.getEffect(kwArgs.from);
var _ofpoke2=this.getPokemon(kwArgs.of);
this.activateAbility(_ofpoke2||_poke3,_effect3);
}
this.scene.resultAnim(_poke3,_poke3.getBoost(_stat2),'bad');
this.log(args,kwArgs);
break;
}
case'-setboost':{
var _poke4=this.getPokemon(args[1]);
var _stat3=args[2];
var _amount2=parseInt(args[3],10);
_poke4.boosts[_stat3]=_amount2;
this.scene.resultAnim(_poke4,_poke4.getBoost(_stat3),_amount2>0?'good':'bad');
this.log(args,kwArgs);
break;
}
case'-swapboost':{
var _poke5=this.getPokemon(args[1]);
var poke2=this.getPokemon(args[2]);
var stats=args[3]?args[3].split(', '):['atk','def','spa','spd','spe','accuracy','evasion'];for(var _i14=0;_i14<
stats.length;_i14++){var _stat4=stats[_i14];
var tmp=_poke5.boosts[_stat4];
_poke5.boosts[_stat4]=poke2.boosts[_stat4];
if(!_poke5.boosts[_stat4])delete _poke5.boosts[_stat4];
poke2.boosts[_stat4]=tmp;
if(!poke2.boosts[_stat4])delete poke2.boosts[_stat4];
}
this.scene.resultAnim(_poke5,'Stats swapped','neutral');
this.scene.resultAnim(poke2,'Stats swapped','neutral');

this.log(args,kwArgs);
break;
}
case'-clearpositiveboost':{
var _poke6=this.getPokemon(args[1]);
var _ofpoke3=this.getPokemon(args[2]);
var _effect4=Dex.getEffect(args[3]);
for(var _stat5 in _poke6.boosts){
if(_poke6.boosts[_stat5]>0)delete _poke6.boosts[_stat5];
}
this.scene.resultAnim(_poke6,'Boosts lost','bad');

if(_effect4.id){
switch(_effect4.id){
case'spectralthief':

this.scene.runOtherAnim('spectralthiefboost',[_ofpoke3,_poke6]);
break;}

}
this.log(args,kwArgs);
break;
}
case'-clearnegativeboost':{
var _poke7=this.getPokemon(args[1]);
for(var _stat6 in _poke7.boosts){
if(_poke7.boosts[_stat6]<0)delete _poke7.boosts[_stat6];
}
this.scene.resultAnim(_poke7,'Restored','good');

this.log(args,kwArgs);
break;
}
case'-copyboost':{
var _poke8=this.getPokemon(args[1]);
var frompoke=this.getPokemon(args[2]);
var _stats=args[3]?args[3].split(', '):['atk','def','spa','spd','spe','accuracy','evasion'];for(var _i15=0;_i15<
_stats.length;_i15++){var _stat7=_stats[_i15];
_poke8.boosts[_stat7]=frompoke.boosts[_stat7];
if(!_poke8.boosts[_stat7])delete _poke8.boosts[_stat7];
}
this.scene.resultAnim(_poke8,'Stats copied','neutral');

this.log(args,kwArgs);
break;
}
case'-clearboost':{
var _poke9=this.getPokemon(args[1]);
_poke9.boosts={};
this.scene.resultAnim(_poke9,'Stats reset','neutral');

this.log(args,kwArgs);
break;
}
case'-invertboost':{
var _poke10=this.getPokemon(args[1]);
for(var _stat8 in _poke10.boosts){
_poke10.boosts[_stat8]=-_poke10.boosts[_stat8];
}
this.scene.resultAnim(_poke10,'Stats inverted','neutral');

this.log(args,kwArgs);
break;
}
case'-clearallboost':{
var timeOffset=this.scene.timeOffset;for(var _i16=0,_this$sides4=
this.sides;_i16<_this$sides4.length;_i16++){var _side4=_this$sides4[_i16];for(var _i17=0,_side4$active=
_side4.active;_i17<_side4$active.length;_i17++){var active=_side4$active[_i17];
if(active){
active.boosts={};
this.scene.timeOffset=timeOffset;
this.scene.resultAnim(active,'Stats reset','neutral');
}
}
}

this.log(args,kwArgs);
break;
}
case'-crit':{
var _poke11=this.getPokemon(args[1]);
if(_poke11)this.scene.resultAnim(_poke11,'Critical hit','bad');
if(this.activeMoveIsSpread)kwArgs.spread='.';
this.log(args,kwArgs);
break;
}
case'-supereffective':{
var _poke12=this.getPokemon(args[1]);
if(_poke12){
this.scene.resultAnim(_poke12,'Super-effective','bad');
if(window.Config&&Config.server&&Config.server.afd){
this.scene.runOtherAnim('hitmark',[_poke12]);
}
}
if(this.activeMoveIsSpread)kwArgs.spread='.';
this.log(args,kwArgs);
break;
}
case'-resisted':{
var _poke13=this.getPokemon(args[1]);
if(_poke13)this.scene.resultAnim(_poke13,'Resisted','neutral');
if(this.activeMoveIsSpread)kwArgs.spread='.';
this.log(args,kwArgs);
break;
}
case'-immune':{
var _poke14=this.getPokemon(args[1]);
var fromeffect=Dex.getEffect(kwArgs.from);
this.activateAbility(this.getPokemon(kwArgs.of)||_poke14,fromeffect);
this.log(args,kwArgs);
this.scene.resultAnim(_poke14,'Immune','neutral');
break;
}
case'-miss':{
var target=this.getPokemon(args[2]);
if(target){
this.scene.resultAnim(target,'Missed','neutral');
}
this.log(args,kwArgs);
break;
}
case'-fail':{
var _poke15=this.getPokemon(args[1]);
var _effect5=Dex.getEffect(args[2]);
var _fromeffect=Dex.getEffect(kwArgs.from);
var _ofpoke4=this.getPokemon(kwArgs.of);
this.activateAbility(_ofpoke4||_poke15,_fromeffect);
switch(_effect5.id){
case'brn':
this.scene.resultAnim(_poke15,'Already burned','neutral');
break;
case'tox':
case'psn':
this.scene.resultAnim(_poke15,'Already poisoned','neutral');
break;
case'slp':
if(_fromeffect.id==='uproar'){
this.scene.resultAnim(_poke15,'Failed','neutral');
}else{
this.scene.resultAnim(_poke15,'Already asleep','neutral');
}
break;
case'par':
this.scene.resultAnim(_poke15,'Already paralyzed','neutral');
break;
case'frz':
this.scene.resultAnim(_poke15,'Already frozen','neutral');
break;
case'unboost':
this.scene.resultAnim(_poke15,'Stat drop blocked','neutral');
break;
default:
if(_poke15){
this.scene.resultAnim(_poke15,'Failed','neutral');
}
break;}

this.log(args,kwArgs);
break;
}
case'-block':{
var _poke16=this.getPokemon(args[1]);
var _effect6=Dex.getEffect(args[2]);
this.activateAbility(_poke16,_effect6);
switch(_effect6.id){
case'quickguard':
_poke16.addTurnstatus('quickguard');
this.scene.resultAnim(_poke16,'Quick Guard','good');
break;
case'wideguard':
_poke16.addTurnstatus('wideguard');
this.scene.resultAnim(_poke16,'Wide Guard','good');
break;
case'craftyshield':
_poke16.addTurnstatus('craftyshield');
this.scene.resultAnim(_poke16,'Crafty Shield','good');
break;
case'protect':
_poke16.addTurnstatus('protect');
this.scene.resultAnim(_poke16,'Protected','good');
break;

case'safetygoggles':
_poke16.item='Safety Goggles';
break;
case'protectivepads':
_poke16.item='Protective Pads';
break;}

this.log(args,kwArgs);
break;
}
case'-center':case'-notarget':case'-ohko':
case'-combine':case'-hitcount':case'-waiting':case'-zbroken':{
this.log(args,kwArgs);
break;
}
case'-zpower':{
var _poke17=this.getPokemon(args[1]);
this.scene.runOtherAnim('zpower',[_poke17]);
this.log(args,kwArgs);
break;
}
case'-prepare':{
var _poke18=this.getPokemon(args[1]);
var moveid=toID(args[2]);
var _target=this.getPokemon(args[3])||_poke18.side.foe.active[0]||_poke18;
this.scene.runPrepareAnim(moveid,_poke18,_target);
this.log(args,kwArgs);
break;
}
case'-mustrecharge':{
var _poke19=this.getPokemon(args[1]);
_poke19.addMovestatus('mustrecharge');
this.scene.updateStatbar(_poke19);
break;
}
case'-status':{
var _poke20=this.getPokemon(args[1]);
var _effect7=Dex.getEffect(kwArgs.from);
var _ofpoke5=this.getPokemon(kwArgs.of)||_poke20;
_poke20.status=args[2];
_poke20.removeVolatile('yawn');
this.activateAbility(_ofpoke5||_poke20,_effect7);
if(_effect7.effectType==='Item'){
_ofpoke5.item=_effect7.name;
}

switch(args[2]){
case'brn':
this.scene.resultAnim(_poke20,'Burned','brn');
this.scene.runStatusAnim('brn',[_poke20]);
break;
case'tox':
this.scene.resultAnim(_poke20,'Toxic poison','psn');
this.scene.runStatusAnim('psn',[_poke20]);
_poke20.statusData.toxicTurns=_effect7.name==="Toxic Orb"?-1:0;
break;
case'psn':
this.scene.resultAnim(_poke20,'Poisoned','psn');
this.scene.runStatusAnim('psn',[_poke20]);
break;
case'slp':
this.scene.resultAnim(_poke20,'Asleep','slp');
if(_effect7.id==='rest'){
_poke20.statusData.sleepTurns=0;
}
break;
case'par':
this.scene.resultAnim(_poke20,'Paralyzed','par');
this.scene.runStatusAnim('par',[_poke20]);
break;
case'frz':
this.scene.resultAnim(_poke20,'Frozen','frz');
this.scene.runStatusAnim('frz',[_poke20]);
break;
default:
this.scene.updateStatbar(_poke20);
break;}

this.log(args,kwArgs);
break;
}
case'-curestatus':{
var _poke21=this.getPokemon(args[1]);
var _effect8=Dex.getEffect(kwArgs.from);

if(_effect8.id){
switch(_effect8.id){
case'flamewheel':
case'flareblitz':
case'fusionflare':
case'sacredfire':
case'scald':
case'steameruption':
kwArgs.thaw='.';
break;}

}
if(_poke21){
_poke21.status='';
switch(args[2]){
case'brn':
this.scene.resultAnim(_poke21,'Burn cured','good');
break;
case'tox':
case'psn':
_poke21.statusData.toxicTurns=0;
this.scene.resultAnim(_poke21,'Poison cured','good');
break;
case'slp':
this.scene.resultAnim(_poke21,'Woke up','good');
_poke21.statusData.sleepTurns=0;
break;
case'par':
this.scene.resultAnim(_poke21,'Paralysis cured','good');
break;
case'frz':
this.scene.resultAnim(_poke21,'Thawed','good');
break;
default:
_poke21.removeVolatile('confusion');
this.scene.resultAnim(_poke21,'Cured','good');}

}
this.log(args,kwArgs);
break;

}
case'-cureteam':{
var _poke22=this.getPokemon(args[1]);for(var _i18=0,_poke22$side$pokemon=
_poke22.side.pokemon;_i18<_poke22$side$pokemon.length;_i18++){var _target2=_poke22$side$pokemon[_i18];
_target2.status='';
this.scene.updateStatbarIfExists(_target2);
}

this.scene.resultAnim(_poke22,'Team Cured','good');
this.log(args,kwArgs);
break;
}
case'-item':{
var _poke23=this.getPokemon(args[1]);
var item=Dex.getItem(args[2]);
var _effect9=Dex.getEffect(kwArgs.from);
var _ofpoke6=this.getPokemon(kwArgs.of);
_poke23.item=item.name;
_poke23.itemEffect='';
_poke23.removeVolatile('airballoon');
if(item.id==='airballoon')_poke23.addVolatile('airballoon');

if(_effect9.id){
switch(_effect9.id){
case'pickup':
this.activateAbility(_poke23,"Pickup");

case'recycle':
_poke23.itemEffect='found';
this.scene.resultAnim(_poke23,item.name,'neutral');
break;
case'frisk':
this.activateAbility(_ofpoke6,"Frisk");
if(_poke23&&_poke23!==_ofpoke6){
_poke23.itemEffect='frisked';
this.scene.resultAnim(_poke23,item.name,'neutral');
}
break;
case'magician':
case'pickpocket':
this.activateAbility(_poke23,_effect9.name);

case'thief':
case'covet':

_ofpoke6.item='';
_ofpoke6.itemEffect='';
_ofpoke6.prevItem=item.name;
_ofpoke6.prevItemEffect='stolen';
_ofpoke6.addVolatile('itemremoved');
_poke23.itemEffect='stolen';
this.scene.resultAnim(_poke23,item.name,'neutral');
this.scene.resultAnim(_ofpoke6,'Item Stolen','bad');
break;
case'harvest':
_poke23.itemEffect='harvested';
this.activateAbility(_poke23,"Harvest");
this.scene.resultAnim(_poke23,item.name,'neutral');
break;
case'bestow':
_poke23.itemEffect='bestowed';
this.scene.resultAnim(_poke23,item.name,'neutral');
break;
case'switcheroo':
case'trick':
_poke23.itemEffect='tricked';

default:
break;}

}else{
switch(item.id){
case'airballoon':
this.scene.resultAnim(_poke23,'Balloon','good');
break;}

}
this.log(args,kwArgs);
break;
}
case'-enditem':{
var _poke24=this.getPokemon(args[1]);
var _item2=Dex.getItem(args[2]);
var _effect10=Dex.getEffect(kwArgs.from);
_poke24.item='';
_poke24.itemEffect='';
_poke24.prevItem=_item2.name;
_poke24.prevItemEffect='';
_poke24.removeVolatile('airballoon');
_poke24.addVolatile('itemremoved');
if(kwArgs.eat){
_poke24.prevItemEffect='eaten';
this.scene.runOtherAnim('consume',[_poke24]);
this.lastMove=_item2.id;
}else if(kwArgs.weaken){
_poke24.prevItemEffect='eaten';
this.lastMove=_item2.id;
}else if(_effect10.id){
switch(_effect10.id){
case'fling':
_poke24.prevItemEffect='flung';
break;
case'knockoff':
_poke24.prevItemEffect='knocked off';
this.scene.runOtherAnim('itemoff',[_poke24]);
this.scene.resultAnim(_poke24,'Item knocked off','neutral');
break;
case'stealeat':
_poke24.prevItemEffect='stolen';
break;
case'gem':
_poke24.prevItemEffect='consumed';
break;
case'incinerate':
_poke24.prevItemEffect='incinerated';
break;}

}else{
switch(_item2.id){
case'airballoon':
_poke24.prevItemEffect='popped';
_poke24.removeVolatile('airballoon');
this.scene.resultAnim(_poke24,'Balloon popped','neutral');
break;
case'focussash':
_poke24.prevItemEffect='consumed';
this.scene.resultAnim(_poke24,'Sash','neutral');
break;
case'focusband':
this.scene.resultAnim(_poke24,'Focus Band','neutral');
break;
case'redcard':
_poke24.prevItemEffect='held up';
break;
default:
_poke24.prevItemEffect='consumed';
break;}

}
this.log(args,kwArgs);
break;
}
case'-ability':{
var _poke25=this.getPokemon(args[1]);
var ability=Dex.getAbility(args[2]);
var _effect11=Dex.getEffect(kwArgs.from);
var _ofpoke7=this.getPokemon(kwArgs.of);
_poke25.rememberAbility(ability.name,_effect11.id&&!kwArgs.fail);

if(kwArgs.silent){

}else if(_effect11.id){
switch(_effect11.id){
case'trace':
this.activateAbility(_poke25,"Trace");
this.scene.wait(500);
this.activateAbility(_poke25,ability.name,true);
_ofpoke7.rememberAbility(ability.name);
break;
case'powerofalchemy':
case'receiver':
this.activateAbility(_poke25,_effect11.name);
this.scene.wait(500);
this.activateAbility(_poke25,ability.name,true);
_ofpoke7.rememberAbility(ability.name);
break;
case'roleplay':
this.activateAbility(_poke25,ability.name,true);
_ofpoke7.rememberAbility(ability.name);
break;
case'desolateland':
case'primordialsea':
case'deltastream':
if(kwArgs.fail){
this.activateAbility(_poke25,ability.name);
}
break;
default:
this.activateAbility(_poke25,ability.name);
break;}

}else{
this.activateAbility(_poke25,ability.name);
}
this.log(args,kwArgs);
break;
}
case'-endability':{


var _poke26=this.getPokemon(args[1]);
var _ability=Dex.getAbility(args[2]);
_poke26.ability='(suppressed)';

if(_ability.id){
if(!_poke26.baseAbility)_poke26.baseAbility=_ability.name;
}
this.log(args,kwArgs);
break;
}
case'detailschange':{
var _poke27=this.getPokemon(args[1]);
_poke27.removeVolatile('formechange');
_poke27.removeVolatile('typeadd');
_poke27.removeVolatile('typechange');

var newSpecies=args[2];
var commaIndex=newSpecies.indexOf(',');
if(commaIndex!==-1){
var level=newSpecies.substr(commaIndex+1).trim();
if(level.charAt(0)==='L'){
_poke27.level=parseInt(level.substr(1),10);
}
newSpecies=args[2].substr(0,commaIndex);
}
var template=this.dex.getTemplate(newSpecies);

_poke27.species=newSpecies;
_poke27.ability=_poke27.baseAbility=template.abilities?template.abilities['0']:'';

_poke27.details=args[2];
_poke27.searchid=args[1].substr(0,2)+args[1].substr(3)+'|'+args[2];

this.scene.animTransform(_poke27,true,true);
this.log(args,kwArgs);
break;
}
case'-transform':{
var _poke28=this.getPokemon(args[1]);
var tpoke=this.getPokemon(args[2]);
var _effect12=Dex.getEffect(kwArgs.from);
if(_poke28===tpoke)throw new Error("Transforming into self");

if(!kwArgs.silent){
this.activateAbility(_poke28,_effect12);
}

_poke28.boosts=Object.assign({},tpoke.boosts);
_poke28.copyTypesFrom(tpoke);
_poke28.ability=tpoke.ability;
var species=tpoke.volatiles.formechange?tpoke.volatiles.formechange[1]:tpoke.species;
var pokemon=tpoke;
var shiny=tpoke.shiny;
var gender=tpoke.gender;
_poke28.addVolatile('transform',pokemon,shiny,gender);
_poke28.addVolatile('formechange',species);for(var _i19=0,_tpoke$moveTrack=
tpoke.moveTrack;_i19<_tpoke$moveTrack.length;_i19++){var _trackedMove=_tpoke$moveTrack[_i19];
_poke28.rememberMove(_trackedMove[0],0);
}
this.scene.animTransform(_poke28);
this.scene.resultAnim(_poke28,'Transformed','good');
this.log(['-transform',args[1],args[2],tpoke.species],kwArgs);
break;
}
case'-formechange':{
var _poke29=this.getPokemon(args[1]);
var _template=Dex.getTemplate(args[2]);
var _fromeffect2=Dex.getEffect(kwArgs.from);
var isCustomAnim=false;
_poke29.removeVolatile('typeadd');
_poke29.removeVolatile('typechange');
if(this.gen>=7)_poke29.removeVolatile('autotomize');

if(!kwArgs.silent){
this.activateAbility(_poke29,_fromeffect2);
}
_poke29.addVolatile('formechange',_template.species);
this.scene.animTransform(_poke29,isCustomAnim);
this.log(args,kwArgs);
break;
}
case'-mega':{
var _poke30=this.getPokemon(args[1]);
var _item3=Dex.getItem(args[3]);
if(args[3]){
_poke30.item=_item3.name;
}
this.log(args,kwArgs);
break;
}
case'-primal':case'-burst':{
this.log(args,kwArgs);
break;
}
case'-start':{
var _poke31=this.getPokemon(args[1]);
var _effect13=Dex.getEffect(args[2]);
var _ofpoke8=this.getPokemon(kwArgs.of);
var _fromeffect3=Dex.getEffect(kwArgs.from);

this.activateAbility(_poke31,_effect13);
this.activateAbility(_ofpoke8||_poke31,_fromeffect3);
switch(_effect13.id){
case'typechange':
if(_ofpoke8&&_fromeffect3.id==='reflecttype'){
_poke31.copyTypesFrom(_ofpoke8);
}else{
var types=Dex.sanitizeName(args[3]||'???');
_poke31.removeVolatile('typeadd');
_poke31.addVolatile('typechange',types);
if(!kwArgs.silent){
this.scene.typeAnim(_poke31,types);
}
}
this.scene.updateStatbar(_poke31);
break;
case'typeadd':
var type=Dex.sanitizeName(args[3]);
_poke31.addVolatile('typeadd',type);
if(kwArgs.silent)break;
this.scene.typeAnim(_poke31,type);
break;
case'powertrick':
this.scene.resultAnim(_poke31,'Power Trick','neutral');
break;
case'foresight':
case'miracleeye':
this.scene.resultAnim(_poke31,'Identified','bad');
break;
case'telekinesis':
this.scene.resultAnim(_poke31,'Telekinesis','neutral');
break;
case'confusion':
if(!kwArgs.already){
this.scene.runStatusAnim('confused',[_poke31]);
this.scene.resultAnim(_poke31,'Confused','bad');
}
break;
case'leechseed':
this.scene.updateStatbar(_poke31);
break;
case'healblock':
this.scene.resultAnim(_poke31,'Heal Block','bad');
break;
case'yawn':
this.scene.resultAnim(_poke31,'Drowsy','slp');
break;
case'taunt':
this.scene.resultAnim(_poke31,'Taunted','bad');
break;
case'imprison':
this.scene.resultAnim(_poke31,'Imprisoning','good');
break;
case'disable':
this.scene.resultAnim(_poke31,'Disabled','bad');
break;
case'embargo':
this.scene.resultAnim(_poke31,'Embargo','bad');
break;
case'torment':
this.scene.resultAnim(_poke31,'Tormented','bad');
break;
case'ingrain':
this.scene.resultAnim(_poke31,'Ingrained','good');
break;
case'aquaring':
this.scene.resultAnim(_poke31,'Aqua Ring','good');
break;
case'stockpile1':
this.scene.resultAnim(_poke31,'Stockpile','good');
break;
case'stockpile2':
_poke31.removeVolatile('stockpile1');
this.scene.resultAnim(_poke31,'Stockpile&times;2','good');
break;
case'stockpile3':
_poke31.removeVolatile('stockpile2');
this.scene.resultAnim(_poke31,'Stockpile&times;3','good');
break;
case'perish0':
_poke31.removeVolatile('perish1');
break;
case'perish1':
_poke31.removeVolatile('perish2');
this.scene.resultAnim(_poke31,'Perish next turn','bad');
break;
case'perish2':
_poke31.removeVolatile('perish3');
this.scene.resultAnim(_poke31,'Perish in 2','bad');
break;
case'perish3':
if(!kwArgs.silent)this.scene.resultAnim(_poke31,'Perish in 3','bad');
break;
case'encore':
this.scene.resultAnim(_poke31,'Encored','bad');
break;
case'bide':
this.scene.resultAnim(_poke31,'Bide','good');
break;
case'attract':
this.scene.resultAnim(_poke31,'Attracted','bad');
break;
case'autotomize':
this.scene.resultAnim(_poke31,'Lightened','good');
if(_poke31.volatiles.autotomize){
_poke31.volatiles.autotomize[1]++;
}else{
_poke31.addVolatile('autotomize',1);
}
break;
case'focusenergy':
this.scene.resultAnim(_poke31,'+Crit rate','good');
break;
case'curse':
this.scene.resultAnim(_poke31,'Cursed','bad');
break;
case'nightmare':
this.scene.resultAnim(_poke31,'Nightmare','bad');
break;
case'magnetrise':
this.scene.resultAnim(_poke31,'Magnet Rise','good');
break;
case'smackdown':
this.scene.resultAnim(_poke31,'Smacked Down','bad');
_poke31.removeVolatile('magnetrise');
_poke31.removeVolatile('telekinesis');
if(_poke31.lastMove==='fly'||_poke31.lastMove==='bounce')this.scene.animReset(_poke31);
break;
case'substitute':
if(kwArgs.damage){
this.scene.resultAnim(_poke31,'Damage','bad');
}else if(kwArgs.block){
this.scene.resultAnim(_poke31,'Blocked','neutral');
}
break;


case'lightscreen':
this.scene.resultAnim(_poke31,'Light Screen','good');
break;
case'reflect':
this.scene.resultAnim(_poke31,'Reflect','good');
break;}

_poke31.addVolatile(_effect13.id);
this.scene.updateStatbar(_poke31);
this.log(args,kwArgs);
break;
}
case'-end':{
var _poke32=this.getPokemon(args[1]);
var _effect14=Dex.getEffect(args[2]);
var _fromeffect4=Dex.getEffect(kwArgs.from);
_poke32.removeVolatile(_effect14.id);

if(kwArgs.silent){

}else{
switch(_effect14.id){
case'powertrick':
this.scene.resultAnim(_poke32,'Power Trick','neutral');
break;
case'telekinesis':
this.scene.resultAnim(_poke32,'Telekinesis&nbsp;ended','neutral');
break;
case'skydrop':
if(kwArgs.interrupt){
this.scene.anim(_poke32,{time:100});
}
break;
case'confusion':
this.scene.resultAnim(_poke32,'Confusion&nbsp;ended','good');
break;
case'leechseed':
if(_fromeffect4.id==='rapidspin'){
this.scene.resultAnim(_poke32,'De-seeded','good');
}
break;
case'healblock':
this.scene.resultAnim(_poke32,'Heal Block ended','good');
break;
case'attract':
this.scene.resultAnim(_poke32,'Attract&nbsp;ended','good');
break;
case'taunt':
this.scene.resultAnim(_poke32,'Taunt&nbsp;ended','good');
break;
case'disable':
this.scene.resultAnim(_poke32,'Disable&nbsp;ended','good');
break;
case'embargo':
this.scene.resultAnim(_poke32,'Embargo ended','good');
break;
case'torment':
this.scene.resultAnim(_poke32,'Torment&nbsp;ended','good');
break;
case'encore':
this.scene.resultAnim(_poke32,'Encore&nbsp;ended','good');
break;
case'bide':
this.scene.runOtherAnim('bideunleash',[_poke32]);
break;
case'illusion':
this.scene.resultAnim(_poke32,'Illusion ended','bad');
_poke32.rememberAbility('Illusion');
break;
case'slowstart':
this.scene.resultAnim(_poke32,'Slow Start ended','good');
break;
case'perishsong':
_poke32.removeVolatile('perish3');
break;
case'substitute':
this.scene.resultAnim(_poke32,'Faded','bad');
break;
case'stockpile':
_poke32.removeVolatile('stockpile1');
_poke32.removeVolatile('stockpile2');
_poke32.removeVolatile('stockpile3');
break;
default:
if(_effect14.effectType==='Move'){
if(_effect14.name==='Doom Desire'){
this.scene.runOtherAnim('doomdesirehit',[_poke32]);
}
if(_effect14.name==='Future Sight'){
this.scene.runOtherAnim('futuresighthit',[_poke32]);
}
}}

}
this.scene.updateStatbar(_poke32);
this.log(args,kwArgs);
break;
}
case'-singleturn':{
var _poke33=this.getPokemon(args[1]);
var _effect15=Dex.getEffect(args[2]);
_poke33.addTurnstatus(_effect15.id);

if(_effect15.id==='roost'&&!_poke33.getTypeList().includes('Flying')){
break;
}
switch(_effect15.id){
case'roost':
this.scene.resultAnim(_poke33,'Landed','neutral');
break;
case'quickguard':
this.scene.resultAnim(_poke33,'Quick Guard','good');
break;
case'wideguard':
this.scene.resultAnim(_poke33,'Wide Guard','good');
break;
case'craftyshield':
this.scene.resultAnim(_poke33,'Crafty Shield','good');
break;
case'matblock':
this.scene.resultAnim(_poke33,'Mat Block','good');
break;
case'protect':
this.scene.resultAnim(_poke33,'Protected','good');
break;
case'endure':
this.scene.resultAnim(_poke33,'Enduring','good');
break;
case'helpinghand':
this.scene.resultAnim(_poke33,'Helping Hand','good');
break;
case'focuspunch':
this.scene.resultAnim(_poke33,'Focusing','neutral');
_poke33.rememberMove(_effect15.name,0);
break;
case'shelltrap':
this.scene.resultAnim(_poke33,'Trap set','neutral');
_poke33.rememberMove(_effect15.name,0);
break;
case'beakblast':
this.scene.runOtherAnim('bidecharge',[_poke33]);
this.scene.resultAnim(_poke33,'Beak Blast','neutral');
break;}

this.scene.updateStatbar(_poke33);
this.log(args,kwArgs);
break;
}
case'-singlemove':{
var _poke34=this.getPokemon(args[1]);
var _effect16=Dex.getEffect(args[2]);
_poke34.addMovestatus(_effect16.id);

switch(_effect16.id){
case'grudge':
this.scene.resultAnim(_poke34,'Grudge','neutral');
break;
case'destinybond':
this.scene.resultAnim(_poke34,'Destiny Bond','neutral');
break;}

this.log(args,kwArgs);
break;
}
case'-activate':{
var _poke35=this.getPokemon(args[1]);
var _effect17=Dex.getEffect(args[2]);
var _target3=this.getPokemon(args[3]);
this.activateAbility(_poke35,_effect17);
switch(_effect17.id){
case'grudge':
_poke35.rememberMove(kwArgs.move,Infinity);
break;
case'substitute':
if(kwArgs.damage){
this.scene.resultAnim(_poke35,'Damage','bad');
}else if(kwArgs.block){
this.scene.resultAnim(_poke35,'Blocked','neutral');
}
break;
case'attract':
this.scene.runStatusAnim('attracted',[_poke35]);
break;
case'bide':
this.scene.runOtherAnim('bidecharge',[_poke35]);
break;


case'aromatherapy':
this.scene.resultAnim(_poke35,'Team Cured','good');
break;
case'healbell':
this.scene.resultAnim(_poke35,'Team Cured','good');
break;
case'brickbreak':
_target3.side.removeSideCondition('Reflect');
_target3.side.removeSideCondition('LightScreen');
break;
case'hyperspacefury':
case'hyperspacehole':
case'phantomforce':
case'shadowforce':
case'feint':
this.scene.resultAnim(_poke35,'Protection broken','bad');
_poke35.removeTurnstatus('protect');for(var _i20=0,_poke35$side$pokemon=
_poke35.side.pokemon;_i20<_poke35$side$pokemon.length;_i20++){var curTarget=_poke35$side$pokemon[_i20];
curTarget.removeTurnstatus('wideguard');
curTarget.removeTurnstatus('quickguard');
curTarget.removeTurnstatus('craftyshield');
curTarget.removeTurnstatus('matblock');
this.scene.updateStatbar(curTarget);
}
break;
case'spite':
var move=Dex.getMove(kwArgs.move).name;
var pp=Number(kwArgs.number);
if(isNaN(pp))pp=4;
_poke35.rememberMove(move,pp);
break;
case'gravity':
_poke35.removeVolatile('magnetrise');
_poke35.removeVolatile('telekinesis');
this.scene.anim(_poke35,{time:100});
break;
case'skillswap':
if(this.gen<=4)break;
var pokeability=Dex.sanitizeName(kwArgs.ability)||_target3.ability;
var targetability=Dex.sanitizeName(kwArgs.ability2)||_poke35.ability;
if(pokeability){
_poke35.ability=pokeability;
if(!_target3.baseAbility)_target3.baseAbility=pokeability;
}
if(targetability){
_target3.ability=targetability;
if(!_poke35.baseAbility)_poke35.baseAbility=targetability;
}
if(_poke35.side!==_target3.side){
this.activateAbility(_poke35,pokeability,true);
this.activateAbility(_target3,targetability,true);
}
break;


case'forewarn':
if(_target3){
_target3.rememberMove(kwArgs.move,0);
}else{
var foeActive=[];for(var _i21=0,_poke35$side$foe$acti=
_poke35.side.foe.active;_i21<_poke35$side$foe$acti.length;_i21++){var maybeTarget=_poke35$side$foe$acti[_i21];
if(maybeTarget&&!maybeTarget.fainted)foeActive.push(maybeTarget);
}
if(foeActive.length===1){
foeActive[0].rememberMove(kwArgs.move,0);
}
}
break;
case'mummy':
if(!kwArgs.ability)break;
var _ability2=Dex.getAbility(kwArgs.ability);
this.activateAbility(_target3,_ability2.name);
this.activateAbility(_poke35,"Mummy");
this.scene.wait(700);
this.activateAbility(_target3,"Mummy",true);
break;


case'leppaberry':
case'mysteryberry':
_poke35.rememberMove(kwArgs.move,_effect17.id==='leppaberry'?-10:-5);
break;
case'focusband':
_poke35.item='Focus Band';
break;
default:
if(kwArgs.broken){
this.scene.resultAnim(_poke35,'Protection broken','bad');
}}

this.log(args,kwArgs);
break;
}
case'-sidestart':{
var _side5=this.getSide(args[1]);
var _effect18=Dex.getEffect(args[2]);
_side5.addSideCondition(_effect18);

switch(_effect18.id){
case'tailwind':
case'auroraveil':
case'reflect':
case'lightscreen':
case'safeguard':
case'mist':
this.scene.updateWeather();
break;}

this.log(args,kwArgs);
break;
}
case'-sideend':{
var _side6=this.getSide(args[1]);
var _effect19=Dex.getEffect(args[2]);


_side6.removeSideCondition(_effect19.name);
this.log(args,kwArgs);
break;
}
case'-weather':{
var _effect20=Dex.getEffect(args[1]);
var _poke36=this.getPokemon(kwArgs.of)||undefined;
var _ability3=Dex.getEffect(kwArgs.from);
if(!_effect20.id||_effect20.id==='none'){
kwArgs.from=this.weather;
}
this.changeWeather(_effect20.name,_poke36,!!kwArgs.upkeep,_ability3);
this.log(args,kwArgs);
break;
}
case'-fieldstart':{
var _effect21=Dex.getEffect(args[1]);
var _poke37=this.getPokemon(kwArgs.of);
var _fromeffect5=Dex.getEffect(kwArgs.from);
this.activateAbility(_poke37,_fromeffect5);
var maxTimeLeft=0;
if(['electricterrain','grassyterrain','mistyterrain','psychicterrain'].includes(_effect21.id)){
for(var i=this.pseudoWeather.length-1;i>=0;i--){
var pwName=this.pseudoWeather[i][0];
if(['Electric Terrain','Grassy Terrain','Misty Terrain','Psychic Terrain'].includes(pwName)){
this.pseudoWeather.splice(i,1);
continue;
}
}
if(this.gen>6)maxTimeLeft=8;
}
this.addPseudoWeather(_effect21.name,5,maxTimeLeft);

switch(_effect21.id){
case'gravity':
if(!this.fastForward){for(var _i22=0,_this$sides5=
this.sides;_i22<_this$sides5.length;_i22++){var _side7=_this$sides5[_i22];for(var _i23=0,_side7$active=
_side7.active;_i23<_side7$active.length;_i23++){var _active=_side7$active[_i23];
if(_active)this.scene.runOtherAnim('gravity',[_active]);
}
}
}
break;}

this.log(args,kwArgs);
break;
}
case'-fieldend':{
var _effect22=Dex.getEffect(args[1]);

this.removePseudoWeather(_effect22.name);
this.log(args,kwArgs);
break;
}
case'-fieldactivate':{
var _effect23=Dex.getEffect(args[1]);
switch(_effect23.id){
case'perishsong':
this.scene.updateStatbars();
break;}

this.log(args,kwArgs);
break;
}
case'-anim':{
var _poke38=this.getPokemon(args[1]);
var _move=Dex.getMove(args[2]);
if(this.checkActive(_poke38))return;
var _poke39=this.getPokemon(args[3]);
this.scene.beforeMove(_poke38);
this.animateMove(_poke38,_move,_poke39,kwArgs);
this.scene.afterMove(_poke38);
break;
}
case'-hint':case'-message':{
this.log(args,kwArgs);
break;
}
default:{
if(this.errorCallback)this.errorCallback(this);
break;
}}
};_proto3.































parseDetails=function parseDetails(name,pokemonid){var details=arguments.length>2&&arguments[2]!==undefined?arguments[2]:"";var output=arguments.length>3&&arguments[3]!==undefined?arguments[3]:{};
output.details=details;
output.name=name;
output.species=name;
output.level=100;
output.shiny=false;
output.gender='';
output.ident=name?pokemonid:'';
output.searchid=name?pokemonid+'|'+details:'';
var splitDetails=details.split(', ');
if(splitDetails[splitDetails.length-1]==='shiny'){
output.shiny=true;
splitDetails.pop();
}
if(splitDetails[splitDetails.length-1]==='M'||splitDetails[splitDetails.length-1]==='F'){
output.gender=splitDetails[splitDetails.length-1];
splitDetails.pop();
}
if(splitDetails[1]){
output.level=parseInt(splitDetails[1].substr(1),10)||100;
}
if(splitDetails[0]){
output.species=splitDetails[0];
}
return output;
};_proto3.
parseHealth=function parseHealth(hpstring){var output=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var _hpstring$split=
hpstring.split(' '),hp=_hpstring$split[0],status=_hpstring$split[1];


output.hpcolor='';
if(hp==='0'||hp==='0.0'){
if(!output.maxhp)output.maxhp=100;
output.hp=0;
}else if(hp.indexOf('/')>0){var _hp$split=
hp.split('/'),curhp=_hp$split[0],maxhp=_hp$split[1];
if(isNaN(parseFloat(curhp))||isNaN(parseFloat(maxhp))){
return null;
}
output.hp=parseFloat(curhp);
output.maxhp=parseFloat(maxhp);
if(output.hp>output.maxhp)output.hp=output.maxhp;
var colorchar=maxhp.slice(-1);
if(colorchar==='y'||colorchar==='g'){
output.hpcolor=colorchar;
}
}else if(!isNaN(parseFloat(hp))){
if(!output.maxhp)output.maxhp=100;
output.hp=output.maxhp*parseFloat(hp)/100;
}


if(!status){
output.status='';
}else if(status==='par'||status==='brn'||status==='slp'||status==='frz'||status==='tox'){
output.status=status;
}else if(status==='psn'&&output.status!=='tox'){
output.status=status;
}else if(status==='fnt'){
output.hp=0;
output.fainted=true;
}
return output;
};_proto3.
parsePokemonId=function parsePokemonId(pokemonid){
var name=pokemonid;

var siden=-1;
var slot=-1;
var slotChart={a:0,b:1,c:2,d:3,e:4,f:5};
if(name.substr(0,4)==='p2: '||name==='p2'){
siden=this.p2.n;
name=name.substr(4);
}else if(name.substr(0,4)==='p1: '||name==='p1'){
siden=this.p1.n;
name=name.substr(4);
}else if(name.substr(0,2)==='p2'&&name.substr(3,2)===': '){
slot=slotChart[name.substr(2,1)];
siden=this.p2.n;
name=name.substr(5);
pokemonid='p2: '+name;
}else if(name.substr(0,2)==='p1'&&name.substr(3,2)===': '){
slot=slotChart[name.substr(2,1)];
siden=this.p1.n;
name=name.substr(5);
pokemonid='p1: '+name;
}
return{name:name,siden:siden,slot:slot,pokemonid:pokemonid};
};_proto3.
getPokemon=function getPokemon(pokemonid,details){
var isNew=false;
var isSwitch=false;
var isInactive=false;
var createIfNotFound=false;

if(pokemonid===undefined||pokemonid==='??')return null;
if(pokemonid.substr(0,5)==='new: '){
pokemonid=pokemonid.substr(5);
isNew=true;
createIfNotFound=true;
}
if(pokemonid.substr(0,10)==='switchin: '){
pokemonid=pokemonid.substr(10);
isSwitch=true;
createIfNotFound=true;
}
var parseIdResult=this.parsePokemonId(pokemonid);var
name=parseIdResult.name,siden=parseIdResult.siden,slot=parseIdResult.slot;
pokemonid=parseIdResult.pokemonid;

if(!details){
if(siden<0)return null;
if(this.sides[siden].active[slot])return this.sides[siden].active[slot];
if(slot>=0)isInactive=true;
}

var searchid='';
if(details)searchid=pokemonid+'|'+details;


if(siden!==this.p2.n&&!isNew){
var active=this.p1.active[slot];
if(active&&active.searchid===searchid&&!isSwitch){
active.slot=slot;
return active;
}
for(var i=0;i<this.p1.pokemon.length;i++){
var _pokemon=this.p1.pokemon[i];
if(_pokemon.fainted&&(isNew||isSwitch))continue;
if(isSwitch||isInactive){
if(this.p1.active.indexOf(_pokemon)>=0)continue;
}
if(isSwitch&&_pokemon===this.p1.lastPokemon&&!this.p1.active[slot])continue;
if(searchid&&_pokemon.searchid===searchid||
!searchid&&_pokemon.ident===pokemonid){
if(slot>=0)_pokemon.slot=slot;
return _pokemon;
}
if(!_pokemon.searchid&&_pokemon.checkDetails(details)){
_pokemon=this.p1.newPokemon(this.parseDetails(name,pokemonid,details,{item:_pokemon.item}),i);
if(slot>=0)_pokemon.slot=slot;
return _pokemon;
}
}
}


if(siden!==this.p1.n&&!isNew){
var _active2=this.p2.active[slot];
if(_active2&&_active2.searchid===searchid&&!isSwitch){
if(slot>=0)_active2.slot=slot;
return _active2;
}
for(var _i24=0;_i24<this.p2.pokemon.length;_i24++){
var _pokemon2=this.p2.pokemon[_i24];
if(_pokemon2.fainted&&(isNew||isSwitch))continue;
if(isSwitch||isInactive){
if(this.p2.active.indexOf(_pokemon2)>=0)continue;
}
if(isSwitch&&_pokemon2===this.p2.lastPokemon&&!this.p2.active[slot])continue;
if(searchid&&_pokemon2.searchid===searchid||
!searchid&&_pokemon2.ident===pokemonid){
if(slot>=0)_pokemon2.slot=slot;
return _pokemon2;
}
if(!_pokemon2.searchid&&_pokemon2.checkDetails(details)){
_pokemon2=this.p2.newPokemon(this.parseDetails(name,pokemonid,details,{item:_pokemon2.item}),_i24);
if(slot>=0)_pokemon2.slot=slot;
return _pokemon2;
}
}
}

if(!details||!createIfNotFound)return null;



if(siden<0)throw new Error("Invalid pokemonid passed to getPokemon");

var species=name;
var gender='';
var level=100;
var shiny=false;
if(details){
var splitDetails=details.split(', ');
if(splitDetails[splitDetails.length-1]==='shiny'){
shiny=true;
splitDetails.pop();
}
if(splitDetails[splitDetails.length-1]==='M'||splitDetails[splitDetails.length-1]==='F'){
gender=splitDetails[splitDetails.length-1];
splitDetails.pop();
}
if(splitDetails[1]){
level=parseInt(splitDetails[1].substr(1),10)||100;
}
if(splitDetails[0]){
species=splitDetails[0];
}
}
if(slot<0)slot=0;
var pokemon=this.sides[siden].newPokemon({
species:species,
details:details,
name:name,
ident:name?pokemonid:'',
searchid:name?pokemonid+'|'+details:'',
level:level,
gender:gender,
shiny:shiny,
slot:slot},
isNew?-2:-1);
return pokemon;
};_proto3.
getSide=function getSide(sidename){
if(sidename==='p1'||sidename.substr(0,3)==='p1:')return this.p1;
if(sidename==='p2'||sidename.substr(0,3)==='p2:')return this.p2;
if(this.mySide.id===sidename)return this.mySide;
if(this.yourSide.id===sidename)return this.yourSide;
if(this.mySide.name===sidename)return this.mySide;
if(this.yourSide.name===sidename)return this.yourSide;
return{
name:sidename,
id:sidename.replace(/ /g,'')};

};_proto3.

add=function add(command,fastForward){
if(command)this.activityQueue.push(command);

if(this.playbackState===Playback.Uninitialized){
this.playbackState=Playback.Ready;
}else if(this.playbackState===Playback.Finished){
this.playbackState=Playback.Playing;
this.paused=false;
this.scene.soundStart();
if(fastForward){
this.fastForwardTo(-1);
}else{
this.nextActivity();
}
}
};_proto3.








instantAdd=function instantAdd(command){
this.run(command,true);
this.preemptActivityQueue.push(command);
this.add(command);
};_proto3.
runMajor=function runMajor(args,kwArgs,preempt){
switch(args[0]){
case'start':{
this.scene.teamPreviewEnd();
this.mySide.active[0]=null;
this.yourSide.active[0]=null;
this.start();
break;
}
case'upkeep':{
this.usesUpkeep=true;
this.updatePseudoWeatherLeft();
this.updateToxicTurns();
break;
}
case'turn':{
this.setTurn(args[1]);
this.log(args);
break;
}
case'tier':{
this.tier=args[1];
if(this.tier.slice(-13)==='Random Battle'){
this.speciesClause=true;
}
this.log(args);
break;
}
case'gametype':{
this.gameType=args[1];
switch(args[1]){
default:
this.mySide.active=[null];
this.yourSide.active=[null];
break;
case'doubles':
this.mySide.active=[null,null];
this.yourSide.active=[null,null];
break;
case'triples':
case'rotation':
this.mySide.active=[null,null,null];
this.yourSide.active=[null,null,null];
break;}

this.scene.updateGen();
break;
}
case'rule':{
var ruleName=args[1].split(': ')[0];
if(ruleName==='Species Clause')this.speciesClause=true;
this.log(args);
break;
}
case'rated':{
this.rated=args[1]||true;
this.scene.updateGen();
this.log(args);
break;
}
case'inactive':{
if(!this.kickingInactive)this.kickingInactive=true;
if(args[1].slice(0,11)==="Time left: "){var _args$1$split=
args[1].split(' | '),time=_args$1$split[0],totalTime=_args$1$split[1],graceTime=_args$1$split[2];
this.kickingInactive=parseInt(time.slice(11),10)||true;
this.totalTimeLeft=parseInt(totalTime,10);
this.graceTimeLeft=parseInt(graceTime||'',10)||0;
if(this.totalTimeLeft===this.kickingInactive)this.totalTimeLeft=0;
return;
}else if(args[1].slice(0,9)==="You have "){



this.kickingInactive=parseInt(args[1].slice(9),10)||true;
return;
}else if(args[1].slice(-14)===' seconds left.'){
var hasIndex=args[1].indexOf(' has ');
var userid=window.app&&app.user&&app.user.get('userid');
if(toID(args[1].slice(0,hasIndex))===userid){
this.kickingInactive=parseInt(args[1].slice(hasIndex+5),10)||true;
}
}
this.log(args,undefined,preempt);
break;
}
case'inactiveoff':{
this.kickingInactive=false;
this.log(args,undefined,preempt);
break;
}
case'join':case'j':{
if(this.roomid){
var room=app.rooms[this.roomid];
var user=BattleTextParser.parseNameParts(args[1]);
var _userid=toUserid(user.name);
if(/^[a-z0-9]/i.test(user.name))user.name=' '+user.name;
if(!room.users[_userid])room.userCount.users++;
room.users[_userid]=user;
room.userList.add(_userid);
room.userList.updateUserCount();
room.userList.updateNoUsersOnline();
}
if(!this.ignoreSpects){
this.log(args,undefined,preempt);
}
break;
}
case'leave':case'l':{
if(this.roomid){
var _room=app.rooms[this.roomid];
var _user=args[1];
var _userid2=toUserid(_user);
if(_room.users[_userid2])_room.userCount.users--;
delete _room.users[_userid2];
_room.userList.remove(_userid2);
_room.userList.updateUserCount();
_room.userList.updateNoUsersOnline();
}
if(!this.ignoreSpects){
this.log(args,undefined,preempt);
}
break;
}
case'name':case'n':{
if(this.roomid){
var _room2=app.rooms[this.roomid];
var _user2=BattleTextParser.parseNameParts(args[1]);
var oldid=args[2];
if(toUserid(oldid)===app.user.get('userid')){
app.user.set({
away:_user2.away,
status:_user2.status});

}
var _userid3=toUserid(_user2.name);
_room2.users[_userid3]=_user2;
_room2.userList.remove(oldid);
_room2.userList.add(_userid3);
}
if(!this.ignoreSpects){
this.log(args,undefined,preempt);
}
break;
}
case'player':{
var _side8=this.getSide(args[1]);
_side8.setName(args[2]);
if(args[3])_side8.setAvatar(args[3]);
this.scene.updateSidebar(_side8);
if(this.joinButtons)this.scene.hideJoinButtons();
this.log(args);
break;
}
case'teamsize':{
var _side9=this.getSide(args[1]);
_side9.totalPokemon=parseInt(args[2],10);
this.scene.updateSidebar(_side9);
break;
}
case'win':case'tie':{
this.winner(args[0]==='tie'?undefined:args[1]);
break;
}
case'prematureend':{
this.prematureEnd();
break;
}
case'clearpoke':{
this.p1.clearPokemon();
this.p2.clearPokemon();
break;
}
case'poke':{
var pokemon=this.getPokemon('new: '+args[1],args[2]);
if(args[3]==='item'){
pokemon.item='(exists)';
}
break;
}
case'teampreview':{
this.teamPreviewCount=parseInt(args[1],10);
this.scene.teamPreview();
break;
}
case'switch':case'drag':case'replace':{
this.endLastTurn();
var poke=this.getPokemon('switchin: '+args[1],args[2]);
var slot=poke.slot;
poke.healthParse(args[3]);
poke.removeVolatile('itemremoved');
if(args[0]==='switch'){
if(poke.side.active[slot]){
poke.side.switchOut(poke.side.active[slot]);
}
poke.side.switchIn(poke);
}else if(args[0]==='replace'){
poke.side.replace(poke);
}else{
poke.side.dragIn(poke);
}
this.log(args,kwArgs);
break;
}
case'faint':{
var _poke40=this.getPokemon(args[1]);
_poke40.side.faint(_poke40);
this.log(args,kwArgs);
break;
}
case'swap':{
if(isNaN(Number(args[2]))){
var _poke41=this.getPokemon(args[1]);
_poke41.side.swapWith(_poke41,this.getPokemon(args[2]),kwArgs);
}else{
var _poke42=this.getPokemon(args[1]);
var targetIndex=parseInt(args[2],10);
if(kwArgs.from){
var target=_poke42.side.active[targetIndex];
if(target)args[2]=target.ident;
}
_poke42.side.swapTo(_poke42,targetIndex,kwArgs);
}
this.log(args,kwArgs);
break;
}
case'move':{
this.endLastTurn();
this.resetTurnsSinceMoved();
var _poke43=this.getPokemon(args[1]);
var move=Dex.getMove(args[2]);
if(this.checkActive(_poke43))return;
var poke2=this.getPokemon(args[3]);
this.scene.beforeMove(_poke43);
this.useMove(_poke43,move,poke2,kwArgs);
this.animateMove(_poke43,move,poke2,kwArgs);
this.log(args,kwArgs);
this.scene.afterMove(_poke43);
break;
}
case'cant':{
this.endLastTurn();
this.resetTurnsSinceMoved();
var _poke44=this.getPokemon(args[1]);
var effect=Dex.getEffect(args[2]);
var _move2=Dex.getMove(args[3]);
this.cantUseMove(_poke44,effect,_move2,kwArgs);
this.log(args,kwArgs);
break;
}
case'gen':{
this.gen=parseInt(args[1],10);
this.dex=Dex.forGen(this.gen);
this.scene.updateGen();
this.log(args);
break;
}
case'callback':{
if(this.customCallback)this.customCallback(this,args[1],args.slice(1),kwArgs);
break;
}
case'fieldhtml':{
this.playbackState=Playback.Seeking;
this.scene.setFrameHTML(BattleLog.sanitizeHTML(args[1]));
break;
}
case'controlshtml':{
this.scene.setControlsHTML(BattleLog.sanitizeHTML(args[1]));
break;
}
default:{
this.log(args,kwArgs,preempt);
break;
}}
};_proto3.

run=function run(str,preempt){
if(!preempt&&this.preemptActivityQueue.length&&str===this.preemptActivityQueue[0]){
this.preemptActivityQueue.shift();
this.scene.preemptCatchup();
return;
}
if(!str)return;var _BattleTextParser$par=
BattleTextParser.parseLine(str),args=_BattleTextParser$par.args,kwArgs=_BattleTextParser$par.kwArgs;

if(this.scene.maybeCloseMessagebar(args,kwArgs)){
this.activityStep--;
this.activeMoveIsSpread=null;
return;
}


var nextArgs=[''];
var nextKwargs={};
var nextLine=this.activityQueue[this.activityStep+1]||'';
if(nextLine&&nextLine.substr(0,2)==='|-'){var _BattleTextParser$par2=
BattleTextParser.parseLine(nextLine);nextArgs=_BattleTextParser$par2.args;nextKwargs=_BattleTextParser$par2.kwArgs;
}

if(this.debug){
if(args[0].charAt(0)==='-'||args[0]==='detailschange'){
this.runMinor(args,kwArgs,nextArgs,nextKwargs);
}else{
this.runMajor(args,kwArgs,preempt);
}
}else{
try{
if(args[0].charAt(0)==='-'||args[0]==='detailschange'){
this.runMinor(args,kwArgs,nextArgs,nextKwargs);
}else{
this.runMajor(args,kwArgs,preempt);
}
}catch(err){
this.log(['majorerror','Error parsing: '+str+' ('+err+')']);
if(err.stack){
var stack=(''+err.stack).split('\n');for(var _i25=0;_i25<
stack.length;_i25++){var line=stack[_i25];
if(/\brun\b/.test(line)){
break;
}
this.log(['error',line]);
}
}
if(this.errorCallback)this.errorCallback(this);
}
}

if(this.fastForward>0&&this.fastForward<1){
if(nextLine.substr(0,6)==='|start'){
this.fastForwardOff();
if(this.endCallback)this.endCallback(this);
}
}
};_proto3.
checkActive=function checkActive(poke){
if(!poke.side.active[poke.slot]){

poke.side.replace(poke);
}
return false;
};_proto3.

pause=function pause(){
this.paused=true;
this.playbackState=Playback.Paused;
this.scene.pause();
};_proto3.
play=function play(){
this.paused=false;
this.playbackState=Playback.Playing;
this.scene.resume();
this.nextActivity();
};_proto3.
skipTurn=function skipTurn(){
this.fastForwardTo(this.turn+1);
};_proto3.
fastForwardTo=function fastForwardTo(time){
if(this.fastForward)return;
if(time===0||time==='0'){
time=0.5;
}else{
time=Math.floor(Number(time));
}
if(isNaN(time))return;
if(this.ended&&time>=this.turn+1)return;

if(time<=this.turn&&time!==-1){
var paused=this.paused;
this.reset(true);
if(paused)this.pause();else
this.paused=false;
this.fastForwardWillScroll=true;
}
this.scene.animationOff();
this.playbackState=Playback.Seeking;
this.fastForward=time;
this.nextActivity();
};_proto3.
fastForwardOff=function fastForwardOff(){
this.fastForward=0;
this.scene.animationOn();
this.playbackState=this.paused?Playback.Paused:Playback.Playing;
};_proto3.
nextActivity=function nextActivity(){var _this=this;
this.scene.startAnimations();
var animations;
while(!animations){
this.waitForAnimations=true;
if(this.activityStep>=this.activityQueue.length){
this.fastForwardOff();
if(this.ended){
this.paused=true;
this.scene.soundStop();
}
this.playbackState=Playback.Finished;
if(this.endCallback)this.endCallback(this);
return;
}
if(this.paused&&!this.fastForward)return;
this.run(this.activityQueue[this.activityStep]);
this.activityStep++;
if(this.waitForAnimations===true){
animations=this.scene.finishAnimations();
}else if(this.waitForAnimations==='simult'){
this.scene.timeOffset=0;
}
}

if(this.playbackState===Playback.Paused)return;

var interruptionCount=this.scene.interruptionCount;
animations.done(function(){
if(interruptionCount===_this.scene.interruptionCount){
_this.nextActivity();
}
});
};_proto3.

newBattle=function newBattle(){
this.reset();
this.activityQueue=[];
};_proto3.
setQueue=function setQueue(queue){
this.reset();
this.activityQueue=queue;














this.playbackState=Playback.Ready;
};_proto3.

setMute=function setMute(mute){
BattleSound.setMute(mute);
};return Battle;}();


if(typeof require==='function'){

global.Battle=Battle;
}var engine = (function() {
  const battles = {};

  return {
    start: function (key) {
      battles[key] = new Battle();
      battles[key].play();
    },

    transition: function (key, changes) {
      changes = changes.toString();
      const battle = battles[key];
      if (!battle) {
        throw new Error(`COULD NOT FIND ${key}`);
      }
      battle.add(changes);
      battle.fastForwardTo(-1);
    },

    fetch: function (key) {
      return JSON.parse(JSON.stringify(JSON.decycle(battles[key])));
    },

    stop: function (key) {
      battles[key].destroy();
      delete battles[key];
    },
  };
})();

this.engine = engine;